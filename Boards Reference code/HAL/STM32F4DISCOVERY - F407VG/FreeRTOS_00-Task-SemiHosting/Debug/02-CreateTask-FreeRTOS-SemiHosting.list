
02-CreateTask-FreeRTOS-SemiHosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051e4  080051e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013614  20000080  0800526c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013694  0800526c  00023694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd49  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000214c  00000000  00000000  0002fdf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  00031f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a28  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217ba  00000000  00000000  00033490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccce  00000000  00000000  00054c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9c46  00000000  00000000  00061918  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  0012b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005098 	.word	0x08005098

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08005098 	.word	0x08005098

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af02      	add	r7, sp, #8

	/* Initialize Semi Hosting */
	initialise_monitor_handles();
 80005a6:	f004 fcf7 	bl	8004f98 <initialise_monitor_handles>
	printf("FreeRTOS Init");
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x48>)
 80005ac:	f003 fb5a 	bl	8003c64 <iprintf>

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b0:	f000 f8ea 	bl	8000788 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005b4:	f000 f826 	bl	8000604 <SystemClock_Config>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(vtask1_Handler,"task1",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler1);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <main+0x4c>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	2282      	movs	r2, #130	; 0x82
 80005c4:	490a      	ldr	r1, [pc, #40]	; (80005f0 <main+0x50>)
 80005c6:	480b      	ldr	r0, [pc, #44]	; (80005f4 <main+0x54>)
 80005c8:	f001 fd8b 	bl	80020e2 <xTaskCreate>
	//tarea 2
	xTaskCreate(vtask2_Handler,"task2",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler2);
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x58>)
 80005ce:	9301      	str	r3, [sp, #4]
 80005d0:	2302      	movs	r3, #2
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	2282      	movs	r2, #130	; 0x82
 80005d8:	4908      	ldr	r1, [pc, #32]	; (80005fc <main+0x5c>)
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x60>)
 80005dc:	f001 fd81 	bl	80020e2 <xTaskCreate>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 80005e0:	f001 feb8 	bl	8002354 <vTaskStartScheduler>

	while (1);
 80005e4:	e7fe      	b.n	80005e4 <main+0x44>
 80005e6:	bf00      	nop
 80005e8:	080050b0 	.word	0x080050b0
 80005ec:	2000009c 	.word	0x2000009c
 80005f0:	080050c0 	.word	0x080050c0
 80005f4:	080006c5 	.word	0x080006c5
 80005f8:	200000a0 	.word	0x200000a0
 80005fc:	080050c8 	.word	0x080050c8
 8000600:	080006e5 	.word	0x080006e5

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	; 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fb1d 	bl	8003c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f9ea 	bl	8000a38 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800066a:	f000 f84b 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fc43 	bl	8000f18 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000698:	f000 f834 	bl	8000704 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006a0:	23c0      	movs	r3, #192	; 0xc0
 80006a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fdf2 	bl	8001294 <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006b6:	f000 f825 	bl	8000704 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3758      	adds	r7, #88	; 0x58
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <vtask1_Handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void vtask1_Handler(void *params){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	printf("InitSetupTask1\n");
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <vtask1_Handler+0x18>)
 80006ce:	f003 fb3d 	bl	8003d4c <puts>
	while(1){
		printf("Task1\n");
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <vtask1_Handler+0x1c>)
 80006d4:	f003 fb3a 	bl	8003d4c <puts>
 80006d8:	e7fb      	b.n	80006d2 <vtask1_Handler+0xe>
 80006da:	bf00      	nop
 80006dc:	080050d0 	.word	0x080050d0
 80006e0:	080050e0 	.word	0x080050e0

080006e4 <vtask2_Handler>:

/**
  * @brief  Function of task2.
  * @retval None
  */
void vtask2_Handler(void *params){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	printf("InitSetupTask2\n");
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <vtask2_Handler+0x18>)
 80006ee:	f003 fb2d 	bl	8003d4c <puts>
	while(1){
		printf("Task2\n");
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <vtask2_Handler+0x1c>)
 80006f4:	f003 fb2a 	bl	8003d4c <puts>
 80006f8:	e7fb      	b.n	80006f2 <vtask2_Handler+0xe>
 80006fa:	bf00      	nop
 80006fc:	080050e8 	.word	0x080050e8
 8000700:	080050f8 	.word	0x080050f8

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	210f      	movs	r1, #15
 800071a:	f06f 0001 	mvn.w	r0, #1
 800071e:	f000 f962 	bl	80009e6 <HAL_NVIC_SetPriority>

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  while (1)
 8000738:	e7fe      	b.n	8000738 <HardFault_Handler+0x4>

0800073a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  while (1)
 800073e:	e7fe      	b.n	800073e <MemManage_Handler+0x4>

08000740 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  while (1)
 8000744:	e7fe      	b.n	8000744 <BusFault_Handler+0x4>

08000746 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  while (1)
 800074a:	e7fe      	b.n	800074a <UsageFault_Handler+0x4>

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f86c 	bl	800082c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000754:	f002 ffe8 	bl	8003728 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SystemInit+0x28>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SystemInit+0x28>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x28>)
 8000772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000776:	609a      	str	r2, [r3, #8]
#endif
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_Init+0x40>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_Init+0x40>)
 8000792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_Init+0x40>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_Init+0x40>)
 800079e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x40>)
 80007aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 f90d 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff ffa9 	bl	8000712 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023c00 	.word	0x40023c00

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f917 	bl	8000a1e <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 f8ed 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x20>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x24>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <HAL_IncTick+0x24>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000008 	.word	0x20000008
 8000850:	2001364c 	.word	0x2001364c

08000854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_GetTick+0x14>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2001364c 	.word	0x2001364c

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff47 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff5c 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffb0 	bl	800098c <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e25b      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d075      	beq.n	8000b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a56:	4ba3      	ldr	r3, [pc, #652]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	f003 030c 	and.w	r3, r3, #12
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d00c      	beq.n	8000a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a62:	4ba0      	ldr	r3, [pc, #640]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d112      	bne.n	8000a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a6e:	4b9d      	ldr	r3, [pc, #628]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a7a:	d10b      	bne.n	8000a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a7c:	4b99      	ldr	r3, [pc, #612]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d05b      	beq.n	8000b40 <HAL_RCC_OscConfig+0x108>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d157      	bne.n	8000b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e236      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a9c:	d106      	bne.n	8000aac <HAL_RCC_OscConfig+0x74>
 8000a9e:	4b91      	ldr	r3, [pc, #580]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a90      	ldr	r2, [pc, #576]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e01d      	b.n	8000ae8 <HAL_RCC_OscConfig+0xb0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x98>
 8000ab6:	4b8b      	ldr	r3, [pc, #556]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a8a      	ldr	r2, [pc, #552]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	4b88      	ldr	r3, [pc, #544]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a87      	ldr	r2, [pc, #540]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e00b      	b.n	8000ae8 <HAL_RCC_OscConfig+0xb0>
 8000ad0:	4b84      	ldr	r3, [pc, #528]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a83      	ldr	r2, [pc, #524]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b81      	ldr	r3, [pc, #516]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a80      	ldr	r2, [pc, #512]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d013      	beq.n	8000b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff feb0 	bl	8000854 <HAL_GetTick>
 8000af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	e008      	b.n	8000b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af8:	f7ff feac 	bl	8000854 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	d901      	bls.n	8000b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e1fb      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0a:	4b76      	ldr	r3, [pc, #472]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f0      	beq.n	8000af8 <HAL_RCC_OscConfig+0xc0>
 8000b16:	e014      	b.n	8000b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fe9c 	bl	8000854 <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b20:	f7ff fe98 	bl	8000854 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e1e7      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b32:	4b6c      	ldr	r3, [pc, #432]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f0      	bne.n	8000b20 <HAL_RCC_OscConfig+0xe8>
 8000b3e:	e000      	b.n	8000b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d063      	beq.n	8000c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b4e:	4b65      	ldr	r3, [pc, #404]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d11c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b66:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d116      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_OscConfig+0x152>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d001      	beq.n	8000b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e1bb      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8a:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4952      	ldr	r1, [pc, #328]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9e:	e03a      	b.n	8000c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d020      	beq.n	8000bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	; (8000ce8 <HAL_RCC_OscConfig+0x2b0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bae:	f7ff fe51 	bl	8000854 <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fe4d 	bl	8000854 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e19c      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f0      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4940      	ldr	r1, [pc, #256]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	4313      	orrs	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
 8000be8:	e015      	b.n	8000c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bea:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <HAL_RCC_OscConfig+0x2b0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fe30 	bl	8000854 <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fe2c 	bl	8000854 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e17b      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0a:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d030      	beq.n	8000c84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d016      	beq.n	8000c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c2a:	4b30      	ldr	r3, [pc, #192]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c30:	f7ff fe10 	bl	8000854 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c38:	f7ff fe0c 	bl	8000854 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e15b      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4a:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0x200>
 8000c56:	e015      	b.n	8000c84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <HAL_RCC_OscConfig+0x2b4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5e:	f7ff fdf9 	bl	8000854 <HAL_GetTick>
 8000c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	e008      	b.n	8000c78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c66:	f7ff fdf5 	bl	8000854 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d901      	bls.n	8000c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e144      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f0      	bne.n	8000c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80a0 	beq.w	8000dd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10f      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_RCC_OscConfig+0x2b8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d121      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_RCC_OscConfig+0x2b8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_RCC_OscConfig+0x2b8>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cda:	f7ff fdbb 	bl	8000854 <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce0:	e011      	b.n	8000d06 <HAL_RCC_OscConfig+0x2ce>
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	42470000 	.word	0x42470000
 8000cec:	42470e80 	.word	0x42470e80
 8000cf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf4:	f7ff fdae 	bl	8000854 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e0fd      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d06:	4b81      	ldr	r3, [pc, #516]	; (8000f0c <HAL_RCC_OscConfig+0x4d4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f0      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d106      	bne.n	8000d28 <HAL_RCC_OscConfig+0x2f0>
 8000d1a:	4b7d      	ldr	r3, [pc, #500]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d1e:	4a7c      	ldr	r2, [pc, #496]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6713      	str	r3, [r2, #112]	; 0x70
 8000d26:	e01c      	b.n	8000d62 <HAL_RCC_OscConfig+0x32a>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d10c      	bne.n	8000d4a <HAL_RCC_OscConfig+0x312>
 8000d30:	4b77      	ldr	r3, [pc, #476]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d34:	4a76      	ldr	r2, [pc, #472]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000d3c:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d40:	4a73      	ldr	r2, [pc, #460]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6713      	str	r3, [r2, #112]	; 0x70
 8000d48:	e00b      	b.n	8000d62 <HAL_RCC_OscConfig+0x32a>
 8000d4a:	4b71      	ldr	r3, [pc, #452]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d4e:	4a70      	ldr	r2, [pc, #448]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	6713      	str	r3, [r2, #112]	; 0x70
 8000d56:	4b6e      	ldr	r3, [pc, #440]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d5a:	4a6d      	ldr	r2, [pc, #436]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d5c:	f023 0304 	bic.w	r3, r3, #4
 8000d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d015      	beq.n	8000d96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fd73 	bl	8000854 <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d70:	e00a      	b.n	8000d88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d72:	f7ff fd6f 	bl	8000854 <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e0bc      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d88:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0ee      	beq.n	8000d72 <HAL_RCC_OscConfig+0x33a>
 8000d94:	e014      	b.n	8000dc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fd5d 	bl	8000854 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d9c:	e00a      	b.n	8000db4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fd59 	bl	8000854 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e0a6      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db4:	4b56      	ldr	r3, [pc, #344]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ee      	bne.n	8000d9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000dc0:	7dfb      	ldrb	r3, [r7, #23]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d105      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc6:	4b52      	ldr	r3, [pc, #328]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a51      	ldr	r2, [pc, #324]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8092 	beq.w	8000f00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ddc:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 030c 	and.w	r3, r3, #12
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d05c      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d141      	bne.n	8000e74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_RCC_OscConfig+0x4dc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fd2d 	bl	8000854 <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dfe:	f7ff fd29 	bl	8000854 <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e078      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e10:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	019b      	lsls	r3, r3, #6
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	3b01      	subs	r3, #1
 8000e36:	041b      	lsls	r3, r3, #16
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3e:	061b      	lsls	r3, r3, #24
 8000e40:	4933      	ldr	r1, [pc, #204]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_RCC_OscConfig+0x4dc>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fd02 	bl	8000854 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fcfe 	bl	8000854 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e04d      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x41c>
 8000e72:	e045      	b.n	8000f00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x4dc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fceb 	bl	8000854 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e82:	f7ff fce7 	bl	8000854 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e036      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f0      	bne.n	8000e82 <HAL_RCC_OscConfig+0x44a>
 8000ea0:	e02e      	b.n	8000f00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e029      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d11c      	bne.n	8000efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d115      	bne.n	8000efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10d      	bne.n	8000efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d106      	bne.n	8000efc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d001      	beq.n	8000f00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	42470060 	.word	0x42470060

08000f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0cc      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d90c      	bls.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0b8      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d020      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	494d      	ldr	r1, [pc, #308]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d044      	beq.n	8001038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d107      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d119      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e07f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e067      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f023 0203 	bic.w	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4934      	ldr	r1, [pc, #208]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001008:	f7ff fc24 	bl	8000854 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100e:	e00a      	b.n	8001026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff fc20 	bl	8000854 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	; 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e04f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 020c 	and.w	r2, r3, #12
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	429a      	cmp	r2, r3
 8001036:	d1eb      	bne.n	8001010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d20c      	bcs.n	8001060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d001      	beq.n	8001060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e032      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4916      	ldr	r1, [pc, #88]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d009      	beq.n	800109e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109e:	f000 f821 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80010a2:	4601      	mov	r1, r0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	fa21 f303 	lsr.w	r3, r1, r3
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_RCC_ClockConfig+0x1c8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fb84 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	08005118 	.word	0x08005118
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b04      	cmp	r3, #4
 8001104:	d007      	beq.n	8001116 <HAL_RCC_GetSysClockFreq+0x32>
 8001106:	2b08      	cmp	r3, #8
 8001108:	d008      	beq.n	800111c <HAL_RCC_GetSysClockFreq+0x38>
 800110a:	2b00      	cmp	r3, #0
 800110c:	f040 80b4 	bne.w	8001278 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001110:	4b5e      	ldr	r3, [pc, #376]	; (800128c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001112:	60bb      	str	r3, [r7, #8]
       break;
 8001114:	e0b3      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001116:	4b5e      	ldr	r3, [pc, #376]	; (8001290 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001118:	60bb      	str	r3, [r7, #8]
      break;
 800111a:	e0b0      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001124:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001126:	4b58      	ldr	r3, [pc, #352]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d04a      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	099b      	lsrs	r3, r3, #6
 8001138:	f04f 0400 	mov.w	r4, #0
 800113c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	ea03 0501 	and.w	r5, r3, r1
 8001148:	ea04 0602 	and.w	r6, r4, r2
 800114c:	4629      	mov	r1, r5
 800114e:	4632      	mov	r2, r6
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	f04f 0400 	mov.w	r4, #0
 8001158:	0154      	lsls	r4, r2, #5
 800115a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800115e:	014b      	lsls	r3, r1, #5
 8001160:	4619      	mov	r1, r3
 8001162:	4622      	mov	r2, r4
 8001164:	1b49      	subs	r1, r1, r5
 8001166:	eb62 0206 	sbc.w	r2, r2, r6
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f04f 0400 	mov.w	r4, #0
 8001172:	0194      	lsls	r4, r2, #6
 8001174:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001178:	018b      	lsls	r3, r1, #6
 800117a:	1a5b      	subs	r3, r3, r1
 800117c:	eb64 0402 	sbc.w	r4, r4, r2
 8001180:	f04f 0100 	mov.w	r1, #0
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	00e2      	lsls	r2, r4, #3
 800118a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800118e:	00d9      	lsls	r1, r3, #3
 8001190:	460b      	mov	r3, r1
 8001192:	4614      	mov	r4, r2
 8001194:	195b      	adds	r3, r3, r5
 8001196:	eb44 0406 	adc.w	r4, r4, r6
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	0262      	lsls	r2, r4, #9
 80011a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80011a8:	0259      	lsls	r1, r3, #9
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f04f 0400 	mov.w	r4, #0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4623      	mov	r3, r4
 80011bc:	f7ff f870 	bl	80002a0 <__aeabi_uldivmod>
 80011c0:	4603      	mov	r3, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e049      	b.n	800125c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	099b      	lsrs	r3, r3, #6
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	ea03 0501 	and.w	r5, r3, r1
 80011de:	ea04 0602 	and.w	r6, r4, r2
 80011e2:	4629      	mov	r1, r5
 80011e4:	4632      	mov	r2, r6
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	f04f 0400 	mov.w	r4, #0
 80011ee:	0154      	lsls	r4, r2, #5
 80011f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011f4:	014b      	lsls	r3, r1, #5
 80011f6:	4619      	mov	r1, r3
 80011f8:	4622      	mov	r2, r4
 80011fa:	1b49      	subs	r1, r1, r5
 80011fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f04f 0400 	mov.w	r4, #0
 8001208:	0194      	lsls	r4, r2, #6
 800120a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800120e:	018b      	lsls	r3, r1, #6
 8001210:	1a5b      	subs	r3, r3, r1
 8001212:	eb64 0402 	sbc.w	r4, r4, r2
 8001216:	f04f 0100 	mov.w	r1, #0
 800121a:	f04f 0200 	mov.w	r2, #0
 800121e:	00e2      	lsls	r2, r4, #3
 8001220:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001224:	00d9      	lsls	r1, r3, #3
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	195b      	adds	r3, r3, r5
 800122c:	eb44 0406 	adc.w	r4, r4, r6
 8001230:	f04f 0100 	mov.w	r1, #0
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	02a2      	lsls	r2, r4, #10
 800123a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800123e:	0299      	lsls	r1, r3, #10
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	4618      	mov	r0, r3
 8001246:	4621      	mov	r1, r4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f04f 0400 	mov.w	r4, #0
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	f7ff f825 	bl	80002a0 <__aeabi_uldivmod>
 8001256:	4603      	mov	r3, r0
 8001258:	460c      	mov	r4, r1
 800125a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	3301      	adds	r3, #1
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	60bb      	str	r3, [r7, #8]
      break;
 8001276:	e002      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800127a:	60bb      	str	r3, [r7, #8]
      break;
 800127c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800127e:	68bb      	ldr	r3, [r7, #8]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	00f42400 	.word	0x00f42400
 8001290:	007a1200 	.word	0x007a1200

08001294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d105      	bne.n	80012bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d035      	beq.n	8001328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012bc:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80012c2:	f7ff fac7 	bl	8000854 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80012ca:	f7ff fac3 	bl	8000854 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0b0      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	019a      	lsls	r2, r3, #6
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	071b      	lsls	r3, r3, #28
 80012f4:	4955      	ldr	r1, [pc, #340]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001302:	f7ff faa7 	bl	8000854 <HAL_GetTick>
 8001306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800130a:	f7ff faa3 	bl	8000854 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e090      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8083 	beq.w	800143c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a43      	ldr	r2, [pc, #268]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a3e      	ldr	r2, [pc, #248]	; (8001450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800135e:	f7ff fa79 	bl	8000854 <HAL_GetTick>
 8001362:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001366:	f7ff fa75 	bl	8000854 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e062      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800138c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02f      	beq.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d028      	beq.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80013a2:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80013b8:	4a24      	ldr	r2, [pc, #144]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d114      	bne.n	80013f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fa43 	bl	8000854 <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fa3f 	bl	8000854 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e02a      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ee      	beq.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001400:	d10d      	bne.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e005      	b.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001424:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001428:	6093      	str	r3, [r2, #8]
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800142c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001436:	4905      	ldr	r1, [pc, #20]	; (800144c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001438:	4313      	orrs	r3, r2
 800143a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	42470068 	.word	0x42470068
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000
 8001454:	42470e40 	.word	0x42470e40

08001458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800145a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopForever+0x6>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopForever+0xe>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopForever+0x16>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001482:	f7ff f96b 	bl	800075c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001486:	f002 fbb5 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800148a:	f7ff f889 	bl	80005a0 <main>

0800148e <LoopForever>:

LoopForever:
    b LoopForever
 800148e:	e7fe      	b.n	800148e <LoopForever>
  ldr   r0, =_estack
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800149c:	080051ec 	.word	0x080051ec
  ldr r2, =_sbss
 80014a0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014a4:	20013694 	.word	0x20013694

080014a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>

080014aa <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80014c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <vApplicationGetIdleTaskMemory+0x30>)
 80014ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2282      	movs	r2, #130	; 0x82
 80014d4:	601a      	str	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200000a4 	.word	0x200000a4
 80014e8:	200000fc 	.word	0x200000fc

080014ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <vApplicationGetTimerTaskMemory+0x2c>)
 80014fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4a06      	ldr	r2, [pc, #24]	; (800151c <vApplicationGetTimerTaskMemory+0x30>)
 8001502:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f44f 7282 	mov.w	r2, #260	; 0x104
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	20000304 	.word	0x20000304
 800151c:	2000035c 	.word	0x2000035c

08001520 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f103 0208 	add.w	r2, r3, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f103 0208 	add.w	r2, r3, #8
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f103 0208 	add.w	r2, r3, #8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d103      	bne.n	80015e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e00c      	b.n	80015fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3308      	adds	r3, #8
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e002      	b.n	80015f0 <vListInsert+0x2e>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d2f6      	bcs.n	80015ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6892      	ldr	r2, [r2, #8]
 800164a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6852      	ldr	r2, [r2, #4]
 8001654:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d103      	bne.n	8001668 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1e5a      	subs	r2, r3, #1
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	e7fe      	b.n	80016ae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80016b0:	f001 ffac 	bl	800360c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	441a      	add	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e0:	3b01      	subs	r3, #1
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	441a      	add	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	22ff      	movs	r2, #255	; 0xff
 80016f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d114      	bne.n	8001730 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3310      	adds	r3, #16
 8001712:	4618      	mov	r0, r3
 8001714:	f001 f8a0 	bl	8002858 <xTaskRemoveFromEventList>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d012      	beq.n	8001744 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <xQueueGenericReset+0xcc>)
 8001720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f3bf 8f4f 	dsb	sy
 800172a:	f3bf 8f6f 	isb	sy
 800172e:	e009      	b.n	8001744 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3310      	adds	r3, #16
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fef3 	bl	8001520 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3324      	adds	r3, #36	; 0x24
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff feee 	bl	8001520 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001744:	f001 ff90 	bl	8003668 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000ed04 	.word	0xe000ed04

08001758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <xQueueGenericCreateStatic+0x28>
 800176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001770:	f383 8811 	msr	BASEPRI, r3
 8001774:	f3bf 8f6f 	isb	sy
 8001778:	f3bf 8f4f 	dsb	sy
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
 800177e:	e7fe      	b.n	800177e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <xQueueGenericCreateStatic+0x42>
 8001786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800178a:	f383 8811 	msr	BASEPRI, r3
 800178e:	f3bf 8f6f 	isb	sy
 8001792:	f3bf 8f4f 	dsb	sy
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
 8001798:	e7fe      	b.n	8001798 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <xQueueGenericCreateStatic+0x4e>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <xQueueGenericCreateStatic+0x52>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <xQueueGenericCreateStatic+0x54>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <xQueueGenericCreateStatic+0x6c>
 80017b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	623b      	str	r3, [r7, #32]
 80017c2:	e7fe      	b.n	80017c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <xQueueGenericCreateStatic+0x78>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <xQueueGenericCreateStatic+0x7c>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <xQueueGenericCreateStatic+0x7e>
 80017d4:	2300      	movs	r3, #0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <xQueueGenericCreateStatic+0x96>
 80017da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	e7fe      	b.n	80017ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017ee:	2350      	movs	r3, #80	; 0x50
 80017f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b50      	cmp	r3, #80	; 0x50
 80017f6:	d009      	beq.n	800180c <xQueueGenericCreateStatic+0xb4>
 80017f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e7fe      	b.n	800180a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800181e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	4613      	mov	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f805 	bl	800183c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001834:	4618      	mov	r0, r3
 8001836:	3730      	adds	r7, #48	; 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e002      	b.n	800185e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800186a:	2101      	movs	r1, #1
 800186c:	69b8      	ldr	r0, [r7, #24]
 800186e:	f7ff ff0b 	bl	8001688 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	; 0x38
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <xQueueGenericSend+0x30>
 80018a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a4:	f383 8811 	msr	BASEPRI, r3
 80018a8:	f3bf 8f6f 	isb	sy
 80018ac:	f3bf 8f4f 	dsb	sy
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b2:	e7fe      	b.n	80018b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <xQueueGenericSend+0x3e>
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <xQueueGenericSend+0x42>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <xQueueGenericSend+0x44>
 80018c6:	2300      	movs	r3, #0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <xQueueGenericSend+0x5c>
 80018cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d0:	f383 8811 	msr	BASEPRI, r3
 80018d4:	f3bf 8f6f 	isb	sy
 80018d8:	f3bf 8f4f 	dsb	sy
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e7fe      	b.n	80018de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d103      	bne.n	80018ee <xQueueGenericSend+0x6a>
 80018e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <xQueueGenericSend+0x6e>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <xQueueGenericSend+0x70>
 80018f2:	2300      	movs	r3, #0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <xQueueGenericSend+0x88>
 80018f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	e7fe      	b.n	800190a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800190c:	f001 f960 	bl	8002bd0 <xTaskGetSchedulerState>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <xQueueGenericSend+0x98>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <xQueueGenericSend+0x9c>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <xQueueGenericSend+0x9e>
 8001920:	2300      	movs	r3, #0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <xQueueGenericSend+0xb6>
 8001926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	f3bf 8f6f 	isb	sy
 8001932:	f3bf 8f4f 	dsb	sy
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	e7fe      	b.n	8001938 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800193a:	f001 fe67 	bl	800360c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001946:	429a      	cmp	r2, r3
 8001948:	d302      	bcc.n	8001950 <xQueueGenericSend+0xcc>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d129      	bne.n	80019a4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001956:	f000 f9ff 	bl	8001d58 <prvCopyDataToQueue>
 800195a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001966:	3324      	adds	r3, #36	; 0x24
 8001968:	4618      	mov	r0, r3
 800196a:	f000 ff75 	bl	8002858 <xTaskRemoveFromEventList>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <xQueueGenericSend+0x1f0>)
 8001976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	e00a      	b.n	800199c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800198c:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <xQueueGenericSend+0x1f0>)
 800198e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800199c:	f001 fe64 	bl	8003668 <vPortExitCritical>
				return pdPASS;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e063      	b.n	8001a6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80019aa:	f001 fe5d 	bl	8003668 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e05c      	b.n	8001a6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d106      	bne.n	80019c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 ffad 	bl	800291c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80019c6:	f001 fe4f 	bl	8003668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80019ca:	f000 fd27 	bl	800241c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80019ce:	f001 fe1d 	bl	800360c <vPortEnterCritical>
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d103      	bne.n	80019e8 <xQueueGenericSend+0x164>
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d103      	bne.n	80019fe <xQueueGenericSend+0x17a>
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019fe:	f001 fe33 	bl	8003668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a02:	1d3a      	adds	r2, r7, #4
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 ff9c 	bl	8002948 <xTaskCheckForTimeOut>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d124      	bne.n	8001a60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a18:	f000 fa96 	bl	8001f48 <prvIsQueueFull>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d018      	beq.n	8001a54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	3310      	adds	r3, #16
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 fec6 	bl	80027bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a32:	f000 fa21 	bl	8001e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001a36:	f000 fcff 	bl	8002438 <xTaskResumeAll>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f47f af7c 	bne.w	800193a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <xQueueGenericSend+0x1f0>)
 8001a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	e772      	b.n	800193a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a56:	f000 fa0f 	bl	8001e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001a5a:	f000 fced 	bl	8002438 <xTaskResumeAll>
 8001a5e:	e76c      	b.n	800193a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a62:	f000 fa09 	bl	8001e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001a66:	f000 fce7 	bl	8002438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a6a:	2300      	movs	r3, #0
		}
	}
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3738      	adds	r7, #56	; 0x38
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	e000ed04 	.word	0xe000ed04

08001a78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <xQueueGenericSendFromISR+0x2c>
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e7fe      	b.n	8001aa2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d103      	bne.n	8001ab2 <xQueueGenericSendFromISR+0x3a>
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <xQueueGenericSendFromISR+0x3e>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <xQueueGenericSendFromISR+0x40>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <xQueueGenericSendFromISR+0x58>
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	623b      	str	r3, [r7, #32]
 8001ace:	e7fe      	b.n	8001ace <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d103      	bne.n	8001ade <xQueueGenericSendFromISR+0x66>
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <xQueueGenericSendFromISR+0x6a>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <xQueueGenericSendFromISR+0x6c>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <xQueueGenericSendFromISR+0x84>
 8001ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aec:	f383 8811 	msr	BASEPRI, r3
 8001af0:	f3bf 8f6f 	isb	sy
 8001af4:	f3bf 8f4f 	dsb	sy
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e7fe      	b.n	8001afa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001afc:	f001 fe62 	bl	80037c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b00:	f3ef 8211 	mrs	r2, BASEPRI
 8001b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b08:	f383 8811 	msr	BASEPRI, r3
 8001b0c:	f3bf 8f6f 	isb	sy
 8001b10:	f3bf 8f4f 	dsb	sy
 8001b14:	61ba      	str	r2, [r7, #24]
 8001b16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001b18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d302      	bcc.n	8001b2e <xQueueGenericSendFromISR+0xb6>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d12c      	bne.n	8001b88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b3e:	f000 f90b 	bl	8001d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001b42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d112      	bne.n	8001b72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d016      	beq.n	8001b82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b56:	3324      	adds	r3, #36	; 0x24
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fe7d 	bl	8002858 <xTaskRemoveFromEventList>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00e      	beq.n	8001b82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00b      	beq.n	8001b82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001b82:	2301      	movs	r3, #1
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001b86:	e001      	b.n	8001b8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <xQueueReceive+0x2e>
	__asm volatile
 8001bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	623b      	str	r3, [r7, #32]
 8001bcc:	e7fe      	b.n	8001bcc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <xQueueReceive+0x3c>
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <xQueueReceive+0x40>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <xQueueReceive+0x42>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <xQueueReceive+0x5a>
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	e7fe      	b.n	8001bf8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bfa:	f000 ffe9 	bl	8002bd0 <xTaskGetSchedulerState>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <xQueueReceive+0x6a>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <xQueueReceive+0x6e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <xQueueReceive+0x70>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <xQueueReceive+0x88>
 8001c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	e7fe      	b.n	8001c26 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c28:	f001 fcf0 	bl	800360c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01f      	beq.n	8001c78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c3c:	f000 f8f6 	bl	8001e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00f      	beq.n	8001c70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	3310      	adds	r3, #16
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fdff 	bl	8002858 <xTaskRemoveFromEventList>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001c60:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <xQueueReceive+0x1b4>)
 8001c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c70:	f001 fcfa 	bl	8003668 <vPortExitCritical>
				return pdPASS;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e069      	b.n	8001d4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c7e:	f001 fcf3 	bl	8003668 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e062      	b.n	8001d4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 fe43 	bl	800291c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c9a:	f001 fce5 	bl	8003668 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c9e:	f000 fbbd 	bl	800241c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ca2:	f001 fcb3 	bl	800360c <vPortEnterCritical>
 8001ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cac:	b25b      	sxtb	r3, r3
 8001cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb2:	d103      	bne.n	8001cbc <xQueueReceive+0x11c>
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d103      	bne.n	8001cd2 <xQueueReceive+0x132>
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd2:	f001 fcc9 	bl	8003668 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cd6:	1d3a      	adds	r2, r7, #4
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fe32 	bl	8002948 <xTaskCheckForTimeOut>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d123      	bne.n	8001d32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cec:	f000 f916 	bl	8001f1c <prvIsQueueEmpty>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d017      	beq.n	8001d26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	3324      	adds	r3, #36	; 0x24
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fd5c 	bl	80027bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d06:	f000 f8b7 	bl	8001e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001d0a:	f000 fb95 	bl	8002438 <xTaskResumeAll>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d189      	bne.n	8001c28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <xQueueReceive+0x1b4>)
 8001d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	e780      	b.n	8001c28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d28:	f000 f8a6 	bl	8001e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d2c:	f000 fb84 	bl	8002438 <xTaskResumeAll>
 8001d30:	e77a      	b.n	8001c28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d34:	f000 f8a0 	bl	8001e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d38:	f000 fb7e 	bl	8002438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d3e:	f000 f8ed 	bl	8001f1c <prvIsQueueEmpty>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f43f af6f 	beq.w	8001c28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3730      	adds	r7, #48	; 0x30
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	e000ed04 	.word	0xe000ed04

08001d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d14d      	bne.n	8001e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 ff42 	bl	8002c0c <xTaskPriorityDisinherit>
 8001d88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	e043      	b.n	8001e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d119      	bne.n	8001dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	461a      	mov	r2, r3
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	f001 ff4a 	bl	8003c3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	441a      	add	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d32b      	bcc.n	8001e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	e026      	b.n	8001e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	68d8      	ldr	r0, [r3, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	f001 ff30 	bl	8003c3c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	425b      	negs	r3, r3
 8001de6:	441a      	add	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	425b      	negs	r3, r3
 8001e02:	441a      	add	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d105      	bne.n	8001e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001e22:	697b      	ldr	r3, [r7, #20]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d018      	beq.n	8001e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	441a      	add	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d303      	bcc.n	8001e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68d9      	ldr	r1, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	461a      	mov	r2, r3
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f001 fee6 	bl	8003c3c <memcpy>
	}
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e80:	f001 fbc4 	bl	800360c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e8c:	e011      	b.n	8001eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3324      	adds	r3, #36	; 0x24
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fcdc 	bl	8002858 <xTaskRemoveFromEventList>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001ea6:	f000 fdaf 	bl	8002a08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dce9      	bgt.n	8001e8e <prvUnlockQueue+0x16>
 8001eba:	e000      	b.n	8001ebe <prvUnlockQueue+0x46>
					break;
 8001ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	22ff      	movs	r2, #255	; 0xff
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001ec6:	f001 fbcf 	bl	8003668 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001eca:	f001 fb9f 	bl	800360c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ed6:	e011      	b.n	8001efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3310      	adds	r3, #16
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fcb7 	bl	8002858 <xTaskRemoveFromEventList>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001ef0:	f000 fd8a 	bl	8002a08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dce9      	bgt.n	8001ed8 <prvUnlockQueue+0x60>
 8001f04:	e000      	b.n	8001f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001f10:	f001 fbaa 	bl	8003668 <vPortExitCritical>
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f24:	f001 fb72 	bl	800360c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001f30:	2301      	movs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e001      	b.n	8001f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f3a:	f001 fb95 	bl	8003668 <vPortExitCritical>

	return xReturn;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f50:	f001 fb5c 	bl	800360c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d102      	bne.n	8001f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e001      	b.n	8001f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f6a:	f001 fb7d 	bl	8003668 <vPortExitCritical>

	return xReturn;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e014      	b.n	8001fb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <vQueueAddToRegistry+0x4c>)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f94:	490b      	ldr	r1, [pc, #44]	; (8001fc4 <vQueueAddToRegistry+0x4c>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <vQueueAddToRegistry+0x4c>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001faa:	e005      	b.n	8001fb8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b07      	cmp	r3, #7
 8001fb6:	d9e7      	bls.n	8001f88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20013650 	.word	0x20013650

08001fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001fd8:	f001 fb18 	bl	800360c <vPortEnterCritical>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d103      	bne.n	8001ff2 <vQueueWaitForMessageRestricted+0x2a>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffe:	d103      	bne.n	8002008 <vQueueWaitForMessageRestricted+0x40>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002008:	f001 fb2e 	bl	8003668 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3324      	adds	r3, #36	; 0x24
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fbf1 	bl	8002804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff28 	bl	8001e78 <prvUnlockQueue>
	}
 8002028:	bf00      	nop
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af04      	add	r7, sp, #16
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800203e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <xTaskCreateStatic+0x28>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	e7fe      	b.n	8002056 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <xTaskCreateStatic+0x42>
 800205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	e7fe      	b.n	8002070 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002072:	2358      	movs	r3, #88	; 0x58
 8002074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b58      	cmp	r3, #88	; 0x58
 800207a:	d009      	beq.n	8002090 <xTaskCreateStatic+0x60>
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e7fe      	b.n	800208e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01e      	beq.n	80020d4 <xTaskCreateStatic+0xa4>
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020ae:	2300      	movs	r3, #0
 80020b0:	9303      	str	r3, [sp, #12]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	9301      	str	r3, [sp, #4]
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f850 	bl	800216c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ce:	f000 f8d3 	bl	8002278 <prvAddNewTaskToReadyList>
 80020d2:	e001      	b.n	80020d8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80020d8:	697b      	ldr	r3, [r7, #20]
	}
 80020da:	4618      	mov	r0, r3
 80020dc:	3728      	adds	r7, #40	; 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b08c      	sub	sp, #48	; 0x30
 80020e6:	af04      	add	r7, sp, #16
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fba2 	bl	8003840 <pvPortMalloc>
 80020fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00e      	beq.n	8002122 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002104:	2058      	movs	r0, #88	; 0x58
 8002106:	f001 fb9b 	bl	8003840 <pvPortMalloc>
 800210a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
 8002118:	e005      	b.n	8002126 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f001 fc56 	bl	80039cc <vPortFree>
 8002120:	e001      	b.n	8002126 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d017      	beq.n	800215c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	2300      	movs	r3, #0
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f80e 	bl	800216c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002150:	69f8      	ldr	r0, [r7, #28]
 8002152:	f000 f891 	bl	8002278 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002156:	2301      	movs	r3, #1
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e002      	b.n	8002162 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002162:	69bb      	ldr	r3, [r7, #24]
	}
 8002164:	4618      	mov	r0, r3
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	461a      	mov	r2, r3
 8002184:	21a5      	movs	r1, #165	; 0xa5
 8002186:	f001 fd64 	bl	8003c52 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002194:	3b01      	subs	r3, #1
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f023 0307 	bic.w	r3, r3, #7
 80021a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <prvInitialiseNewTask+0x56>
 80021ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b2:	f383 8811 	msr	BASEPRI, r3
 80021b6:	f3bf 8f6f 	isb	sy
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e7fe      	b.n	80021c0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e012      	b.n	80021ee <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	7819      	ldrb	r1, [r3, #0]
 80021d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	3334      	adds	r3, #52	; 0x34
 80021d8:	460a      	mov	r2, r1
 80021da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	3301      	adds	r3, #1
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d9e9      	bls.n	80021c8 <prvInitialiseNewTask+0x5c>
 80021f4:	e000      	b.n	80021f8 <prvInitialiseNewTask+0x8c>
		{
			break;
 80021f6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	2b04      	cmp	r3, #4
 8002204:	d901      	bls.n	800220a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002206:	2304      	movs	r3, #4
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002214:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	2200      	movs	r2, #0
 800221a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	3304      	adds	r3, #4
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f99d 	bl	8001560 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	3318      	adds	r3, #24
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff f998 	bl	8001560 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	f1c3 0205 	rsb	r2, r3, #5
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002244:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	2200      	movs	r2, #0
 800224a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	69b8      	ldr	r0, [r7, #24]
 800225a:	f001 f8b1 	bl	80033c0 <pxPortInitialiseStack>
 800225e:	4602      	mov	r2, r0
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002280:	f001 f9c4 	bl	800360c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <prvAddNewTaskToReadyList+0xc0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a2b      	ldr	r2, [pc, #172]	; (8002338 <prvAddNewTaskToReadyList+0xc0>)
 800228c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <prvAddNewTaskToReadyList+0xc4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <prvAddNewTaskToReadyList+0xc4>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <prvAddNewTaskToReadyList+0xc0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022a4:	f000 fbd4 	bl	8002a50 <prvInitialiseTaskLists>
 80022a8:	e00d      	b.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <prvAddNewTaskToReadyList+0xc8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <prvAddNewTaskToReadyList+0xc4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d802      	bhi.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022c0:	4a1e      	ldr	r2, [pc, #120]	; (800233c <prvAddNewTaskToReadyList+0xc4>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <prvAddNewTaskToReadyList+0xcc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <prvAddNewTaskToReadyList+0xcc>)
 80022ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <prvAddNewTaskToReadyList+0xcc>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2201      	movs	r2, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <prvAddNewTaskToReadyList+0xd0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <prvAddNewTaskToReadyList+0xd0>)
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <prvAddNewTaskToReadyList+0xd4>)
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f7ff f93a 	bl	800157a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002306:	f001 f9af 	bl	8003668 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <prvAddNewTaskToReadyList+0xc8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00e      	beq.n	8002330 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <prvAddNewTaskToReadyList+0xc4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	429a      	cmp	r2, r3
 800231e:	d207      	bcs.n	8002330 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <prvAddNewTaskToReadyList+0xd8>)
 8002322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000844 	.word	0x20000844
 800233c:	2000076c 	.word	0x2000076c
 8002340:	20000850 	.word	0x20000850
 8002344:	20000860 	.word	0x20000860
 8002348:	2000084c 	.word	0x2000084c
 800234c:	20000770 	.word	0x20000770
 8002350:	e000ed04 	.word	0xe000ed04

08002354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002362:	463a      	mov	r2, r7
 8002364:	1d39      	adds	r1, r7, #4
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f8a4 	bl	80014b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002370:	6839      	ldr	r1, [r7, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	9202      	str	r2, [sp, #8]
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2300      	movs	r3, #0
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	460a      	mov	r2, r1
 8002382:	4920      	ldr	r1, [pc, #128]	; (8002404 <vTaskStartScheduler+0xb0>)
 8002384:	4820      	ldr	r0, [pc, #128]	; (8002408 <vTaskStartScheduler+0xb4>)
 8002386:	f7ff fe53 	bl	8002030 <xTaskCreateStatic>
 800238a:	4602      	mov	r2, r0
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <vTaskStartScheduler+0xb8>)
 800238e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <vTaskStartScheduler+0xb8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e001      	b.n	80023a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d102      	bne.n	80023ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80023a8:	f000 fd1a 	bl	8002de0 <xTimerCreateTimerTask>
 80023ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d115      	bne.n	80023e0 <vTaskStartScheduler+0x8c>
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <vTaskStartScheduler+0xbc>)
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <vTaskStartScheduler+0xc0>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <vTaskStartScheduler+0xc4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80023da:	f001 f879 	bl	80034d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80023de:	e00d      	b.n	80023fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d109      	bne.n	80023fc <vTaskStartScheduler+0xa8>
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e7fe      	b.n	80023fa <vTaskStartScheduler+0xa6>
}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	08005100 	.word	0x08005100
 8002408:	08002a21 	.word	0x08002a21
 800240c:	20000868 	.word	0x20000868
 8002410:	20000864 	.word	0x20000864
 8002414:	20000850 	.word	0x20000850
 8002418:	20000848 	.word	0x20000848

0800241c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <vTaskSuspendAll+0x18>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <vTaskSuspendAll+0x18>)
 8002428:	6013      	str	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	2000086c 	.word	0x2000086c

08002438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <xTaskResumeAll+0x114>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <xTaskResumeAll+0x2a>
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	e7fe      	b.n	8002460 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002462:	f001 f8d3 	bl	800360c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <xTaskResumeAll+0x114>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	4a37      	ldr	r2, [pc, #220]	; (800254c <xTaskResumeAll+0x114>)
 800246e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <xTaskResumeAll+0x114>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d161      	bne.n	800253c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <xTaskResumeAll+0x118>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d05d      	beq.n	800253c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002480:	e02e      	b.n	80024e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002482:	4b34      	ldr	r3, [pc, #208]	; (8002554 <xTaskResumeAll+0x11c>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3318      	adds	r3, #24
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff f8d0 	bl	8001634 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3304      	adds	r3, #4
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff f8cb 	bl	8001634 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2201      	movs	r2, #1
 80024a4:	409a      	lsls	r2, r3
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <xTaskResumeAll+0x120>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <xTaskResumeAll+0x120>)
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4a27      	ldr	r2, [pc, #156]	; (800255c <xTaskResumeAll+0x124>)
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3304      	adds	r3, #4
 80024c4:	4619      	mov	r1, r3
 80024c6:	4610      	mov	r0, r2
 80024c8:	f7ff f857 	bl	800157a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <xTaskResumeAll+0x128>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <xTaskResumeAll+0x12c>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <xTaskResumeAll+0x11c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1cc      	bne.n	8002482 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80024ee:	f000 fb49 	bl	8002b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <xTaskResumeAll+0x130>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024fe:	f000 f847 	bl	8002590 <xTaskIncrementTick>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <xTaskResumeAll+0x12c>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f1      	bne.n	80024fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <xTaskResumeAll+0x130>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <xTaskResumeAll+0x12c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002528:	2301      	movs	r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <xTaskResumeAll+0x134>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800253c:	f001 f894 	bl	8003668 <vPortExitCritical>

	return xAlreadyYielded;
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000086c 	.word	0x2000086c
 8002550:	20000844 	.word	0x20000844
 8002554:	20000804 	.word	0x20000804
 8002558:	2000084c 	.word	0x2000084c
 800255c:	20000770 	.word	0x20000770
 8002560:	2000076c 	.word	0x2000076c
 8002564:	20000858 	.word	0x20000858
 8002568:	20000854 	.word	0x20000854
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <xTaskGetTickCount+0x1c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800257c:	687b      	ldr	r3, [r7, #4]
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000848 	.word	0x20000848

08002590 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800259a:	4b50      	ldr	r3, [pc, #320]	; (80026dc <xTaskIncrementTick+0x14c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 808c 	bne.w	80026bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025a4:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <xTaskIncrementTick+0x150>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80025ac:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <xTaskIncrementTick+0x150>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d11f      	bne.n	80025f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80025b8:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <xTaskIncrementTick+0x154>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <xTaskIncrementTick+0x46>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	e7fe      	b.n	80025d4 <xTaskIncrementTick+0x44>
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <xTaskIncrementTick+0x154>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <xTaskIncrementTick+0x158>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a40      	ldr	r2, [pc, #256]	; (80026e4 <xTaskIncrementTick+0x154>)
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4a40      	ldr	r2, [pc, #256]	; (80026e8 <xTaskIncrementTick+0x158>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <xTaskIncrementTick+0x15c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4a3e      	ldr	r2, [pc, #248]	; (80026ec <xTaskIncrementTick+0x15c>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	f000 fac6 	bl	8002b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80025f8:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <xTaskIncrementTick+0x160>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d34d      	bcc.n	800269e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <xTaskIncrementTick+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <xTaskIncrementTick+0x80>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <xTaskIncrementTick+0x82>
 8002610:	2300      	movs	r3, #0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002616:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <xTaskIncrementTick+0x160>)
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	601a      	str	r2, [r3, #0]
					break;
 800261e:	e03e      	b.n	800269e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <xTaskIncrementTick+0x154>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d203      	bcs.n	8002640 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002638:	4a2d      	ldr	r2, [pc, #180]	; (80026f0 <xTaskIncrementTick+0x160>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6013      	str	r3, [r2, #0]
						break;
 800263e:	e02e      	b.n	800269e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3304      	adds	r3, #4
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fff5 	bl	8001634 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3318      	adds	r3, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe ffec 	bl	8001634 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <xTaskIncrementTick+0x164>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4313      	orrs	r3, r2
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <xTaskIncrementTick+0x164>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <xTaskIncrementTick+0x168>)
 800267c:	441a      	add	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7fe ff78 	bl	800157a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <xTaskIncrementTick+0x16c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d3b4      	bcc.n	8002602 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800269c:	e7b1      	b.n	8002602 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <xTaskIncrementTick+0x16c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	4914      	ldr	r1, [pc, #80]	; (80026f8 <xTaskIncrementTick+0x168>)
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d907      	bls.n	80026c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e004      	b.n	80026c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <xTaskIncrementTick+0x170>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3301      	adds	r3, #1
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <xTaskIncrementTick+0x170>)
 80026c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <xTaskIncrementTick+0x174>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80026d2:	697b      	ldr	r3, [r7, #20]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000086c 	.word	0x2000086c
 80026e0:	20000848 	.word	0x20000848
 80026e4:	200007fc 	.word	0x200007fc
 80026e8:	20000800 	.word	0x20000800
 80026ec:	2000085c 	.word	0x2000085c
 80026f0:	20000864 	.word	0x20000864
 80026f4:	2000084c 	.word	0x2000084c
 80026f8:	20000770 	.word	0x20000770
 80026fc:	2000076c 	.word	0x2000076c
 8002700:	20000854 	.word	0x20000854
 8002704:	20000858 	.word	0x20000858

08002708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <vTaskSwitchContext+0xa0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <vTaskSwitchContext+0xa4>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800271c:	e03e      	b.n	800279c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <vTaskSwitchContext+0xa4>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <vTaskSwitchContext+0xa8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	fab3 f383 	clz	r3, r3
 8002730:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	f1c3 031f 	rsb	r3, r3, #31
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <vTaskSwitchContext+0xac>)
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <vTaskSwitchContext+0x5a>
	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	e7fe      	b.n	8002760 <vTaskSwitchContext+0x58>
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <vTaskSwitchContext+0xac>)
 800276e:	4413      	add	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	3308      	adds	r3, #8
 8002784:	429a      	cmp	r2, r3
 8002786:	d104      	bne.n	8002792 <vTaskSwitchContext+0x8a>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <vTaskSwitchContext+0xb0>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	2000086c 	.word	0x2000086c
 80027ac:	20000858 	.word	0x20000858
 80027b0:	2000084c 	.word	0x2000084c
 80027b4:	20000770 	.word	0x20000770
 80027b8:	2000076c 	.word	0x2000076c

080027bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <vTaskPlaceOnEventList+0x24>
 80027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e7fe      	b.n	80027de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <vTaskPlaceOnEventList+0x44>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3318      	adds	r3, #24
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7fe feea 	bl	80015c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027ee:	2101      	movs	r1, #1
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f000 fa8f 	bl	8002d14 <prvAddCurrentTaskToDelayedList>
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000076c 	.word	0x2000076c

08002804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <vTaskPlaceOnEventListRestricted+0x26>
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e7fe      	b.n	8002828 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <vTaskPlaceOnEventListRestricted+0x50>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3318      	adds	r3, #24
 8002830:	4619      	mov	r1, r3
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7fe fea1 	bl	800157a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f000 fa64 	bl	8002d14 <prvAddCurrentTaskToDelayedList>
	}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	2000076c 	.word	0x2000076c

08002858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <xTaskRemoveFromEventList+0x2a>
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e7fe      	b.n	8002880 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3318      	adds	r3, #24
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fed4 	bl	8001634 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <xTaskRemoveFromEventList+0xac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d11c      	bne.n	80028ce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	3304      	adds	r3, #4
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fecb 	bl	8001634 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	2201      	movs	r2, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	4b18      	ldr	r3, [pc, #96]	; (8002908 <xTaskRemoveFromEventList+0xb0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	4a16      	ldr	r2, [pc, #88]	; (8002908 <xTaskRemoveFromEventList+0xb0>)
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <xTaskRemoveFromEventList+0xb4>)
 80028be:	441a      	add	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	4610      	mov	r0, r2
 80028c8:	f7fe fe57 	bl	800157a <vListInsertEnd>
 80028cc:	e005      	b.n	80028da <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3318      	adds	r3, #24
 80028d2:	4619      	mov	r1, r3
 80028d4:	480e      	ldr	r0, [pc, #56]	; (8002910 <xTaskRemoveFromEventList+0xb8>)
 80028d6:	f7fe fe50 	bl	800157a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <xTaskRemoveFromEventList+0xbc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d905      	bls.n	80028f4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <xTaskRemoveFromEventList+0xc0>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e001      	b.n	80028f8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80028f8:	697b      	ldr	r3, [r7, #20]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000086c 	.word	0x2000086c
 8002908:	2000084c 	.word	0x2000084c
 800290c:	20000770 	.word	0x20000770
 8002910:	20000804 	.word	0x20000804
 8002914:	2000076c 	.word	0x2000076c
 8002918:	20000858 	.word	0x20000858

0800291c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <vTaskInternalSetTimeOutState+0x24>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <vTaskInternalSetTimeOutState+0x28>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	605a      	str	r2, [r3, #4]
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	2000085c 	.word	0x2000085c
 8002944:	20000848 	.word	0x20000848

08002948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <xTaskCheckForTimeOut+0x24>
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e7fe      	b.n	800296a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <xTaskCheckForTimeOut+0x3e>
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e7fe      	b.n	8002984 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002986:	f000 fe41 	bl	800360c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <xTaskCheckForTimeOut+0xb8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d102      	bne.n	80029aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e023      	b.n	80029f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <xTaskCheckForTimeOut+0xbc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d007      	beq.n	80029c6 <xTaskCheckForTimeOut+0x7e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d302      	bcc.n	80029c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e015      	b.n	80029f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d20b      	bcs.n	80029e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	1ad2      	subs	r2, r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff9d 	bl	800291c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	e004      	b.n	80029f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80029f2:	f000 fe39 	bl	8003668 <vPortExitCritical>

	return xReturn;
 80029f6:	69fb      	ldr	r3, [r7, #28]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000848 	.word	0x20000848
 8002a04:	2000085c 	.word	0x2000085c

08002a08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <vTaskMissedYield+0x14>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	20000858 	.word	0x20000858

08002a20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a28:	f000 f852 	bl	8002ad0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <prvIdleTask+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d9f9      	bls.n	8002a28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <prvIdleTask+0x2c>)
 8002a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002a44:	e7f0      	b.n	8002a28 <prvIdleTask+0x8>
 8002a46:	bf00      	nop
 8002a48:	20000770 	.word	0x20000770
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	e00c      	b.n	8002a76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <prvInitialiseTaskLists+0x60>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd58 	bl	8001520 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3301      	adds	r3, #1
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d9ef      	bls.n	8002a5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <prvInitialiseTaskLists+0x64>)
 8002a7e:	f7fe fd4f 	bl	8001520 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a82:	480d      	ldr	r0, [pc, #52]	; (8002ab8 <prvInitialiseTaskLists+0x68>)
 8002a84:	f7fe fd4c 	bl	8001520 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a88:	480c      	ldr	r0, [pc, #48]	; (8002abc <prvInitialiseTaskLists+0x6c>)
 8002a8a:	f7fe fd49 	bl	8001520 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a8e:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <prvInitialiseTaskLists+0x70>)
 8002a90:	f7fe fd46 	bl	8001520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a94:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <prvInitialiseTaskLists+0x74>)
 8002a96:	f7fe fd43 	bl	8001520 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <prvInitialiseTaskLists+0x78>)
 8002a9c:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <prvInitialiseTaskLists+0x64>)
 8002a9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <prvInitialiseTaskLists+0x7c>)
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <prvInitialiseTaskLists+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000770 	.word	0x20000770
 8002ab4:	200007d4 	.word	0x200007d4
 8002ab8:	200007e8 	.word	0x200007e8
 8002abc:	20000804 	.word	0x20000804
 8002ac0:	20000818 	.word	0x20000818
 8002ac4:	20000830 	.word	0x20000830
 8002ac8:	200007fc 	.word	0x200007fc
 8002acc:	20000800 	.word	0x20000800

08002ad0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ad6:	e019      	b.n	8002b0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ad8:	f000 fd98 	bl	800360c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002adc:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <prvCheckTasksWaitingTermination+0x4c>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fda3 	bl	8001634 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <prvCheckTasksWaitingTermination+0x50>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <prvCheckTasksWaitingTermination+0x50>)
 8002af6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <prvCheckTasksWaitingTermination+0x54>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <prvCheckTasksWaitingTermination+0x54>)
 8002b00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b02:	f000 fdb1 	bl	8003668 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f80e 	bl	8002b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <prvCheckTasksWaitingTermination+0x54>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e1      	bne.n	8002ad8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000818 	.word	0x20000818
 8002b20:	20000844 	.word	0x20000844
 8002b24:	2000082c 	.word	0x2000082c

08002b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 ff44 	bl	80039cc <vPortFree>
				vPortFree( pxTCB );
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 ff41 	bl	80039cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b4a:	e017      	b.n	8002b7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d103      	bne.n	8002b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 ff38 	bl	80039cc <vPortFree>
	}
 8002b5c:	e00e      	b.n	8002b7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d009      	beq.n	8002b7c <prvDeleteTCB+0x54>
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	e7fe      	b.n	8002b7a <prvDeleteTCB+0x52>
	}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <prvResetNextTaskUnblockTime+0x44>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <prvResetNextTaskUnblockTime+0x14>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <prvResetNextTaskUnblockTime+0x16>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <prvResetNextTaskUnblockTime+0x48>)
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ba6:	e008      	b.n	8002bba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <prvResetNextTaskUnblockTime+0x44>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <prvResetNextTaskUnblockTime+0x48>)
 8002bb8:	6013      	str	r3, [r2, #0]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	200007fc 	.word	0x200007fc
 8002bcc:	20000864 	.word	0x20000864

08002bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <xTaskGetSchedulerState+0x34>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002bde:	2301      	movs	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	e008      	b.n	8002bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <xTaskGetSchedulerState+0x38>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002bec:	2302      	movs	r3, #2
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	e001      	b.n	8002bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002bf6:	687b      	ldr	r3, [r7, #4]
	}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	20000850 	.word	0x20000850
 8002c08:	2000086c 	.word	0x2000086c

08002c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <xTaskPriorityDisinherit+0xfc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d009      	beq.n	8002c40 <xTaskPriorityDisinherit+0x34>
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	e7fe      	b.n	8002c3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <xTaskPriorityDisinherit+0x50>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60bb      	str	r3, [r7, #8]
 8002c5a:	e7fe      	b.n	8002c5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	1e5a      	subs	r2, r3, #1
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d044      	beq.n	8002cfc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d140      	bne.n	8002cfc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fcd8 	bl	8001634 <uxListRemove>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	491f      	ldr	r1, [pc, #124]	; (8002d0c <xTaskPriorityDisinherit+0x100>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xTaskPriorityDisinherit+0xaa>
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <xTaskPriorityDisinherit+0x104>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <xTaskPriorityDisinherit+0x104>)
 8002cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f1c3 0205 	rsb	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <xTaskPriorityDisinherit+0x104>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <xTaskPriorityDisinherit+0x104>)
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4a08      	ldr	r2, [pc, #32]	; (8002d0c <xTaskPriorityDisinherit+0x100>)
 8002cea:	441a      	add	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f7fe fc41 	bl	800157a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002cfc:	697b      	ldr	r3, [r7, #20]
	}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000076c 	.word	0x2000076c
 8002d0c:	20000770 	.word	0x20000770
 8002d10:	2000084c 	.word	0x2000084c

08002d14 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d1e:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fc82 	bl	8001634 <uxListRemove>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43da      	mvns	r2, r3
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d10a      	bne.n	8002d6c <prvAddCurrentTaskToDelayedList+0x58>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4619      	mov	r1, r3
 8002d64:	481a      	ldr	r0, [pc, #104]	; (8002dd0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d66:	f7fe fc08 	bl	800157a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d6a:	e026      	b.n	8002dba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d209      	bcs.n	8002d98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7fe fc16 	bl	80015c2 <vListInsert>
}
 8002d96:	e010      	b.n	8002dba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3304      	adds	r3, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7fe fc0c 	bl	80015c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d202      	bcs.n	8002dba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000848 	.word	0x20000848
 8002dc8:	2000076c 	.word	0x2000076c
 8002dcc:	2000084c 	.word	0x2000084c
 8002dd0:	20000830 	.word	0x20000830
 8002dd4:	20000800 	.word	0x20000800
 8002dd8:	200007fc 	.word	0x200007fc
 8002ddc:	20000864 	.word	0x20000864

08002de0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002dea:	f000 faa9 	bl	8003340 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <xTimerCreateTimerTask+0x80>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d021      	beq.n	8002e3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002dfe:	1d3a      	adds	r2, r7, #4
 8002e00:	f107 0108 	add.w	r1, r7, #8
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fb6f 	bl	80014ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	9202      	str	r2, [sp, #8]
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	460a      	mov	r2, r1
 8002e20:	4910      	ldr	r1, [pc, #64]	; (8002e64 <xTimerCreateTimerTask+0x84>)
 8002e22:	4811      	ldr	r0, [pc, #68]	; (8002e68 <xTimerCreateTimerTask+0x88>)
 8002e24:	f7ff f904 	bl	8002030 <xTaskCreateStatic>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <xTimerCreateTimerTask+0x8c>)
 8002e2c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <xTimerCreateTimerTask+0x8c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002e36:	2301      	movs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <xTimerCreateTimerTask+0x74>
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	e7fe      	b.n	8002e52 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8002e54:	697b      	ldr	r3, [r7, #20]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200008a0 	.word	0x200008a0
 8002e64:	08005108 	.word	0x08005108
 8002e68:	08002f89 	.word	0x08002f89
 8002e6c:	200008a4 	.word	0x200008a4

08002e70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d109      	bne.n	8002e9c <xTimerGenericCommand+0x2c>
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	623b      	str	r3, [r7, #32]
 8002e9a:	e7fe      	b.n	8002e9a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <xTimerGenericCommand+0x94>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02a      	beq.n	8002efa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	dc18      	bgt.n	8002ee8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eb6:	f7ff fe8b 	bl	8002bd0 <xTaskGetSchedulerState>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d109      	bne.n	8002ed4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xTimerGenericCommand+0x94>)
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	f107 0114 	add.w	r1, r7, #20
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ecc:	f7fe fcda 	bl	8001884 <xQueueGenericSend>
 8002ed0:	6278      	str	r0, [r7, #36]	; 0x24
 8002ed2:	e012      	b.n	8002efa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <xTimerGenericCommand+0x94>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f107 0114 	add.w	r1, r7, #20
 8002edc:	2300      	movs	r3, #0
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f7fe fcd0 	bl	8001884 <xQueueGenericSend>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ee6:	e008      	b.n	8002efa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <xTimerGenericCommand+0x94>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	f107 0114 	add.w	r1, r7, #20
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	f7fe fdc0 	bl	8001a78 <xQueueGenericSendFromISR>
 8002ef8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	200008a0 	.word	0x200008a0

08002f08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f12:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <prvProcessExpiredTimer+0x7c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fb87 	bl	8001634 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d121      	bne.n	8002f72 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	18d1      	adds	r1, r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	6978      	ldr	r0, [r7, #20]
 8002f3c:	f000 f8c8 	bl	80030d0 <prvInsertTimerInActiveList>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f46:	2300      	movs	r3, #0
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6978      	ldr	r0, [r7, #20]
 8002f52:	f7ff ff8d 	bl	8002e70 <xTimerGenericCommand>
 8002f56:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <prvProcessExpiredTimer+0x6a>
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e7fe      	b.n	8002f70 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	4798      	blx	r3
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000898 	.word	0x20000898

08002f88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 f857 	bl	8003048 <prvGetNextExpireTime>
 8002f9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f803 	bl	8002fac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002fa6:	f000 f8d5 	bl	8003154 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002faa:	e7f1      	b.n	8002f90 <prvTimerTask+0x8>

08002fac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002fb6:	f7ff fa31 	bl	800241c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f866 	bl	8003090 <prvSampleTimeNow>
 8002fc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d130      	bne.n	800302e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <prvProcessTimerOrBlockTask+0x3c>
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d806      	bhi.n	8002fe8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002fda:	f7ff fa2d 	bl	8002438 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff91 	bl	8002f08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002fe6:	e024      	b.n	8003032 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <prvProcessTimerOrBlockTask+0x90>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <prvProcessTimerOrBlockTask+0x94>)
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	f7fe ffdb 	bl	8001fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003012:	f7ff fa11 	bl	8002438 <xTaskResumeAll>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <prvProcessTimerOrBlockTask+0x98>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
}
 800302c:	e001      	b.n	8003032 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800302e:	f7ff fa03 	bl	8002438 <xTaskResumeAll>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000089c 	.word	0x2000089c
 8003040:	200008a0 	.word	0x200008a0
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <prvGetNextExpireTime+0x44>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <prvGetNextExpireTime+0x44>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	e001      	b.n	800307e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800307e:	68fb      	ldr	r3, [r7, #12]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000898 	.word	0x20000898

08003090 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003098:	f7ff fa6a 	bl	8002570 <xTaskGetTickCount>
 800309c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <prvSampleTimeNow+0x3c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d205      	bcs.n	80030b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80030a8:	f000 f8ea 	bl	8003280 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e002      	b.n	80030ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80030ba:	4a04      	ldr	r2, [pc, #16]	; (80030cc <prvSampleTimeNow+0x3c>)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200008a8 	.word	0x200008a8

080030d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d812      	bhi.n	800311c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	1ad2      	subs	r2, r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e01b      	b.n	8003142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <prvInsertTimerInActiveList+0x7c>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7fe fa54 	bl	80015c2 <vListInsert>
 800311a:	e012      	b.n	8003142 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d206      	bcs.n	8003132 <prvInsertTimerInActiveList+0x62>
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e007      	b.n	8003142 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <prvInsertTimerInActiveList+0x80>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f7fe fa40 	bl	80015c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003142:	697b      	ldr	r3, [r7, #20]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000089c 	.word	0x2000089c
 8003150:	20000898 	.word	0x20000898

08003154 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08c      	sub	sp, #48	; 0x30
 8003158:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800315a:	e07f      	b.n	800325c <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db7b      	blt.n	800325a <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	3304      	adds	r3, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fa5e 	bl	8001634 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ff88 	bl	8003090 <prvSampleTimeNow>
 8003180:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d869      	bhi.n	800325c <prvProcessReceivedCommands+0x108>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <prvProcessReceivedCommands+0x3c>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b9 	.word	0x080031b9
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031b9 	.word	0x080031b9
 800319c:	0800325d 	.word	0x0800325d
 80031a0:	08003213 	.word	0x08003213
 80031a4:	08003249 	.word	0x08003249
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031b9 	.word	0x080031b9
 80031b0:	0800325d 	.word	0x0800325d
 80031b4:	08003213 	.word	0x08003213
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	18d1      	adds	r1, r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a3a      	ldr	r2, [r7, #32]
 80031c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c6:	f7ff ff83 	bl	80030d0 <prvInsertTimerInActiveList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d045      	beq.n	800325c <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d13d      	bne.n	800325c <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	441a      	add	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2300      	movs	r3, #0
 80031ee:	2100      	movs	r1, #0
 80031f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031f2:	f7ff fe3d 	bl	8002e70 <xTimerGenericCommand>
 80031f6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d12e      	bne.n	800325c <prvProcessReceivedCommands+0x108>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	e7fe      	b.n	8003210 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <prvProcessReceivedCommands+0xe0>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e7fe      	b.n	8003232 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	18d1      	adds	r1, r2, r3
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	6a3a      	ldr	r2, [r7, #32]
 8003240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003242:	f7ff ff45 	bl	80030d0 <prvInsertTimerInActiveList>
					break;
 8003246:	e009      	b.n	800325c <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8003252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003254:	f000 fbba 	bl	80039cc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003258:	e000      	b.n	800325c <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800325a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <prvProcessReceivedCommands+0x128>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f107 0108 	add.w	r1, r7, #8
 8003264:	2200      	movs	r2, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fc9a 	bl	8001ba0 <xQueueReceive>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	f47f af74 	bne.w	800315c <prvProcessReceivedCommands+0x8>
	}
}
 8003274:	bf00      	nop
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	200008a0 	.word	0x200008a0

08003280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003286:	e044      	b.n	8003312 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <prvSwitchTimerLists+0xb8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003292:	4b29      	ldr	r3, [pc, #164]	; (8003338 <prvSwitchTimerLists+0xb8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3304      	adds	r3, #4
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe f9c7 	bl	8001634 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d12d      	bne.n	8003312 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4413      	add	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d90e      	bls.n	80032e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <prvSwitchTimerLists+0xb8>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fe f96f 	bl	80015c2 <vListInsert>
 80032e4:	e015      	b.n	8003312 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80032e6:	2300      	movs	r3, #0
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	2100      	movs	r1, #0
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fdbd 	bl	8002e70 <xTimerGenericCommand>
 80032f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <prvSwitchTimerLists+0x92>
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	e7fe      	b.n	8003310 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <prvSwitchTimerLists+0xb8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1b5      	bne.n	8003288 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <prvSwitchTimerLists+0xb8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <prvSwitchTimerLists+0xbc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <prvSwitchTimerLists+0xb8>)
 8003328:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <prvSwitchTimerLists+0xbc>)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000898 	.word	0x20000898
 800333c:	2000089c 	.word	0x2000089c

08003340 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003346:	f000 f961 	bl	800360c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <prvCheckForValidListAndQueue+0x60>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d120      	bne.n	8003394 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003352:	4814      	ldr	r0, [pc, #80]	; (80033a4 <prvCheckForValidListAndQueue+0x64>)
 8003354:	f7fe f8e4 	bl	8001520 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003358:	4813      	ldr	r0, [pc, #76]	; (80033a8 <prvCheckForValidListAndQueue+0x68>)
 800335a:	f7fe f8e1 	bl	8001520 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <prvCheckForValidListAndQueue+0x6c>)
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <prvCheckForValidListAndQueue+0x64>)
 8003362:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <prvCheckForValidListAndQueue+0x70>)
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <prvCheckForValidListAndQueue+0x68>)
 8003368:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <prvCheckForValidListAndQueue+0x74>)
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <prvCheckForValidListAndQueue+0x78>)
 8003372:	210c      	movs	r1, #12
 8003374:	200a      	movs	r0, #10
 8003376:	f7fe f9ef 	bl	8001758 <xQueueGenericCreateStatic>
 800337a:	4602      	mov	r2, r0
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <prvCheckForValidListAndQueue+0x60>)
 800337e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <prvCheckForValidListAndQueue+0x60>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <prvCheckForValidListAndQueue+0x60>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	490b      	ldr	r1, [pc, #44]	; (80033bc <prvCheckForValidListAndQueue+0x7c>)
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fdf2 	bl	8001f78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003394:	f000 f968 	bl	8003668 <vPortExitCritical>
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200008a0 	.word	0x200008a0
 80033a4:	20000870 	.word	0x20000870
 80033a8:	20000884 	.word	0x20000884
 80033ac:	20000898 	.word	0x20000898
 80033b0:	2000089c 	.word	0x2000089c
 80033b4:	20000924 	.word	0x20000924
 80033b8:	200008ac 	.word	0x200008ac
 80033bc:	08005110 	.word	0x08005110

080033c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b04      	subs	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b04      	subs	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b04      	subs	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033f0:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <pxPortInitialiseStack+0x64>)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b14      	subs	r3, #20
 80033fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b04      	subs	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f06f 0202 	mvn.w	r2, #2
 800340e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b20      	subs	r3, #32
 8003414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003416:	68fb      	ldr	r3, [r7, #12]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	08003429 	.word	0x08003429

08003428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <prvTaskExitError+0x50>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d009      	beq.n	8003450 <prvTaskExitError+0x28>
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e7fe      	b.n	800344e <prvTaskExitError+0x26>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003462:	bf00      	nop
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0fc      	beq.n	8003464 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000000c 	.word	0x2000000c
 800347c:	00000000 	.word	0x00000000

08003480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <pxCurrentTCBConst2>)
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	6808      	ldr	r0, [r1, #0]
 8003486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348a:	f380 8809 	msr	PSP, r0
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f380 8811 	msr	BASEPRI, r0
 800349a:	4770      	bx	lr
 800349c:	f3af 8000 	nop.w

080034a0 <pxCurrentTCBConst2>:
 80034a0:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop

080034a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034a8:	4808      	ldr	r0, [pc, #32]	; (80034cc <prvPortStartFirstTask+0x24>)
 80034aa:	6800      	ldr	r0, [r0, #0]
 80034ac:	6800      	ldr	r0, [r0, #0]
 80034ae:	f380 8808 	msr	MSP, r0
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f380 8814 	msr	CONTROL, r0
 80034ba:	b662      	cpsie	i
 80034bc:	b661      	cpsie	f
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	df00      	svc	0
 80034c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034ca:	bf00      	nop
 80034cc:	e000ed08 	.word	0xe000ed08

080034d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <xPortStartScheduler+0x118>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a44      	ldr	r2, [pc, #272]	; (80035ec <xPortStartScheduler+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d109      	bne.n	80034f4 <xPortStartScheduler+0x24>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	e7fe      	b.n	80034f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034f4:	4b3c      	ldr	r3, [pc, #240]	; (80035e8 <xPortStartScheduler+0x118>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <xPortStartScheduler+0x120>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d109      	bne.n	8003512 <xPortStartScheduler+0x42>
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e7fe      	b.n	8003510 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003512:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <xPortStartScheduler+0x124>)
 8003514:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <xPortStartScheduler+0x128>)
 8003538:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <xPortStartScheduler+0x12c>)
 800353c:	2207      	movs	r2, #7
 800353e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003540:	e009      	b.n	8003556 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <xPortStartScheduler+0x12c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <xPortStartScheduler+0x12c>)
 800354a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d0ef      	beq.n	8003542 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <xPortStartScheduler+0x12c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	d009      	beq.n	8003582 <xPortStartScheduler+0xb2>
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	e7fe      	b.n	8003580 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <xPortStartScheduler+0x12c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <xPortStartScheduler+0x12c>)
 800358a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <xPortStartScheduler+0x12c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <xPortStartScheduler+0x12c>)
 8003596:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <xPortStartScheduler+0x130>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a16      	ldr	r2, [pc, #88]	; (8003600 <xPortStartScheduler+0x130>)
 80035a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <xPortStartScheduler+0x130>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <xPortStartScheduler+0x130>)
 80035b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035b8:	f000 f8d6 	bl	8003768 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <xPortStartScheduler+0x134>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80035c2:	f000 f8f5 	bl	80037b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <xPortStartScheduler+0x138>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <xPortStartScheduler+0x138>)
 80035cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80035d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80035d2:	f7ff ff69 	bl	80034a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80035d6:	f7ff f897 	bl	8002708 <vTaskSwitchContext>
	prvTaskExitError();
 80035da:	f7ff ff25 	bl	8003428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000ed00 	.word	0xe000ed00
 80035ec:	410fc271 	.word	0x410fc271
 80035f0:	410fc270 	.word	0x410fc270
 80035f4:	e000e400 	.word	0xe000e400
 80035f8:	20000974 	.word	0x20000974
 80035fc:	20000978 	.word	0x20000978
 8003600:	e000ed20 	.word	0xe000ed20
 8003604:	2000000c 	.word	0x2000000c
 8003608:	e000ef34 	.word	0xe000ef34

0800360c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <vPortEnterCritical+0x54>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <vPortEnterCritical+0x54>)
 800362c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800362e:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <vPortEnterCritical+0x54>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10e      	bne.n	8003654 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <vPortEnterCritical+0x58>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <vPortEnterCritical+0x48>
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	e7fe      	b.n	8003652 <vPortEnterCritical+0x46>
	}
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	2000000c 	.word	0x2000000c
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <vPortExitCritical+0x4c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <vPortExitCritical+0x22>
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	607b      	str	r3, [r7, #4]
 8003688:	e7fe      	b.n	8003688 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <vPortExitCritical+0x4c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3b01      	subs	r3, #1
 8003690:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <vPortExitCritical+0x4c>)
 8003692:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003694:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <vPortExitCritical+0x4c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d104      	bne.n	80036a6 <vPortExitCritical+0x3e>
 800369c:	2300      	movs	r3, #0
 800369e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
	...

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4b15      	ldr	r3, [pc, #84]	; (8003720 <pxCurrentTCBConst>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	f01e 0f10 	tst.w	lr, #16
 80036d0:	bf08      	it	eq
 80036d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036da:	6010      	str	r0, [r2, #0]
 80036dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80036e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036e4:	f380 8811 	msr	BASEPRI, r0
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f7ff f80a 	bl	8002708 <vTaskSwitchContext>
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f380 8811 	msr	BASEPRI, r0
 80036fc:	bc09      	pop	{r0, r3}
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	6808      	ldr	r0, [r1, #0]
 8003702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003706:	f01e 0f10 	tst.w	lr, #16
 800370a:	bf08      	it	eq
 800370c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003710:	f380 8809 	msr	PSP, r0
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst>:
 8003720:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
	__asm volatile
 800372e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003740:	f7fe ff26 	bl	8002590 <xTaskIncrementTick>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <xPortSysTickHandler+0x3c>)
 800374c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <vPortSetupTimerInterrupt+0x34>)
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <vPortSetupTimerInterrupt+0x38>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <vPortSetupTimerInterrupt+0x3c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <vPortSetupTimerInterrupt+0x40>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	099b      	lsrs	r3, r3, #6
 8003784:	4a09      	ldr	r2, [pc, #36]	; (80037ac <vPortSetupTimerInterrupt+0x44>)
 8003786:	3b01      	subs	r3, #1
 8003788:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <vPortSetupTimerInterrupt+0x34>)
 800378c:	2207      	movs	r2, #7
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	e000e010 	.word	0xe000e010
 80037a0:	e000e018 	.word	0xe000e018
 80037a4:	20000000 	.word	0x20000000
 80037a8:	10624dd3 	.word	0x10624dd3
 80037ac:	e000e014 	.word	0xe000e014

080037b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037c0 <vPortEnableVFP+0x10>
 80037b4:	6801      	ldr	r1, [r0, #0]
 80037b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037ba:	6001      	str	r1, [r0, #0]
 80037bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037be:	bf00      	nop
 80037c0:	e000ed88 	.word	0xe000ed88

080037c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80037ca:	f3ef 8305 	mrs	r3, IPSR
 80037ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d913      	bls.n	80037fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <vPortValidateInterruptPriority+0x6c>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80037e0:	4b14      	ldr	r3, [pc, #80]	; (8003834 <vPortValidateInterruptPriority+0x70>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	7afa      	ldrb	r2, [r7, #11]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d209      	bcs.n	80037fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e7fe      	b.n	80037fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <vPortValidateInterruptPriority+0x74>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003806:	4b0d      	ldr	r3, [pc, #52]	; (800383c <vPortValidateInterruptPriority+0x78>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d909      	bls.n	8003822 <vPortValidateInterruptPriority+0x5e>
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	e7fe      	b.n	8003820 <vPortValidateInterruptPriority+0x5c>
	}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e3f0 	.word	0xe000e3f0
 8003834:	20000974 	.word	0x20000974
 8003838:	e000ed0c 	.word	0xe000ed0c
 800383c:	20000978 	.word	0x20000978

08003840 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800384c:	f7fe fde6 	bl	800241c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <pvPortMalloc+0x178>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003858:	f000 f910 	bl	8003a7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800385c:	4b57      	ldr	r3, [pc, #348]	; (80039bc <pvPortMalloc+0x17c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f040 808c 	bne.w	8003982 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01c      	beq.n	80038aa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003870:	2208      	movs	r2, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	2b00      	cmp	r3, #0
 8003880:	d013      	beq.n	80038aa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f023 0307 	bic.w	r3, r3, #7
 8003888:	3308      	adds	r3, #8
 800388a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <pvPortMalloc+0x6a>
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e7fe      	b.n	80038a8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d068      	beq.n	8003982 <pvPortMalloc+0x142>
 80038b0:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <pvPortMalloc+0x180>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d863      	bhi.n	8003982 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038ba:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <pvPortMalloc+0x184>)
 80038bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <pvPortMalloc+0x184>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038c4:	e004      	b.n	80038d0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d903      	bls.n	80038e2 <pvPortMalloc+0xa2>
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f1      	bne.n	80038c6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <pvPortMalloc+0x178>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d04a      	beq.n	8003982 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2208      	movs	r2, #8
 80038f2:	4413      	add	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad2      	subs	r2, r2, r3
 8003906:	2308      	movs	r3, #8
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	429a      	cmp	r2, r3
 800390c:	d91e      	bls.n	800394c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <pvPortMalloc+0xf4>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	e7fe      	b.n	8003932 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003946:	69b8      	ldr	r0, [r7, #24]
 8003948:	f000 f8fa 	bl	8003b40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <pvPortMalloc+0x180>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <pvPortMalloc+0x180>)
 8003958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <pvPortMalloc+0x180>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <pvPortMalloc+0x188>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d203      	bcs.n	800396e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <pvPortMalloc+0x180>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <pvPortMalloc+0x188>)
 800396c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4b12      	ldr	r3, [pc, #72]	; (80039bc <pvPortMalloc+0x17c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	431a      	orrs	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003982:	f7fe fd59 	bl	8002438 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800398c:	f7fd fd8d 	bl	80014aa <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <pvPortMalloc+0x16e>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e7fe      	b.n	80039ac <pvPortMalloc+0x16c>
	return pvReturn;
 80039ae:	69fb      	ldr	r3, [r7, #28]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20013584 	.word	0x20013584
 80039bc:	20013590 	.word	0x20013590
 80039c0:	20013588 	.word	0x20013588
 80039c4:	2001357c 	.word	0x2001357c
 80039c8:	2001358c 	.word	0x2001358c

080039cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d046      	beq.n	8003a6c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80039de:	2308      	movs	r3, #8
 80039e0:	425b      	negs	r3, r3
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4413      	add	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <vPortFree+0xa8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <vPortFree+0x42>
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e7fe      	b.n	8003a0c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <vPortFree+0x5e>
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	e7fe      	b.n	8003a28 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <vPortFree+0xa8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d019      	beq.n	8003a6c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d115      	bne.n	8003a6c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <vPortFree+0xa8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a50:	f7fe fce4 	bl	800241c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <vPortFree+0xac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <vPortFree+0xac>)
 8003a60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a62:	6938      	ldr	r0, [r7, #16]
 8003a64:	f000 f86c 	bl	8003b40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a68:	f7fe fce6 	bl	8002438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003a6c:	bf00      	nop
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20013590 	.word	0x20013590
 8003a78:	20013588 	.word	0x20013588

08003a7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a82:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <prvHeapInit+0xac>)
 8003a8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	4a1f      	ldr	r2, [pc, #124]	; (8003b28 <prvHeapInit+0xac>)
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <prvHeapInit+0xb0>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <prvHeapInit+0xb0>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ac8:	2208      	movs	r2, #8
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <prvHeapInit+0xb4>)
 8003adc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <prvHeapInit+0xb4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <prvHeapInit+0xb4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	1ad2      	subs	r2, r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <prvHeapInit+0xb4>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <prvHeapInit+0xb8>)
 8003b0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <prvHeapInit+0xbc>)
 8003b12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <prvHeapInit+0xc0>)
 8003b16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b1a:	601a      	str	r2, [r3, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	2000097c 	.word	0x2000097c
 8003b2c:	2001357c 	.word	0x2001357c
 8003b30:	20013584 	.word	0x20013584
 8003b34:	2001358c 	.word	0x2001358c
 8003b38:	20013588 	.word	0x20013588
 8003b3c:	20013590 	.word	0x20013590

08003b40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <prvInsertBlockIntoFreeList+0xac>)
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e002      	b.n	8003b54 <prvInsertBlockIntoFreeList+0x14>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d8f7      	bhi.n	8003b4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d108      	bne.n	8003b82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	441a      	add	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d118      	bne.n	8003bc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d00d      	beq.n	8003bbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	441a      	add	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e008      	b.n	8003bd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	; (8003bf0 <prvInsertBlockIntoFreeList+0xb0>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e003      	b.n	8003bd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d002      	beq.n	8003bde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2001357c 	.word	0x2001357c
 8003bf0:	20013584 	.word	0x20013584

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0d      	ldr	r6, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1ba4      	subs	r4, r4, r6
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2500      	movs	r5, #0
 8003c00:	42a5      	cmp	r5, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4e0b      	ldr	r6, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f001 fa46 	bl	8005098 <_init>
 8003c0c:	1ba4      	subs	r4, r4, r6
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2500      	movs	r5, #0
 8003c12:	42a5      	cmp	r5, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c1c:	4798      	blx	r3
 8003c1e:	3501      	adds	r5, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c26:	4798      	blx	r3
 8003c28:	3501      	adds	r5, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	080051e4 	.word	0x080051e4
 8003c30:	080051e4 	.word	0x080051e4
 8003c34:	080051e4 	.word	0x080051e4
 8003c38:	080051e8 	.word	0x080051e8

08003c3c <memcpy>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	1e43      	subs	r3, r0, #1
 8003c40:	440a      	add	r2, r1
 8003c42:	4291      	cmp	r1, r2
 8003c44:	d100      	bne.n	8003c48 <memcpy+0xc>
 8003c46:	bd10      	pop	{r4, pc}
 8003c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c50:	e7f7      	b.n	8003c42 <memcpy+0x6>

08003c52 <memset>:
 8003c52:	4402      	add	r2, r0
 8003c54:	4603      	mov	r3, r0
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d100      	bne.n	8003c5c <memset+0xa>
 8003c5a:	4770      	bx	lr
 8003c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c60:	e7f9      	b.n	8003c56 <memset+0x4>
	...

08003c64 <iprintf>:
 8003c64:	b40f      	push	{r0, r1, r2, r3}
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <iprintf+0x2c>)
 8003c68:	b513      	push	{r0, r1, r4, lr}
 8003c6a:	681c      	ldr	r4, [r3, #0]
 8003c6c:	b124      	cbz	r4, 8003c78 <iprintf+0x14>
 8003c6e:	69a3      	ldr	r3, [r4, #24]
 8003c70:	b913      	cbnz	r3, 8003c78 <iprintf+0x14>
 8003c72:	4620      	mov	r0, r4
 8003c74:	f000 fa22 	bl	80040bc <__sinit>
 8003c78:	ab05      	add	r3, sp, #20
 8003c7a:	9a04      	ldr	r2, [sp, #16]
 8003c7c:	68a1      	ldr	r1, [r4, #8]
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	4620      	mov	r0, r4
 8003c82:	f000 fbdb 	bl	800443c <_vfiprintf_r>
 8003c86:	b002      	add	sp, #8
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c8c:	b004      	add	sp, #16
 8003c8e:	4770      	bx	lr
 8003c90:	20000010 	.word	0x20000010

08003c94 <_puts_r>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	460e      	mov	r6, r1
 8003c98:	4605      	mov	r5, r0
 8003c9a:	b118      	cbz	r0, 8003ca4 <_puts_r+0x10>
 8003c9c:	6983      	ldr	r3, [r0, #24]
 8003c9e:	b90b      	cbnz	r3, 8003ca4 <_puts_r+0x10>
 8003ca0:	f000 fa0c 	bl	80040bc <__sinit>
 8003ca4:	69ab      	ldr	r3, [r5, #24]
 8003ca6:	68ac      	ldr	r4, [r5, #8]
 8003ca8:	b913      	cbnz	r3, 8003cb0 <_puts_r+0x1c>
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 fa06 	bl	80040bc <__sinit>
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <_puts_r+0xac>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d117      	bne.n	8003ce6 <_puts_r+0x52>
 8003cb6:	686c      	ldr	r4, [r5, #4]
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	071b      	lsls	r3, r3, #28
 8003cbc:	d51d      	bpl.n	8003cfa <_puts_r+0x66>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	b1db      	cbz	r3, 8003cfa <_puts_r+0x66>
 8003cc2:	3e01      	subs	r6, #1
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60a3      	str	r3, [r4, #8]
 8003cce:	b9e9      	cbnz	r1, 8003d0c <_puts_r+0x78>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da2e      	bge.n	8003d32 <_puts_r+0x9e>
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	210a      	movs	r1, #10
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f000 f83f 	bl	8003d5c <__swbuf_r>
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d011      	beq.n	8003d06 <_puts_r+0x72>
 8003ce2:	200a      	movs	r0, #10
 8003ce4:	e011      	b.n	8003d0a <_puts_r+0x76>
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <_puts_r+0xb0>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d101      	bne.n	8003cf0 <_puts_r+0x5c>
 8003cec:	68ac      	ldr	r4, [r5, #8]
 8003cee:	e7e3      	b.n	8003cb8 <_puts_r+0x24>
 8003cf0:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <_puts_r+0xb4>)
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	bf08      	it	eq
 8003cf6:	68ec      	ldreq	r4, [r5, #12]
 8003cf8:	e7de      	b.n	8003cb8 <_puts_r+0x24>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 f87f 	bl	8003e00 <__swsetup_r>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0dd      	beq.n	8003cc2 <_puts_r+0x2e>
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	da04      	bge.n	8003d1a <_puts_r+0x86>
 8003d10:	69a2      	ldr	r2, [r4, #24]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	dc06      	bgt.n	8003d24 <_puts_r+0x90>
 8003d16:	290a      	cmp	r1, #10
 8003d18:	d004      	beq.n	8003d24 <_puts_r+0x90>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	6022      	str	r2, [r4, #0]
 8003d20:	7019      	strb	r1, [r3, #0]
 8003d22:	e7cf      	b.n	8003cc4 <_puts_r+0x30>
 8003d24:	4622      	mov	r2, r4
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 f818 	bl	8003d5c <__swbuf_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d1c9      	bne.n	8003cc4 <_puts_r+0x30>
 8003d30:	e7e9      	b.n	8003d06 <_puts_r+0x72>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	200a      	movs	r0, #10
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	7018      	strb	r0, [r3, #0]
 8003d3c:	e7e5      	b.n	8003d0a <_puts_r+0x76>
 8003d3e:	bf00      	nop
 8003d40:	0800514c 	.word	0x0800514c
 8003d44:	0800516c 	.word	0x0800516c
 8003d48:	0800512c 	.word	0x0800512c

08003d4c <puts>:
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <puts+0xc>)
 8003d4e:	4601      	mov	r1, r0
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f7ff bf9f 	b.w	8003c94 <_puts_r>
 8003d56:	bf00      	nop
 8003d58:	20000010 	.word	0x20000010

08003d5c <__swbuf_r>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	460e      	mov	r6, r1
 8003d60:	4614      	mov	r4, r2
 8003d62:	4605      	mov	r5, r0
 8003d64:	b118      	cbz	r0, 8003d6e <__swbuf_r+0x12>
 8003d66:	6983      	ldr	r3, [r0, #24]
 8003d68:	b90b      	cbnz	r3, 8003d6e <__swbuf_r+0x12>
 8003d6a:	f000 f9a7 	bl	80040bc <__sinit>
 8003d6e:	4b21      	ldr	r3, [pc, #132]	; (8003df4 <__swbuf_r+0x98>)
 8003d70:	429c      	cmp	r4, r3
 8003d72:	d12a      	bne.n	8003dca <__swbuf_r+0x6e>
 8003d74:	686c      	ldr	r4, [r5, #4]
 8003d76:	69a3      	ldr	r3, [r4, #24]
 8003d78:	60a3      	str	r3, [r4, #8]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	071a      	lsls	r2, r3, #28
 8003d7e:	d52e      	bpl.n	8003dde <__swbuf_r+0x82>
 8003d80:	6923      	ldr	r3, [r4, #16]
 8003d82:	b363      	cbz	r3, 8003dde <__swbuf_r+0x82>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	6820      	ldr	r0, [r4, #0]
 8003d88:	1ac0      	subs	r0, r0, r3
 8003d8a:	6963      	ldr	r3, [r4, #20]
 8003d8c:	b2f6      	uxtb	r6, r6
 8003d8e:	4283      	cmp	r3, r0
 8003d90:	4637      	mov	r7, r6
 8003d92:	dc04      	bgt.n	8003d9e <__swbuf_r+0x42>
 8003d94:	4621      	mov	r1, r4
 8003d96:	4628      	mov	r0, r5
 8003d98:	f000 f926 	bl	8003fe8 <_fflush_r>
 8003d9c:	bb28      	cbnz	r0, 8003dea <__swbuf_r+0x8e>
 8003d9e:	68a3      	ldr	r3, [r4, #8]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	60a3      	str	r3, [r4, #8]
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	6022      	str	r2, [r4, #0]
 8003daa:	701e      	strb	r6, [r3, #0]
 8003dac:	6963      	ldr	r3, [r4, #20]
 8003dae:	3001      	adds	r0, #1
 8003db0:	4283      	cmp	r3, r0
 8003db2:	d004      	beq.n	8003dbe <__swbuf_r+0x62>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	07db      	lsls	r3, r3, #31
 8003db8:	d519      	bpl.n	8003dee <__swbuf_r+0x92>
 8003dba:	2e0a      	cmp	r6, #10
 8003dbc:	d117      	bne.n	8003dee <__swbuf_r+0x92>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f911 	bl	8003fe8 <_fflush_r>
 8003dc6:	b190      	cbz	r0, 8003dee <__swbuf_r+0x92>
 8003dc8:	e00f      	b.n	8003dea <__swbuf_r+0x8e>
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <__swbuf_r+0x9c>)
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d101      	bne.n	8003dd4 <__swbuf_r+0x78>
 8003dd0:	68ac      	ldr	r4, [r5, #8]
 8003dd2:	e7d0      	b.n	8003d76 <__swbuf_r+0x1a>
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <__swbuf_r+0xa0>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	bf08      	it	eq
 8003dda:	68ec      	ldreq	r4, [r5, #12]
 8003ddc:	e7cb      	b.n	8003d76 <__swbuf_r+0x1a>
 8003dde:	4621      	mov	r1, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f80d 	bl	8003e00 <__swsetup_r>
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d0cc      	beq.n	8003d84 <__swbuf_r+0x28>
 8003dea:	f04f 37ff 	mov.w	r7, #4294967295
 8003dee:	4638      	mov	r0, r7
 8003df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	0800514c 	.word	0x0800514c
 8003df8:	0800516c 	.word	0x0800516c
 8003dfc:	0800512c 	.word	0x0800512c

08003e00 <__swsetup_r>:
 8003e00:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <__swsetup_r+0xcc>)
 8003e02:	b570      	push	{r4, r5, r6, lr}
 8003e04:	681d      	ldr	r5, [r3, #0]
 8003e06:	4606      	mov	r6, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	b125      	cbz	r5, 8003e16 <__swsetup_r+0x16>
 8003e0c:	69ab      	ldr	r3, [r5, #24]
 8003e0e:	b913      	cbnz	r3, 8003e16 <__swsetup_r+0x16>
 8003e10:	4628      	mov	r0, r5
 8003e12:	f000 f953 	bl	80040bc <__sinit>
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <__swsetup_r+0xd0>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d10f      	bne.n	8003e3c <__swsetup_r+0x3c>
 8003e1c:	686c      	ldr	r4, [r5, #4]
 8003e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	0715      	lsls	r5, r2, #28
 8003e26:	d42c      	bmi.n	8003e82 <__swsetup_r+0x82>
 8003e28:	06d0      	lsls	r0, r2, #27
 8003e2a:	d411      	bmi.n	8003e50 <__swsetup_r+0x50>
 8003e2c:	2209      	movs	r2, #9
 8003e2e:	6032      	str	r2, [r6, #0]
 8003e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3a:	e03e      	b.n	8003eba <__swsetup_r+0xba>
 8003e3c:	4b25      	ldr	r3, [pc, #148]	; (8003ed4 <__swsetup_r+0xd4>)
 8003e3e:	429c      	cmp	r4, r3
 8003e40:	d101      	bne.n	8003e46 <__swsetup_r+0x46>
 8003e42:	68ac      	ldr	r4, [r5, #8]
 8003e44:	e7eb      	b.n	8003e1e <__swsetup_r+0x1e>
 8003e46:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <__swsetup_r+0xd8>)
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	bf08      	it	eq
 8003e4c:	68ec      	ldreq	r4, [r5, #12]
 8003e4e:	e7e6      	b.n	8003e1e <__swsetup_r+0x1e>
 8003e50:	0751      	lsls	r1, r2, #29
 8003e52:	d512      	bpl.n	8003e7a <__swsetup_r+0x7a>
 8003e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e56:	b141      	cbz	r1, 8003e6a <__swsetup_r+0x6a>
 8003e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	d002      	beq.n	8003e66 <__swsetup_r+0x66>
 8003e60:	4630      	mov	r0, r6
 8003e62:	f000 fa19 	bl	8004298 <_free_r>
 8003e66:	2300      	movs	r3, #0
 8003e68:	6363      	str	r3, [r4, #52]	; 0x34
 8003e6a:	89a3      	ldrh	r3, [r4, #12]
 8003e6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e70:	81a3      	strh	r3, [r4, #12]
 8003e72:	2300      	movs	r3, #0
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	81a3      	strh	r3, [r4, #12]
 8003e82:	6923      	ldr	r3, [r4, #16]
 8003e84:	b94b      	cbnz	r3, 8003e9a <__swsetup_r+0x9a>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d003      	beq.n	8003e9a <__swsetup_r+0x9a>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 f9bf 	bl	8004218 <__smakebuf_r>
 8003e9a:	89a2      	ldrh	r2, [r4, #12]
 8003e9c:	f012 0301 	ands.w	r3, r2, #1
 8003ea0:	d00c      	beq.n	8003ebc <__swsetup_r+0xbc>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	6963      	ldr	r3, [r4, #20]
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	61a3      	str	r3, [r4, #24]
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	b953      	cbnz	r3, 8003ec6 <__swsetup_r+0xc6>
 8003eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003eb8:	d1ba      	bne.n	8003e30 <__swsetup_r+0x30>
 8003eba:	bd70      	pop	{r4, r5, r6, pc}
 8003ebc:	0792      	lsls	r2, r2, #30
 8003ebe:	bf58      	it	pl
 8003ec0:	6963      	ldrpl	r3, [r4, #20]
 8003ec2:	60a3      	str	r3, [r4, #8]
 8003ec4:	e7f2      	b.n	8003eac <__swsetup_r+0xac>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7f7      	b.n	8003eba <__swsetup_r+0xba>
 8003eca:	bf00      	nop
 8003ecc:	20000010 	.word	0x20000010
 8003ed0:	0800514c 	.word	0x0800514c
 8003ed4:	0800516c 	.word	0x0800516c
 8003ed8:	0800512c 	.word	0x0800512c

08003edc <__sflush_r>:
 8003edc:	898a      	ldrh	r2, [r1, #12]
 8003ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	0710      	lsls	r0, r2, #28
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	d458      	bmi.n	8003f9c <__sflush_r+0xc0>
 8003eea:	684b      	ldr	r3, [r1, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dc05      	bgt.n	8003efc <__sflush_r+0x20>
 8003ef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dc02      	bgt.n	8003efc <__sflush_r+0x20>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003efe:	2e00      	cmp	r6, #0
 8003f00:	d0f9      	beq.n	8003ef6 <__sflush_r+0x1a>
 8003f02:	2300      	movs	r3, #0
 8003f04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f08:	682f      	ldr	r7, [r5, #0]
 8003f0a:	6a21      	ldr	r1, [r4, #32]
 8003f0c:	602b      	str	r3, [r5, #0]
 8003f0e:	d032      	beq.n	8003f76 <__sflush_r+0x9a>
 8003f10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	075a      	lsls	r2, r3, #29
 8003f16:	d505      	bpl.n	8003f24 <__sflush_r+0x48>
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	1ac0      	subs	r0, r0, r3
 8003f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f1e:	b10b      	cbz	r3, 8003f24 <__sflush_r+0x48>
 8003f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f22:	1ac0      	subs	r0, r0, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	4602      	mov	r2, r0
 8003f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f2a:	6a21      	ldr	r1, [r4, #32]
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b0      	blx	r6
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	d106      	bne.n	8003f44 <__sflush_r+0x68>
 8003f36:	6829      	ldr	r1, [r5, #0]
 8003f38:	291d      	cmp	r1, #29
 8003f3a:	d848      	bhi.n	8003fce <__sflush_r+0xf2>
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <__sflush_r+0x108>)
 8003f3e:	40ca      	lsrs	r2, r1
 8003f40:	07d6      	lsls	r6, r2, #31
 8003f42:	d544      	bpl.n	8003fce <__sflush_r+0xf2>
 8003f44:	2200      	movs	r2, #0
 8003f46:	6062      	str	r2, [r4, #4]
 8003f48:	04d9      	lsls	r1, r3, #19
 8003f4a:	6922      	ldr	r2, [r4, #16]
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	d504      	bpl.n	8003f5a <__sflush_r+0x7e>
 8003f50:	1c42      	adds	r2, r0, #1
 8003f52:	d101      	bne.n	8003f58 <__sflush_r+0x7c>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	b903      	cbnz	r3, 8003f5a <__sflush_r+0x7e>
 8003f58:	6560      	str	r0, [r4, #84]	; 0x54
 8003f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f5c:	602f      	str	r7, [r5, #0]
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	d0c9      	beq.n	8003ef6 <__sflush_r+0x1a>
 8003f62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d002      	beq.n	8003f70 <__sflush_r+0x94>
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 f994 	bl	8004298 <_free_r>
 8003f70:	2000      	movs	r0, #0
 8003f72:	6360      	str	r0, [r4, #52]	; 0x34
 8003f74:	e7c0      	b.n	8003ef8 <__sflush_r+0x1c>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b0      	blx	r6
 8003f7c:	1c41      	adds	r1, r0, #1
 8003f7e:	d1c8      	bne.n	8003f12 <__sflush_r+0x36>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0c5      	beq.n	8003f12 <__sflush_r+0x36>
 8003f86:	2b1d      	cmp	r3, #29
 8003f88:	d001      	beq.n	8003f8e <__sflush_r+0xb2>
 8003f8a:	2b16      	cmp	r3, #22
 8003f8c:	d101      	bne.n	8003f92 <__sflush_r+0xb6>
 8003f8e:	602f      	str	r7, [r5, #0]
 8003f90:	e7b1      	b.n	8003ef6 <__sflush_r+0x1a>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	e7ad      	b.n	8003ef8 <__sflush_r+0x1c>
 8003f9c:	690f      	ldr	r7, [r1, #16]
 8003f9e:	2f00      	cmp	r7, #0
 8003fa0:	d0a9      	beq.n	8003ef6 <__sflush_r+0x1a>
 8003fa2:	0793      	lsls	r3, r2, #30
 8003fa4:	680e      	ldr	r6, [r1, #0]
 8003fa6:	bf08      	it	eq
 8003fa8:	694b      	ldreq	r3, [r1, #20]
 8003faa:	600f      	str	r7, [r1, #0]
 8003fac:	bf18      	it	ne
 8003fae:	2300      	movne	r3, #0
 8003fb0:	eba6 0807 	sub.w	r8, r6, r7
 8003fb4:	608b      	str	r3, [r1, #8]
 8003fb6:	f1b8 0f00 	cmp.w	r8, #0
 8003fba:	dd9c      	ble.n	8003ef6 <__sflush_r+0x1a>
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	463a      	mov	r2, r7
 8003fc0:	6a21      	ldr	r1, [r4, #32]
 8003fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b0      	blx	r6
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	dc06      	bgt.n	8003fda <__sflush_r+0xfe>
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	e78e      	b.n	8003ef8 <__sflush_r+0x1c>
 8003fda:	4407      	add	r7, r0
 8003fdc:	eba8 0800 	sub.w	r8, r8, r0
 8003fe0:	e7e9      	b.n	8003fb6 <__sflush_r+0xda>
 8003fe2:	bf00      	nop
 8003fe4:	20400001 	.word	0x20400001

08003fe8 <_fflush_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	690b      	ldr	r3, [r1, #16]
 8003fec:	4605      	mov	r5, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	b1db      	cbz	r3, 800402a <_fflush_r+0x42>
 8003ff2:	b118      	cbz	r0, 8003ffc <_fflush_r+0x14>
 8003ff4:	6983      	ldr	r3, [r0, #24]
 8003ff6:	b90b      	cbnz	r3, 8003ffc <_fflush_r+0x14>
 8003ff8:	f000 f860 	bl	80040bc <__sinit>
 8003ffc:	4b0c      	ldr	r3, [pc, #48]	; (8004030 <_fflush_r+0x48>)
 8003ffe:	429c      	cmp	r4, r3
 8004000:	d109      	bne.n	8004016 <_fflush_r+0x2e>
 8004002:	686c      	ldr	r4, [r5, #4]
 8004004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004008:	b17b      	cbz	r3, 800402a <_fflush_r+0x42>
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004012:	f7ff bf63 	b.w	8003edc <__sflush_r>
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <_fflush_r+0x4c>)
 8004018:	429c      	cmp	r4, r3
 800401a:	d101      	bne.n	8004020 <_fflush_r+0x38>
 800401c:	68ac      	ldr	r4, [r5, #8]
 800401e:	e7f1      	b.n	8004004 <_fflush_r+0x1c>
 8004020:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_fflush_r+0x50>)
 8004022:	429c      	cmp	r4, r3
 8004024:	bf08      	it	eq
 8004026:	68ec      	ldreq	r4, [r5, #12]
 8004028:	e7ec      	b.n	8004004 <_fflush_r+0x1c>
 800402a:	2000      	movs	r0, #0
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	bf00      	nop
 8004030:	0800514c 	.word	0x0800514c
 8004034:	0800516c 	.word	0x0800516c
 8004038:	0800512c 	.word	0x0800512c

0800403c <std>:
 800403c:	2300      	movs	r3, #0
 800403e:	b510      	push	{r4, lr}
 8004040:	4604      	mov	r4, r0
 8004042:	e9c0 3300 	strd	r3, r3, [r0]
 8004046:	6083      	str	r3, [r0, #8]
 8004048:	8181      	strh	r1, [r0, #12]
 800404a:	6643      	str	r3, [r0, #100]	; 0x64
 800404c:	81c2      	strh	r2, [r0, #14]
 800404e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004052:	6183      	str	r3, [r0, #24]
 8004054:	4619      	mov	r1, r3
 8004056:	2208      	movs	r2, #8
 8004058:	305c      	adds	r0, #92	; 0x5c
 800405a:	f7ff fdfa 	bl	8003c52 <memset>
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <std+0x38>)
 8004060:	6263      	str	r3, [r4, #36]	; 0x24
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <std+0x3c>)
 8004064:	62a3      	str	r3, [r4, #40]	; 0x28
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <std+0x40>)
 8004068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <std+0x44>)
 800406c:	6224      	str	r4, [r4, #32]
 800406e:	6323      	str	r3, [r4, #48]	; 0x30
 8004070:	bd10      	pop	{r4, pc}
 8004072:	bf00      	nop
 8004074:	08004999 	.word	0x08004999
 8004078:	080049bb 	.word	0x080049bb
 800407c:	080049f3 	.word	0x080049f3
 8004080:	08004a17 	.word	0x08004a17

08004084 <_cleanup_r>:
 8004084:	4901      	ldr	r1, [pc, #4]	; (800408c <_cleanup_r+0x8>)
 8004086:	f000 b885 	b.w	8004194 <_fwalk_reent>
 800408a:	bf00      	nop
 800408c:	08003fe9 	.word	0x08003fe9

08004090 <__sfmoreglue>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	1e4a      	subs	r2, r1, #1
 8004094:	2568      	movs	r5, #104	; 0x68
 8004096:	4355      	muls	r5, r2
 8004098:	460e      	mov	r6, r1
 800409a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800409e:	f000 f949 	bl	8004334 <_malloc_r>
 80040a2:	4604      	mov	r4, r0
 80040a4:	b140      	cbz	r0, 80040b8 <__sfmoreglue+0x28>
 80040a6:	2100      	movs	r1, #0
 80040a8:	e9c0 1600 	strd	r1, r6, [r0]
 80040ac:	300c      	adds	r0, #12
 80040ae:	60a0      	str	r0, [r4, #8]
 80040b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040b4:	f7ff fdcd 	bl	8003c52 <memset>
 80040b8:	4620      	mov	r0, r4
 80040ba:	bd70      	pop	{r4, r5, r6, pc}

080040bc <__sinit>:
 80040bc:	6983      	ldr	r3, [r0, #24]
 80040be:	b510      	push	{r4, lr}
 80040c0:	4604      	mov	r4, r0
 80040c2:	bb33      	cbnz	r3, 8004112 <__sinit+0x56>
 80040c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80040c8:	6503      	str	r3, [r0, #80]	; 0x50
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <__sinit+0x58>)
 80040cc:	4a12      	ldr	r2, [pc, #72]	; (8004118 <__sinit+0x5c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6282      	str	r2, [r0, #40]	; 0x28
 80040d2:	4298      	cmp	r0, r3
 80040d4:	bf04      	itt	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	6183      	streq	r3, [r0, #24]
 80040da:	f000 f81f 	bl	800411c <__sfp>
 80040de:	6060      	str	r0, [r4, #4]
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 f81b 	bl	800411c <__sfp>
 80040e6:	60a0      	str	r0, [r4, #8]
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 f817 	bl	800411c <__sfp>
 80040ee:	2200      	movs	r2, #0
 80040f0:	60e0      	str	r0, [r4, #12]
 80040f2:	2104      	movs	r1, #4
 80040f4:	6860      	ldr	r0, [r4, #4]
 80040f6:	f7ff ffa1 	bl	800403c <std>
 80040fa:	2201      	movs	r2, #1
 80040fc:	2109      	movs	r1, #9
 80040fe:	68a0      	ldr	r0, [r4, #8]
 8004100:	f7ff ff9c 	bl	800403c <std>
 8004104:	2202      	movs	r2, #2
 8004106:	2112      	movs	r1, #18
 8004108:	68e0      	ldr	r0, [r4, #12]
 800410a:	f7ff ff97 	bl	800403c <std>
 800410e:	2301      	movs	r3, #1
 8004110:	61a3      	str	r3, [r4, #24]
 8004112:	bd10      	pop	{r4, pc}
 8004114:	08005128 	.word	0x08005128
 8004118:	08004085 	.word	0x08004085

0800411c <__sfp>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <__sfp+0x70>)
 8004120:	681e      	ldr	r6, [r3, #0]
 8004122:	69b3      	ldr	r3, [r6, #24]
 8004124:	4607      	mov	r7, r0
 8004126:	b913      	cbnz	r3, 800412e <__sfp+0x12>
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff ffc7 	bl	80040bc <__sinit>
 800412e:	3648      	adds	r6, #72	; 0x48
 8004130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004134:	3b01      	subs	r3, #1
 8004136:	d503      	bpl.n	8004140 <__sfp+0x24>
 8004138:	6833      	ldr	r3, [r6, #0]
 800413a:	b133      	cbz	r3, 800414a <__sfp+0x2e>
 800413c:	6836      	ldr	r6, [r6, #0]
 800413e:	e7f7      	b.n	8004130 <__sfp+0x14>
 8004140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004144:	b16d      	cbz	r5, 8004162 <__sfp+0x46>
 8004146:	3468      	adds	r4, #104	; 0x68
 8004148:	e7f4      	b.n	8004134 <__sfp+0x18>
 800414a:	2104      	movs	r1, #4
 800414c:	4638      	mov	r0, r7
 800414e:	f7ff ff9f 	bl	8004090 <__sfmoreglue>
 8004152:	6030      	str	r0, [r6, #0]
 8004154:	2800      	cmp	r0, #0
 8004156:	d1f1      	bne.n	800413c <__sfp+0x20>
 8004158:	230c      	movs	r3, #12
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4604      	mov	r4, r0
 800415e:	4620      	mov	r0, r4
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <__sfp+0x74>)
 8004164:	6665      	str	r5, [r4, #100]	; 0x64
 8004166:	e9c4 5500 	strd	r5, r5, [r4]
 800416a:	60a5      	str	r5, [r4, #8]
 800416c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004170:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004174:	2208      	movs	r2, #8
 8004176:	4629      	mov	r1, r5
 8004178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800417c:	f7ff fd69 	bl	8003c52 <memset>
 8004180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004188:	e7e9      	b.n	800415e <__sfp+0x42>
 800418a:	bf00      	nop
 800418c:	08005128 	.word	0x08005128
 8004190:	ffff0001 	.word	0xffff0001

08004194 <_fwalk_reent>:
 8004194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004198:	4680      	mov	r8, r0
 800419a:	4689      	mov	r9, r1
 800419c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041a0:	2600      	movs	r6, #0
 80041a2:	b914      	cbnz	r4, 80041aa <_fwalk_reent+0x16>
 80041a4:	4630      	mov	r0, r6
 80041a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80041ae:	3f01      	subs	r7, #1
 80041b0:	d501      	bpl.n	80041b6 <_fwalk_reent+0x22>
 80041b2:	6824      	ldr	r4, [r4, #0]
 80041b4:	e7f5      	b.n	80041a2 <_fwalk_reent+0xe>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d907      	bls.n	80041cc <_fwalk_reent+0x38>
 80041bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041c0:	3301      	adds	r3, #1
 80041c2:	d003      	beq.n	80041cc <_fwalk_reent+0x38>
 80041c4:	4629      	mov	r1, r5
 80041c6:	4640      	mov	r0, r8
 80041c8:	47c8      	blx	r9
 80041ca:	4306      	orrs	r6, r0
 80041cc:	3568      	adds	r5, #104	; 0x68
 80041ce:	e7ee      	b.n	80041ae <_fwalk_reent+0x1a>

080041d0 <__swhatbuf_r>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	460e      	mov	r6, r1
 80041d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d8:	2900      	cmp	r1, #0
 80041da:	b096      	sub	sp, #88	; 0x58
 80041dc:	4614      	mov	r4, r2
 80041de:	461d      	mov	r5, r3
 80041e0:	da07      	bge.n	80041f2 <__swhatbuf_r+0x22>
 80041e2:	2300      	movs	r3, #0
 80041e4:	602b      	str	r3, [r5, #0]
 80041e6:	89b3      	ldrh	r3, [r6, #12]
 80041e8:	061a      	lsls	r2, r3, #24
 80041ea:	d410      	bmi.n	800420e <__swhatbuf_r+0x3e>
 80041ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f0:	e00e      	b.n	8004210 <__swhatbuf_r+0x40>
 80041f2:	466a      	mov	r2, sp
 80041f4:	f000 fc36 	bl	8004a64 <_fstat_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	dbf2      	blt.n	80041e2 <__swhatbuf_r+0x12>
 80041fc:	9a01      	ldr	r2, [sp, #4]
 80041fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004206:	425a      	negs	r2, r3
 8004208:	415a      	adcs	r2, r3
 800420a:	602a      	str	r2, [r5, #0]
 800420c:	e7ee      	b.n	80041ec <__swhatbuf_r+0x1c>
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	2000      	movs	r0, #0
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	b016      	add	sp, #88	; 0x58
 8004216:	bd70      	pop	{r4, r5, r6, pc}

08004218 <__smakebuf_r>:
 8004218:	898b      	ldrh	r3, [r1, #12]
 800421a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800421c:	079d      	lsls	r5, r3, #30
 800421e:	4606      	mov	r6, r0
 8004220:	460c      	mov	r4, r1
 8004222:	d507      	bpl.n	8004234 <__smakebuf_r+0x1c>
 8004224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	2301      	movs	r3, #1
 800422e:	6163      	str	r3, [r4, #20]
 8004230:	b002      	add	sp, #8
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	ab01      	add	r3, sp, #4
 8004236:	466a      	mov	r2, sp
 8004238:	f7ff ffca 	bl	80041d0 <__swhatbuf_r>
 800423c:	9900      	ldr	r1, [sp, #0]
 800423e:	4605      	mov	r5, r0
 8004240:	4630      	mov	r0, r6
 8004242:	f000 f877 	bl	8004334 <_malloc_r>
 8004246:	b948      	cbnz	r0, 800425c <__smakebuf_r+0x44>
 8004248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424c:	059a      	lsls	r2, r3, #22
 800424e:	d4ef      	bmi.n	8004230 <__smakebuf_r+0x18>
 8004250:	f023 0303 	bic.w	r3, r3, #3
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	e7e3      	b.n	8004224 <__smakebuf_r+0xc>
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <__smakebuf_r+0x7c>)
 800425e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	6020      	str	r0, [r4, #0]
 8004264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	9b00      	ldr	r3, [sp, #0]
 800426c:	6163      	str	r3, [r4, #20]
 800426e:	9b01      	ldr	r3, [sp, #4]
 8004270:	6120      	str	r0, [r4, #16]
 8004272:	b15b      	cbz	r3, 800428c <__smakebuf_r+0x74>
 8004274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004278:	4630      	mov	r0, r6
 800427a:	f000 fc05 	bl	8004a88 <_isatty_r>
 800427e:	b128      	cbz	r0, 800428c <__smakebuf_r+0x74>
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	81a3      	strh	r3, [r4, #12]
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	431d      	orrs	r5, r3
 8004290:	81a5      	strh	r5, [r4, #12]
 8004292:	e7cd      	b.n	8004230 <__smakebuf_r+0x18>
 8004294:	08004085 	.word	0x08004085

08004298 <_free_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4605      	mov	r5, r0
 800429c:	2900      	cmp	r1, #0
 800429e:	d045      	beq.n	800432c <_free_r+0x94>
 80042a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a4:	1f0c      	subs	r4, r1, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfb8      	it	lt
 80042aa:	18e4      	addlt	r4, r4, r3
 80042ac:	f000 fc0e 	bl	8004acc <__malloc_lock>
 80042b0:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <_free_r+0x98>)
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	4610      	mov	r0, r2
 80042b6:	b933      	cbnz	r3, 80042c6 <_free_r+0x2e>
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	6014      	str	r4, [r2, #0]
 80042bc:	4628      	mov	r0, r5
 80042be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042c2:	f000 bc04 	b.w	8004ace <__malloc_unlock>
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d90c      	bls.n	80042e4 <_free_r+0x4c>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	1862      	adds	r2, r4, r1
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bf04      	itt	eq
 80042d2:	681a      	ldreq	r2, [r3, #0]
 80042d4:	685b      	ldreq	r3, [r3, #4]
 80042d6:	6063      	str	r3, [r4, #4]
 80042d8:	bf04      	itt	eq
 80042da:	1852      	addeq	r2, r2, r1
 80042dc:	6022      	streq	r2, [r4, #0]
 80042de:	6004      	str	r4, [r0, #0]
 80042e0:	e7ec      	b.n	80042bc <_free_r+0x24>
 80042e2:	4613      	mov	r3, r2
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	b10a      	cbz	r2, 80042ec <_free_r+0x54>
 80042e8:	42a2      	cmp	r2, r4
 80042ea:	d9fa      	bls.n	80042e2 <_free_r+0x4a>
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	1858      	adds	r0, r3, r1
 80042f0:	42a0      	cmp	r0, r4
 80042f2:	d10b      	bne.n	800430c <_free_r+0x74>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	4401      	add	r1, r0
 80042f8:	1858      	adds	r0, r3, r1
 80042fa:	4282      	cmp	r2, r0
 80042fc:	6019      	str	r1, [r3, #0]
 80042fe:	d1dd      	bne.n	80042bc <_free_r+0x24>
 8004300:	6810      	ldr	r0, [r2, #0]
 8004302:	6852      	ldr	r2, [r2, #4]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	4401      	add	r1, r0
 8004308:	6019      	str	r1, [r3, #0]
 800430a:	e7d7      	b.n	80042bc <_free_r+0x24>
 800430c:	d902      	bls.n	8004314 <_free_r+0x7c>
 800430e:	230c      	movs	r3, #12
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	e7d3      	b.n	80042bc <_free_r+0x24>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	1821      	adds	r1, r4, r0
 8004318:	428a      	cmp	r2, r1
 800431a:	bf04      	itt	eq
 800431c:	6811      	ldreq	r1, [r2, #0]
 800431e:	6852      	ldreq	r2, [r2, #4]
 8004320:	6062      	str	r2, [r4, #4]
 8004322:	bf04      	itt	eq
 8004324:	1809      	addeq	r1, r1, r0
 8004326:	6021      	streq	r1, [r4, #0]
 8004328:	605c      	str	r4, [r3, #4]
 800432a:	e7c7      	b.n	80042bc <_free_r+0x24>
 800432c:	bd38      	pop	{r3, r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	20013594 	.word	0x20013594

08004334 <_malloc_r>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	1ccd      	adds	r5, r1, #3
 8004338:	f025 0503 	bic.w	r5, r5, #3
 800433c:	3508      	adds	r5, #8
 800433e:	2d0c      	cmp	r5, #12
 8004340:	bf38      	it	cc
 8004342:	250c      	movcc	r5, #12
 8004344:	2d00      	cmp	r5, #0
 8004346:	4606      	mov	r6, r0
 8004348:	db01      	blt.n	800434e <_malloc_r+0x1a>
 800434a:	42a9      	cmp	r1, r5
 800434c:	d903      	bls.n	8004356 <_malloc_r+0x22>
 800434e:	230c      	movs	r3, #12
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	2000      	movs	r0, #0
 8004354:	bd70      	pop	{r4, r5, r6, pc}
 8004356:	f000 fbb9 	bl	8004acc <__malloc_lock>
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <_malloc_r+0xac>)
 800435c:	6814      	ldr	r4, [r2, #0]
 800435e:	4621      	mov	r1, r4
 8004360:	b991      	cbnz	r1, 8004388 <_malloc_r+0x54>
 8004362:	4c20      	ldr	r4, [pc, #128]	; (80043e4 <_malloc_r+0xb0>)
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	b91b      	cbnz	r3, 8004370 <_malloc_r+0x3c>
 8004368:	4630      	mov	r0, r6
 800436a:	f000 fb05 	bl	8004978 <_sbrk_r>
 800436e:	6020      	str	r0, [r4, #0]
 8004370:	4629      	mov	r1, r5
 8004372:	4630      	mov	r0, r6
 8004374:	f000 fb00 	bl	8004978 <_sbrk_r>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d124      	bne.n	80043c6 <_malloc_r+0x92>
 800437c:	230c      	movs	r3, #12
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	4630      	mov	r0, r6
 8004382:	f000 fba4 	bl	8004ace <__malloc_unlock>
 8004386:	e7e4      	b.n	8004352 <_malloc_r+0x1e>
 8004388:	680b      	ldr	r3, [r1, #0]
 800438a:	1b5b      	subs	r3, r3, r5
 800438c:	d418      	bmi.n	80043c0 <_malloc_r+0x8c>
 800438e:	2b0b      	cmp	r3, #11
 8004390:	d90f      	bls.n	80043b2 <_malloc_r+0x7e>
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	50cd      	str	r5, [r1, r3]
 8004396:	18cc      	adds	r4, r1, r3
 8004398:	4630      	mov	r0, r6
 800439a:	f000 fb98 	bl	8004ace <__malloc_unlock>
 800439e:	f104 000b 	add.w	r0, r4, #11
 80043a2:	1d23      	adds	r3, r4, #4
 80043a4:	f020 0007 	bic.w	r0, r0, #7
 80043a8:	1ac3      	subs	r3, r0, r3
 80043aa:	d0d3      	beq.n	8004354 <_malloc_r+0x20>
 80043ac:	425a      	negs	r2, r3
 80043ae:	50e2      	str	r2, [r4, r3]
 80043b0:	e7d0      	b.n	8004354 <_malloc_r+0x20>
 80043b2:	428c      	cmp	r4, r1
 80043b4:	684b      	ldr	r3, [r1, #4]
 80043b6:	bf16      	itet	ne
 80043b8:	6063      	strne	r3, [r4, #4]
 80043ba:	6013      	streq	r3, [r2, #0]
 80043bc:	460c      	movne	r4, r1
 80043be:	e7eb      	b.n	8004398 <_malloc_r+0x64>
 80043c0:	460c      	mov	r4, r1
 80043c2:	6849      	ldr	r1, [r1, #4]
 80043c4:	e7cc      	b.n	8004360 <_malloc_r+0x2c>
 80043c6:	1cc4      	adds	r4, r0, #3
 80043c8:	f024 0403 	bic.w	r4, r4, #3
 80043cc:	42a0      	cmp	r0, r4
 80043ce:	d005      	beq.n	80043dc <_malloc_r+0xa8>
 80043d0:	1a21      	subs	r1, r4, r0
 80043d2:	4630      	mov	r0, r6
 80043d4:	f000 fad0 	bl	8004978 <_sbrk_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d0cf      	beq.n	800437c <_malloc_r+0x48>
 80043dc:	6025      	str	r5, [r4, #0]
 80043de:	e7db      	b.n	8004398 <_malloc_r+0x64>
 80043e0:	20013594 	.word	0x20013594
 80043e4:	20013598 	.word	0x20013598

080043e8 <__sfputc_r>:
 80043e8:	6893      	ldr	r3, [r2, #8]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	b410      	push	{r4}
 80043f0:	6093      	str	r3, [r2, #8]
 80043f2:	da08      	bge.n	8004406 <__sfputc_r+0x1e>
 80043f4:	6994      	ldr	r4, [r2, #24]
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	db01      	blt.n	80043fe <__sfputc_r+0x16>
 80043fa:	290a      	cmp	r1, #10
 80043fc:	d103      	bne.n	8004406 <__sfputc_r+0x1e>
 80043fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004402:	f7ff bcab 	b.w	8003d5c <__swbuf_r>
 8004406:	6813      	ldr	r3, [r2, #0]
 8004408:	1c58      	adds	r0, r3, #1
 800440a:	6010      	str	r0, [r2, #0]
 800440c:	7019      	strb	r1, [r3, #0]
 800440e:	4608      	mov	r0, r1
 8004410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004414:	4770      	bx	lr

08004416 <__sfputs_r>:
 8004416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004418:	4606      	mov	r6, r0
 800441a:	460f      	mov	r7, r1
 800441c:	4614      	mov	r4, r2
 800441e:	18d5      	adds	r5, r2, r3
 8004420:	42ac      	cmp	r4, r5
 8004422:	d101      	bne.n	8004428 <__sfputs_r+0x12>
 8004424:	2000      	movs	r0, #0
 8004426:	e007      	b.n	8004438 <__sfputs_r+0x22>
 8004428:	463a      	mov	r2, r7
 800442a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442e:	4630      	mov	r0, r6
 8004430:	f7ff ffda 	bl	80043e8 <__sfputc_r>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d1f3      	bne.n	8004420 <__sfputs_r+0xa>
 8004438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800443c <_vfiprintf_r>:
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	460c      	mov	r4, r1
 8004442:	b09d      	sub	sp, #116	; 0x74
 8004444:	4617      	mov	r7, r2
 8004446:	461d      	mov	r5, r3
 8004448:	4606      	mov	r6, r0
 800444a:	b118      	cbz	r0, 8004454 <_vfiprintf_r+0x18>
 800444c:	6983      	ldr	r3, [r0, #24]
 800444e:	b90b      	cbnz	r3, 8004454 <_vfiprintf_r+0x18>
 8004450:	f7ff fe34 	bl	80040bc <__sinit>
 8004454:	4b7c      	ldr	r3, [pc, #496]	; (8004648 <_vfiprintf_r+0x20c>)
 8004456:	429c      	cmp	r4, r3
 8004458:	d158      	bne.n	800450c <_vfiprintf_r+0xd0>
 800445a:	6874      	ldr	r4, [r6, #4]
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	0718      	lsls	r0, r3, #28
 8004460:	d55e      	bpl.n	8004520 <_vfiprintf_r+0xe4>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d05b      	beq.n	8004520 <_vfiprintf_r+0xe4>
 8004468:	2300      	movs	r3, #0
 800446a:	9309      	str	r3, [sp, #36]	; 0x24
 800446c:	2320      	movs	r3, #32
 800446e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004472:	2330      	movs	r3, #48	; 0x30
 8004474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004478:	9503      	str	r5, [sp, #12]
 800447a:	f04f 0b01 	mov.w	fp, #1
 800447e:	46b8      	mov	r8, r7
 8004480:	4645      	mov	r5, r8
 8004482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004486:	b10b      	cbz	r3, 800448c <_vfiprintf_r+0x50>
 8004488:	2b25      	cmp	r3, #37	; 0x25
 800448a:	d154      	bne.n	8004536 <_vfiprintf_r+0xfa>
 800448c:	ebb8 0a07 	subs.w	sl, r8, r7
 8004490:	d00b      	beq.n	80044aa <_vfiprintf_r+0x6e>
 8004492:	4653      	mov	r3, sl
 8004494:	463a      	mov	r2, r7
 8004496:	4621      	mov	r1, r4
 8004498:	4630      	mov	r0, r6
 800449a:	f7ff ffbc 	bl	8004416 <__sfputs_r>
 800449e:	3001      	adds	r0, #1
 80044a0:	f000 80c2 	beq.w	8004628 <_vfiprintf_r+0x1ec>
 80044a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044a6:	4453      	add	r3, sl
 80044a8:	9309      	str	r3, [sp, #36]	; 0x24
 80044aa:	f898 3000 	ldrb.w	r3, [r8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80ba 	beq.w	8004628 <_vfiprintf_r+0x1ec>
 80044b4:	2300      	movs	r3, #0
 80044b6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044be:	9304      	str	r3, [sp, #16]
 80044c0:	9307      	str	r3, [sp, #28]
 80044c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c6:	931a      	str	r3, [sp, #104]	; 0x68
 80044c8:	46a8      	mov	r8, r5
 80044ca:	2205      	movs	r2, #5
 80044cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80044d0:	485e      	ldr	r0, [pc, #376]	; (800464c <_vfiprintf_r+0x210>)
 80044d2:	f7fb fe8d 	bl	80001f0 <memchr>
 80044d6:	9b04      	ldr	r3, [sp, #16]
 80044d8:	bb78      	cbnz	r0, 800453a <_vfiprintf_r+0xfe>
 80044da:	06d9      	lsls	r1, r3, #27
 80044dc:	bf44      	itt	mi
 80044de:	2220      	movmi	r2, #32
 80044e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044e4:	071a      	lsls	r2, r3, #28
 80044e6:	bf44      	itt	mi
 80044e8:	222b      	movmi	r2, #43	; 0x2b
 80044ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80044ee:	782a      	ldrb	r2, [r5, #0]
 80044f0:	2a2a      	cmp	r2, #42	; 0x2a
 80044f2:	d02a      	beq.n	800454a <_vfiprintf_r+0x10e>
 80044f4:	9a07      	ldr	r2, [sp, #28]
 80044f6:	46a8      	mov	r8, r5
 80044f8:	2000      	movs	r0, #0
 80044fa:	250a      	movs	r5, #10
 80044fc:	4641      	mov	r1, r8
 80044fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004502:	3b30      	subs	r3, #48	; 0x30
 8004504:	2b09      	cmp	r3, #9
 8004506:	d969      	bls.n	80045dc <_vfiprintf_r+0x1a0>
 8004508:	b360      	cbz	r0, 8004564 <_vfiprintf_r+0x128>
 800450a:	e024      	b.n	8004556 <_vfiprintf_r+0x11a>
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <_vfiprintf_r+0x214>)
 800450e:	429c      	cmp	r4, r3
 8004510:	d101      	bne.n	8004516 <_vfiprintf_r+0xda>
 8004512:	68b4      	ldr	r4, [r6, #8]
 8004514:	e7a2      	b.n	800445c <_vfiprintf_r+0x20>
 8004516:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <_vfiprintf_r+0x218>)
 8004518:	429c      	cmp	r4, r3
 800451a:	bf08      	it	eq
 800451c:	68f4      	ldreq	r4, [r6, #12]
 800451e:	e79d      	b.n	800445c <_vfiprintf_r+0x20>
 8004520:	4621      	mov	r1, r4
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff fc6c 	bl	8003e00 <__swsetup_r>
 8004528:	2800      	cmp	r0, #0
 800452a:	d09d      	beq.n	8004468 <_vfiprintf_r+0x2c>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	b01d      	add	sp, #116	; 0x74
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	46a8      	mov	r8, r5
 8004538:	e7a2      	b.n	8004480 <_vfiprintf_r+0x44>
 800453a:	4a44      	ldr	r2, [pc, #272]	; (800464c <_vfiprintf_r+0x210>)
 800453c:	1a80      	subs	r0, r0, r2
 800453e:	fa0b f000 	lsl.w	r0, fp, r0
 8004542:	4318      	orrs	r0, r3
 8004544:	9004      	str	r0, [sp, #16]
 8004546:	4645      	mov	r5, r8
 8004548:	e7be      	b.n	80044c8 <_vfiprintf_r+0x8c>
 800454a:	9a03      	ldr	r2, [sp, #12]
 800454c:	1d11      	adds	r1, r2, #4
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	9103      	str	r1, [sp, #12]
 8004552:	2a00      	cmp	r2, #0
 8004554:	db01      	blt.n	800455a <_vfiprintf_r+0x11e>
 8004556:	9207      	str	r2, [sp, #28]
 8004558:	e004      	b.n	8004564 <_vfiprintf_r+0x128>
 800455a:	4252      	negs	r2, r2
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	9207      	str	r2, [sp, #28]
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	f898 3000 	ldrb.w	r3, [r8]
 8004568:	2b2e      	cmp	r3, #46	; 0x2e
 800456a:	d10e      	bne.n	800458a <_vfiprintf_r+0x14e>
 800456c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004570:	2b2a      	cmp	r3, #42	; 0x2a
 8004572:	d138      	bne.n	80045e6 <_vfiprintf_r+0x1aa>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	1d1a      	adds	r2, r3, #4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	9203      	str	r2, [sp, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	bfb8      	it	lt
 8004580:	f04f 33ff 	movlt.w	r3, #4294967295
 8004584:	f108 0802 	add.w	r8, r8, #2
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	4d33      	ldr	r5, [pc, #204]	; (8004658 <_vfiprintf_r+0x21c>)
 800458c:	f898 1000 	ldrb.w	r1, [r8]
 8004590:	2203      	movs	r2, #3
 8004592:	4628      	mov	r0, r5
 8004594:	f7fb fe2c 	bl	80001f0 <memchr>
 8004598:	b140      	cbz	r0, 80045ac <_vfiprintf_r+0x170>
 800459a:	2340      	movs	r3, #64	; 0x40
 800459c:	1b40      	subs	r0, r0, r5
 800459e:	fa03 f000 	lsl.w	r0, r3, r0
 80045a2:	9b04      	ldr	r3, [sp, #16]
 80045a4:	4303      	orrs	r3, r0
 80045a6:	f108 0801 	add.w	r8, r8, #1
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	f898 1000 	ldrb.w	r1, [r8]
 80045b0:	482a      	ldr	r0, [pc, #168]	; (800465c <_vfiprintf_r+0x220>)
 80045b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b6:	2206      	movs	r2, #6
 80045b8:	f108 0701 	add.w	r7, r8, #1
 80045bc:	f7fb fe18 	bl	80001f0 <memchr>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d037      	beq.n	8004634 <_vfiprintf_r+0x1f8>
 80045c4:	4b26      	ldr	r3, [pc, #152]	; (8004660 <_vfiprintf_r+0x224>)
 80045c6:	bb1b      	cbnz	r3, 8004610 <_vfiprintf_r+0x1d4>
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	3307      	adds	r3, #7
 80045cc:	f023 0307 	bic.w	r3, r3, #7
 80045d0:	3308      	adds	r3, #8
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d6:	444b      	add	r3, r9
 80045d8:	9309      	str	r3, [sp, #36]	; 0x24
 80045da:	e750      	b.n	800447e <_vfiprintf_r+0x42>
 80045dc:	fb05 3202 	mla	r2, r5, r2, r3
 80045e0:	2001      	movs	r0, #1
 80045e2:	4688      	mov	r8, r1
 80045e4:	e78a      	b.n	80044fc <_vfiprintf_r+0xc0>
 80045e6:	2300      	movs	r3, #0
 80045e8:	f108 0801 	add.w	r8, r8, #1
 80045ec:	9305      	str	r3, [sp, #20]
 80045ee:	4619      	mov	r1, r3
 80045f0:	250a      	movs	r5, #10
 80045f2:	4640      	mov	r0, r8
 80045f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f8:	3a30      	subs	r2, #48	; 0x30
 80045fa:	2a09      	cmp	r2, #9
 80045fc:	d903      	bls.n	8004606 <_vfiprintf_r+0x1ca>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0c3      	beq.n	800458a <_vfiprintf_r+0x14e>
 8004602:	9105      	str	r1, [sp, #20]
 8004604:	e7c1      	b.n	800458a <_vfiprintf_r+0x14e>
 8004606:	fb05 2101 	mla	r1, r5, r1, r2
 800460a:	2301      	movs	r3, #1
 800460c:	4680      	mov	r8, r0
 800460e:	e7f0      	b.n	80045f2 <_vfiprintf_r+0x1b6>
 8004610:	ab03      	add	r3, sp, #12
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4622      	mov	r2, r4
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <_vfiprintf_r+0x228>)
 8004618:	a904      	add	r1, sp, #16
 800461a:	4630      	mov	r0, r6
 800461c:	f3af 8000 	nop.w
 8004620:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004624:	4681      	mov	r9, r0
 8004626:	d1d5      	bne.n	80045d4 <_vfiprintf_r+0x198>
 8004628:	89a3      	ldrh	r3, [r4, #12]
 800462a:	065b      	lsls	r3, r3, #25
 800462c:	f53f af7e 	bmi.w	800452c <_vfiprintf_r+0xf0>
 8004630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004632:	e77d      	b.n	8004530 <_vfiprintf_r+0xf4>
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	4622      	mov	r2, r4
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <_vfiprintf_r+0x228>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	4630      	mov	r0, r6
 8004640:	f000 f888 	bl	8004754 <_printf_i>
 8004644:	e7ec      	b.n	8004620 <_vfiprintf_r+0x1e4>
 8004646:	bf00      	nop
 8004648:	0800514c 	.word	0x0800514c
 800464c:	0800518c 	.word	0x0800518c
 8004650:	0800516c 	.word	0x0800516c
 8004654:	0800512c 	.word	0x0800512c
 8004658:	08005192 	.word	0x08005192
 800465c:	08005196 	.word	0x08005196
 8004660:	00000000 	.word	0x00000000
 8004664:	08004417 	.word	0x08004417

08004668 <_printf_common>:
 8004668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	4691      	mov	r9, r2
 800466e:	461f      	mov	r7, r3
 8004670:	688a      	ldr	r2, [r1, #8]
 8004672:	690b      	ldr	r3, [r1, #16]
 8004674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004678:	4293      	cmp	r3, r2
 800467a:	bfb8      	it	lt
 800467c:	4613      	movlt	r3, r2
 800467e:	f8c9 3000 	str.w	r3, [r9]
 8004682:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004686:	4606      	mov	r6, r0
 8004688:	460c      	mov	r4, r1
 800468a:	b112      	cbz	r2, 8004692 <_printf_common+0x2a>
 800468c:	3301      	adds	r3, #1
 800468e:	f8c9 3000 	str.w	r3, [r9]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	0699      	lsls	r1, r3, #26
 8004696:	bf42      	ittt	mi
 8004698:	f8d9 3000 	ldrmi.w	r3, [r9]
 800469c:	3302      	addmi	r3, #2
 800469e:	f8c9 3000 	strmi.w	r3, [r9]
 80046a2:	6825      	ldr	r5, [r4, #0]
 80046a4:	f015 0506 	ands.w	r5, r5, #6
 80046a8:	d107      	bne.n	80046ba <_printf_common+0x52>
 80046aa:	f104 0a19 	add.w	sl, r4, #25
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	f8d9 2000 	ldr.w	r2, [r9]
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	42ab      	cmp	r3, r5
 80046b8:	dc28      	bgt.n	800470c <_printf_common+0xa4>
 80046ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	3300      	adds	r3, #0
 80046c2:	bf18      	it	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	0692      	lsls	r2, r2, #26
 80046c8:	d42d      	bmi.n	8004726 <_printf_common+0xbe>
 80046ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ce:	4639      	mov	r1, r7
 80046d0:	4630      	mov	r0, r6
 80046d2:	47c0      	blx	r8
 80046d4:	3001      	adds	r0, #1
 80046d6:	d020      	beq.n	800471a <_printf_common+0xb2>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	68e5      	ldr	r5, [r4, #12]
 80046dc:	f8d9 2000 	ldr.w	r2, [r9]
 80046e0:	f003 0306 	and.w	r3, r3, #6
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	bf08      	it	eq
 80046e8:	1aad      	subeq	r5, r5, r2
 80046ea:	68a3      	ldr	r3, [r4, #8]
 80046ec:	6922      	ldr	r2, [r4, #16]
 80046ee:	bf0c      	ite	eq
 80046f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f4:	2500      	movne	r5, #0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfc4      	itt	gt
 80046fa:	1a9b      	subgt	r3, r3, r2
 80046fc:	18ed      	addgt	r5, r5, r3
 80046fe:	f04f 0900 	mov.w	r9, #0
 8004702:	341a      	adds	r4, #26
 8004704:	454d      	cmp	r5, r9
 8004706:	d11a      	bne.n	800473e <_printf_common+0xd6>
 8004708:	2000      	movs	r0, #0
 800470a:	e008      	b.n	800471e <_printf_common+0xb6>
 800470c:	2301      	movs	r3, #1
 800470e:	4652      	mov	r2, sl
 8004710:	4639      	mov	r1, r7
 8004712:	4630      	mov	r0, r6
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d103      	bne.n	8004722 <_printf_common+0xba>
 800471a:	f04f 30ff 	mov.w	r0, #4294967295
 800471e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004722:	3501      	adds	r5, #1
 8004724:	e7c3      	b.n	80046ae <_printf_common+0x46>
 8004726:	18e1      	adds	r1, r4, r3
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	2030      	movs	r0, #48	; 0x30
 800472c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004730:	4422      	add	r2, r4
 8004732:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004736:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800473a:	3302      	adds	r3, #2
 800473c:	e7c5      	b.n	80046ca <_printf_common+0x62>
 800473e:	2301      	movs	r3, #1
 8004740:	4622      	mov	r2, r4
 8004742:	4639      	mov	r1, r7
 8004744:	4630      	mov	r0, r6
 8004746:	47c0      	blx	r8
 8004748:	3001      	adds	r0, #1
 800474a:	d0e6      	beq.n	800471a <_printf_common+0xb2>
 800474c:	f109 0901 	add.w	r9, r9, #1
 8004750:	e7d8      	b.n	8004704 <_printf_common+0x9c>
	...

08004754 <_printf_i>:
 8004754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004758:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800475c:	460c      	mov	r4, r1
 800475e:	7e09      	ldrb	r1, [r1, #24]
 8004760:	b085      	sub	sp, #20
 8004762:	296e      	cmp	r1, #110	; 0x6e
 8004764:	4617      	mov	r7, r2
 8004766:	4606      	mov	r6, r0
 8004768:	4698      	mov	r8, r3
 800476a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800476c:	f000 80b3 	beq.w	80048d6 <_printf_i+0x182>
 8004770:	d822      	bhi.n	80047b8 <_printf_i+0x64>
 8004772:	2963      	cmp	r1, #99	; 0x63
 8004774:	d036      	beq.n	80047e4 <_printf_i+0x90>
 8004776:	d80a      	bhi.n	800478e <_printf_i+0x3a>
 8004778:	2900      	cmp	r1, #0
 800477a:	f000 80b9 	beq.w	80048f0 <_printf_i+0x19c>
 800477e:	2958      	cmp	r1, #88	; 0x58
 8004780:	f000 8083 	beq.w	800488a <_printf_i+0x136>
 8004784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004788:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800478c:	e032      	b.n	80047f4 <_printf_i+0xa0>
 800478e:	2964      	cmp	r1, #100	; 0x64
 8004790:	d001      	beq.n	8004796 <_printf_i+0x42>
 8004792:	2969      	cmp	r1, #105	; 0x69
 8004794:	d1f6      	bne.n	8004784 <_printf_i+0x30>
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	0605      	lsls	r5, r0, #24
 800479c:	f103 0104 	add.w	r1, r3, #4
 80047a0:	d52a      	bpl.n	80047f8 <_printf_i+0xa4>
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da03      	bge.n	80047b2 <_printf_i+0x5e>
 80047aa:	222d      	movs	r2, #45	; 0x2d
 80047ac:	425b      	negs	r3, r3
 80047ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047b2:	486f      	ldr	r0, [pc, #444]	; (8004970 <_printf_i+0x21c>)
 80047b4:	220a      	movs	r2, #10
 80047b6:	e039      	b.n	800482c <_printf_i+0xd8>
 80047b8:	2973      	cmp	r1, #115	; 0x73
 80047ba:	f000 809d 	beq.w	80048f8 <_printf_i+0x1a4>
 80047be:	d808      	bhi.n	80047d2 <_printf_i+0x7e>
 80047c0:	296f      	cmp	r1, #111	; 0x6f
 80047c2:	d020      	beq.n	8004806 <_printf_i+0xb2>
 80047c4:	2970      	cmp	r1, #112	; 0x70
 80047c6:	d1dd      	bne.n	8004784 <_printf_i+0x30>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f043 0320 	orr.w	r3, r3, #32
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	e003      	b.n	80047da <_printf_i+0x86>
 80047d2:	2975      	cmp	r1, #117	; 0x75
 80047d4:	d017      	beq.n	8004806 <_printf_i+0xb2>
 80047d6:	2978      	cmp	r1, #120	; 0x78
 80047d8:	d1d4      	bne.n	8004784 <_printf_i+0x30>
 80047da:	2378      	movs	r3, #120	; 0x78
 80047dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e0:	4864      	ldr	r0, [pc, #400]	; (8004974 <_printf_i+0x220>)
 80047e2:	e055      	b.n	8004890 <_printf_i+0x13c>
 80047e4:	6813      	ldr	r3, [r2, #0]
 80047e6:	1d19      	adds	r1, r3, #4
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6011      	str	r1, [r2, #0]
 80047ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f4:	2301      	movs	r3, #1
 80047f6:	e08c      	b.n	8004912 <_printf_i+0x1be>
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6011      	str	r1, [r2, #0]
 80047fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004800:	bf18      	it	ne
 8004802:	b21b      	sxthne	r3, r3
 8004804:	e7cf      	b.n	80047a6 <_printf_i+0x52>
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	1d18      	adds	r0, r3, #4
 800480c:	6010      	str	r0, [r2, #0]
 800480e:	0628      	lsls	r0, r5, #24
 8004810:	d501      	bpl.n	8004816 <_printf_i+0xc2>
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	e002      	b.n	800481c <_printf_i+0xc8>
 8004816:	0668      	lsls	r0, r5, #25
 8004818:	d5fb      	bpl.n	8004812 <_printf_i+0xbe>
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4854      	ldr	r0, [pc, #336]	; (8004970 <_printf_i+0x21c>)
 800481e:	296f      	cmp	r1, #111	; 0x6f
 8004820:	bf14      	ite	ne
 8004822:	220a      	movne	r2, #10
 8004824:	2208      	moveq	r2, #8
 8004826:	2100      	movs	r1, #0
 8004828:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800482c:	6865      	ldr	r5, [r4, #4]
 800482e:	60a5      	str	r5, [r4, #8]
 8004830:	2d00      	cmp	r5, #0
 8004832:	f2c0 8095 	blt.w	8004960 <_printf_i+0x20c>
 8004836:	6821      	ldr	r1, [r4, #0]
 8004838:	f021 0104 	bic.w	r1, r1, #4
 800483c:	6021      	str	r1, [r4, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d13d      	bne.n	80048be <_printf_i+0x16a>
 8004842:	2d00      	cmp	r5, #0
 8004844:	f040 808e 	bne.w	8004964 <_printf_i+0x210>
 8004848:	4665      	mov	r5, ip
 800484a:	2a08      	cmp	r2, #8
 800484c:	d10b      	bne.n	8004866 <_printf_i+0x112>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	07db      	lsls	r3, r3, #31
 8004852:	d508      	bpl.n	8004866 <_printf_i+0x112>
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	bfde      	ittt	le
 800485c:	2330      	movle	r3, #48	; 0x30
 800485e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004862:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004866:	ebac 0305 	sub.w	r3, ip, r5
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	f8cd 8000 	str.w	r8, [sp]
 8004870:	463b      	mov	r3, r7
 8004872:	aa03      	add	r2, sp, #12
 8004874:	4621      	mov	r1, r4
 8004876:	4630      	mov	r0, r6
 8004878:	f7ff fef6 	bl	8004668 <_printf_common>
 800487c:	3001      	adds	r0, #1
 800487e:	d14d      	bne.n	800491c <_printf_i+0x1c8>
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	b005      	add	sp, #20
 8004886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800488a:	4839      	ldr	r0, [pc, #228]	; (8004970 <_printf_i+0x21c>)
 800488c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004890:	6813      	ldr	r3, [r2, #0]
 8004892:	6821      	ldr	r1, [r4, #0]
 8004894:	1d1d      	adds	r5, r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6015      	str	r5, [r2, #0]
 800489a:	060a      	lsls	r2, r1, #24
 800489c:	d50b      	bpl.n	80048b6 <_printf_i+0x162>
 800489e:	07ca      	lsls	r2, r1, #31
 80048a0:	bf44      	itt	mi
 80048a2:	f041 0120 	orrmi.w	r1, r1, #32
 80048a6:	6021      	strmi	r1, [r4, #0]
 80048a8:	b91b      	cbnz	r3, 80048b2 <_printf_i+0x15e>
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	f022 0220 	bic.w	r2, r2, #32
 80048b0:	6022      	str	r2, [r4, #0]
 80048b2:	2210      	movs	r2, #16
 80048b4:	e7b7      	b.n	8004826 <_printf_i+0xd2>
 80048b6:	064d      	lsls	r5, r1, #25
 80048b8:	bf48      	it	mi
 80048ba:	b29b      	uxthmi	r3, r3
 80048bc:	e7ef      	b.n	800489e <_printf_i+0x14a>
 80048be:	4665      	mov	r5, ip
 80048c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80048c4:	fb02 3311 	mls	r3, r2, r1, r3
 80048c8:	5cc3      	ldrb	r3, [r0, r3]
 80048ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048ce:	460b      	mov	r3, r1
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d1f5      	bne.n	80048c0 <_printf_i+0x16c>
 80048d4:	e7b9      	b.n	800484a <_printf_i+0xf6>
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	6825      	ldr	r5, [r4, #0]
 80048da:	6961      	ldr	r1, [r4, #20]
 80048dc:	1d18      	adds	r0, r3, #4
 80048de:	6010      	str	r0, [r2, #0]
 80048e0:	0628      	lsls	r0, r5, #24
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	d501      	bpl.n	80048ea <_printf_i+0x196>
 80048e6:	6019      	str	r1, [r3, #0]
 80048e8:	e002      	b.n	80048f0 <_printf_i+0x19c>
 80048ea:	066a      	lsls	r2, r5, #25
 80048ec:	d5fb      	bpl.n	80048e6 <_printf_i+0x192>
 80048ee:	8019      	strh	r1, [r3, #0]
 80048f0:	2300      	movs	r3, #0
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	4665      	mov	r5, ip
 80048f6:	e7b9      	b.n	800486c <_printf_i+0x118>
 80048f8:	6813      	ldr	r3, [r2, #0]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	681d      	ldr	r5, [r3, #0]
 8004900:	6862      	ldr	r2, [r4, #4]
 8004902:	2100      	movs	r1, #0
 8004904:	4628      	mov	r0, r5
 8004906:	f7fb fc73 	bl	80001f0 <memchr>
 800490a:	b108      	cbz	r0, 8004910 <_printf_i+0x1bc>
 800490c:	1b40      	subs	r0, r0, r5
 800490e:	6060      	str	r0, [r4, #4]
 8004910:	6863      	ldr	r3, [r4, #4]
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	2300      	movs	r3, #0
 8004916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800491a:	e7a7      	b.n	800486c <_printf_i+0x118>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	462a      	mov	r2, r5
 8004920:	4639      	mov	r1, r7
 8004922:	4630      	mov	r0, r6
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d0aa      	beq.n	8004880 <_printf_i+0x12c>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	079b      	lsls	r3, r3, #30
 800492e:	d413      	bmi.n	8004958 <_printf_i+0x204>
 8004930:	68e0      	ldr	r0, [r4, #12]
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	4298      	cmp	r0, r3
 8004936:	bfb8      	it	lt
 8004938:	4618      	movlt	r0, r3
 800493a:	e7a3      	b.n	8004884 <_printf_i+0x130>
 800493c:	2301      	movs	r3, #1
 800493e:	464a      	mov	r2, r9
 8004940:	4639      	mov	r1, r7
 8004942:	4630      	mov	r0, r6
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d09a      	beq.n	8004880 <_printf_i+0x12c>
 800494a:	3501      	adds	r5, #1
 800494c:	68e3      	ldr	r3, [r4, #12]
 800494e:	9a03      	ldr	r2, [sp, #12]
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	42ab      	cmp	r3, r5
 8004954:	dcf2      	bgt.n	800493c <_printf_i+0x1e8>
 8004956:	e7eb      	b.n	8004930 <_printf_i+0x1dc>
 8004958:	2500      	movs	r5, #0
 800495a:	f104 0919 	add.w	r9, r4, #25
 800495e:	e7f5      	b.n	800494c <_printf_i+0x1f8>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ac      	bne.n	80048be <_printf_i+0x16a>
 8004964:	7803      	ldrb	r3, [r0, #0]
 8004966:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800496a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800496e:	e76c      	b.n	800484a <_printf_i+0xf6>
 8004970:	0800519d 	.word	0x0800519d
 8004974:	080051ae 	.word	0x080051ae

08004978 <_sbrk_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4c06      	ldr	r4, [pc, #24]	; (8004994 <_sbrk_r+0x1c>)
 800497c:	2300      	movs	r3, #0
 800497e:	4605      	mov	r5, r0
 8004980:	4608      	mov	r0, r1
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	f000 f9bc 	bl	8004d00 <_sbrk>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_sbrk_r+0x1a>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	b103      	cbz	r3, 8004992 <_sbrk_r+0x1a>
 8004990:	602b      	str	r3, [r5, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	20013690 	.word	0x20013690

08004998 <__sread>:
 8004998:	b510      	push	{r4, lr}
 800499a:	460c      	mov	r4, r1
 800499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a0:	f000 f896 	bl	8004ad0 <_read_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	bfab      	itete	ge
 80049a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049aa:	89a3      	ldrhlt	r3, [r4, #12]
 80049ac:	181b      	addge	r3, r3, r0
 80049ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049b2:	bfac      	ite	ge
 80049b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049b6:	81a3      	strhlt	r3, [r4, #12]
 80049b8:	bd10      	pop	{r4, pc}

080049ba <__swrite>:
 80049ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	461f      	mov	r7, r3
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	05db      	lsls	r3, r3, #23
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	4616      	mov	r6, r2
 80049ca:	d505      	bpl.n	80049d8 <__swrite+0x1e>
 80049cc:	2302      	movs	r3, #2
 80049ce:	2200      	movs	r2, #0
 80049d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d4:	f000 f868 	bl	8004aa8 <_lseek_r>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	4628      	mov	r0, r5
 80049ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	f000 b817 	b.w	8004a20 <_write_r>

080049f2 <__sseek>:
 80049f2:	b510      	push	{r4, lr}
 80049f4:	460c      	mov	r4, r1
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 f855 	bl	8004aa8 <_lseek_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	bf15      	itete	ne
 8004a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a0e:	81a3      	strheq	r3, [r4, #12]
 8004a10:	bf18      	it	ne
 8004a12:	81a3      	strhne	r3, [r4, #12]
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <__sclose>:
 8004a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1a:	f000 b813 	b.w	8004a44 <_close_r>
	...

08004a20 <_write_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4c07      	ldr	r4, [pc, #28]	; (8004a40 <_write_r+0x20>)
 8004a24:	4605      	mov	r5, r0
 8004a26:	4608      	mov	r0, r1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	6022      	str	r2, [r4, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f000 f911 	bl	8004c56 <_write>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_write_r+0x1e>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_write_r+0x1e>
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20013690 	.word	0x20013690

08004a44 <_close_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4c06      	ldr	r4, [pc, #24]	; (8004a60 <_close_r+0x1c>)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	4608      	mov	r0, r1
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	f000 f930 	bl	8004cb4 <_close>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_close_r+0x1a>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_close_r+0x1a>
 8004a5c:	602b      	str	r3, [r5, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	20013690 	.word	0x20013690

08004a64 <_fstat_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	4c07      	ldr	r4, [pc, #28]	; (8004a84 <_fstat_r+0x20>)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	f000 f98a 	bl	8004d8a <_fstat>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d102      	bne.n	8004a80 <_fstat_r+0x1c>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	b103      	cbz	r3, 8004a80 <_fstat_r+0x1c>
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	bf00      	nop
 8004a84:	20013690 	.word	0x20013690

08004a88 <_isatty_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4c06      	ldr	r4, [pc, #24]	; (8004aa4 <_isatty_r+0x1c>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4605      	mov	r5, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	f000 fade 	bl	8005054 <_isatty>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_isatty_r+0x1a>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_isatty_r+0x1a>
 8004aa0:	602b      	str	r3, [r5, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20013690 	.word	0x20013690

08004aa8 <_lseek_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4c07      	ldr	r4, [pc, #28]	; (8004ac8 <_lseek_r+0x20>)
 8004aac:	4605      	mov	r5, r0
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	6022      	str	r2, [r4, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 f8bb 	bl	8004c32 <_lseek>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_lseek_r+0x1e>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_lseek_r+0x1e>
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20013690 	.word	0x20013690

08004acc <__malloc_lock>:
 8004acc:	4770      	bx	lr

08004ace <__malloc_unlock>:
 8004ace:	4770      	bx	lr

08004ad0 <_read_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4c07      	ldr	r4, [pc, #28]	; (8004af0 <_read_r+0x20>)
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	6022      	str	r2, [r4, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f000 f850 	bl	8004b84 <_read>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_read_r+0x1e>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_read_r+0x1e>
 8004aec:	602b      	str	r3, [r5, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20013690 	.word	0x20013690

08004af4 <findslot>:
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <findslot+0x2c>)
 8004af6:	b510      	push	{r4, lr}
 8004af8:	4604      	mov	r4, r0
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	b118      	cbz	r0, 8004b06 <findslot+0x12>
 8004afe:	6983      	ldr	r3, [r0, #24]
 8004b00:	b90b      	cbnz	r3, 8004b06 <findslot+0x12>
 8004b02:	f7ff fadb 	bl	80040bc <__sinit>
 8004b06:	2c13      	cmp	r4, #19
 8004b08:	d807      	bhi.n	8004b1a <findslot+0x26>
 8004b0a:	4806      	ldr	r0, [pc, #24]	; (8004b24 <findslot+0x30>)
 8004b0c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8004b10:	3301      	adds	r3, #1
 8004b12:	d002      	beq.n	8004b1a <findslot+0x26>
 8004b14:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e7fc      	b.n	8004b18 <findslot+0x24>
 8004b1e:	bf00      	nop
 8004b20:	20000010 	.word	0x20000010
 8004b24:	200135ac 	.word	0x200135ac

08004b28 <checkerror>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	1c43      	adds	r3, r0, #1
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	d109      	bne.n	8004b44 <checkerror+0x1c>
 8004b30:	f000 faac 	bl	800508c <__errno>
 8004b34:	2413      	movs	r4, #19
 8004b36:	4606      	mov	r6, r0
 8004b38:	2700      	movs	r7, #0
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	beab      	bkpt	0x00ab
 8004b40:	4604      	mov	r4, r0
 8004b42:	6034      	str	r4, [r6, #0]
 8004b44:	4628      	mov	r0, r5
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b48 <error>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	f000 fa9e 	bl	800508c <__errno>
 8004b50:	2413      	movs	r4, #19
 8004b52:	4606      	mov	r6, r0
 8004b54:	2700      	movs	r7, #0
 8004b56:	4620      	mov	r0, r4
 8004b58:	4639      	mov	r1, r7
 8004b5a:	beab      	bkpt	0x00ab
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	6034      	str	r4, [r6, #0]
 8004b60:	4628      	mov	r0, r5
 8004b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b64 <_swiread>:
 8004b64:	b530      	push	{r4, r5, lr}
 8004b66:	b085      	sub	sp, #20
 8004b68:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b6c:	9203      	str	r2, [sp, #12]
 8004b6e:	2406      	movs	r4, #6
 8004b70:	ad01      	add	r5, sp, #4
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	beab      	bkpt	0x00ab
 8004b78:	4604      	mov	r4, r0
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	f7ff ffd4 	bl	8004b28 <checkerror>
 8004b80:	b005      	add	sp, #20
 8004b82:	bd30      	pop	{r4, r5, pc}

08004b84 <_read>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	460e      	mov	r6, r1
 8004b88:	4615      	mov	r5, r2
 8004b8a:	f7ff ffb3 	bl	8004af4 <findslot>
 8004b8e:	4604      	mov	r4, r0
 8004b90:	b930      	cbnz	r0, 8004ba0 <_read+0x1c>
 8004b92:	f000 fa7b 	bl	800508c <__errno>
 8004b96:	2309      	movs	r3, #9
 8004b98:	6003      	str	r3, [r0, #0]
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	6800      	ldr	r0, [r0, #0]
 8004ba6:	f7ff ffdd 	bl	8004b64 <_swiread>
 8004baa:	1c43      	adds	r3, r0, #1
 8004bac:	bf1f      	itttt	ne
 8004bae:	6863      	ldrne	r3, [r4, #4]
 8004bb0:	1a28      	subne	r0, r5, r0
 8004bb2:	181b      	addne	r3, r3, r0
 8004bb4:	6063      	strne	r3, [r4, #4]
 8004bb6:	e7f2      	b.n	8004b9e <_read+0x1a>

08004bb8 <_swilseek>:
 8004bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bba:	460c      	mov	r4, r1
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	f7ff ff99 	bl	8004af4 <findslot>
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	b940      	cbnz	r0, 8004bd8 <_swilseek+0x20>
 8004bc6:	f000 fa61 	bl	800508c <__errno>
 8004bca:	2309      	movs	r3, #9
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	f04f 34ff 	mov.w	r4, #4294967295
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	b003      	add	sp, #12
 8004bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd8:	2e02      	cmp	r6, #2
 8004bda:	d903      	bls.n	8004be4 <_swilseek+0x2c>
 8004bdc:	f000 fa56 	bl	800508c <__errno>
 8004be0:	2316      	movs	r3, #22
 8004be2:	e7f3      	b.n	8004bcc <_swilseek+0x14>
 8004be4:	2e01      	cmp	r6, #1
 8004be6:	d112      	bne.n	8004c0e <_swilseek+0x56>
 8004be8:	6843      	ldr	r3, [r0, #4]
 8004bea:	18e4      	adds	r4, r4, r3
 8004bec:	d4f6      	bmi.n	8004bdc <_swilseek+0x24>
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	260a      	movs	r6, #10
 8004bf2:	e9cd 3400 	strd	r3, r4, [sp]
 8004bf6:	466f      	mov	r7, sp
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	beab      	bkpt	0x00ab
 8004bfe:	4606      	mov	r6, r0
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff ff91 	bl	8004b28 <checkerror>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	dbe1      	blt.n	8004bce <_swilseek+0x16>
 8004c0a:	606c      	str	r4, [r5, #4]
 8004c0c:	e7e1      	b.n	8004bd2 <_swilseek+0x1a>
 8004c0e:	2e02      	cmp	r6, #2
 8004c10:	d1ed      	bne.n	8004bee <_swilseek+0x36>
 8004c12:	af02      	add	r7, sp, #8
 8004c14:	6803      	ldr	r3, [r0, #0]
 8004c16:	f847 3d08 	str.w	r3, [r7, #-8]!
 8004c1a:	260c      	movs	r6, #12
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	4639      	mov	r1, r7
 8004c20:	beab      	bkpt	0x00ab
 8004c22:	4606      	mov	r6, r0
 8004c24:	4630      	mov	r0, r6
 8004c26:	f7ff ff7f 	bl	8004b28 <checkerror>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d0cf      	beq.n	8004bce <_swilseek+0x16>
 8004c2e:	4404      	add	r4, r0
 8004c30:	e7dd      	b.n	8004bee <_swilseek+0x36>

08004c32 <_lseek>:
 8004c32:	f7ff bfc1 	b.w	8004bb8 <_swilseek>

08004c36 <_swiwrite>:
 8004c36:	b530      	push	{r4, r5, lr}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004c3e:	9203      	str	r2, [sp, #12]
 8004c40:	2405      	movs	r4, #5
 8004c42:	ad01      	add	r5, sp, #4
 8004c44:	4620      	mov	r0, r4
 8004c46:	4629      	mov	r1, r5
 8004c48:	beab      	bkpt	0x00ab
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ff6b 	bl	8004b28 <checkerror>
 8004c52:	b005      	add	sp, #20
 8004c54:	bd30      	pop	{r4, r5, pc}

08004c56 <_write>:
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	460e      	mov	r6, r1
 8004c5a:	4615      	mov	r5, r2
 8004c5c:	f7ff ff4a 	bl	8004af4 <findslot>
 8004c60:	4604      	mov	r4, r0
 8004c62:	b930      	cbnz	r0, 8004c72 <_write+0x1c>
 8004c64:	f000 fa12 	bl	800508c <__errno>
 8004c68:	2309      	movs	r3, #9
 8004c6a:	6003      	str	r3, [r0, #0]
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
 8004c72:	462a      	mov	r2, r5
 8004c74:	4631      	mov	r1, r6
 8004c76:	6800      	ldr	r0, [r0, #0]
 8004c78:	f7ff ffdd 	bl	8004c36 <_swiwrite>
 8004c7c:	1e02      	subs	r2, r0, #0
 8004c7e:	dbf5      	blt.n	8004c6c <_write+0x16>
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	1aa8      	subs	r0, r5, r2
 8004c84:	4403      	add	r3, r0
 8004c86:	42aa      	cmp	r2, r5
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	d1f1      	bne.n	8004c70 <_write+0x1a>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c92:	f7ff bf59 	b.w	8004b48 <error>

08004c96 <_swiclose>:
 8004c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c98:	ad02      	add	r5, sp, #8
 8004c9a:	2402      	movs	r4, #2
 8004c9c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	beab      	bkpt	0x00ab
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f7ff ff3d 	bl	8004b28 <checkerror>
 8004cae:	b003      	add	sp, #12
 8004cb0:	bd30      	pop	{r4, r5, pc}
	...

08004cb4 <_close>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	f7ff ff1c 	bl	8004af4 <findslot>
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	b930      	cbnz	r0, 8004cce <_close+0x1a>
 8004cc0:	f000 f9e4 	bl	800508c <__errno>
 8004cc4:	2309      	movs	r3, #9
 8004cc6:	6003      	str	r3, [r0, #0]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	3d01      	subs	r5, #1
 8004cd0:	2d01      	cmp	r5, #1
 8004cd2:	d809      	bhi.n	8004ce8 <_close+0x34>
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <_close+0x48>)
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d104      	bne.n	8004ce8 <_close+0x34>
 8004cde:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce2:	6003      	str	r3, [r0, #0]
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e7f1      	b.n	8004ccc <_close+0x18>
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	f7ff ffd4 	bl	8004c96 <_swiclose>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1ec      	bne.n	8004ccc <_close+0x18>
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	e7e8      	b.n	8004ccc <_close+0x18>
 8004cfa:	bf00      	nop
 8004cfc:	200135ac 	.word	0x200135ac

08004d00 <_sbrk>:
 8004d00:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <_sbrk+0x38>)
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	b510      	push	{r4, lr}
 8004d06:	4602      	mov	r2, r0
 8004d08:	b909      	cbnz	r1, 8004d0e <_sbrk+0xe>
 8004d0a:	490c      	ldr	r1, [pc, #48]	; (8004d3c <_sbrk+0x3c>)
 8004d0c:	6019      	str	r1, [r3, #0]
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4669      	mov	r1, sp
 8004d12:	4402      	add	r2, r0
 8004d14:	428a      	cmp	r2, r1
 8004d16:	d806      	bhi.n	8004d26 <_sbrk+0x26>
 8004d18:	4909      	ldr	r1, [pc, #36]	; (8004d40 <_sbrk+0x40>)
 8004d1a:	4c0a      	ldr	r4, [pc, #40]	; (8004d44 <_sbrk+0x44>)
 8004d1c:	6809      	ldr	r1, [r1, #0]
 8004d1e:	42a1      	cmp	r1, r4
 8004d20:	d008      	beq.n	8004d34 <_sbrk+0x34>
 8004d22:	428a      	cmp	r2, r1
 8004d24:	d906      	bls.n	8004d34 <_sbrk+0x34>
 8004d26:	f000 f9b1 	bl	800508c <__errno>
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d32:	bd10      	pop	{r4, pc}
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e7fc      	b.n	8004d32 <_sbrk+0x32>
 8004d38:	2001359c 	.word	0x2001359c
 8004d3c:	20013698 	.word	0x20013698
 8004d40:	20000074 	.word	0x20000074
 8004d44:	cafedead 	.word	0xcafedead

08004d48 <_swistat>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	f7ff fed2 	bl	8004af4 <findslot>
 8004d50:	4606      	mov	r6, r0
 8004d52:	b930      	cbnz	r0, 8004d62 <_swistat+0x1a>
 8004d54:	f000 f99a 	bl	800508c <__errno>
 8004d58:	2309      	movs	r3, #9
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	bd70      	pop	{r4, r5, r6, pc}
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6e:	6463      	str	r3, [r4, #68]	; 0x44
 8004d70:	250c      	movs	r5, #12
 8004d72:	4628      	mov	r0, r5
 8004d74:	4631      	mov	r1, r6
 8004d76:	beab      	bkpt	0x00ab
 8004d78:	4605      	mov	r5, r0
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7ff fed4 	bl	8004b28 <checkerror>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	bf1c      	itt	ne
 8004d84:	6120      	strne	r0, [r4, #16]
 8004d86:	2000      	movne	r0, #0
 8004d88:	e7ea      	b.n	8004d60 <_swistat+0x18>

08004d8a <_fstat>:
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4604      	mov	r4, r0
 8004d92:	2258      	movs	r2, #88	; 0x58
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fe ff5c 	bl	8003c52 <memset>
 8004d9a:	4601      	mov	r1, r0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da2:	f7ff bfd1 	b.w	8004d48 <_swistat>

08004da6 <_stat>:
 8004da6:	b538      	push	{r3, r4, r5, lr}
 8004da8:	460d      	mov	r5, r1
 8004daa:	4604      	mov	r4, r0
 8004dac:	2258      	movs	r2, #88	; 0x58
 8004dae:	2100      	movs	r1, #0
 8004db0:	4628      	mov	r0, r5
 8004db2:	f7fe ff4e 	bl	8003c52 <memset>
 8004db6:	4620      	mov	r0, r4
 8004db8:	2100      	movs	r1, #0
 8004dba:	f000 f811 	bl	8004de0 <_swiopen>
 8004dbe:	1c43      	adds	r3, r0, #1
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	d00b      	beq.n	8004ddc <_stat+0x36>
 8004dc4:	686b      	ldr	r3, [r5, #4]
 8004dc6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dca:	606b      	str	r3, [r5, #4]
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7ff ffbb 	bl	8004d48 <_swistat>
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff ff6d 	bl	8004cb4 <_close>
 8004dda:	462c      	mov	r4, r5
 8004ddc:	4620      	mov	r0, r4
 8004dde:	bd38      	pop	{r3, r4, r5, pc}

08004de0 <_swiopen>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <_swiopen+0xb4>)
 8004de6:	b096      	sub	sp, #88	; 0x58
 8004de8:	4682      	mov	sl, r0
 8004dea:	460e      	mov	r6, r1
 8004dec:	2500      	movs	r5, #0
 8004dee:	4698      	mov	r8, r3
 8004df0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8004df4:	1c61      	adds	r1, r4, #1
 8004df6:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8004dfa:	d036      	beq.n	8004e6a <_swiopen+0x8a>
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	2d14      	cmp	r5, #20
 8004e00:	d1f6      	bne.n	8004df0 <_swiopen+0x10>
 8004e02:	f000 f943 	bl	800508c <__errno>
 8004e06:	2318      	movs	r3, #24
 8004e08:	6003      	str	r3, [r0, #0]
 8004e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e0e:	e03c      	b.n	8004e8a <_swiopen+0xaa>
 8004e10:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004e14:	f240 6301 	movw	r3, #1537	; 0x601
 8004e18:	07b2      	lsls	r2, r6, #30
 8004e1a:	bf48      	it	mi
 8004e1c:	f044 0402 	orrmi.w	r4, r4, #2
 8004e20:	421e      	tst	r6, r3
 8004e22:	bf18      	it	ne
 8004e24:	f044 0404 	orrne.w	r4, r4, #4
 8004e28:	0733      	lsls	r3, r6, #28
 8004e2a:	bf48      	it	mi
 8004e2c:	f024 0404 	bicmi.w	r4, r4, #4
 8004e30:	4650      	mov	r0, sl
 8004e32:	bf48      	it	mi
 8004e34:	f044 0408 	orrmi.w	r4, r4, #8
 8004e38:	f8cd a000 	str.w	sl, [sp]
 8004e3c:	f7fb fa28 	bl	8000290 <strlen>
 8004e40:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004e44:	2401      	movs	r4, #1
 8004e46:	4620      	mov	r0, r4
 8004e48:	4649      	mov	r1, r9
 8004e4a:	beab      	bkpt	0x00ab
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2c00      	cmp	r4, #0
 8004e50:	db06      	blt.n	8004e60 <_swiopen+0x80>
 8004e52:	4447      	add	r7, r8
 8004e54:	2300      	movs	r3, #0
 8004e56:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	462c      	mov	r4, r5
 8004e5e:	e014      	b.n	8004e8a <_swiopen+0xaa>
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff fe71 	bl	8004b48 <error>
 8004e66:	4604      	mov	r4, r0
 8004e68:	e00f      	b.n	8004e8a <_swiopen+0xaa>
 8004e6a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004e6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e72:	46e9      	mov	r9, sp
 8004e74:	d1cc      	bne.n	8004e10 <_swiopen+0x30>
 8004e76:	4649      	mov	r1, r9
 8004e78:	4650      	mov	r0, sl
 8004e7a:	f7ff ff94 	bl	8004da6 <_stat>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d0c6      	beq.n	8004e10 <_swiopen+0x30>
 8004e82:	f000 f903 	bl	800508c <__errno>
 8004e86:	2311      	movs	r3, #17
 8004e88:	6003      	str	r3, [r0, #0]
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	b016      	add	sp, #88	; 0x58
 8004e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e92:	bf00      	nop
 8004e94:	200135ac 	.word	0x200135ac

08004e98 <_get_semihosting_exts>:
 8004e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4688      	mov	r8, r1
 8004ea0:	4829      	ldr	r0, [pc, #164]	; (8004f48 <_get_semihosting_exts+0xb0>)
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	f7ff ff9b 	bl	8004de0 <_swiopen>
 8004eaa:	462a      	mov	r2, r5
 8004eac:	4604      	mov	r4, r0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7fe fece 	bl	8003c52 <memset>
 8004eb6:	1c63      	adds	r3, r4, #1
 8004eb8:	d015      	beq.n	8004ee6 <_get_semihosting_exts+0x4e>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fe1a 	bl	8004af4 <findslot>
 8004ec0:	260c      	movs	r6, #12
 8004ec2:	4681      	mov	r9, r0
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	beab      	bkpt	0x00ab
 8004eca:	4606      	mov	r6, r0
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f7ff fe2b 	bl	8004b28 <checkerror>
 8004ed2:	2803      	cmp	r0, #3
 8004ed4:	dd02      	ble.n	8004edc <_get_semihosting_exts+0x44>
 8004ed6:	3803      	subs	r0, #3
 8004ed8:	42a8      	cmp	r0, r5
 8004eda:	dc08      	bgt.n	8004eee <_get_semihosting_exts+0x56>
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7ff fee9 	bl	8004cb4 <_close>
 8004ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	b003      	add	sp, #12
 8004eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004eee:	2204      	movs	r2, #4
 8004ef0:	eb0d 0102 	add.w	r1, sp, r2
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff fe45 	bl	8004b84 <_read>
 8004efa:	2803      	cmp	r0, #3
 8004efc:	ddee      	ble.n	8004edc <_get_semihosting_exts+0x44>
 8004efe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f02:	2b53      	cmp	r3, #83	; 0x53
 8004f04:	d1ea      	bne.n	8004edc <_get_semihosting_exts+0x44>
 8004f06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004f0a:	2b48      	cmp	r3, #72	; 0x48
 8004f0c:	d1e6      	bne.n	8004edc <_get_semihosting_exts+0x44>
 8004f0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f12:	2b46      	cmp	r3, #70	; 0x46
 8004f14:	d1e2      	bne.n	8004edc <_get_semihosting_exts+0x44>
 8004f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f1a:	2b42      	cmp	r3, #66	; 0x42
 8004f1c:	d1de      	bne.n	8004edc <_get_semihosting_exts+0x44>
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4641      	mov	r1, r8
 8004f22:	4620      	mov	r0, r4
 8004f24:	f7ff fe48 	bl	8004bb8 <_swilseek>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	dbd7      	blt.n	8004edc <_get_semihosting_exts+0x44>
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7ff fe27 	bl	8004b84 <_read>
 8004f36:	4605      	mov	r5, r0
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f7ff febb 	bl	8004cb4 <_close>
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7ff fdf2 	bl	8004b28 <checkerror>
 8004f44:	4604      	mov	r4, r0
 8004f46:	e7ce      	b.n	8004ee6 <_get_semihosting_exts+0x4e>
 8004f48:	080051bf 	.word	0x080051bf

08004f4c <initialise_semihosting_exts>:
 8004f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4e:	4d0a      	ldr	r5, [pc, #40]	; (8004f78 <initialise_semihosting_exts+0x2c>)
 8004f50:	4c0a      	ldr	r4, [pc, #40]	; (8004f7c <initialise_semihosting_exts+0x30>)
 8004f52:	2100      	movs	r1, #0
 8004f54:	2201      	movs	r2, #1
 8004f56:	a801      	add	r0, sp, #4
 8004f58:	6029      	str	r1, [r5, #0]
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	f7ff ff9c 	bl	8004e98 <_get_semihosting_exts>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	dd07      	ble.n	8004f74 <initialise_semihosting_exts+0x28>
 8004f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f68:	f003 0201 	and.w	r2, r3, #1
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	6023      	str	r3, [r4, #0]
 8004f74:	b003      	add	sp, #12
 8004f76:	bd30      	pop	{r4, r5, pc}
 8004f78:	20000078 	.word	0x20000078
 8004f7c:	2000007c 	.word	0x2000007c

08004f80 <_has_ext_stdout_stderr>:
 8004f80:	b510      	push	{r4, lr}
 8004f82:	4c04      	ldr	r4, [pc, #16]	; (8004f94 <_has_ext_stdout_stderr+0x14>)
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	da01      	bge.n	8004f8e <_has_ext_stdout_stderr+0xe>
 8004f8a:	f7ff ffdf 	bl	8004f4c <initialise_semihosting_exts>
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	2000007c 	.word	0x2000007c

08004f98 <initialise_monitor_handles>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005050 <initialise_monitor_handles+0xb8>
 8004fa2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	2400      	movs	r4, #0
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	f10d 0804 	add.w	r8, sp, #4
 8004fb0:	9402      	str	r4, [sp, #8]
 8004fb2:	2501      	movs	r5, #1
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	beab      	bkpt	0x00ab
 8004fba:	4605      	mov	r5, r0
 8004fbc:	4e20      	ldr	r6, [pc, #128]	; (8005040 <initialise_monitor_handles+0xa8>)
 8004fbe:	4a21      	ldr	r2, [pc, #132]	; (8005044 <initialise_monitor_handles+0xac>)
 8004fc0:	6035      	str	r5, [r6, #0]
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8004fc8:	4614      	mov	r4, r2
 8004fca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	2b14      	cmp	r3, #20
 8004fd2:	d1fa      	bne.n	8004fca <initialise_monitor_handles+0x32>
 8004fd4:	f7ff ffd4 	bl	8004f80 <_has_ext_stdout_stderr>
 8004fd8:	4d1b      	ldr	r5, [pc, #108]	; (8005048 <initialise_monitor_handles+0xb0>)
 8004fda:	b1d0      	cbz	r0, 8005012 <initialise_monitor_handles+0x7a>
 8004fdc:	f04f 0a03 	mov.w	sl, #3
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fe6:	2701      	movs	r7, #1
 8004fe8:	f8cd a00c 	str.w	sl, [sp, #12]
 8004fec:	9302      	str	r3, [sp, #8]
 8004fee:	4638      	mov	r0, r7
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	beab      	bkpt	0x00ab
 8004ff4:	4683      	mov	fp, r0
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <initialise_monitor_handles+0xb4>)
 8004ff8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ffc:	f8c3 b000 	str.w	fp, [r3]
 8005000:	2308      	movs	r3, #8
 8005002:	f8cd a00c 	str.w	sl, [sp, #12]
 8005006:	9302      	str	r3, [sp, #8]
 8005008:	4638      	mov	r0, r7
 800500a:	4641      	mov	r1, r8
 800500c:	beab      	bkpt	0x00ab
 800500e:	4607      	mov	r7, r0
 8005010:	602f      	str	r7, [r5, #0]
 8005012:	682b      	ldr	r3, [r5, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	bf02      	ittt	eq
 8005018:	4b0c      	ldreq	r3, [pc, #48]	; (800504c <initialise_monitor_handles+0xb4>)
 800501a:	681b      	ldreq	r3, [r3, #0]
 800501c:	602b      	streq	r3, [r5, #0]
 800501e:	6833      	ldr	r3, [r6, #0]
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	2600      	movs	r6, #0
 8005024:	6066      	str	r6, [r4, #4]
 8005026:	f7ff ffab 	bl	8004f80 <_has_ext_stdout_stderr>
 800502a:	b130      	cbz	r0, 800503a <initialise_monitor_handles+0xa2>
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <initialise_monitor_handles+0xb4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005034:	682b      	ldr	r3, [r5, #0]
 8005036:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800503a:	b005      	add	sp, #20
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	200135a4 	.word	0x200135a4
 8005044:	200135ac 	.word	0x200135ac
 8005048:	200135a0 	.word	0x200135a0
 800504c:	200135a8 	.word	0x200135a8
 8005050:	080051d5 	.word	0x080051d5

08005054 <_isatty>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	f7ff fd4d 	bl	8004af4 <findslot>
 800505a:	2509      	movs	r5, #9
 800505c:	4604      	mov	r4, r0
 800505e:	b920      	cbnz	r0, 800506a <_isatty+0x16>
 8005060:	f000 f814 	bl	800508c <__errno>
 8005064:	6005      	str	r5, [r0, #0]
 8005066:	4620      	mov	r0, r4
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	4628      	mov	r0, r5
 800506c:	4621      	mov	r1, r4
 800506e:	beab      	bkpt	0x00ab
 8005070:	4604      	mov	r4, r0
 8005072:	2c01      	cmp	r4, #1
 8005074:	d0f7      	beq.n	8005066 <_isatty+0x12>
 8005076:	f000 f809 	bl	800508c <__errno>
 800507a:	2400      	movs	r4, #0
 800507c:	4606      	mov	r6, r0
 800507e:	2513      	movs	r5, #19
 8005080:	4628      	mov	r0, r5
 8005082:	4621      	mov	r1, r4
 8005084:	beab      	bkpt	0x00ab
 8005086:	4605      	mov	r5, r0
 8005088:	6035      	str	r5, [r6, #0]
 800508a:	e7ec      	b.n	8005066 <_isatty+0x12>

0800508c <__errno>:
 800508c:	4b01      	ldr	r3, [pc, #4]	; (8005094 <__errno+0x8>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20000010 	.word	0x20000010

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
