
I2C-SlaveProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c10  08003c10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08003c24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08003c24  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009193  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001500  00000000  00000000  000291cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158f4  00000000  00000000  0002b530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c01  00000000  00000000  00040e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085590  00000000  00000000  00047a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccfb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eec  00000000  00000000  000cd030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003bd8 	.word	0x08003bd8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003bd8 	.word	0x08003bd8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b598      	push	{r3, r4, r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 faca 	bl	8000e8c <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f874 	bl	80009e4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  GPIO_Init();
 80008fc:	f000 f90a 	bl	8000b14 <GPIO_Init>
  I2C1_Init();
 8000900:	f000 f8da 	bl	8000ab8 <I2C1_Init>

  HAL_I2C_EnableListen_IT(&hi2c1);
 8000904:	4834      	ldr	r0, [pc, #208]	; (80009d8 <main+0xe8>)
 8000906:	f001 f837 	bl	8001978 <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
  while (1)
  {

	  /*Simulate a data acquisition each 1 sec*/
	  if(data[0] > 100.0){
 800090a:	4b34      	ldr	r3, [pc, #208]	; (80009dc <main+0xec>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80009e0 <main+0xf0>
 8000914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091c:	dd03      	ble.n	8000926 <main+0x36>
		  data[0]=0.0;
 800091e:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0xec>)
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
	  }
	  if(data[1] > 100.0){
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <main+0xec>)
 8000928:	edd3 7a01 	vldr	s15, [r3, #4]
 800092c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80009e0 <main+0xf0>
 8000930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	dd03      	ble.n	8000942 <main+0x52>
		  data[1]=0.0;
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <main+0xec>)
 800093c:	f04f 0200 	mov.w	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
	  }
	  if(data[2] > 100){
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <main+0xec>)
 8000944:	edd3 7a02 	vldr	s15, [r3, #8]
 8000948:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80009e0 <main+0xf0>
 800094c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000954:	dd03      	ble.n	800095e <main+0x6e>
		  data[2]=0.0;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <main+0xec>)
 8000958:	f04f 0200 	mov.w	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
	  }

	  data[0] = data[0] + 0.1;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0xec>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fd9c 	bl	80004a0 <__aeabi_f2d>
 8000968:	a317      	add	r3, pc, #92	; (adr r3, 80009c8 <main+0xd8>)
 800096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096e:	f7ff fc39 	bl	80001e4 <__adddf3>
 8000972:	4603      	mov	r3, r0
 8000974:	460c      	mov	r4, r1
 8000976:	4618      	mov	r0, r3
 8000978:	4621      	mov	r1, r4
 800097a:	f7ff fde9 	bl	8000550 <__aeabi_d2f>
 800097e:	4602      	mov	r2, r0
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <main+0xec>)
 8000982:	601a      	str	r2, [r3, #0]
	  data[1] = data[1] + 0.2;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <main+0xec>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fd89 	bl	80004a0 <__aeabi_f2d>
 800098e:	a310      	add	r3, pc, #64	; (adr r3, 80009d0 <main+0xe0>)
 8000990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000994:	f7ff fc26 	bl	80001e4 <__adddf3>
 8000998:	4603      	mov	r3, r0
 800099a:	460c      	mov	r4, r1
 800099c:	4618      	mov	r0, r3
 800099e:	4621      	mov	r1, r4
 80009a0:	f7ff fdd6 	bl	8000550 <__aeabi_d2f>
 80009a4:	4602      	mov	r2, r0
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0xec>)
 80009a8:	605a      	str	r2, [r3, #4]
	  data[2] = data[2] + 1;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <main+0xec>)
 80009ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80009b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <main+0xec>)
 80009ba:	edc3 7a02 	vstr	s15, [r3, #8]
	  HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c2:	f000 fad5 	bl	8000f70 <HAL_Delay>
	  if(data[0] > 100.0){
 80009c6:	e7a0      	b.n	800090a <main+0x1a>
 80009c8:	9999999a 	.word	0x9999999a
 80009cc:	3fb99999 	.word	0x3fb99999
 80009d0:	9999999a 	.word	0x9999999a
 80009d4:	3fc99999 	.word	0x3fc99999
 80009d8:	20000038 	.word	0x20000038
 80009dc:	20000028 	.word	0x20000028
 80009e0:	42c80000 	.word	0x42c80000

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	; 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2230      	movs	r2, #48	; 0x30
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 f8e8 	bl	8003bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2300      	movs	r3, #0
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a54:	2310      	movs	r3, #16
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fc3a 	bl	80032e4 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a76:	f000 f906 	bl	8000c86 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2102      	movs	r1, #2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 fe94 	bl	80037c4 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aa2:	f000 f8f0 	bl	8000c86 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3750      	adds	r7, #80	; 0x50
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40007000 	.word	0x40007000

08000ab8 <I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void I2C1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <I2C1_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <I2C1_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <I2C1_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <I2C1_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = OWN_ADDRESS;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <I2C1_Init+0x50>)
 8000ad0:	2250      	movs	r2, #80	; 0x50
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <I2C1_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <I2C1_Init+0x50>)
 8000af6:	f000 fd21 	bl	800153c <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 f8c1 	bl	8000c86 <Error_Handler>
  }

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000038 	.word	0x20000038
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	00061a80 	.word	0x00061a80

08000b14 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void GPIO_Init(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <GPIO_Init+0x30>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <GPIO_Init+0x30>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <GPIO_Init+0x30>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
		break;
    }

*/

}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]


}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_I2C_AddrCallback>:

int i = 0;
uint8_t first = SET;

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	803b      	strh	r3, [r7, #0]
	i++;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <HAL_I2C_AddrCallback+0xdc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_I2C_AddrCallback+0xdc>)
 8000b88:	6013      	str	r3, [r2, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000b8a:	78fb      	ldrb	r3, [r7, #3]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_I2C_AddrCallback+0x38>

			if (HAL_I2C_Slave_Sequential_Receive_IT(hi2c, &slave_rcv_cmd, 1, I2C_FIRST_FRAME) != HAL_OK) {
 8000b90:	2301      	movs	r3, #1
 8000b92:	2201      	movs	r2, #1
 8000b94:	492e      	ldr	r1, [pc, #184]	; (8000c50 <HAL_I2C_AddrCallback+0xe0>)
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 fe7b 	bl	8001892 <HAL_I2C_Slave_Seq_Receive_IT>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d04f      	beq.n	8000c42 <HAL_I2C_AddrCallback+0xd2>
				Error_Handler();
 8000ba2:	f000 f870 	bl	8000c86 <Error_Handler>
		}



	}
}
 8000ba6:	e04c      	b.n	8000c42 <HAL_I2C_AddrCallback+0xd2>
		switch(slave_rcv_cmd){
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_I2C_AddrCallback+0xe0>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2bc2      	cmp	r3, #194	; 0xc2
 8000bae:	d017      	beq.n	8000be0 <HAL_I2C_AddrCallback+0x70>
 8000bb0:	2bc3      	cmp	r3, #195	; 0xc3
 8000bb2:	d032      	beq.n	8000c1a <HAL_I2C_AddrCallback+0xaa>
 8000bb4:	2bc1      	cmp	r3, #193	; 0xc1
 8000bb6:	d13c      	bne.n	8000c32 <HAL_I2C_AddrCallback+0xc2>
			memset(transmitBuffer,0, sizeof(transmitBuffer));
 8000bb8:	2205      	movs	r2, #5
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4825      	ldr	r0, [pc, #148]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bbe:	f003 f803 	bl	8003bc8 <memset>
			transmitBuffer[0] = 0xFE;
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bc4:	22fe      	movs	r2, #254	; 0xfe
 8000bc6:	701a      	strb	r2, [r3, #0]
			if (HAL_I2C_Slave_Sequential_Transmit_IT(hi2c, &transmitBuffer[0], LEN_CHECK_STATUS_CMD, I2C_LAST_FRAME) != HAL_OK) {
 8000bc8:	2320      	movs	r3, #32
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4921      	ldr	r1, [pc, #132]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 fdec 	bl	80017ac <HAL_I2C_Slave_Seq_Transmit_IT>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d02e      	beq.n	8000c38 <HAL_I2C_AddrCallback+0xc8>
				Error_Handler();
 8000bda:	f000 f854 	bl	8000c86 <Error_Handler>
			break;
 8000bde:	e02b      	b.n	8000c38 <HAL_I2C_AddrCallback+0xc8>
			memset(transmitBuffer,0, sizeof(transmitBuffer));
 8000be0:	2205      	movs	r2, #5
 8000be2:	2100      	movs	r1, #0
 8000be4:	481b      	ldr	r0, [pc, #108]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000be6:	f002 ffef 	bl	8003bc8 <memset>
			transmitBuffer[0] = (uint8_t)SLAVE_ID;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bec:	22e0      	movs	r2, #224	; 0xe0
 8000bee:	701a      	strb	r2, [r3, #0]
			transmitBuffer[1] = SLAVE_VER[0];
 8000bf0:	2231      	movs	r2, #49	; 0x31
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bf4:	705a      	strb	r2, [r3, #1]
			transmitBuffer[2] = SLAVE_VER[1];
 8000bf6:	222e      	movs	r2, #46	; 0x2e
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000bfa:	709a      	strb	r2, [r3, #2]
			transmitBuffer[3] = SLAVE_VER[2];
 8000bfc:	2230      	movs	r2, #48	; 0x30
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000c00:	70da      	strb	r2, [r3, #3]
			if (HAL_I2C_Slave_Sequential_Transmit_IT(hi2c, (uint8_t*)transmitBuffer, LEN_READ_ID_VER_CMD, I2C_LAST_FRAME) != HAL_OK) {
 8000c02:	2320      	movs	r3, #32
 8000c04:	2204      	movs	r2, #4
 8000c06:	4913      	ldr	r1, [pc, #76]	; (8000c54 <HAL_I2C_AddrCallback+0xe4>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 fdcf 	bl	80017ac <HAL_I2C_Slave_Seq_Transmit_IT>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d013      	beq.n	8000c3c <HAL_I2C_AddrCallback+0xcc>
				Error_Handler();
 8000c14:	f000 f837 	bl	8000c86 <Error_Handler>
			break;
 8000c18:	e010      	b.n	8000c3c <HAL_I2C_AddrCallback+0xcc>
			if (HAL_I2C_Slave_Sequential_Transmit_IT(hi2c,  (uint8_t *) &data, LEN_READ_DATA_CMD, I2C_LAST_FRAME) != HAL_OK) {
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <HAL_I2C_AddrCallback+0xe8>)
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 fdc3 	bl	80017ac <HAL_I2C_Slave_Seq_Transmit_IT>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <HAL_I2C_AddrCallback+0xd0>
				Error_Handler();
 8000c2c:	f000 f82b 	bl	8000c86 <Error_Handler>
			break;
 8000c30:	e006      	b.n	8000c40 <HAL_I2C_AddrCallback+0xd0>
			Error_Handler();
 8000c32:	f000 f828 	bl	8000c86 <Error_Handler>
			break;
 8000c36:	e004      	b.n	8000c42 <HAL_I2C_AddrCallback+0xd2>
			break;
 8000c38:	bf00      	nop
 8000c3a:	e002      	b.n	8000c42 <HAL_I2C_AddrCallback+0xd2>
			break;
 8000c3c:	bf00      	nop
 8000c3e:	e000      	b.n	8000c42 <HAL_I2C_AddrCallback+0xd2>
			break;
 8000c40:	bf00      	nop
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000034 	.word	0x20000034
 8000c50:	2000008c 	.word	0x2000008c
 8000c54:	20000090 	.word	0x20000090
 8000c58:	20000028 	.word	0x20000028

08000c5c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 fe87 	bl	8001978 <HAL_I2C_EnableListen_IT>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000c7a:	f000 f804 	bl	8000c86 <Error_Handler>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8a:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x6>
	...

08000c90 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0


  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fa40 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_I2C_MspInit+0xa4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d13b      	bne.n	8000d7a <HAL_I2C_MspInit+0x9a>
  {

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d1e:	23c0      	movs	r3, #192	; 0xc0
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4814      	ldr	r0, [pc, #80]	; (8000d8c <HAL_I2C_MspInit+0xac>)
 8000d3a:	f000 fa7d 	bl	8001238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_I2C_MspInit+0xa8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	201f      	movs	r0, #31
 8000d60:	f000 fa03 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d64:	201f      	movs	r0, #31
 8000d66:	f000 fa1c 	bl	80011a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2020      	movs	r0, #32
 8000d70:	f000 f9fb 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d74:	2020      	movs	r0, #32
 8000d76:	f000 fa14 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  HAL_IncTick();
 8000ddc:	f000 f8a8 	bl	8000f30 <HAL_IncTick>

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <I2C1_EV_IRQHandler+0x10>)
 8000dea:	f000 fdfb 	bl	80019e4 <HAL_I2C_EV_IRQHandler>

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000038 	.word	0x20000038

08000df8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <I2C1_ER_IRQHandler+0x10>)
 8000dfe:	f000 ff5e 	bl	8001cbe <HAL_I2C_ER_IRQHandler>

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000038 	.word	0x20000038

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <SystemInit+0x28>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <SystemInit+0x28>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SystemInit+0x28>)
 8000e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e26:	609a      	str	r2, [r3, #8]
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr  r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd3 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fe8b 	bl	8003b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fd41 	bl	80008f0 <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e74:	08003c18 	.word	0x08003c18
  ldr  r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e7c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e80:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e84:	2000009c 	.word	0x2000009c

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_Init+0x40>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_Init+0x40>)
 8000ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_Init+0x40>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f94d 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fee6 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023c00 	.word	0x40023c00

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f965 	bl	80011be <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f92d 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000098 	.word	0x20000098

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000098 	.word	0x20000098

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_Delay+0x40>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d004      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e00c      	b.n	800120e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2205      	movs	r2, #5
 80011f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e159      	b.n	8001508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8148 	bne.w	8001502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00b      	beq.n	8001292 <HAL_GPIO_Init+0x5a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001286:	2b11      	cmp	r3, #17
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b12      	cmp	r3, #18
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0xfc>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b12      	cmp	r3, #18
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a2 	beq.w	8001502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x202>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a47      	ldr	r2, [pc, #284]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x1fe>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a46      	ldr	r2, [pc, #280]	; (800152c <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a45      	ldr	r2, [pc, #276]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x1f6>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a44      	ldr	r2, [pc, #272]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x1f2>
 8001426:	2304      	movs	r3, #4
 8001428:	e008      	b.n	800143c <HAL_GPIO_Init+0x204>
 800142a:	2307      	movs	r3, #7
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x204>
 800142e:	2303      	movs	r3, #3
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x204>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x204>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x204>
 800143a:	2300      	movs	r3, #0
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800144c:	4934      	ldr	r1, [pc, #208]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_GPIO_Init+0x300>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147e:	4a2e      	ldr	r2, [pc, #184]	; (8001538 <HAL_GPIO_Init+0x300>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_GPIO_Init+0x300>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a8:	4a23      	ldr	r2, [pc, #140]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3301      	adds	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b0f      	cmp	r3, #15
 800150c:	f67f aea2 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001510:	bf00      	nop
 8001512:	3724      	adds	r7, #36	; 0x24
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40023800 	.word	0x40023800
 8001520:	40013800 	.word	0x40013800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020400 	.word	0x40020400
 800152c:	40020800 	.word	0x40020800
 8001530:	40020c00 	.word	0x40020c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e11f      	b.n	800178e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fbbc 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800158e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800159e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015a0:	f002 fada 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_I2C_Init+0x25c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d807      	bhi.n	80015c0 <HAL_I2C_Init+0x84>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4a7a      	ldr	r2, [pc, #488]	; (800179c <HAL_I2C_Init+0x260>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	bf94      	ite	ls
 80015b8:	2301      	movls	r3, #1
 80015ba:	2300      	movhi	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	e006      	b.n	80015ce <HAL_I2C_Init+0x92>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a77      	ldr	r2, [pc, #476]	; (80017a0 <HAL_I2C_Init+0x264>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0db      	b.n	800178e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4a72      	ldr	r2, [pc, #456]	; (80017a4 <HAL_I2C_Init+0x268>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0c9b      	lsrs	r3, r3, #18
 80015e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a64      	ldr	r2, [pc, #400]	; (8001798 <HAL_I2C_Init+0x25c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d802      	bhi.n	8001610 <HAL_I2C_Init+0xd4>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	e009      	b.n	8001624 <HAL_I2C_Init+0xe8>
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <HAL_I2C_Init+0x26c>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	3301      	adds	r3, #1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	430b      	orrs	r3, r1
 800162a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001636:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4956      	ldr	r1, [pc, #344]	; (8001798 <HAL_I2C_Init+0x25c>)
 8001640:	428b      	cmp	r3, r1
 8001642:	d80d      	bhi.n	8001660 <HAL_I2C_Init+0x124>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e59      	subs	r1, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	2b04      	cmp	r3, #4
 800165a:	bf38      	it	cc
 800165c:	2304      	movcc	r3, #4
 800165e:	e04f      	b.n	8001700 <HAL_I2C_Init+0x1c4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d111      	bne.n	800168c <HAL_I2C_Init+0x150>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e012      	b.n	80016b2 <HAL_I2C_Init+0x176>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	0099      	lsls	r1, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Init+0x17e>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e022      	b.n	8001700 <HAL_I2C_Init+0x1c4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10e      	bne.n	80016e0 <HAL_I2C_Init+0x1a4>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1e58      	subs	r0, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	440b      	add	r3, r1
 80016d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016de:	e00f      	b.n	8001700 <HAL_I2C_Init+0x1c4>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	6809      	ldr	r1, [r1, #0]
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800172e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6911      	ldr	r1, [r2, #16]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	000186a0 	.word	0x000186a0
 800179c:	001e847f 	.word	0x001e847f
 80017a0:	003d08ff 	.word	0x003d08ff
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4613      	mov	r3, r2
 80017ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80017c8:	2b28      	cmp	r3, #40	; 0x28
 80017ca:	d15b      	bne.n	8001884 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e054      	b.n	8001886 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e04d      	b.n	8001886 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d007      	beq.n	8001810 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800181e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2229      	movs	r2, #41	; 0x29
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	88fa      	ldrh	r2, [r7, #6]
 8001840:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800187e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e000      	b.n	8001886 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001884:	2302      	movs	r3, #2
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001892:	b480      	push	{r7}
 8001894:	b087      	sub	sp, #28
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80018ae:	2b28      	cmp	r3, #40	; 0x28
 80018b0:	d15b      	bne.n	800196a <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e054      	b.n	800196c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e04d      	b.n	800196c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d007      	beq.n	80018f6 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001904:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	222a      	movs	r2, #42	; 0x2a
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001964:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	371c      	adds	r7, #28
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b20      	cmp	r3, #32
 800198a:	d124      	bne.n	80019d6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2228      	movs	r2, #40	; 0x28
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d007      	beq.n	80019b2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80019d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d003      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x38>
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b40      	cmp	r3, #64	; 0x40
 8001a18:	f040 80bd 	bne.w	8001b96 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <HAL_I2C_EV_IRQHandler+0x6e>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001a3c:	d003      	beq.n	8001a46 <HAL_I2C_EV_IRQHandler+0x62>
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001a44:	d101      	bne.n	8001a4a <HAL_I2C_EV_IRQHandler+0x66>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_I2C_EV_IRQHandler+0x68>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	f000 812e 	beq.w	8001cae <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0x92>
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	0a5b      	lsrs	r3, r3, #9
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 fc1f 	bl	80032ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fd2c 	bl	80024cc <I2C_Master_SB>
 8001a74:	e08e      	b.n	8001b94 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0xb2>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	0a5b      	lsrs	r3, r3, #9
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fda2 	bl	80025d8 <I2C_Master_ADD10>
 8001a94:	e07e      	b.n	8001b94 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	085b      	lsrs	r3, r3, #1
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0xd2>
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	0a5b      	lsrs	r3, r3, #9
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fdbc 	bl	800262c <I2C_Master_ADDR>
 8001ab4:	e06e      	b.n	8001b94 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d037      	beq.n	8001b32 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad0:	f000 80ef 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	09db      	lsrs	r3, r3, #7
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00f      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	0a9b      	lsrs	r3, r3, #10
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x11c>
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f9b9 	bl	8001e70 <I2C_MasterTransmit_TXE>
 8001afe:	e049      	b.n	8001b94 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80d2 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	0a5b      	lsrs	r3, r3, #9
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80cb 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d103      	bne.n	8001b2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fa40 	bl	8001fa8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b28:	e0c3      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 faa4 	bl	8002078 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b30:	e0bf      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b40:	f000 80b7 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00f      	beq.n	8001b70 <HAL_I2C_EV_IRQHandler+0x18c>
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HAL_I2C_EV_IRQHandler+0x18c>
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d103      	bne.n	8001b70 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fb14 	bl	8002196 <I2C_MasterReceive_RXNE>
 8001b6e:	e011      	b.n	8001b94 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 809a 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	0a5b      	lsrs	r3, r3, #9
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8093 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbb3 	bl	80022f8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b92:	e08e      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8001b94:	e08d      	b.n	8001cb2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e007      	b.n	8001bb8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x206>
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	0a5b      	lsrs	r3, r3, #9
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00c      	beq.n	8001bea <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 ff71 	bl	8002aca <I2C_Slave_ADDR>
 8001be8:	e066      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x226>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	0a5b      	lsrs	r3, r3, #9
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 ffa6 	bl	8002b54 <I2C_Slave_STOPF>
 8001c08:	e056      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	2b21      	cmp	r3, #33	; 0x21
 8001c0e:	d002      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0x232>
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	2b29      	cmp	r3, #41	; 0x29
 8001c14:	d125      	bne.n	8001c62 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	09db      	lsrs	r3, r3, #7
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00f      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0x25e>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0a9b      	lsrs	r3, r3, #10
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0x25e>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fe87 	bl	800294e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c40:	e039      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d033      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x2d2>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02d      	beq.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 feb4 	bl	80029c8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c60:	e029      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	099b      	lsrs	r3, r3, #6
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00f      	beq.n	8001c8e <HAL_I2C_EV_IRQHandler+0x2aa>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	0a9b      	lsrs	r3, r3, #10
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_I2C_EV_IRQHandler+0x2aa>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d103      	bne.n	8001c8e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 febf 	bl	8002a0a <I2C_SlaveReceive_RXNE>
 8001c8c:	e014      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00e      	beq.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	0a5b      	lsrs	r3, r3, #9
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 feed 	bl	8002a86 <I2C_SlaveReceive_BTF>
 8001cac:	e004      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b08a      	sub	sp, #40	; 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00e      	beq.n	8001d0c <HAL_I2C_ER_IRQHandler+0x4e>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00e      	beq.n	8001d36 <HAL_I2C_ER_IRQHandler+0x78>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001d34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	0a9b      	lsrs	r3, r3, #10
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03f      	beq.n	8001dc2 <HAL_I2C_ER_IRQHandler+0x104>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d039      	beq.n	8001dc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001d4e:	7efb      	ldrb	r3, [r7, #27]
 8001d50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001d68:	7ebb      	ldrb	r3, [r7, #26]
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d112      	bne.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd6>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10f      	bne.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd6>
 8001d74:	7cfb      	ldrb	r3, [r7, #19]
 8001d76:	2b21      	cmp	r3, #33	; 0x21
 8001d78:	d008      	beq.n	8001d8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001d7a:	7cfb      	ldrb	r3, [r7, #19]
 8001d7c:	2b29      	cmp	r3, #41	; 0x29
 8001d7e:	d005      	beq.n	8001d8c <HAL_I2C_ER_IRQHandler+0xce>
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	2b28      	cmp	r3, #40	; 0x28
 8001d84:	d106      	bne.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2b21      	cmp	r3, #33	; 0x21
 8001d8a:	d103      	bne.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 f811 	bl	8002db4 <I2C_Slave_AF>
 8001d92:	e016      	b.n	8001dc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001da6:	7efb      	ldrb	r3, [r7, #27]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d002      	beq.n	8001db2 <HAL_I2C_ER_IRQHandler+0xf4>
 8001dac:	7efb      	ldrb	r3, [r7, #27]
 8001dae:	2b40      	cmp	r3, #64	; 0x40
 8001db0:	d107      	bne.n	8001dc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	0adb      	lsrs	r3, r3, #11
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00e      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0x12e>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001dea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 f848 	bl	8002e94 <I2C_ITError>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d150      	bne.n	8001f38 <I2C_MasterTransmit_TXE+0xc8>
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b21      	cmp	r3, #33	; 0x21
 8001e9a:	d14d      	bne.n	8001f38 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d01d      	beq.n	8001ede <I2C_MasterTransmit_TXE+0x6e>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d01a      	beq.n	8001ede <I2C_MasterTransmit_TXE+0x6e>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eae:	d016      	beq.n	8001ede <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ebe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2211      	movs	r2, #17
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2220      	movs	r2, #32
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff98 	bl	8001e0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001edc:	e060      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001eec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d107      	bne.n	8001f28 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff87 	bl	8001e34 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f26:	e03b      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff6b 	bl	8001e0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f36:	e033      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b21      	cmp	r3, #33	; 0x21
 8001f3c:	d005      	beq.n	8001f4a <I2C_MasterTransmit_TXE+0xda>
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d12d      	bne.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b22      	cmp	r3, #34	; 0x22
 8001f48:	d12a      	bne.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d108      	bne.n	8001f66 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f62:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001f64:	e01c      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b40      	cmp	r3, #64	; 0x40
 8001f70:	d103      	bne.n	8001f7a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f880 	bl	8002078 <I2C_MemoryTransmit_TXE_BTF>
}
 8001f78:	e012      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f9e:	e7ff      	b.n	8001fa0 <I2C_MasterTransmit_TXE+0x130>
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b21      	cmp	r3, #33	; 0x21
 8001fc0:	d156      	bne.n	8002070 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001ff0:	e03e      	b.n	8002070 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d01d      	beq.n	8002034 <I2C_MasterTransmit_BTF+0x8c>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d01a      	beq.n	8002034 <I2C_MasterTransmit_BTF+0x8c>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002004:	d016      	beq.n	8002034 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002014:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2211      	movs	r2, #17
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff feed 	bl	8001e0c <HAL_I2C_MasterTxCpltCallback>
}
 8002032:	e01d      	b.n	8002070 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002042:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002052:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fece 	bl	8001e0c <HAL_I2C_MasterTxCpltCallback>
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208c:	2b00      	cmp	r3, #0
 800208e:	d11d      	bne.n	80020cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10b      	bne.n	80020b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	b2da      	uxtb	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a8:	1c9a      	adds	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80020ae:	e06e      	b.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	121b      	asrs	r3, r3, #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020ca:	e060      	b.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10b      	bne.n	80020ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020ea:	e050      	b.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d14c      	bne.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b22      	cmp	r3, #34	; 0x22
 80020f8:	d108      	bne.n	800210c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	e040      	b.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d015      	beq.n	8002142 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	2b21      	cmp	r3, #33	; 0x21
 800211a:	d112      	bne.n	8002142 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002140:	e025      	b.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d120      	bne.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b21      	cmp	r3, #33	; 0x21
 8002150:	d11d      	bne.n	800218e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002160:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fe53 	bl	8001e34 <HAL_I2C_MemTxCpltCallback>
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b22      	cmp	r3, #34	; 0x22
 80021a8:	f040 80a2 	bne.w	80022f0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d921      	bls.n	80021fe <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	f040 8082 	bne.w	80022f0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fa:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80021fc:	e078      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	2b02      	cmp	r3, #2
 8002204:	d074      	beq.n	80022f0 <I2C_MasterReceive_RXNE+0x15a>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d002      	beq.n	8002212 <I2C_MasterReceive_RXNE+0x7c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d16e      	bne.n	80022f0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f001 f818 	bl	8003248 <I2C_WaitOnSTOPRequestThroughIT>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d142      	bne.n	80022a4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800223c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d10a      	bne.n	800228e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fdde 	bl	8001e48 <HAL_I2C_MemRxCpltCallback>
}
 800228c:	e030      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2212      	movs	r2, #18
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fdbf 	bl	8001e20 <HAL_I2C_MasterRxCpltCallback>
}
 80022a2:	e025      	b.n	80022f0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fcc1 	bl	8000c72 <HAL_I2C_ErrorCallback>
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b04      	cmp	r3, #4
 800230e:	d11b      	bne.n	8002348 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002346:	e0bd      	b.n	80024c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d129      	bne.n	80023a6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00a      	beq.n	800237e <I2C_MasterReceive_BTF+0x86>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d007      	beq.n	800237e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023a4:	e08e      	b.n	80024c4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d176      	bne.n	800249e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d002      	beq.n	80023bc <I2C_MasterReceive_BTF+0xc4>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d108      	bne.n	80023ce <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e019      	b.n	8002402 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d002      	beq.n	80023da <I2C_MasterReceive_BTF+0xe2>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d108      	bne.n	80023ec <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e00a      	b.n	8002402 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d007      	beq.n	8002402 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800245c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d10a      	bne.n	8002488 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fce1 	bl	8001e48 <HAL_I2C_MemRxCpltCallback>
}
 8002486:	e01d      	b.n	80024c4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2212      	movs	r2, #18
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fcc2 	bl	8001e20 <HAL_I2C_MasterRxCpltCallback>
}
 800249c:	e012      	b.n	80024c4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d117      	bne.n	8002510 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024f8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80024fa:	e067      	b.n	80025cc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	e05d      	b.n	80025cc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002518:	d133      	bne.n	8002582 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b21      	cmp	r3, #33	; 0x21
 8002524:	d109      	bne.n	800253a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002536:	611a      	str	r2, [r3, #16]
 8002538:	e008      	b.n	800254c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <I2C_Master_SB+0x92>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d032      	beq.n	80025cc <I2C_Master_SB+0x100>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02d      	beq.n	80025cc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	e024      	b.n	80025cc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	b29b      	uxth	r3, r3
 8002590:	11db      	asrs	r3, r3, #7
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0306 	and.w	r3, r3, #6
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f063 030f 	orn	r3, r3, #15
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]
}
 80025a6:	e011      	b.n	80025cc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10d      	bne.n	80025cc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	11db      	asrs	r3, r3, #7
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0306 	and.w	r3, r3, #6
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f063 030e 	orn	r3, r3, #14
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <I2C_Master_ADD10+0x24>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d011      	beq.n	8002620 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d104      	bne.n	8002610 <I2C_Master_ADD10+0x38>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800262c:	b480      	push	{r7}
 800262e:	b091      	sub	sp, #68	; 0x44
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800263a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b22      	cmp	r3, #34	; 0x22
 8002654:	f040 8169 	bne.w	800292a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10f      	bne.n	8002680 <I2C_Master_ADDR+0x54>
 8002660:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d10b      	bne.n	8002680 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	e160      	b.n	8002942 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11d      	bne.n	80026c4 <I2C_Master_ADDR+0x98>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002690:	d118      	bne.n	80026c4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	651a      	str	r2, [r3, #80]	; 0x50
 80026c2:	e13e      	b.n	8002942 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d113      	bne.n	80026f6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e115      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 808a 	bne.w	8002816 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002708:	d137      	bne.n	800277a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002728:	d113      	bne.n	8002752 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002738:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	e0e7      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e0d3      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800277a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277c:	2b08      	cmp	r3, #8
 800277e:	d02e      	beq.n	80027de <I2C_Master_ADDR+0x1b2>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	2b20      	cmp	r3, #32
 8002784:	d02b      	beq.n	80027de <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	2b12      	cmp	r3, #18
 800278a:	d102      	bne.n	8002792 <I2C_Master_ADDR+0x166>
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	2b01      	cmp	r3, #1
 8002790:	d125      	bne.n	80027de <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00e      	beq.n	80027b6 <I2C_Master_ADDR+0x18a>
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	2b02      	cmp	r3, #2
 800279c:	d00b      	beq.n	80027b6 <I2C_Master_ADDR+0x18a>
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d008      	beq.n	80027b6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e007      	b.n	80027c6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	e0a1      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e085      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d14d      	bne.n	80028bc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	2b04      	cmp	r3, #4
 8002824:	d016      	beq.n	8002854 <I2C_Master_ADDR+0x228>
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2b02      	cmp	r3, #2
 800282a:	d013      	beq.n	8002854 <I2C_Master_ADDR+0x228>
 800282c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800282e:	2b10      	cmp	r3, #16
 8002830:	d010      	beq.n	8002854 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002862:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800286e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002872:	d117      	bne.n	80028a4 <I2C_Master_ADDR+0x278>
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800287a:	d00b      	beq.n	8002894 <I2C_Master_ADDR+0x268>
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	2b01      	cmp	r3, #1
 8002880:	d008      	beq.n	8002894 <I2C_Master_ADDR+0x268>
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	2b08      	cmp	r3, #8
 8002886:	d005      	beq.n	8002894 <I2C_Master_ADDR+0x268>
 8002888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288a:	2b10      	cmp	r3, #16
 800288c:	d002      	beq.n	8002894 <I2C_Master_ADDR+0x268>
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b20      	cmp	r3, #32
 8002892:	d107      	bne.n	80028a4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	e032      	b.n	8002922 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028da:	d117      	bne.n	800290c <I2C_Master_ADDR+0x2e0>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e2:	d00b      	beq.n	80028fc <I2C_Master_ADDR+0x2d0>
 80028e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d008      	beq.n	80028fc <I2C_Master_ADDR+0x2d0>
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d005      	beq.n	80028fc <I2C_Master_ADDR+0x2d0>
 80028f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d002      	beq.n	80028fc <I2C_Master_ADDR+0x2d0>
 80028f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d107      	bne.n	800290c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800290a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002928:	e00b      	b.n	8002942 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	e7ff      	b.n	8002942 <I2C_Master_ADDR+0x316>
 8002942:	bf00      	nop
 8002944:	3744      	adds	r7, #68	; 0x44
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02b      	beq.n	80029c0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <I2C_SlaveTransmit_TXE+0x72>
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b29      	cmp	r3, #41	; 0x29
 800299a:	d111      	bne.n	80029c0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2221      	movs	r2, #33	; 0x21
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2228      	movs	r2, #40	; 0x28
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f8ce 	bl	8000b5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d011      	beq.n	80029fe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02c      	beq.n	8002a7e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d114      	bne.n	8002a7e <I2C_SlaveReceive_RXNE+0x74>
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b2a      	cmp	r3, #42	; 0x2a
 8002a58:	d111      	bne.n	8002a7e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2222      	movs	r2, #34	; 0x22
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2228      	movs	r2, #40	; 0x28
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe f865 	bl	8000b48 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ae4:	2b28      	cmp	r3, #40	; 0x28
 8002ae6:	d127      	bne.n	8002b38 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	09db      	lsrs	r3, r3, #7
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	81bb      	strh	r3, [r7, #12]
 8002b1a:	e002      	b.n	8002b22 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002b2a:	89ba      	ldrh	r2, [r7, #12]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe f81d 	bl	8000b70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b36:	e008      	b.n	8002b4a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0202 	mvn.w	r2, #2
 8002b40:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb0:	d172      	bne.n	8002c98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b22      	cmp	r3, #34	; 0x22
 8002bb6:	d002      	beq.n	8002bbe <I2C_Slave_STOPF+0x6a>
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b2a      	cmp	r3, #42	; 0x2a
 8002bbc:	d135      	bne.n	8002c2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb0f 	bl	800121a <HAL_DMA_GetState>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d049      	beq.n	8002c96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	4a69      	ldr	r2, [pc, #420]	; (8002dac <I2C_Slave_STOPF+0x258>)
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fae1 	bl	80011d6 <HAL_DMA_Abort_IT>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03d      	beq.n	8002c96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c24:	4610      	mov	r0, r2
 8002c26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c28:	e035      	b.n	8002c96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0204 	orr.w	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fad9 	bl	800121a <HAL_DMA_GetState>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d014      	beq.n	8002c98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <I2C_Slave_STOPF+0x258>)
 8002c74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe faab 	bl	80011d6 <HAL_DMA_Abort_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c90:	4610      	mov	r0, r2
 8002c92:	4798      	blx	r3
 8002c94:	e000      	b.n	8002c98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d03e      	beq.n	8002d20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d112      	bne.n	8002cd6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d112      	bne.n	8002d0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f8b3 	bl	8002e94 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002d2e:	e039      	b.n	8002da4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b2a      	cmp	r3, #42	; 0x2a
 8002d34:	d109      	bne.n	8002d4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2228      	movs	r2, #40	; 0x28
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd feff 	bl	8000b48 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b28      	cmp	r3, #40	; 0x28
 8002d54:	d111      	bne.n	8002d7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <I2C_Slave_STOPF+0x25c>)
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd ff72 	bl	8000c5c <HAL_I2C_ListenCpltCallback>
}
 8002d78:	e014      	b.n	8002da4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	2b22      	cmp	r3, #34	; 0x22
 8002d80:	d002      	beq.n	8002d88 <I2C_Slave_STOPF+0x234>
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b22      	cmp	r3, #34	; 0x22
 8002d86:	d10d      	bne.n	8002da4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fed2 	bl	8000b48 <HAL_I2C_SlaveRxCpltCallback>
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	080030f9 	.word	0x080030f9
 8002db0:	ffff0000 	.word	0xffff0000

08002db4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d002      	beq.n	8002dd6 <I2C_Slave_AF+0x22>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d129      	bne.n	8002e2a <I2C_Slave_AF+0x76>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	2b28      	cmp	r3, #40	; 0x28
 8002dda:	d126      	bne.n	8002e2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <I2C_Slave_AF+0xdc>)
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002df0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd ff1a 	bl	8000c5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002e28:	e02e      	b.n	8002e88 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b21      	cmp	r3, #33	; 0x21
 8002e2e:	d126      	bne.n	8002e7e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <I2C_Slave_AF+0xdc>)
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2221      	movs	r2, #33	; 0x21
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e74:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fe70 	bl	8000b5c <HAL_I2C_SlaveTxCpltCallback>
}
 8002e7c:	e004      	b.n	8002e88 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e86:	615a      	str	r2, [r3, #20]
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	ffff0000 	.word	0xffff0000

08002e94 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eaa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002eac:	7bbb      	ldrb	r3, [r7, #14]
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d002      	beq.n	8002eb8 <I2C_ITError+0x24>
 8002eb2:	7bbb      	ldrb	r3, [r7, #14]
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d10a      	bne.n	8002ece <I2C_ITError+0x3a>
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b22      	cmp	r3, #34	; 0x22
 8002ebc:	d107      	bne.n	8002ece <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ed4:	2b28      	cmp	r3, #40	; 0x28
 8002ed6:	d107      	bne.n	8002ee8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2228      	movs	r2, #40	; 0x28
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002ee6:	e015      	b.n	8002f14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef6:	d00a      	beq.n	8002f0e <I2C_ITError+0x7a>
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b60      	cmp	r3, #96	; 0x60
 8002efc:	d007      	beq.n	8002f0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f22:	d162      	bne.n	8002fea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d020      	beq.n	8002f84 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <I2C_ITError+0x25c>)
 8002f48:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe f941 	bl	80011d6 <HAL_DMA_Abort_IT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8089 	beq.w	800306e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4798      	blx	r3
 8002f82:	e074      	b.n	800306e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	4a59      	ldr	r2, [pc, #356]	; (80030f0 <I2C_ITError+0x25c>)
 8002f8a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe f920 	bl	80011d6 <HAL_DMA_Abort_IT>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d068      	beq.n	800306e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d10b      	bne.n	8002fc2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4798      	blx	r3
 8002fe8:	e041      	b.n	800306e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b60      	cmp	r3, #96	; 0x60
 8002ff4:	d125      	bne.n	8003042 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10b      	bne.n	800302a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fe ff0e 	bl	8001e5c <HAL_I2C_AbortCpltCallback>
 8003040:	e015      	b.n	800306e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d10b      	bne.n	8003068 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fd fe02 	bl	8000c72 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10e      	bne.n	800309c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d113      	bne.n	80030e8 <I2C_ITError+0x254>
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b28      	cmp	r3, #40	; 0x28
 80030c4:	d110      	bne.n	80030e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <I2C_ITError+0x260>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fdba 	bl	8000c5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	080030f9 	.word	0x080030f9
 80030f4:	ffff0000 	.word	0xffff0000

080030f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <I2C_DMAAbort+0x148>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <I2C_DMAAbort+0x14c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a1a      	lsrs	r2, r3, #8
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00da      	lsls	r2, r3, #3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800313e:	e00a      	b.n	8003156 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d0ea      	beq.n	800312c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2200      	movs	r2, #0
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2200      	movs	r2, #0
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b60      	cmp	r3, #96	; 0x60
 80031c6:	d10e      	bne.n	80031e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7fe fe3c 	bl	8001e5c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031e4:	e027      	b.n	8003236 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ec:	2b28      	cmp	r3, #40	; 0x28
 80031ee:	d117      	bne.n	8003220 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2228      	movs	r2, #40	; 0x28
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800321e:	e007      	b.n	8003230 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7fd fd1e 	bl	8000c72 <HAL_I2C_ErrorCallback>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	14f8b589 	.word	0x14f8b589

08003248 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	0a1a      	lsrs	r2, r3, #8
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e008      	b.n	8003298 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d0e9      	beq.n	800326a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000000 	.word	0x20000000
 80032a8:	14f8b589 	.word	0x14f8b589

080032ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80032bc:	d103      	bne.n	80032c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80032c4:	e007      	b.n	80032d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032ce:	d102      	bne.n	80032d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2208      	movs	r2, #8
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e25b      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d075      	beq.n	80033ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003302:	4ba3      	ldr	r3, [pc, #652]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b04      	cmp	r3, #4
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4ba0      	ldr	r3, [pc, #640]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003316:	2b08      	cmp	r3, #8
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b9d      	ldr	r3, [pc, #628]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b99      	ldr	r3, [pc, #612]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x108>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e236      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x74>
 800334a:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a90      	ldr	r2, [pc, #576]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0x98>
 8003362:	4b8b      	ldr	r3, [pc, #556]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a8a      	ldr	r2, [pc, #552]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a87      	ldr	r2, [pc, #540]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xb0>
 800337c:	4b84      	ldr	r3, [pc, #528]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a83      	ldr	r2, [pc, #524]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fd fddc 	bl	8000f58 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fd fdd8 	bl	8000f58 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1fb      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b76      	ldr	r3, [pc, #472]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xc0>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fdc8 	bl	8000f58 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fdc4 	bl	8000f58 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e1e7      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0xe8>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fa:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d11c      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003412:	4b5f      	ldr	r3, [pc, #380]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d001      	beq.n	8003436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e1bb      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4952      	ldr	r1, [pc, #328]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344a:	e03a      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003454:	4b4f      	ldr	r3, [pc, #316]	; (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fd fd7d 	bl	8000f58 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003462:	f7fd fd79 	bl	8000f58 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e19c      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	4b46      	ldr	r3, [pc, #280]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4940      	ldr	r1, [pc, #256]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003496:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd fd5c 	bl	8000f58 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a4:	f7fd fd58 	bl	8000f58 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e17b      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d030      	beq.n	8003530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d016      	beq.n	8003504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034d6:	4b30      	ldr	r3, [pc, #192]	; (8003598 <HAL_RCC_OscConfig+0x2b4>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd fd3c 	bl	8000f58 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e4:	f7fd fd38 	bl	8000f58 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e15b      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0f0      	beq.n	80034e4 <HAL_RCC_OscConfig+0x200>
 8003502:	e015      	b.n	8003530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <HAL_RCC_OscConfig+0x2b4>)
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fd fd25 	bl	8000f58 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003512:	f7fd fd21 	bl	8000f58 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e144      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f0      	bne.n	8003512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a0 	beq.w	800367e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a0e      	ldr	r2, [pc, #56]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x2ac>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x2b8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d121      	bne.n	80035be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_OscConfig+0x2b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a07      	ldr	r2, [pc, #28]	; (800359c <HAL_RCC_OscConfig+0x2b8>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd fce7 	bl	8000f58 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e011      	b.n	80035b2 <HAL_RCC_OscConfig+0x2ce>
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	42470000 	.word	0x42470000
 8003598:	42470e80 	.word	0x42470e80
 800359c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fd fcda 	bl	8000f58 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0fd      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b2:	4b81      	ldr	r3, [pc, #516]	; (80037b8 <HAL_RCC_OscConfig+0x4d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x2f0>
 80035c6:	4b7d      	ldr	r3, [pc, #500]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a7c      	ldr	r2, [pc, #496]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	e01c      	b.n	800360e <HAL_RCC_OscConfig+0x32a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d10c      	bne.n	80035f6 <HAL_RCC_OscConfig+0x312>
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a76      	ldr	r2, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	4b74      	ldr	r3, [pc, #464]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a73      	ldr	r2, [pc, #460]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e00b      	b.n	800360e <HAL_RCC_OscConfig+0x32a>
 80035f6:	4b71      	ldr	r3, [pc, #452]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a70      	ldr	r2, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a6d      	ldr	r2, [pc, #436]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d015      	beq.n	8003642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fd fc9f 	bl	8000f58 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800361e:	f7fd fc9b 	bl	8000f58 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	f241 3288 	movw	r2, #5000	; 0x1388
 800362c:	4293      	cmp	r3, r2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0bc      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ee      	beq.n	800361e <HAL_RCC_OscConfig+0x33a>
 8003640:	e014      	b.n	800366c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fd fc89 	bl	8000f58 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fd fc85 	bl	8000f58 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0a6      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003660:	4b56      	ldr	r3, [pc, #344]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ee      	bne.n	800364a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003672:	4b52      	ldr	r3, [pc, #328]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a51      	ldr	r2, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8092 	beq.w	80037ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d05c      	beq.n	800374e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d141      	bne.n	8003720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <HAL_RCC_OscConfig+0x4dc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fd fc59 	bl	8000f58 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fd fc55 	bl	8000f58 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e078      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036bc:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	019b      	lsls	r3, r3, #6
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	3b01      	subs	r3, #1
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	4933      	ldr	r1, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_RCC_OscConfig+0x4dc>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fd fc2e 	bl	8000f58 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fd fc2a 	bl	8000f58 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e04d      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x41c>
 800371e:	e045      	b.n	80037ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x4dc>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fd fc17 	bl	8000f58 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372e:	f7fd fc13 	bl	8000f58 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e036      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <HAL_RCC_OscConfig+0x44a>
 800374c:	e02e      	b.n	80037ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e029      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_OscConfig+0x4d8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	429a      	cmp	r2, r3
 800376c:	d11c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d115      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003788:	4293      	cmp	r3, r2
 800378a:	d10d      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	42470060 	.word	0x42470060

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0cc      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d90c      	bls.n	8003800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d044      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d119      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d003      	beq.n	8003882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	2b03      	cmp	r3, #3
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e067      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4934      	ldr	r1, [pc, #208]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fd fb50 	bl	8000f58 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fd fb4c 	bl	8000f58 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e04f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d20c      	bcs.n	800390c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4601      	mov	r1, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	5cd3      	ldrb	r3, [r2, r3]
 800395e:	fa21 f303 	lsr.w	r3, r1, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fab0 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00
 8003980:	40023800 	.word	0x40023800
 8003984:	08003bf0 	.word	0x08003bf0
 8003988:	20000000 	.word	0x20000000
 800398c:	20000004 	.word	0x20000004

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	2300      	movs	r3, #0
 80039a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a6:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d007      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x32>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d008      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x38>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 80b4 	bne.w	8003b24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039bc:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039be:	60bb      	str	r3, [r7, #8]
       break;
 80039c0:	e0b3      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039c2:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039c4:	60bb      	str	r3, [r7, #8]
      break;
 80039c6:	e0b0      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039c8:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039d2:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04a      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039de:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	ea03 0501 	and.w	r5, r3, r1
 80039f4:	ea04 0602 	and.w	r6, r4, r2
 80039f8:	4629      	mov	r1, r5
 80039fa:	4632      	mov	r2, r6
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	0154      	lsls	r4, r2, #5
 8003a06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4622      	mov	r2, r4
 8003a10:	1b49      	subs	r1, r1, r5
 8003a12:	eb62 0206 	sbc.w	r2, r2, r6
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	0194      	lsls	r4, r2, #6
 8003a20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a24:	018b      	lsls	r3, r1, #6
 8003a26:	1a5b      	subs	r3, r3, r1
 8003a28:	eb64 0402 	sbc.w	r4, r4, r2
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	00e2      	lsls	r2, r4, #3
 8003a36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4614      	mov	r4, r2
 8003a40:	195b      	adds	r3, r3, r5
 8003a42:	eb44 0406 	adc.w	r4, r4, r6
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	0262      	lsls	r2, r4, #9
 8003a50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a54:	0259      	lsls	r1, r3, #9
 8003a56:	460b      	mov	r3, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	f7fc fdc2 	bl	80005f0 <__aeabi_uldivmod>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	460c      	mov	r4, r1
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e049      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	ea03 0501 	and.w	r5, r3, r1
 8003a8a:	ea04 0602 	and.w	r6, r4, r2
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4632      	mov	r2, r6
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0154      	lsls	r4, r2, #5
 8003a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa0:	014b      	lsls	r3, r1, #5
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	1b49      	subs	r1, r1, r5
 8003aa8:	eb62 0206 	sbc.w	r2, r2, r6
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	f04f 0400 	mov.w	r4, #0
 8003ab4:	0194      	lsls	r4, r2, #6
 8003ab6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aba:	018b      	lsls	r3, r1, #6
 8003abc:	1a5b      	subs	r3, r3, r1
 8003abe:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	00e2      	lsls	r2, r4, #3
 8003acc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ad0:	00d9      	lsls	r1, r3, #3
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	195b      	adds	r3, r3, r5
 8003ad8:	eb44 0406 	adc.w	r4, r4, r6
 8003adc:	f04f 0100 	mov.w	r1, #0
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	02a2      	lsls	r2, r4, #10
 8003ae6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aea:	0299      	lsls	r1, r3, #10
 8003aec:	460b      	mov	r3, r1
 8003aee:	4614      	mov	r4, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	4621      	mov	r1, r4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	f7fc fd77 	bl	80005f0 <__aeabi_uldivmod>
 8003b02:	4603      	mov	r3, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	60bb      	str	r3, [r7, #8]
      break;
 8003b22:	e002      	b.n	8003b2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b26:	60bb      	str	r3, [r7, #8]
      break;
 8003b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	40023800 	.word	0x40023800
 8003b38:	00f42400 	.word	0x00f42400
 8003b3c:	007a1200 	.word	0x007a1200

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b5c:	f7ff fff0 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b60:	4601      	mov	r1, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0a9b      	lsrs	r3, r3, #10
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08003c00 	.word	0x08003c00

08003b80 <__libc_init_array>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	4e0d      	ldr	r6, [pc, #52]	; (8003bb8 <__libc_init_array+0x38>)
 8003b84:	4c0d      	ldr	r4, [pc, #52]	; (8003bbc <__libc_init_array+0x3c>)
 8003b86:	1ba4      	subs	r4, r4, r6
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	2500      	movs	r5, #0
 8003b8c:	42a5      	cmp	r5, r4
 8003b8e:	d109      	bne.n	8003ba4 <__libc_init_array+0x24>
 8003b90:	4e0b      	ldr	r6, [pc, #44]	; (8003bc0 <__libc_init_array+0x40>)
 8003b92:	4c0c      	ldr	r4, [pc, #48]	; (8003bc4 <__libc_init_array+0x44>)
 8003b94:	f000 f820 	bl	8003bd8 <_init>
 8003b98:	1ba4      	subs	r4, r4, r6
 8003b9a:	10a4      	asrs	r4, r4, #2
 8003b9c:	2500      	movs	r5, #0
 8003b9e:	42a5      	cmp	r5, r4
 8003ba0:	d105      	bne.n	8003bae <__libc_init_array+0x2e>
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba8:	4798      	blx	r3
 8003baa:	3501      	adds	r5, #1
 8003bac:	e7ee      	b.n	8003b8c <__libc_init_array+0xc>
 8003bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bb2:	4798      	blx	r3
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	e7f2      	b.n	8003b9e <__libc_init_array+0x1e>
 8003bb8:	08003c10 	.word	0x08003c10
 8003bbc:	08003c10 	.word	0x08003c10
 8003bc0:	08003c10 	.word	0x08003c10
 8003bc4:	08003c14 	.word	0x08003c14

08003bc8 <memset>:
 8003bc8:	4402      	add	r2, r0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d100      	bne.n	8003bd2 <memset+0xa>
 8003bd0:	4770      	bx	lr
 8003bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd6:	e7f9      	b.n	8003bcc <memset+0x4>

08003bd8 <_init>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr

08003be4 <_fini>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr
