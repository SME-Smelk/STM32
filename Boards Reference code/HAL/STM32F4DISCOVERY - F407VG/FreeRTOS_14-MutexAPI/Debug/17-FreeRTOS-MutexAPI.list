
17-FreeRTOS-MutexAPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e7c  08005e7c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e84  08005e84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136b8  20000074  08005f00  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001372c  08005f00  0002372c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fb5  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000302f  00000000  00000000  00039059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  0003c088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  0003d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002331b  00000000  00000000  0003e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014ef1  00000000  00000000  000613fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d039b  00000000  00000000  000762ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  00146704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005d24 	.word	0x08005d24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005d24 	.word	0x08005d24

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	20013680 	.word	0x20013680

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b972 	b.w	8000588 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9e08      	ldr	r6, [sp, #32]
 80002c2:	4604      	mov	r4, r0
 80002c4:	4688      	mov	r8, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14b      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4615      	mov	r5, r2
 80002ce:	d967      	bls.n	80003a0 <__udivmoddi4+0xe4>
 80002d0:	fab2 f282 	clz	r2, r2
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0720 	rsb	r7, r2, #32
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	fa20 f707 	lsr.w	r7, r0, r7
 80002e2:	4095      	lsls	r5, r2
 80002e4:	ea47 0803 	orr.w	r8, r7, r3
 80002e8:	4094      	lsls	r4, r2
 80002ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ee:	0c23      	lsrs	r3, r4, #16
 80002f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f4:	fa1f fc85 	uxth.w	ip, r5
 80002f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000300:	fb07 f10c 	mul.w	r1, r7, ip
 8000304:	4299      	cmp	r1, r3
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x60>
 8000308:	18eb      	adds	r3, r5, r3
 800030a:	f107 30ff 	add.w	r0, r7, #4294967295
 800030e:	f080 811b 	bcs.w	8000548 <__udivmoddi4+0x28c>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 8118 	bls.w	8000548 <__udivmoddi4+0x28c>
 8000318:	3f02      	subs	r7, #2
 800031a:	442b      	add	r3, r5
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0fe 	udiv	r0, r3, lr
 8000324:	fb0e 3310 	mls	r3, lr, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000330:	45a4      	cmp	ip, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x290>
 800033e:	45a4      	cmp	ip, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x290>
 8000344:	3802      	subs	r0, #2
 8000346:	442c      	add	r4, r5
 8000348:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800034c:	eba4 040c 	sub.w	r4, r4, ip
 8000350:	2700      	movs	r7, #0
 8000352:	b11e      	cbz	r6, 800035c <__udivmoddi4+0xa0>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c6 4300 	strd	r4, r3, [r6]
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xbe>
 8000366:	2e00      	cmp	r6, #0
 8000368:	f000 80eb 	beq.w	8000542 <__udivmoddi4+0x286>
 800036c:	2700      	movs	r7, #0
 800036e:	e9c6 0100 	strd	r0, r1, [r6]
 8000372:	4638      	mov	r0, r7
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	2f00      	cmp	r7, #0
 8000380:	d147      	bne.n	8000412 <__udivmoddi4+0x156>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd0>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	4698      	mov	r8, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa0>
 800039a:	e9c6 4800 	strd	r4, r8, [r6]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa0>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xe8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 808f 	bne.w	80004cc <__udivmoddi4+0x210>
 80003ae:	1b49      	subs	r1, r1, r5
 80003b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b4:	fa1f f885 	uxth.w	r8, r5
 80003b8:	2701      	movs	r7, #1
 80003ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80003be:	0c23      	lsrs	r3, r4, #16
 80003c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c8:	fb08 f10c 	mul.w	r1, r8, ip
 80003cc:	4299      	cmp	r1, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d0:	18eb      	adds	r3, r5, r3
 80003d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x122>
 80003d8:	4299      	cmp	r1, r3
 80003da:	f200 80cd 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 80003de:	4684      	mov	ip, r0
 80003e0:	1a59      	subs	r1, r3, r1
 80003e2:	b2a3      	uxth	r3, r4
 80003e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	fb08 f800 	mul.w	r8, r8, r0
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x14c>
 80003f8:	192c      	adds	r4, r5, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14a>
 8000400:	45a0      	cmp	r8, r4
 8000402:	f200 80b6 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 8000406:	4618      	mov	r0, r3
 8000408:	eba4 0408 	sub.w	r4, r4, r8
 800040c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000410:	e79f      	b.n	8000352 <__udivmoddi4+0x96>
 8000412:	f1c7 0c20 	rsb	ip, r7, #32
 8000416:	40bb      	lsls	r3, r7
 8000418:	fa22 fe0c 	lsr.w	lr, r2, ip
 800041c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000420:	fa01 f407 	lsl.w	r4, r1, r7
 8000424:	fa20 f50c 	lsr.w	r5, r0, ip
 8000428:	fa21 f30c 	lsr.w	r3, r1, ip
 800042c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000430:	4325      	orrs	r5, r4
 8000432:	fbb3 f9f8 	udiv	r9, r3, r8
 8000436:	0c2c      	lsrs	r4, r5, #16
 8000438:	fb08 3319 	mls	r3, r8, r9, r3
 800043c:	fa1f fa8e 	uxth.w	sl, lr
 8000440:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000444:	fb09 f40a 	mul.w	r4, r9, sl
 8000448:	429c      	cmp	r4, r3
 800044a:	fa02 f207 	lsl.w	r2, r2, r7
 800044e:	fa00 f107 	lsl.w	r1, r0, r7
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000454:	eb1e 0303 	adds.w	r3, lr, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	f080 8087 	bcs.w	800056e <__udivmoddi4+0x2b2>
 8000460:	429c      	cmp	r4, r3
 8000462:	f240 8084 	bls.w	800056e <__udivmoddi4+0x2b2>
 8000466:	f1a9 0902 	sub.w	r9, r9, #2
 800046a:	4473      	add	r3, lr
 800046c:	1b1b      	subs	r3, r3, r4
 800046e:	b2ad      	uxth	r5, r5
 8000470:	fbb3 f0f8 	udiv	r0, r3, r8
 8000474:	fb08 3310 	mls	r3, r8, r0, r3
 8000478:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800047c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000480:	45a2      	cmp	sl, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1da>
 8000484:	eb1e 0404 	adds.w	r4, lr, r4
 8000488:	f100 33ff 	add.w	r3, r0, #4294967295
 800048c:	d26b      	bcs.n	8000566 <__udivmoddi4+0x2aa>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d969      	bls.n	8000566 <__udivmoddi4+0x2aa>
 8000492:	3802      	subs	r0, #2
 8000494:	4474      	add	r4, lr
 8000496:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	eba4 040a 	sub.w	r4, r4, sl
 80004a2:	454c      	cmp	r4, r9
 80004a4:	46c2      	mov	sl, r8
 80004a6:	464b      	mov	r3, r9
 80004a8:	d354      	bcc.n	8000554 <__udivmoddi4+0x298>
 80004aa:	d051      	beq.n	8000550 <__udivmoddi4+0x294>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d069      	beq.n	8000584 <__udivmoddi4+0x2c8>
 80004b0:	ebb1 050a 	subs.w	r5, r1, sl
 80004b4:	eb64 0403 	sbc.w	r4, r4, r3
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	40fc      	lsrs	r4, r7
 80004c0:	ea4c 0505 	orr.w	r5, ip, r5
 80004c4:	e9c6 5400 	strd	r5, r4, [r6]
 80004c8:	2700      	movs	r7, #0
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0xa0>
 80004cc:	f1c2 0320 	rsb	r3, r2, #32
 80004d0:	fa20 f703 	lsr.w	r7, r0, r3
 80004d4:	4095      	lsls	r5, r2
 80004d6:	fa01 f002 	lsl.w	r0, r1, r2
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e2:	4338      	orrs	r0, r7
 80004e4:	0c01      	lsrs	r1, r0, #16
 80004e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ea:	fa1f f885 	uxth.w	r8, r5
 80004ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f6:	fb07 f308 	mul.w	r3, r7, r8
 80004fa:	428b      	cmp	r3, r1
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x256>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f107 3cff 	add.w	ip, r7, #4294967295
 8000508:	d22f      	bcs.n	800056a <__udivmoddi4+0x2ae>
 800050a:	428b      	cmp	r3, r1
 800050c:	d92d      	bls.n	800056a <__udivmoddi4+0x2ae>
 800050e:	3f02      	subs	r7, #2
 8000510:	4429      	add	r1, r5
 8000512:	1acb      	subs	r3, r1, r3
 8000514:	b281      	uxth	r1, r0
 8000516:	fbb3 f0fe 	udiv	r0, r3, lr
 800051a:	fb0e 3310 	mls	r3, lr, r0, r3
 800051e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000522:	fb00 f308 	mul.w	r3, r0, r8
 8000526:	428b      	cmp	r3, r1
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x27e>
 800052a:	1869      	adds	r1, r5, r1
 800052c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000530:	d217      	bcs.n	8000562 <__udivmoddi4+0x2a6>
 8000532:	428b      	cmp	r3, r1
 8000534:	d915      	bls.n	8000562 <__udivmoddi4+0x2a6>
 8000536:	3802      	subs	r0, #2
 8000538:	4429      	add	r1, r5
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000540:	e73b      	b.n	80003ba <__udivmoddi4+0xfe>
 8000542:	4637      	mov	r7, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e709      	b.n	800035c <__udivmoddi4+0xa0>
 8000548:	4607      	mov	r7, r0
 800054a:	e6e7      	b.n	800031c <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x8c>
 8000550:	4541      	cmp	r1, r8
 8000552:	d2ab      	bcs.n	80004ac <__udivmoddi4+0x1f0>
 8000554:	ebb8 0a02 	subs.w	sl, r8, r2
 8000558:	eb69 020e 	sbc.w	r2, r9, lr
 800055c:	3801      	subs	r0, #1
 800055e:	4613      	mov	r3, r2
 8000560:	e7a4      	b.n	80004ac <__udivmoddi4+0x1f0>
 8000562:	4660      	mov	r0, ip
 8000564:	e7e9      	b.n	800053a <__udivmoddi4+0x27e>
 8000566:	4618      	mov	r0, r3
 8000568:	e795      	b.n	8000496 <__udivmoddi4+0x1da>
 800056a:	4667      	mov	r7, ip
 800056c:	e7d1      	b.n	8000512 <__udivmoddi4+0x256>
 800056e:	4681      	mov	r9, r0
 8000570:	e77c      	b.n	800046c <__udivmoddi4+0x1b0>
 8000572:	3802      	subs	r0, #2
 8000574:	442c      	add	r4, r5
 8000576:	e747      	b.n	8000408 <__udivmoddi4+0x14c>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	442b      	add	r3, r5
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	4638      	mov	r0, r7
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xda>
 8000584:	4637      	mov	r7, r6
 8000586:	e6e9      	b.n	800035c <__udivmoddi4+0xa0>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <USART2_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005c4:	f001 f9f4 	bl	80019b0 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 f8ff 	bl	80007d0 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20013638 	.word	0x20013638
 80005dc:	40004400 	.word	0x40004400

080005e0 <UART2_write>:

void UART2_write(char data[]){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe47 	bl	800027c <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <UART2_write+0x28>)
 80005fa:	f001 fa26 	bl	8001a4a <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20013638 	.word	0x20013638

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <main+0x70>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <main+0x70>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 f991 	bl	8000944 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f83d 	bl	80006a0 <SystemClock_Config>

	/* Configure the peripherals */
	USART2_UART_Init();
 8000626:	f7ff ffb1 	bl	800058c <USART2_UART_Init>
	//SEGGER_SYSVIEW_Start();

#ifdef USE_MUTEX
    /* Before a semaphore is used it must be explicitly created.  In this example
	a mutex type semaphore is created. */
    xMutex = xSemaphoreCreateMutex();
 800062a:	2001      	movs	r0, #1
 800062c:	f002 f852 	bl	80026d4 <xQueueCreateMutex>
 8000630:	4602      	mov	r2, r0
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <main+0x74>)
 8000634:	601a      	str	r2, [r3, #0]
#endif

	/* The tasks are going to use a pseudo random delay, seed the random number
	generator. */
	srand( 567 );
 8000636:	f240 2037 	movw	r0, #567	; 0x237
 800063a:	f005 fad3 	bl	8005be4 <srand>


#ifdef USE_MUTEX
	/* Only create the tasks if the semaphore was created successfully. */
	if( xMutex != NULL )
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <main+0x74>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d018      	beq.n	8000678 <main+0x6c>


		/* Create two instances of the tasks that attempt to write stdout.  The
		string they attempt to write is passed in as the task parameter.  The tasks
		are created at different priorities so some pre-emption will occur. */
		xTaskCreate( prvPrintTask1, "Print1", 240, "Task 1 ******************************************\r\n", 1, NULL );
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <main+0x78>)
 8000650:	22f0      	movs	r2, #240	; 0xf0
 8000652:	490d      	ldr	r1, [pc, #52]	; (8000688 <main+0x7c>)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <main+0x80>)
 8000656:	f002 fbe0 	bl	8002e1a <xTaskCreate>
		xTaskCreate( prvPrintTask2, "Print2", 240, "Task 2 ------------------------------------------\r\n", 2, NULL );
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <main+0x84>)
 8000664:	22f0      	movs	r2, #240	; 0xf0
 8000666:	490b      	ldr	r1, [pc, #44]	; (8000694 <main+0x88>)
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <main+0x8c>)
 800066a:	f002 fbd6 	bl	8002e1a <xTaskCreate>

		/* Start message */
		UART2_write("Demo of mutual exclusion using Mutex APIs\r\n");
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <main+0x90>)
 8000670:	f7ff ffb6 	bl	80005e0 <UART2_write>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 8000674:	f002 fd60 	bl	8003138 <vTaskStartScheduler>
	}
#endif
    /* If all is well we will never reach here as the scheduler will now be
    running the tasks.  If we do reach here then it is likely that there was
    insufficient heap memory available for a resource to be created. */
	while(1);
 8000678:	e7fe      	b.n	8000678 <main+0x6c>
 800067a:	bf00      	nop
 800067c:	e0001000 	.word	0xe0001000
 8000680:	20013678 	.word	0x20013678
 8000684:	08005d3c 	.word	0x08005d3c
 8000688:	08005d70 	.word	0x08005d70
 800068c:	0800075f 	.word	0x0800075f
 8000690:	08005d78 	.word	0x08005d78
 8000694:	08005dac 	.word	0x08005dac
 8000698:	08000773 	.word	0x08000773
 800069c:	08005db4 	.word	0x08005db4

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b096      	sub	sp, #88	; 0x58
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fa90 	bl	8005bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e4:	2308      	movs	r3, #8
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f2:	2307      	movs	r3, #7
 80006f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fc14 	bl	8000f28 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000706:	f000 f863 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000716:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2105      	movs	r1, #5
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe6d 	bl	8001408 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000734:	f000 f84c 	bl	80007d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800073c:	23c0      	movs	r3, #192	; 0xc0
 800073e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f850 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000752:	f000 f83d 	bl	80007d0 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3758      	adds	r7, #88	; 0x58
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <prvPrintTask1>:


static void prvPrintTask1( void *pvParameters )
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b084      	sub	sp, #16
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
char *pcStringToPrint;

	/* Two instances of this task are created so the string the task will send
	to prvNewPrintString() is passed in the task parameter.  Cast this to the
	required type. */
	pcStringToPrint = ( char * ) pvParameters;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		/* Print out the string using the newly defined function. */
		prvNewPrintString( pcStringToPrint );
 800076a:	68f8      	ldr	r0, [r7, #12]
 800076c:	f000 f80e 	bl	800078c <prvNewPrintString>
 8000770:	e7fb      	b.n	800076a <prvPrintTask1+0xc>

08000772 <prvPrintTask2>:
		rand() should be protected using a critical section. */
	}
}

static void prvPrintTask2( void *pvParameters )
{
 8000772:	b580      	push	{r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
char *pcStringToPrint;

	/* Two instances of this task are created so the string the task will send
	to prvNewPrintString() is passed in the task parameter.  Cast this to the
	required type. */
	pcStringToPrint = ( char * ) pvParameters;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		/* Print out the string using the newly defined function. */
		prvNewPrintString( pcStringToPrint );
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f000 f804 	bl	800078c <prvNewPrintString>
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		//vTaskDelay( rand() & 0XF );
		vTaskDelay(pdMS_TO_TICKS(100));
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f002 fc9f 	bl	80030c8 <vTaskDelay>
		prvNewPrintString( pcStringToPrint );
 800078a:	e7f8      	b.n	800077e <prvPrintTask2+0xc>

0800078c <prvNewPrintString>:
	}
}

static void prvNewPrintString( const portCHAR *pcString )
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( xMutex, portMAX_DELAY );
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <prvNewPrintString+0x3c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	4618      	mov	r0, r3
 800079e:	f002 f8bb 	bl	8002918 <xQueueSemaphoreTake>
	{
#endif
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */
		sprintf( cBuffer, "%s", pcString );
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <prvNewPrintString+0x40>)
 80007a6:	f005 fa41 	bl	8005c2c <strcpy>
		UART2_write(cBuffer);
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <prvNewPrintString+0x40>)
 80007ac:	f7ff ff18 	bl	80005e0 <UART2_write>
#ifdef USE_MUTEX
	}
	xSemaphoreGive( xMutex );
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <prvNewPrintString+0x3c>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	f001 ffa3 	bl	8002704 <xQueueGenericSend>
#endif
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20013678 	.word	0x20013678
 80007cc:	20000090 	.word	0x20000090

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e2:	2003      	movs	r0, #3
 80007e4:	f000 f9d2 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	210f      	movs	r1, #15
 80007ec:	f06f 0001 	mvn.w	r0, #1
 80007f0:	f000 f9d7 	bl	8000ba2 <HAL_NVIC_SetPriority>

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <HAL_UART_MspInit+0x84>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d12b      	bne.n	8000872 <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a17      	ldr	r2, [pc, #92]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_UART_MspInit+0x88>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_UART_MspInit+0x88>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_UART_MspInit+0x88>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000852:	230c      	movs	r3, #12
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <HAL_UART_MspInit+0x8c>)
 800086e:	f000 f9c1 	bl	8000bf4 <HAL_GPIO_Init>

  }
}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40004400 	.word	0x40004400
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0

}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f899 	bl	80009e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008b6:	f003 fc57 	bl	8004168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <_sbrk+0x50>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x16>
		heap_end = &end;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <_sbrk+0x50>)
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <_sbrk+0x54>)
 80008d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <_sbrk+0x50>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <_sbrk+0x50>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4413      	add	r3, r2
 80008e4:	466a      	mov	r2, sp
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d907      	bls.n	80008fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008ea:	f005 f92f 	bl	8005b4c <__errno>
 80008ee:	4602      	mov	r2, r0
 80008f0:	230c      	movs	r3, #12
 80008f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	e006      	b.n	8000908 <_sbrk+0x48>
	}

	heap_end += incr;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_sbrk+0x50>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a03      	ldr	r2, [pc, #12]	; (8000910 <_sbrk+0x50>)
 8000904:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000e0 	.word	0x200000e0
 8000914:	20013730 	.word	0x20013730

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SystemInit+0x28>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <SystemInit+0x28>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0x28>)
 800092e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000932:	609a      	str	r2, [r3, #8]
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f90d 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff ff31 	bl	80007de <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f917 	bl	8000bda <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f8ed 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	2001367c 	.word	0x2001367c

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2001367c 	.word	0x2001367c

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	; (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	; 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	; 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
	...

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff8e 	bl	8000a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff47 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff5c 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff8e 	bl	8000ae0 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5d 	bl	8000a8c <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffb0 	bl	8000b48 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e16b      	b.n	8000ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 815a 	bne.w	8000ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d00b      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d007      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c42:	2b11      	cmp	r3, #17
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b12      	cmp	r3, #18
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0xfc>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80b4 	beq.w	8000ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a5e      	ldr	r2, [pc, #376]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_GPIO_Init+0x308>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a5a      	ldr	r2, [pc, #360]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a51      	ldr	r2, [pc, #324]	; (8000f04 <HAL_GPIO_Init+0x310>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d02b      	beq.n	8000e1a <HAL_GPIO_Init+0x226>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a50      	ldr	r2, [pc, #320]	; (8000f08 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d025      	beq.n	8000e16 <HAL_GPIO_Init+0x222>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01f      	beq.n	8000e12 <HAL_GPIO_Init+0x21e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x216>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_GPIO_Init+0x324>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x212>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4b      	ldr	r2, [pc, #300]	; (8000f1c <HAL_GPIO_Init+0x328>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x20e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x20a>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e00e      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000dfe:	2308      	movs	r3, #8
 8000e00:	e00c      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e02:	2306      	movs	r3, #6
 8000e04:	e00a      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e06:	2305      	movs	r3, #5
 8000e08:	e008      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e004      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e002      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x228>
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	f002 0203 	and.w	r2, r2, #3
 8000e22:	0092      	lsls	r2, r2, #2
 8000e24:	4093      	lsls	r3, r2
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e2c:	4934      	ldr	r1, [pc, #208]	; (8000f00 <HAL_GPIO_Init+0x30c>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	3302      	adds	r3, #2
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3a:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e5e:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e88:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_GPIO_Init+0x330>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	2b0f      	cmp	r3, #15
 8000eec:	f67f ae90 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3724      	adds	r7, #36	; 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40013800 	.word	0x40013800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021c00 	.word	0x40021c00
 8000f24:	40013c00 	.word	0x40013c00

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e25b      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d075      	beq.n	8001032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f46:	4ba3      	ldr	r3, [pc, #652]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d00c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f52:	4ba0      	ldr	r3, [pc, #640]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d112      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5e:	4b9d      	ldr	r3, [pc, #628]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f6a:	d10b      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	4b99      	ldr	r3, [pc, #612]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d05b      	beq.n	8001030 <HAL_RCC_OscConfig+0x108>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d157      	bne.n	8001030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e236      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d106      	bne.n	8000f9c <HAL_RCC_OscConfig+0x74>
 8000f8e:	4b91      	ldr	r3, [pc, #580]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a90      	ldr	r2, [pc, #576]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e01d      	b.n	8000fd8 <HAL_RCC_OscConfig+0xb0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x98>
 8000fa6:	4b8b      	ldr	r3, [pc, #556]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a8a      	ldr	r2, [pc, #552]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b88      	ldr	r3, [pc, #544]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a87      	ldr	r2, [pc, #540]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0xb0>
 8000fc0:	4b84      	ldr	r3, [pc, #528]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a83      	ldr	r2, [pc, #524]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b81      	ldr	r3, [pc, #516]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a80      	ldr	r2, [pc, #512]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fd16 	bl	8000a10 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fd12 	bl	8000a10 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e1fb      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b76      	ldr	r3, [pc, #472]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xc0>
 8001006:	e014      	b.n	8001032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fd02 	bl	8000a10 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fcfe 	bl	8000a10 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1e7      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	4b6c      	ldr	r3, [pc, #432]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0xe8>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800103e:	4b65      	ldr	r3, [pc, #404]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11c      	bne.n	8001090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x152>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1bb      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4952      	ldr	r1, [pc, #328]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e03a      	b.n	8001106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <HAL_RCC_OscConfig+0x2b0>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109e:	f7ff fcb7 	bl	8000a10 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fcb3 	bl	8000a10 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e19c      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4940      	ldr	r1, [pc, #256]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_RCC_OscConfig+0x2b0>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc96 	bl	8000a10 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc92 	bl	8000a10 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e17b      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d030      	beq.n	8001174 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x2b4>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fc76 	bl	8000a10 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fc72 	bl	8000a10 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e15b      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x200>
 8001146:	e015      	b.n	8001174 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x2b4>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fc5f 	bl	8000a10 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001156:	f7ff fc5b 	bl	8000a10 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e144      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800116a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f0      	bne.n	8001156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80a0 	beq.w	80012c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001182:	2300      	movs	r3, #0
 8001184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001186:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x2b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d121      	bne.n	8001202 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_RCC_OscConfig+0x2b8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_RCC_OscConfig+0x2b8>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fc21 	bl	8000a10 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e011      	b.n	80011f6 <HAL_RCC_OscConfig+0x2ce>
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	42470000 	.word	0x42470000
 80011dc:	42470e80 	.word	0x42470e80
 80011e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e4:	f7ff fc14 	bl	8000a10 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e0fd      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b81      	ldr	r3, [pc, #516]	; (80013fc <HAL_RCC_OscConfig+0x4d4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <HAL_RCC_OscConfig+0x2f0>
 800120a:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 800120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120e:	4a7c      	ldr	r2, [pc, #496]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6713      	str	r3, [r2, #112]	; 0x70
 8001216:	e01c      	b.n	8001252 <HAL_RCC_OscConfig+0x32a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d10c      	bne.n	800123a <HAL_RCC_OscConfig+0x312>
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001224:	4a76      	ldr	r2, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6713      	str	r3, [r2, #112]	; 0x70
 800122c:	4b74      	ldr	r3, [pc, #464]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	4a73      	ldr	r2, [pc, #460]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6713      	str	r3, [r2, #112]	; 0x70
 8001238:	e00b      	b.n	8001252 <HAL_RCC_OscConfig+0x32a>
 800123a:	4b71      	ldr	r3, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123e:	4a70      	ldr	r2, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	6713      	str	r3, [r2, #112]	; 0x70
 8001246:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124a:	4a6d      	ldr	r2, [pc, #436]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 800124c:	f023 0304 	bic.w	r3, r3, #4
 8001250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d015      	beq.n	8001286 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125a:	f7ff fbd9 	bl	8000a10 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	e00a      	b.n	8001278 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fbd5 	bl	8000a10 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e0bc      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ee      	beq.n	8001262 <HAL_RCC_OscConfig+0x33a>
 8001284:	e014      	b.n	80012b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fbc3 	bl	8000a10 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fbbf 	bl	8000a10 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	; 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e0a6      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ee      	bne.n	800128e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d105      	bne.n	80012c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a51      	ldr	r2, [pc, #324]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 80012bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 8092 	beq.w	80013f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d05c      	beq.n	8001392 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d141      	bne.n	8001364 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e0:	4b48      	ldr	r3, [pc, #288]	; (8001404 <HAL_RCC_OscConfig+0x4dc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb93 	bl	8000a10 <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ee:	f7ff fb8f 	bl	8000a10 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e078      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001300:	4b3f      	ldr	r3, [pc, #252]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f0      	bne.n	80012ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	431a      	orrs	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	019b      	lsls	r3, r3, #6
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	3b01      	subs	r3, #1
 8001326:	041b      	lsls	r3, r3, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	061b      	lsls	r3, r3, #24
 8001330:	4933      	ldr	r1, [pc, #204]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_RCC_OscConfig+0x4dc>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb68 	bl	8000a10 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001344:	f7ff fb64 	bl	8000a10 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e04d      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0x41c>
 8001362:	e045      	b.n	80013f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <HAL_RCC_OscConfig+0x4dc>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fb51 	bl	8000a10 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fb4d 	bl	8000a10 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e036      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x44a>
 8001390:	e02e      	b.n	80013f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e029      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d115      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d10d      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000
 8001400:	40023800 	.word	0x40023800
 8001404:	42470060 	.word	0x42470060

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0cc      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b68      	ldr	r3, [pc, #416]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 030f 	and.w	r3, r3, #15
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d90c      	bls.n	8001444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0b8      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a52      	ldr	r2, [pc, #328]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800147e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	494d      	ldr	r1, [pc, #308]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d044      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d119      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e07f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d003      	beq.n	80014c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e06f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e067      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4934      	ldr	r1, [pc, #208]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fa8a 	bl	8000a10 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fa86 	bl	8000a10 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e04f      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d20c      	bcs.n	8001550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e032      	b.n	80015b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	490e      	ldr	r1, [pc, #56]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	4313      	orrs	r3, r2
 800158c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800158e:	f000 f821 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001592:	4601      	mov	r1, r0
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	fa21 f303 	lsr.w	r3, r1, r3
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f9ea 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00
 80015c4:	40023800 	.word	0x40023800
 80015c8:	08005e58 	.word	0x08005e58
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d007      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x32>
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d008      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x38>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80b4 	bne.w	8001768 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001600:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001602:	60bb      	str	r3, [r7, #8]
       break;
 8001604:	e0b3      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001606:	4b5e      	ldr	r3, [pc, #376]	; (8001780 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001608:	60bb      	str	r3, [r7, #8]
      break;
 800160a:	e0b0      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160c:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001614:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001616:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d04a      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	099b      	lsrs	r3, r3, #6
 8001628:	f04f 0400 	mov.w	r4, #0
 800162c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	ea03 0501 	and.w	r5, r3, r1
 8001638:	ea04 0602 	and.w	r6, r4, r2
 800163c:	4629      	mov	r1, r5
 800163e:	4632      	mov	r2, r6
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	f04f 0400 	mov.w	r4, #0
 8001648:	0154      	lsls	r4, r2, #5
 800164a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800164e:	014b      	lsls	r3, r1, #5
 8001650:	4619      	mov	r1, r3
 8001652:	4622      	mov	r2, r4
 8001654:	1b49      	subs	r1, r1, r5
 8001656:	eb62 0206 	sbc.w	r2, r2, r6
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	f04f 0400 	mov.w	r4, #0
 8001662:	0194      	lsls	r4, r2, #6
 8001664:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001668:	018b      	lsls	r3, r1, #6
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	eb64 0402 	sbc.w	r4, r4, r2
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	00e2      	lsls	r2, r4, #3
 800167a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800167e:	00d9      	lsls	r1, r3, #3
 8001680:	460b      	mov	r3, r1
 8001682:	4614      	mov	r4, r2
 8001684:	195b      	adds	r3, r3, r5
 8001686:	eb44 0406 	adc.w	r4, r4, r6
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	0262      	lsls	r2, r4, #9
 8001694:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001698:	0259      	lsls	r1, r3, #9
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f04f 0400 	mov.w	r4, #0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4623      	mov	r3, r4
 80016ac:	f7fe fdee 	bl	800028c <__aeabi_uldivmod>
 80016b0:	4603      	mov	r3, r0
 80016b2:	460c      	mov	r4, r1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e049      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	099b      	lsrs	r3, r3, #6
 80016be:	f04f 0400 	mov.w	r4, #0
 80016c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	ea03 0501 	and.w	r5, r3, r1
 80016ce:	ea04 0602 	and.w	r6, r4, r2
 80016d2:	4629      	mov	r1, r5
 80016d4:	4632      	mov	r2, r6
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	f04f 0400 	mov.w	r4, #0
 80016de:	0154      	lsls	r4, r2, #5
 80016e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016e4:	014b      	lsls	r3, r1, #5
 80016e6:	4619      	mov	r1, r3
 80016e8:	4622      	mov	r2, r4
 80016ea:	1b49      	subs	r1, r1, r5
 80016ec:	eb62 0206 	sbc.w	r2, r2, r6
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	0194      	lsls	r4, r2, #6
 80016fa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016fe:	018b      	lsls	r3, r1, #6
 8001700:	1a5b      	subs	r3, r3, r1
 8001702:	eb64 0402 	sbc.w	r4, r4, r2
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	00e2      	lsls	r2, r4, #3
 8001710:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001714:	00d9      	lsls	r1, r3, #3
 8001716:	460b      	mov	r3, r1
 8001718:	4614      	mov	r4, r2
 800171a:	195b      	adds	r3, r3, r5
 800171c:	eb44 0406 	adc.w	r4, r4, r6
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	02a2      	lsls	r2, r4, #10
 800172a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800172e:	0299      	lsls	r1, r3, #10
 8001730:	460b      	mov	r3, r1
 8001732:	4614      	mov	r4, r2
 8001734:	4618      	mov	r0, r3
 8001736:	4621      	mov	r1, r4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f04f 0400 	mov.w	r4, #0
 800173e:	461a      	mov	r2, r3
 8001740:	4623      	mov	r3, r4
 8001742:	f7fe fda3 	bl	800028c <__aeabi_uldivmod>
 8001746:	4603      	mov	r3, r0
 8001748:	460c      	mov	r4, r1
 800174a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	3301      	adds	r3, #1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	60bb      	str	r3, [r7, #8]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800176a:	60bb      	str	r3, [r7, #8]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	68bb      	ldr	r3, [r7, #8]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	007a1200 	.word	0x007a1200

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <HAL_RCC_GetHCLKFreq+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017a0:	f7ff fff0 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a4:	4601      	mov	r1, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0a9b      	lsrs	r3, r3, #10
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4a03      	ldr	r2, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08005e68 	.word	0x08005e68

080017c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017c8:	f7ff ffdc 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017cc:	4601      	mov	r1, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0b5b      	lsrs	r3, r3, #13
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08005e68 	.word	0x08005e68

080017ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001810:	2b00      	cmp	r3, #0
 8001812:	d035      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001814:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800181a:	f7ff f8f9 	bl	8000a10 <HAL_GetTick>
 800181e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001822:	f7ff f8f5 	bl	8000a10 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e0b0      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001834:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	019a      	lsls	r2, r3, #6
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	071b      	lsls	r3, r3, #28
 800184c:	4955      	ldr	r1, [pc, #340]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001854:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800185a:	f7ff f8d9 	bl	8000a10 <HAL_GetTick>
 800185e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001862:	f7ff f8d5 	bl	8000a10 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e090      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8083 	beq.w	8001994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a43      	ldr	r2, [pc, #268]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018b6:	f7ff f8ab 	bl	8000a10 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7ff f8a7 	bl	8000a10 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e062      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02f      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d028      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001902:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001910:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d114      	bne.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001922:	f7ff f875 	bl	8000a10 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f871 	bl	8000a10 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e02a      	b.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ee      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001958:	d10d      	bne.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e005      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800197c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001980:	6093      	str	r3, [r2, #8]
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	4905      	ldr	r1, [pc, #20]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001990:	4313      	orrs	r3, r2
 8001992:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	42470068 	.word	0x42470068
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000
 80019ac:	42470e40 	.word	0x42470e40

080019b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e03f      	b.n	8001a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7fe ff0e 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f90b 	bl	8001c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	f040 8083 	bne.w	8001b72 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_UART_Transmit+0x2e>
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e07b      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_UART_Transmit+0x40>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e074      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2221      	movs	r2, #33	; 0x21
 8001a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001aa0:	f7fe ffb6 	bl	8000a10 <HAL_GetTick>
 8001aa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	88fa      	ldrh	r2, [r7, #6]
 8001aaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	88fa      	ldrh	r2, [r7, #6]
 8001ab0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001aba:	e042      	b.n	8001b42 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad2:	d122      	bne.n	8001b1a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f84c 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e042      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b00:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	e017      	b.n	8001b42 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	e013      	b.n	8001b42 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 f829 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e01f      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	60ba      	str	r2, [r7, #8]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1b7      	bne.n	8001abc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2140      	movs	r1, #64	; 0x40
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f810 	bl	8001b7c <UART_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e006      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8c:	e02c      	b.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d028      	beq.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <UART_WaitOnFlagUntilTimeout+0x30>
 8001b9c:	f7fe ff38 	bl	8000a10 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d21d      	bcs.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001bba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e00f      	b.n	8001c08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	bf0c      	ite	eq
 8001bf8:	2301      	moveq	r3, #1
 8001bfa:	2300      	movne	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d0c3      	beq.n	8001b8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c52:	f023 030c 	bic.w	r3, r3, #12
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c7e:	f040 818b 	bne.w	8001f98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4ac1      	ldr	r2, [pc, #772]	; (8001f8c <UART_SetConfig+0x37c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d005      	beq.n	8001c98 <UART_SetConfig+0x88>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4abf      	ldr	r2, [pc, #764]	; (8001f90 <UART_SetConfig+0x380>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 80bd 	bne.w	8001e12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c98:	f7ff fd94 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8001c9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	461d      	mov	r5, r3
 8001ca2:	f04f 0600 	mov.w	r6, #0
 8001ca6:	46a8      	mov	r8, r5
 8001ca8:	46b1      	mov	r9, r6
 8001caa:	eb18 0308 	adds.w	r3, r8, r8
 8001cae:	eb49 0409 	adc.w	r4, r9, r9
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	46a1      	mov	r9, r4
 8001cb6:	eb18 0805 	adds.w	r8, r8, r5
 8001cba:	eb49 0906 	adc.w	r9, r9, r6
 8001cbe:	f04f 0100 	mov.w	r1, #0
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001cca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001cce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001cd2:	4688      	mov	r8, r1
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	eb18 0005 	adds.w	r0, r8, r5
 8001cda:	eb49 0106 	adc.w	r1, r9, r6
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	f04f 0600 	mov.w	r6, #0
 8001ce8:	196b      	adds	r3, r5, r5
 8001cea:	eb46 0406 	adc.w	r4, r6, r6
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f7fe facb 	bl	800028c <__aeabi_uldivmod>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4ba5      	ldr	r3, [pc, #660]	; (8001f94 <UART_SetConfig+0x384>)
 8001cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	f04f 0600 	mov.w	r6, #0
 8001d10:	46a9      	mov	r9, r5
 8001d12:	46b2      	mov	sl, r6
 8001d14:	eb19 0309 	adds.w	r3, r9, r9
 8001d18:	eb4a 040a 	adc.w	r4, sl, sl
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	46a2      	mov	sl, r4
 8001d20:	eb19 0905 	adds.w	r9, r9, r5
 8001d24:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	4692      	mov	sl, r2
 8001d40:	eb19 0005 	adds.w	r0, r9, r5
 8001d44:	eb4a 0106 	adc.w	r1, sl, r6
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	f04f 0600 	mov.w	r6, #0
 8001d52:	196b      	adds	r3, r5, r5
 8001d54:	eb46 0406 	adc.w	r4, r6, r6
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	f7fe fa96 	bl	800028c <__aeabi_uldivmod>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <UART_SetConfig+0x384>)
 8001d68:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6c:	095b      	lsrs	r3, r3, #5
 8001d6e:	2164      	movs	r1, #100	; 0x64
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	3332      	adds	r3, #50	; 0x32
 8001d7a:	4a86      	ldr	r2, [pc, #536]	; (8001f94 <UART_SetConfig+0x384>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d88:	4498      	add	r8, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	461d      	mov	r5, r3
 8001d8e:	f04f 0600 	mov.w	r6, #0
 8001d92:	46a9      	mov	r9, r5
 8001d94:	46b2      	mov	sl, r6
 8001d96:	eb19 0309 	adds.w	r3, r9, r9
 8001d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8001d9e:	4699      	mov	r9, r3
 8001da0:	46a2      	mov	sl, r4
 8001da2:	eb19 0905 	adds.w	r9, r9, r5
 8001da6:	eb4a 0a06 	adc.w	sl, sl, r6
 8001daa:	f04f 0100 	mov.w	r1, #0
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001dbe:	4689      	mov	r9, r1
 8001dc0:	4692      	mov	sl, r2
 8001dc2:	eb19 0005 	adds.w	r0, r9, r5
 8001dc6:	eb4a 0106 	adc.w	r1, sl, r6
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	461d      	mov	r5, r3
 8001dd0:	f04f 0600 	mov.w	r6, #0
 8001dd4:	196b      	adds	r3, r5, r5
 8001dd6:	eb46 0406 	adc.w	r4, r6, r6
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4623      	mov	r3, r4
 8001dde:	f7fe fa55 	bl	800028c <__aeabi_uldivmod>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <UART_SetConfig+0x384>)
 8001dea:	fba3 1302 	umull	r1, r3, r3, r2
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2164      	movs	r1, #100	; 0x64
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	3332      	adds	r3, #50	; 0x32
 8001dfc:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <UART_SetConfig+0x384>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	f003 0207 	and.w	r2, r3, #7
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4442      	add	r2, r8
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e26f      	b.n	80022f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e12:	f7ff fcc3 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8001e16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	f04f 0600 	mov.w	r6, #0
 8001e20:	46a8      	mov	r8, r5
 8001e22:	46b1      	mov	r9, r6
 8001e24:	eb18 0308 	adds.w	r3, r8, r8
 8001e28:	eb49 0409 	adc.w	r4, r9, r9
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	46a1      	mov	r9, r4
 8001e30:	eb18 0805 	adds.w	r8, r8, r5
 8001e34:	eb49 0906 	adc.w	r9, r9, r6
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e4c:	4688      	mov	r8, r1
 8001e4e:	4691      	mov	r9, r2
 8001e50:	eb18 0005 	adds.w	r0, r8, r5
 8001e54:	eb49 0106 	adc.w	r1, r9, r6
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	f04f 0600 	mov.w	r6, #0
 8001e62:	196b      	adds	r3, r5, r5
 8001e64:	eb46 0406 	adc.w	r4, r6, r6
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7fe fa0e 	bl	800028c <__aeabi_uldivmod>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <UART_SetConfig+0x384>)
 8001e78:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	461d      	mov	r5, r3
 8001e86:	f04f 0600 	mov.w	r6, #0
 8001e8a:	46a9      	mov	r9, r5
 8001e8c:	46b2      	mov	sl, r6
 8001e8e:	eb19 0309 	adds.w	r3, r9, r9
 8001e92:	eb4a 040a 	adc.w	r4, sl, sl
 8001e96:	4699      	mov	r9, r3
 8001e98:	46a2      	mov	sl, r4
 8001e9a:	eb19 0905 	adds.w	r9, r9, r5
 8001e9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001eb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001eb6:	4689      	mov	r9, r1
 8001eb8:	4692      	mov	sl, r2
 8001eba:	eb19 0005 	adds.w	r0, r9, r5
 8001ebe:	eb4a 0106 	adc.w	r1, sl, r6
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	f04f 0600 	mov.w	r6, #0
 8001ecc:	196b      	adds	r3, r5, r5
 8001ece:	eb46 0406 	adc.w	r4, r6, r6
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	f7fe f9d9 	bl	800028c <__aeabi_uldivmod>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <UART_SetConfig+0x384>)
 8001ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	2164      	movs	r1, #100	; 0x64
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	3332      	adds	r3, #50	; 0x32
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <UART_SetConfig+0x384>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f02:	4498      	add	r8, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	461d      	mov	r5, r3
 8001f08:	f04f 0600 	mov.w	r6, #0
 8001f0c:	46a9      	mov	r9, r5
 8001f0e:	46b2      	mov	sl, r6
 8001f10:	eb19 0309 	adds.w	r3, r9, r9
 8001f14:	eb4a 040a 	adc.w	r4, sl, sl
 8001f18:	4699      	mov	r9, r3
 8001f1a:	46a2      	mov	sl, r4
 8001f1c:	eb19 0905 	adds.w	r9, r9, r5
 8001f20:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f24:	f04f 0100 	mov.w	r1, #0
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f38:	4689      	mov	r9, r1
 8001f3a:	4692      	mov	sl, r2
 8001f3c:	eb19 0005 	adds.w	r0, r9, r5
 8001f40:	eb4a 0106 	adc.w	r1, sl, r6
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	461d      	mov	r5, r3
 8001f4a:	f04f 0600 	mov.w	r6, #0
 8001f4e:	196b      	adds	r3, r5, r5
 8001f50:	eb46 0406 	adc.w	r4, r6, r6
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	f7fe f998 	bl	800028c <__aeabi_uldivmod>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	460c      	mov	r4, r1
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <UART_SetConfig+0x384>)
 8001f64:	fba3 1302 	umull	r1, r3, r3, r2
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	2164      	movs	r1, #100	; 0x64
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	3332      	adds	r3, #50	; 0x32
 8001f76:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <UART_SetConfig+0x384>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	f003 0207 	and.w	r2, r3, #7
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4442      	add	r2, r8
 8001f88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f8a:	e1b2      	b.n	80022f2 <UART_SetConfig+0x6e2>
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40011400 	.word	0x40011400
 8001f94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4ad7      	ldr	r2, [pc, #860]	; (80022fc <UART_SetConfig+0x6ec>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d005      	beq.n	8001fae <UART_SetConfig+0x39e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4ad6      	ldr	r2, [pc, #856]	; (8002300 <UART_SetConfig+0x6f0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	f040 80d1 	bne.w	8002150 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fae:	f7ff fc09 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8001fb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	469a      	mov	sl, r3
 8001fb8:	f04f 0b00 	mov.w	fp, #0
 8001fbc:	46d0      	mov	r8, sl
 8001fbe:	46d9      	mov	r9, fp
 8001fc0:	eb18 0308 	adds.w	r3, r8, r8
 8001fc4:	eb49 0409 	adc.w	r4, r9, r9
 8001fc8:	4698      	mov	r8, r3
 8001fca:	46a1      	mov	r9, r4
 8001fcc:	eb18 080a 	adds.w	r8, r8, sl
 8001fd0:	eb49 090b 	adc.w	r9, r9, fp
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fe0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fe4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fe8:	4688      	mov	r8, r1
 8001fea:	4691      	mov	r9, r2
 8001fec:	eb1a 0508 	adds.w	r5, sl, r8
 8001ff0:	eb4b 0609 	adc.w	r6, fp, r9
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	f04f 0400 	mov.w	r4, #0
 8002006:	0094      	lsls	r4, r2, #2
 8002008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800200c:	008b      	lsls	r3, r1, #2
 800200e:	461a      	mov	r2, r3
 8002010:	4623      	mov	r3, r4
 8002012:	4628      	mov	r0, r5
 8002014:	4631      	mov	r1, r6
 8002016:	f7fe f939 	bl	800028c <__aeabi_uldivmod>
 800201a:	4603      	mov	r3, r0
 800201c:	460c      	mov	r4, r1
 800201e:	461a      	mov	r2, r3
 8002020:	4bb8      	ldr	r3, [pc, #736]	; (8002304 <UART_SetConfig+0x6f4>)
 8002022:	fba3 2302 	umull	r2, r3, r3, r2
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	469b      	mov	fp, r3
 8002030:	f04f 0c00 	mov.w	ip, #0
 8002034:	46d9      	mov	r9, fp
 8002036:	46e2      	mov	sl, ip
 8002038:	eb19 0309 	adds.w	r3, r9, r9
 800203c:	eb4a 040a 	adc.w	r4, sl, sl
 8002040:	4699      	mov	r9, r3
 8002042:	46a2      	mov	sl, r4
 8002044:	eb19 090b 	adds.w	r9, r9, fp
 8002048:	eb4a 0a0c 	adc.w	sl, sl, ip
 800204c:	f04f 0100 	mov.w	r1, #0
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800205c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002060:	4689      	mov	r9, r1
 8002062:	4692      	mov	sl, r2
 8002064:	eb1b 0509 	adds.w	r5, fp, r9
 8002068:	eb4c 060a 	adc.w	r6, ip, sl
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	f04f 0400 	mov.w	r4, #0
 800207e:	0094      	lsls	r4, r2, #2
 8002080:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002084:	008b      	lsls	r3, r1, #2
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	4628      	mov	r0, r5
 800208c:	4631      	mov	r1, r6
 800208e:	f7fe f8fd 	bl	800028c <__aeabi_uldivmod>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	461a      	mov	r2, r3
 8002098:	4b9a      	ldr	r3, [pc, #616]	; (8002304 <UART_SetConfig+0x6f4>)
 800209a:	fba3 1302 	umull	r1, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2164      	movs	r1, #100	; 0x64
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	3332      	adds	r3, #50	; 0x32
 80020ac:	4a95      	ldr	r2, [pc, #596]	; (8002304 <UART_SetConfig+0x6f4>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b8:	4498      	add	r8, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	469b      	mov	fp, r3
 80020be:	f04f 0c00 	mov.w	ip, #0
 80020c2:	46d9      	mov	r9, fp
 80020c4:	46e2      	mov	sl, ip
 80020c6:	eb19 0309 	adds.w	r3, r9, r9
 80020ca:	eb4a 040a 	adc.w	r4, sl, sl
 80020ce:	4699      	mov	r9, r3
 80020d0:	46a2      	mov	sl, r4
 80020d2:	eb19 090b 	adds.w	r9, r9, fp
 80020d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020ee:	4689      	mov	r9, r1
 80020f0:	4692      	mov	sl, r2
 80020f2:	eb1b 0509 	adds.w	r5, fp, r9
 80020f6:	eb4c 060a 	adc.w	r6, ip, sl
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4619      	mov	r1, r3
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f04f 0400 	mov.w	r4, #0
 800210c:	0094      	lsls	r4, r2, #2
 800210e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002112:	008b      	lsls	r3, r1, #2
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	4628      	mov	r0, r5
 800211a:	4631      	mov	r1, r6
 800211c:	f7fe f8b6 	bl	800028c <__aeabi_uldivmod>
 8002120:	4603      	mov	r3, r0
 8002122:	460c      	mov	r4, r1
 8002124:	461a      	mov	r2, r3
 8002126:	4b77      	ldr	r3, [pc, #476]	; (8002304 <UART_SetConfig+0x6f4>)
 8002128:	fba3 1302 	umull	r1, r3, r3, r2
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	2164      	movs	r1, #100	; 0x64
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	3332      	adds	r3, #50	; 0x32
 800213a:	4a72      	ldr	r2, [pc, #456]	; (8002304 <UART_SetConfig+0x6f4>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4442      	add	r2, r8
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e0d0      	b.n	80022f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002150:	f7ff fb24 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8002154:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	469a      	mov	sl, r3
 800215a:	f04f 0b00 	mov.w	fp, #0
 800215e:	46d0      	mov	r8, sl
 8002160:	46d9      	mov	r9, fp
 8002162:	eb18 0308 	adds.w	r3, r8, r8
 8002166:	eb49 0409 	adc.w	r4, r9, r9
 800216a:	4698      	mov	r8, r3
 800216c:	46a1      	mov	r9, r4
 800216e:	eb18 080a 	adds.w	r8, r8, sl
 8002172:	eb49 090b 	adc.w	r9, r9, fp
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002182:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002186:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800218a:	4688      	mov	r8, r1
 800218c:	4691      	mov	r9, r2
 800218e:	eb1a 0508 	adds.w	r5, sl, r8
 8002192:	eb4b 0609 	adc.w	r6, fp, r9
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f04f 0400 	mov.w	r4, #0
 80021a8:	0094      	lsls	r4, r2, #2
 80021aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021ae:	008b      	lsls	r3, r1, #2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	4631      	mov	r1, r6
 80021b8:	f7fe f868 	bl	800028c <__aeabi_uldivmod>
 80021bc:	4603      	mov	r3, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <UART_SetConfig+0x6f4>)
 80021c4:	fba3 2302 	umull	r2, r3, r3, r2
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	469b      	mov	fp, r3
 80021d2:	f04f 0c00 	mov.w	ip, #0
 80021d6:	46d9      	mov	r9, fp
 80021d8:	46e2      	mov	sl, ip
 80021da:	eb19 0309 	adds.w	r3, r9, r9
 80021de:	eb4a 040a 	adc.w	r4, sl, sl
 80021e2:	4699      	mov	r9, r3
 80021e4:	46a2      	mov	sl, r4
 80021e6:	eb19 090b 	adds.w	r9, r9, fp
 80021ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002202:	4689      	mov	r9, r1
 8002204:	4692      	mov	sl, r2
 8002206:	eb1b 0509 	adds.w	r5, fp, r9
 800220a:	eb4c 060a 	adc.w	r6, ip, sl
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	f04f 0400 	mov.w	r4, #0
 8002220:	0094      	lsls	r4, r2, #2
 8002222:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002226:	008b      	lsls	r3, r1, #2
 8002228:	461a      	mov	r2, r3
 800222a:	4623      	mov	r3, r4
 800222c:	4628      	mov	r0, r5
 800222e:	4631      	mov	r1, r6
 8002230:	f7fe f82c 	bl	800028c <__aeabi_uldivmod>
 8002234:	4603      	mov	r3, r0
 8002236:	460c      	mov	r4, r1
 8002238:	461a      	mov	r2, r3
 800223a:	4b32      	ldr	r3, [pc, #200]	; (8002304 <UART_SetConfig+0x6f4>)
 800223c:	fba3 1302 	umull	r1, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a2d      	ldr	r2, [pc, #180]	; (8002304 <UART_SetConfig+0x6f4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800225a:	4498      	add	r8, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	469b      	mov	fp, r3
 8002260:	f04f 0c00 	mov.w	ip, #0
 8002264:	46d9      	mov	r9, fp
 8002266:	46e2      	mov	sl, ip
 8002268:	eb19 0309 	adds.w	r3, r9, r9
 800226c:	eb4a 040a 	adc.w	r4, sl, sl
 8002270:	4699      	mov	r9, r3
 8002272:	46a2      	mov	sl, r4
 8002274:	eb19 090b 	adds.w	r9, r9, fp
 8002278:	eb4a 0a0c 	adc.w	sl, sl, ip
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002288:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800228c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002290:	4689      	mov	r9, r1
 8002292:	4692      	mov	sl, r2
 8002294:	eb1b 0509 	adds.w	r5, fp, r9
 8002298:	eb4c 060a 	adc.w	r6, ip, sl
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	f04f 0400 	mov.w	r4, #0
 80022ae:	0094      	lsls	r4, r2, #2
 80022b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022b4:	008b      	lsls	r3, r1, #2
 80022b6:	461a      	mov	r2, r3
 80022b8:	4623      	mov	r3, r4
 80022ba:	4628      	mov	r0, r5
 80022bc:	4631      	mov	r1, r6
 80022be:	f7fd ffe5 	bl	800028c <__aeabi_uldivmod>
 80022c2:	4603      	mov	r3, r0
 80022c4:	460c      	mov	r4, r1
 80022c6:	461a      	mov	r2, r3
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <UART_SetConfig+0x6f4>)
 80022ca:	fba3 1302 	umull	r1, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2164      	movs	r1, #100	; 0x64
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	; 0x32
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <UART_SetConfig+0x6f4>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4442      	add	r2, r8
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	e7ff      	b.n	80022f2 <UART_SetConfig+0x6e2>
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022fc:	40011000 	.word	0x40011000
 8002300:	40011400 	.word	0x40011400
 8002304:	51eb851f 	.word	0x51eb851f

08002308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x6>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	; (8002348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <LoopForever+0xe>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	; (8002354 <LoopForever+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002332:	f7fe faf1 	bl	8000918 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002336:	f003 fc0f 	bl	8005b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233a:	f7fe f967 	bl	800060c <main>

0800233e <LoopForever>:

LoopForever:
    b LoopForever
 800233e:	e7fe      	b.n	800233e <LoopForever>
  ldr   r0, =_estack
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800234c:	08005e8c 	.word	0x08005e8c
  ldr r2, =_sbss
 8002350:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002354:	2001372c 	.word	0x2001372c

08002358 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC_IRQHandler>

0800235a <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <vApplicationGetIdleTaskMemory+0x2c>)
 8002378:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <vApplicationGetIdleTaskMemory+0x30>)
 800237e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2282      	movs	r2, #130	; 0x82
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	200000e4 	.word	0x200000e4
 8002398:	2000013c 	.word	0x2000013c

0800239c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f103 0208 	add.w	r2, r3, #8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295
 80023b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f103 0208 	add.w	r2, r3, #8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0208 	add.w	r2, r3, #8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d103      	bne.n	800245e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e00c      	b.n	8002478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3308      	adds	r3, #8
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	e002      	b.n	800246c <vListInsert+0x2e>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	429a      	cmp	r2, r3
 8002476:	d2f6      	bcs.n	8002466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	601a      	str	r2, [r3, #0]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6892      	ldr	r2, [r2, #8]
 80024c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6852      	ldr	r2, [r2, #4]
 80024d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d103      	bne.n	80024e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	e7fe      	b.n	800252a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800252c:	f001 fd8e 	bl	800404c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	68f9      	ldr	r1, [r7, #12]
 800253a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	441a      	add	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	3b01      	subs	r3, #1
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	441a      	add	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	22ff      	movs	r2, #255	; 0xff
 8002570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d114      	bne.n	80025ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d01a      	beq.n	80025c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3310      	adds	r3, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f830 	bl	80035f4 <xTaskRemoveFromEventList>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d012      	beq.n	80025c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <xQueueGenericReset+0xcc>)
 800259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	e009      	b.n	80025c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3310      	adds	r3, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fef3 	bl	800239c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3324      	adds	r3, #36	; 0x24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff feee 	bl	800239c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025c0:	f001 fd72 	bl	80040a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000ed04 	.word	0xe000ed04

080025d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <xQueueGenericCreate+0x28>
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e004      	b.n	8002612 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3350      	adds	r3, #80	; 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fdfc 	bl	8004214 <pvPortMalloc>
 800261c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00f      	beq.n	8002644 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	3350      	adds	r3, #80	; 0x50
 8002628:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f805 	bl	800264e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002644:	69bb      	ldr	r3, [r7, #24]
	}
 8002646:	4618      	mov	r0, r3
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d103      	bne.n	800266a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e002      	b.n	8002670 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800267c:	2101      	movs	r1, #1
 800267e:	69b8      	ldr	r0, [r7, #24]
 8002680:	f7ff ff40 	bl	8002504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	2073      	movs	r0, #115	; 0x73
 8002694:	f002 fba4 	bl	8004de0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f81c 	bl	8002704 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80026de:	2301      	movs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6939      	ldr	r1, [r7, #16]
 80026ec:	6978      	ldr	r0, [r7, #20]
 80026ee:	f7ff ff71 	bl	80025d4 <xQueueGenericCreate>
 80026f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f7ff ffd3 	bl	80026a0 <prvInitialiseMutex>

		return pxNewQueue;
 80026fa:	68fb      	ldr	r3, [r7, #12]
	}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08e      	sub	sp, #56	; 0x38
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002712:	2300      	movs	r3, #0
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d109      	bne.n	8002734 <xQueueGenericSend+0x30>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
 8002732:	e7fe      	b.n	8002732 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <xQueueGenericSend+0x3e>
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <xQueueGenericSend+0x42>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueGenericSend+0x44>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <xQueueGenericSend+0x5c>
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e7fe      	b.n	800275e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d103      	bne.n	800276e <xQueueGenericSend+0x6a>
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <xQueueGenericSend+0x6e>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <xQueueGenericSend+0x70>
 8002772:	2300      	movs	r3, #0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <xQueueGenericSend+0x88>
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	e7fe      	b.n	800278a <xQueueGenericSend+0x86>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800278c:	f001 fc5e 	bl	800404c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	429a      	cmp	r2, r3
 800279a:	d302      	bcc.n	80027a2 <xQueueGenericSend+0x9e>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d136      	bne.n	8002810 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 f887 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	460b      	mov	r3, r1
 80027b4:	4601      	mov	r1, r0
 80027b6:	205a      	movs	r0, #90	; 0x5a
 80027b8:	f002 fb88 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c2:	f000 f9e7 	bl	8002b94 <prvCopyDataToQueue>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 ff0d 	bl	80035f4 <xTaskRemoveFromEventList>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d013      	beq.n	8002808 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <xQueueGenericSend+0x210>)
 80027e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	e00a      	b.n	8002808 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027f8:	4b46      	ldr	r3, [pc, #280]	; (8002914 <xQueueGenericSend+0x210>)
 80027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f3bf 8f4f 	dsb	sy
 8002804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002808:	f001 fc4e 	bl	80040a8 <vPortExitCritical>
				return pdPASS;
 800280c:	2301      	movs	r3, #1
 800280e:	e07d      	b.n	800290c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d110      	bne.n	8002838 <xQueueGenericSend+0x134>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002816:	f001 fc47 	bl	80040a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	4618      	mov	r0, r3
 800281e:	f003 f84b 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	460b      	mov	r3, r1
 800282c:	4601      	mov	r1, r0
 800282e:	205a      	movs	r0, #90	; 0x5a
 8002830:	f002 fb4c 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002834:	2300      	movs	r3, #0
 8002836:	e069      	b.n	800290c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <xQueueGenericSend+0x148>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f000 ff3c 	bl	80036c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800284c:	f001 fc2c 	bl	80040a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002850:	f000 fcd0 	bl	80031f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002854:	f001 fbfa 	bl	800404c <vPortEnterCritical>
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800285e:	b25b      	sxtb	r3, r3
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002864:	d103      	bne.n	800286e <xQueueGenericSend+0x16a>
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002874:	b25b      	sxtb	r3, r3
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d103      	bne.n	8002884 <xQueueGenericSend+0x180>
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002884:	f001 fc10 	bl	80040a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002888:	1d3a      	adds	r2, r7, #4
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 ff2b 	bl	80036ec <xTaskCheckForTimeOut>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d124      	bne.n	80028e6 <xQueueGenericSend+0x1e2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800289c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800289e:	f000 fa4b 	bl	8002d38 <prvIsQueueFull>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d018      	beq.n	80028da <xQueueGenericSend+0x1d6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	3310      	adds	r3, #16
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fe7b 	bl	80035ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b8:	f000 f9d6 	bl	8002c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80028bc:	f000 fca8 	bl	8003210 <xTaskResumeAll>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f af62 	bne.w	800278c <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <xQueueGenericSend+0x210>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	e758      	b.n	800278c <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80028da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028dc:	f000 f9c4 	bl	8002c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028e0:	f000 fc96 	bl	8003210 <xTaskResumeAll>
 80028e4:	e752      	b.n	800278c <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80028e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028e8:	f000 f9be 	bl	8002c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80028ec:	f000 fc90 	bl	8003210 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ffe0 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	460b      	mov	r3, r1
 8002902:	4601      	mov	r1, r0
 8002904:	205a      	movs	r0, #90	; 0x5a
 8002906:	f002 fae1 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 800290a:	2300      	movs	r3, #0
		}
	}
}
 800290c:	4618      	mov	r0, r3
 800290e:	3730      	adds	r7, #48	; 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	e000ed04 	.word	0xe000ed04

08002918 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b08f      	sub	sp, #60	; 0x3c
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <xQueueSemaphoreTake+0x30>
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e7fe      	b.n	8002946 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <xQueueSemaphoreTake+0x4c>
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e7fe      	b.n	8002962 <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002964:	f001 fb72 	bl	800404c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d036      	beq.n	80029e2 <xQueueSemaphoreTake+0xca>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f002 ff9e 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 800297c:	4604      	mov	r4, r0
 800297e:	2000      	movs	r0, #0
 8002980:	f002 ff9a 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002984:	4601      	mov	r1, r0
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	2301      	movs	r3, #1
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	460a      	mov	r2, r1
 8002990:	4621      	mov	r1, r4
 8002992:	205c      	movs	r0, #92	; 0x5c
 8002994:	f002 fa9a 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	1e5a      	subs	r2, r3, #1
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d104      	bne.n	80029b2 <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80029a8:	f001 f99c 	bl	8003ce4 <pvTaskIncrementMutexHeldCount>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00f      	beq.n	80029da <xQueueSemaphoreTake+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3310      	adds	r3, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fe18 	bl	80035f4 <xTaskRemoveFromEventList>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <xQueueSemaphoreTake+0xc2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <xQueueSemaphoreTake+0x248>)
 80029cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029da:	f001 fb65 	bl	80040a8 <vPortExitCritical>
				return pdPASS;
 80029de:	2301      	movs	r3, #1
 80029e0:	e0ba      	b.n	8002b58 <xQueueSemaphoreTake+0x240>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d122      	bne.n	8002a2e <xQueueSemaphoreTake+0x116>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <xQueueSemaphoreTake+0xea>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	e7fe      	b.n	8002a00 <xQueueSemaphoreTake+0xe8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a02:	f001 fb51 	bl	80040a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 ff55 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	2000      	movs	r0, #0
 8002a12:	f002 ff51 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002a16:	4601      	mov	r1, r0
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	460a      	mov	r2, r1
 8002a22:	4621      	mov	r1, r4
 8002a24:	205c      	movs	r0, #92	; 0x5c
 8002a26:	f002 fa51 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e094      	b.n	8002b58 <xQueueSemaphoreTake+0x240>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <xQueueSemaphoreTake+0x12a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a34:	f107 0308 	add.w	r3, r7, #8
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fe41 	bl	80036c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a42:	f001 fb31 	bl	80040a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a46:	f000 fbd5 	bl	80031f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a4a:	f001 faff 	bl	800404c <vPortEnterCritical>
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5a:	d103      	bne.n	8002a64 <xQueueSemaphoreTake+0x14c>
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d103      	bne.n	8002a7a <xQueueSemaphoreTake+0x162>
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a7a:	f001 fb15 	bl	80040a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7e:	463a      	mov	r2, r7
 8002a80:	f107 0308 	add.w	r3, r7, #8
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe30 	bl	80036ec <xTaskCheckForTimeOut>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d132      	bne.n	8002af8 <xQueueSemaphoreTake+0x1e0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a94:	f000 f93a 	bl	8002d0c <prvIsQueueEmpty>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d026      	beq.n	8002aec <xQueueSemaphoreTake+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d109      	bne.n	8002aba <xQueueSemaphoreTake+0x1a2>
					{
						taskENTER_CRITICAL();
 8002aa6:	f001 fad1 	bl	800404c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ff60 	bl	8003974 <xTaskPriorityInherit>
 8002ab4:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8002ab6:	f001 faf7 	bl	80040a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	3324      	adds	r3, #36	; 0x24
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fd72 	bl	80035ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aca:	f000 f8cd 	bl	8002c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ace:	f000 fb9f 	bl	8003210 <xTaskResumeAll>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f47f af45 	bne.w	8002964 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <xQueueSemaphoreTake+0x248>)
 8002adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	e73b      	b.n	8002964 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aee:	f000 f8bb 	bl	8002c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002af2:	f000 fb8d 	bl	8003210 <xTaskResumeAll>
 8002af6:	e735      	b.n	8002964 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002afa:	f000 f8b5 	bl	8002c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002afe:	f000 fb87 	bl	8003210 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b04:	f000 f902 	bl	8002d0c <prvIsQueueEmpty>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f43f af2a 	beq.w	8002964 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <xQueueSemaphoreTake+0x21a>
					{
						taskENTER_CRITICAL();
 8002b16:	f001 fa99 	bl	800404c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b1c:	f000 f822 	bl	8002b64 <prvGetDisinheritPriorityAfterTimeout>
 8002b20:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 f835 	bl	8003b98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b2e:	f001 fabb 	bl	80040a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 febf 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f002 febb 	bl	80058b8 <SEGGER_SYSVIEW_ShrinkId>
 8002b42:	4601      	mov	r1, r0
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	4621      	mov	r1, r4
 8002b50:	205c      	movs	r0, #92	; 0x5c
 8002b52:	f002 f9bb 	bl	8004ecc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002b56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3734      	adds	r7, #52	; 0x34
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	e000ed04 	.word	0xe000ed04

08002b64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f1c3 0305 	rsb	r3, r3, #5
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e001      	b.n	8002b86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002b86:	68fb      	ldr	r3, [r7, #12]
	}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d14d      	bne.n	8002c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 ff62 	bl	8003a88 <xTaskPriorityDisinherit>
 8002bc4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	e043      	b.n	8002c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d119      	bne.n	8002c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6898      	ldr	r0, [r3, #8]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	f002 ffed 	bl	8005bbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	441a      	add	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d32b      	bcc.n	8002c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	e026      	b.n	8002c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68d8      	ldr	r0, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	461a      	mov	r2, r3
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	f002 ffd3 	bl	8005bbe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	425b      	negs	r3, r3
 8002c22:	441a      	add	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d207      	bcs.n	8002c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	425b      	negs	r3, r3
 8002c3e:	441a      	add	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d105      	bne.n	8002c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c5e:	697b      	ldr	r3, [r7, #20]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c70:	f001 f9ec 	bl	800404c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c7c:	e011      	b.n	8002ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3324      	adds	r3, #36	; 0x24
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fcb2 	bl	80035f4 <xTaskRemoveFromEventList>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c96:	f000 fd89 	bl	80037ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	dce9      	bgt.n	8002c7e <prvUnlockQueue+0x16>
 8002caa:	e000      	b.n	8002cae <prvUnlockQueue+0x46>
					break;
 8002cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cb6:	f001 f9f7 	bl	80040a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cba:	f001 f9c7 	bl	800404c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cc6:	e011      	b.n	8002cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3310      	adds	r3, #16
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fc8d 	bl	80035f4 <xTaskRemoveFromEventList>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ce0:	f000 fd64 	bl	80037ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ce4:	7bbb      	ldrb	r3, [r7, #14]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dce9      	bgt.n	8002cc8 <prvUnlockQueue+0x60>
 8002cf4:	e000      	b.n	8002cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d00:	f001 f9d2 	bl	80040a8 <vPortExitCritical>
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d14:	f001 f99a 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e001      	b.n	8002d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d2a:	f001 f9bd 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d40:	f001 f984 	bl	800404c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d102      	bne.n	8002d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e001      	b.n	8002d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d5a:	f001 f9a5 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af04      	add	r7, sp, #16
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <xTaskCreateStatic+0x28>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	e7fe      	b.n	8002d8e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <xTaskCreateStatic+0x42>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e7fe      	b.n	8002da8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002daa:	2358      	movs	r3, #88	; 0x58
 8002dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b58      	cmp	r3, #88	; 0x58
 8002db2:	d009      	beq.n	8002dc8 <xTaskCreateStatic+0x60>
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e7fe      	b.n	8002dc6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <xTaskCreateStatic+0xa4>
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002de6:	2300      	movs	r3, #0
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f850 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e06:	f000 f8d3 	bl	8002fb0 <prvAddNewTaskToReadyList>
 8002e0a:	e001      	b.n	8002e10 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e10:	697b      	ldr	r3, [r7, #20]
	}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08c      	sub	sp, #48	; 0x30
 8002e1e:	af04      	add	r7, sp, #16
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 f9f0 	bl	8004214 <pvPortMalloc>
 8002e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e3c:	2058      	movs	r0, #88	; 0x58
 8002e3e:	f001 f9e9 	bl	8004214 <pvPortMalloc>
 8002e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e50:	e005      	b.n	8002e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f001 faa4 	bl	80043a0 <vPortFree>
 8002e58:	e001      	b.n	8002e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9303      	str	r3, [sp, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f80e 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e88:	69f8      	ldr	r0, [r7, #28]
 8002e8a:	f000 f891 	bl	8002fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e002      	b.n	8002e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	21a5      	movs	r1, #165	; 0xa5
 8002ebe:	f002 fe89 	bl	8005bd4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <prvInitialiseNewTask+0x56>
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	e7fe      	b.n	8002ef8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e012      	b.n	8002f26 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	7819      	ldrb	r1, [r3, #0]
 8002f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3334      	adds	r3, #52	; 0x34
 8002f10:	460a      	mov	r2, r1
 8002f12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d9e9      	bls.n	8002f00 <prvInitialiseNewTask+0x5c>
 8002f2c:	e000      	b.n	8002f30 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002f2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d901      	bls.n	8002f42 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	2200      	movs	r2, #0
 8002f52:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	3304      	adds	r3, #4
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fa3f 	bl	80023dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	3318      	adds	r3, #24
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fa3a 	bl	80023dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	f1c3 0205 	rsb	r2, r3, #5
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	69b8      	ldr	r0, [r7, #24]
 8002f92:	f000 ff33 	bl	8003dfc <pxPortInitialiseStack>
 8002f96:	4602      	mov	r2, r0
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fa8:	bf00      	nop
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fb0:	b5b0      	push	{r4, r5, r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fb8:	f001 f848 	bl	800404c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <prvAddNewTaskToReadyList+0xfc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a3a      	ldr	r2, [pc, #232]	; (80030ac <prvAddNewTaskToReadyList+0xfc>)
 8002fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fc6:	4b3a      	ldr	r3, [pc, #232]	; (80030b0 <prvAddNewTaskToReadyList+0x100>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fce:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <prvAddNewTaskToReadyList+0x100>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fd4:	4b35      	ldr	r3, [pc, #212]	; (80030ac <prvAddNewTaskToReadyList+0xfc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d110      	bne.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fdc:	f000 fc0a 	bl	80037f4 <prvInitialiseTaskLists>
 8002fe0:	e00d      	b.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <prvAddNewTaskToReadyList+0x104>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fea:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <prvAddNewTaskToReadyList+0x100>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d802      	bhi.n	8002ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ff8:	4a2d      	ldr	r2, [pc, #180]	; (80030b0 <prvAddNewTaskToReadyList+0x100>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <prvAddNewTaskToReadyList+0x108>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a2c      	ldr	r2, [pc, #176]	; (80030b8 <prvAddNewTaskToReadyList+0x108>)
 8003006:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <prvAddNewTaskToReadyList+0x108>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <prvAddNewTaskToReadyList+0x94>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fb21 	bl	8005660 <SEGGER_SYSVIEW_OnTaskCreate>
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	461d      	mov	r5, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	461c      	mov	r4, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	1ae3      	subs	r3, r4, r3
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	462b      	mov	r3, r5
 8003040:	f001 fac2 	bl	80045c8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 fb92 	bl	8005770 <SEGGER_SYSVIEW_OnTaskStartReady>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <prvAddNewTaskToReadyList+0x10c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <prvAddNewTaskToReadyList+0x10c>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <prvAddNewTaskToReadyList+0x110>)
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7ff f9be 	bl	80023f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800307a:	f001 f815 	bl	80040a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <prvAddNewTaskToReadyList+0x104>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvAddNewTaskToReadyList+0x100>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d207      	bcs.n	80030a4 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <prvAddNewTaskToReadyList+0x114>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}
 80030ac:	2000041c 	.word	0x2000041c
 80030b0:	20000344 	.word	0x20000344
 80030b4:	20000428 	.word	0x20000428
 80030b8:	20000438 	.word	0x20000438
 80030bc:	20000424 	.word	0x20000424
 80030c0:	20000348 	.word	0x20000348
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01a      	beq.n	8003110 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <vTaskDelay+0x68>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d009      	beq.n	80030f6 <vTaskDelay+0x2e>
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	e7fe      	b.n	80030f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80030f6:	f000 f87d 	bl	80031f4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	2023      	movs	r0, #35	; 0x23
 80030fe:	f001 fdd9 	bl	8004cb4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003102:	2100      	movs	r1, #0
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 fe01 	bl	8003d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800310a:	f000 f881 	bl	8003210 <xTaskResumeAll>
 800310e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <vTaskDelay+0x6c>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000444 	.word	0x20000444
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003146:	463a      	mov	r2, r7
 8003148:	1d39      	adds	r1, r7, #4
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f90a 	bl	8002368 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	9202      	str	r2, [sp, #8]
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2300      	movs	r3, #0
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	460a      	mov	r2, r1
 8003166:	491d      	ldr	r1, [pc, #116]	; (80031dc <vTaskStartScheduler+0xa4>)
 8003168:	481d      	ldr	r0, [pc, #116]	; (80031e0 <vTaskStartScheduler+0xa8>)
 800316a:	f7ff fdfd 	bl	8002d68 <xTaskCreateStatic>
 800316e:	4602      	mov	r2, r0
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <vTaskStartScheduler+0xac>)
 8003172:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <vTaskStartScheduler+0xac>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e001      	b.n	8003186 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <vTaskStartScheduler+0x80>
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <vTaskStartScheduler+0xb0>)
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <vTaskStartScheduler+0xb4>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <vTaskStartScheduler+0xb8>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031b2:	f000 fead 	bl	8003f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031b6:	e00d      	b.n	80031d4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d109      	bne.n	80031d4 <vTaskStartScheduler+0x9c>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e7fe      	b.n	80031d2 <vTaskStartScheduler+0x9a>
}
 80031d4:	bf00      	nop
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08005de0 	.word	0x08005de0
 80031e0:	080037c5 	.word	0x080037c5
 80031e4:	20000440 	.word	0x20000440
 80031e8:	2000043c 	.word	0x2000043c
 80031ec:	20000428 	.word	0x20000428
 80031f0:	20000420 	.word	0x20000420

080031f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <vTaskSuspendAll+0x18>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a03      	ldr	r2, [pc, #12]	; (800320c <vTaskSuspendAll+0x18>)
 8003200:	6013      	str	r3, [r2, #0]
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	20000444 	.word	0x20000444

08003210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800321e:	4b43      	ldr	r3, [pc, #268]	; (800332c <xTaskResumeAll+0x11c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <xTaskResumeAll+0x2a>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	e7fe      	b.n	8003238 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800323a:	f000 ff07 	bl	800404c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <xTaskResumeAll+0x11c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3b01      	subs	r3, #1
 8003244:	4a39      	ldr	r2, [pc, #228]	; (800332c <xTaskResumeAll+0x11c>)
 8003246:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <xTaskResumeAll+0x11c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d165      	bne.n	800331c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003250:	4b37      	ldr	r3, [pc, #220]	; (8003330 <xTaskResumeAll+0x120>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d061      	beq.n	800331c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003258:	e032      	b.n	80032c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <xTaskResumeAll+0x124>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3318      	adds	r3, #24
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff f922 	bl	80024b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3304      	adds	r3, #4
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f91d 	bl	80024b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4618      	mov	r0, r3
 800327a:	f002 fa79 	bl	8005770 <SEGGER_SYSVIEW_OnTaskStartReady>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	4b2c      	ldr	r3, [pc, #176]	; (8003338 <xTaskResumeAll+0x128>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <xTaskResumeAll+0x128>)
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <xTaskResumeAll+0x12c>)
 800329e:	441a      	add	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7ff f8a5 	bl	80023f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <xTaskResumeAll+0x130>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <xTaskResumeAll+0x134>)
 80032bc:	2201      	movs	r2, #1
 80032be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <xTaskResumeAll+0x124>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1c8      	bne.n	800325a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032ce:	f000 fb2b 	bl	8003928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <xTaskResumeAll+0x138>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032de:	f000 f837 	bl	8003350 <xTaskIncrementTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <xTaskResumeAll+0x134>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f1      	bne.n	80032de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <xTaskResumeAll+0x138>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <xTaskResumeAll+0x134>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <xTaskResumeAll+0x13c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800331c:	f000 fec4 	bl	80040a8 <vPortExitCritical>

	return xAlreadyYielded;
 8003320:	68bb      	ldr	r3, [r7, #8]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000444 	.word	0x20000444
 8003330:	2000041c 	.word	0x2000041c
 8003334:	200003dc 	.word	0x200003dc
 8003338:	20000424 	.word	0x20000424
 800333c:	20000348 	.word	0x20000348
 8003340:	20000344 	.word	0x20000344
 8003344:	20000430 	.word	0x20000430
 8003348:	2000042c 	.word	0x2000042c
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335a:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <xTaskIncrementTick+0x154>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8090 	bne.w	8003484 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003364:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <xTaskIncrementTick+0x158>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800336c:	4a4e      	ldr	r2, [pc, #312]	; (80034a8 <xTaskIncrementTick+0x158>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11f      	bne.n	80033b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003378:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <xTaskIncrementTick+0x15c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <xTaskIncrementTick+0x46>
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	e7fe      	b.n	8003394 <xTaskIncrementTick+0x44>
 8003396:	4b45      	ldr	r3, [pc, #276]	; (80034ac <xTaskIncrementTick+0x15c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	4b44      	ldr	r3, [pc, #272]	; (80034b0 <xTaskIncrementTick+0x160>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a42      	ldr	r2, [pc, #264]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	4a42      	ldr	r2, [pc, #264]	; (80034b0 <xTaskIncrementTick+0x160>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b42      	ldr	r3, [pc, #264]	; (80034b4 <xTaskIncrementTick+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3301      	adds	r3, #1
 80033b0:	4a40      	ldr	r2, [pc, #256]	; (80034b4 <xTaskIncrementTick+0x164>)
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	f000 fab8 	bl	8003928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033b8:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <xTaskIncrementTick+0x168>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d351      	bcc.n	8003466 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c2:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <xTaskIncrementTick+0x80>
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <xTaskIncrementTick+0x82>
 80033d0:	2300      	movs	r3, #0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <xTaskIncrementTick+0x168>)
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	601a      	str	r2, [r3, #0]
					break;
 80033de:	e042      	b.n	8003466 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d203      	bcs.n	8003400 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033f8:	4a2f      	ldr	r2, [pc, #188]	; (80034b8 <xTaskIncrementTick+0x168>)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6013      	str	r3, [r2, #0]
						break;
 80033fe:	e032      	b.n	8003466 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	3304      	adds	r3, #4
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f853 	bl	80024b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3318      	adds	r3, #24
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f84a 	bl	80024b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f002 f9a6 	bl	8005770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2201      	movs	r2, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <xTaskIncrementTick+0x16c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <xTaskIncrementTick+0x16c>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <xTaskIncrementTick+0x170>)
 8003444:	441a      	add	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f7fe ffd2 	bl	80023f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <xTaskIncrementTick+0x174>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	429a      	cmp	r2, r3
 800345e:	d3b0      	bcc.n	80033c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003464:	e7ad      	b.n	80033c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <xTaskIncrementTick+0x174>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	4914      	ldr	r1, [pc, #80]	; (80034c0 <xTaskIncrementTick+0x170>)
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d907      	bls.n	800348e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800347e:	2301      	movs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e004      	b.n	800348e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <xTaskIncrementTick+0x178>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3301      	adds	r3, #1
 800348a:	4a0f      	ldr	r2, [pc, #60]	; (80034c8 <xTaskIncrementTick+0x178>)
 800348c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <xTaskIncrementTick+0x17c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800349a:	697b      	ldr	r3, [r7, #20]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000444 	.word	0x20000444
 80034a8:	20000420 	.word	0x20000420
 80034ac:	200003d4 	.word	0x200003d4
 80034b0:	200003d8 	.word	0x200003d8
 80034b4:	20000434 	.word	0x20000434
 80034b8:	2000043c 	.word	0x2000043c
 80034bc:	20000424 	.word	0x20000424
 80034c0:	20000348 	.word	0x20000348
 80034c4:	20000344 	.word	0x20000344
 80034c8:	2000042c 	.word	0x2000042c
 80034cc:	20000430 	.word	0x20000430

080034d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <vTaskSwitchContext+0xc4>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <vTaskSwitchContext+0xc8>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034e4:	e051      	b.n	800358a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80034e6:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <vTaskSwitchContext+0xc8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034ec:	4b2b      	ldr	r3, [pc, #172]	; (800359c <vTaskSwitchContext+0xcc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034fa:	7afb      	ldrb	r3, [r7, #11]
 80034fc:	f1c3 031f 	rsb	r3, r3, #31
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	4927      	ldr	r1, [pc, #156]	; (80035a0 <vTaskSwitchContext+0xd0>)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	e7fe      	b.n	8003528 <vTaskSwitchContext+0x58>
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4a1a      	ldr	r2, [pc, #104]	; (80035a0 <vTaskSwitchContext+0xd0>)
 8003536:	4413      	add	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	3308      	adds	r3, #8
 800354c:	429a      	cmp	r2, r3
 800354e:	d104      	bne.n	800355a <vTaskSwitchContext+0x8a>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <vTaskSwitchContext+0xd4>)
 8003562:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <vTaskSwitchContext+0xd4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3334      	adds	r3, #52	; 0x34
 800356a:	2205      	movs	r2, #5
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <vTaskSwitchContext+0xd8>)
 800356e:	4618      	mov	r0, r3
 8003570:	f002 fb16 	bl	8005ba0 <memcmp>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <vTaskSwitchContext+0xb6>
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <vTaskSwitchContext+0xd4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f002 f8b2 	bl	80056e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003584:	e001      	b.n	800358a <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8003586:	f002 f84f 	bl	8005628 <SEGGER_SYSVIEW_OnIdle>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000444 	.word	0x20000444
 8003598:	20000430 	.word	0x20000430
 800359c:	20000424 	.word	0x20000424
 80035a0:	20000348 	.word	0x20000348
 80035a4:	20000344 	.word	0x20000344
 80035a8:	08005de0 	.word	0x08005de0

080035ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <vTaskPlaceOnEventList+0x24>
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e7fe      	b.n	80035ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <vTaskPlaceOnEventList+0x44>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3318      	adds	r3, #24
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fe ff30 	bl	800243e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035de:	2101      	movs	r1, #1
 80035e0:	6838      	ldr	r0, [r7, #0]
 80035e2:	f000 fb93 	bl	8003d0c <prvAddCurrentTaskToDelayedList>
}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000344 	.word	0x20000344

080035f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <xTaskRemoveFromEventList+0x2a>
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e7fe      	b.n	800361c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	3318      	adds	r3, #24
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe ff44 	bl	80024b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <xTaskRemoveFromEventList+0xb4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d120      	bne.n	8003672 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe ff3b 	bl	80024b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4618      	mov	r0, r3
 800363e:	f002 f897 	bl	8005770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <xTaskRemoveFromEventList+0xb8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	4a16      	ldr	r2, [pc, #88]	; (80036ac <xTaskRemoveFromEventList+0xb8>)
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <xTaskRemoveFromEventList+0xbc>)
 8003662:	441a      	add	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7fe fec3 	bl	80023f6 <vListInsertEnd>
 8003670:	e005      	b.n	800367e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	3318      	adds	r3, #24
 8003676:	4619      	mov	r1, r3
 8003678:	480e      	ldr	r0, [pc, #56]	; (80036b4 <xTaskRemoveFromEventList+0xc0>)
 800367a:	f7fe febc 	bl	80023f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <xTaskRemoveFromEventList+0xc4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d905      	bls.n	8003698 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <xTaskRemoveFromEventList+0xc8>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e001      	b.n	800369c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000444 	.word	0x20000444
 80036ac:	20000424 	.word	0x20000424
 80036b0:	20000348 	.word	0x20000348
 80036b4:	200003dc 	.word	0x200003dc
 80036b8:	20000344 	.word	0x20000344
 80036bc:	20000430 	.word	0x20000430

080036c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <vTaskInternalSetTimeOutState+0x24>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <vTaskInternalSetTimeOutState+0x28>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20000434 	.word	0x20000434
 80036e8:	20000420 	.word	0x20000420

080036ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <xTaskCheckForTimeOut+0x24>
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	e7fe      	b.n	800370e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <xTaskCheckForTimeOut+0x3e>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e7fe      	b.n	8003728 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800372a:	f000 fc8f 	bl	800404c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <xTaskCheckForTimeOut+0xb8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d102      	bne.n	800374e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003748:	2300      	movs	r3, #0
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e023      	b.n	8003796 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <xTaskCheckForTimeOut+0xbc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d007      	beq.n	800376a <xTaskCheckForTimeOut+0x7e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003764:	2301      	movs	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e015      	b.n	8003796 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	429a      	cmp	r2, r3
 8003772:	d20b      	bcs.n	800378c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	1ad2      	subs	r2, r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff9d 	bl	80036c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e004      	b.n	8003796 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003792:	2301      	movs	r3, #1
 8003794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003796:	f000 fc87 	bl	80040a8 <vPortExitCritical>

	return xReturn;
 800379a:	69fb      	ldr	r3, [r7, #28]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3720      	adds	r7, #32
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000420 	.word	0x20000420
 80037a8:	20000434 	.word	0x20000434

080037ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <vTaskMissedYield+0x14>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	20000430 	.word	0x20000430

080037c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037cc:	f000 f852 	bl	8003874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <prvIdleTask+0x28>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d9f9      	bls.n	80037cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <prvIdleTask+0x2c>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037e8:	e7f0      	b.n	80037cc <prvIdleTask+0x8>
 80037ea:	bf00      	nop
 80037ec:	20000348 	.word	0x20000348
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e00c      	b.n	800381a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <prvInitialiseTaskLists+0x60>)
 800380c:	4413      	add	r3, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fdc4 	bl	800239c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d9ef      	bls.n	8003800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <prvInitialiseTaskLists+0x64>)
 8003822:	f7fe fdbb 	bl	800239c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003826:	480d      	ldr	r0, [pc, #52]	; (800385c <prvInitialiseTaskLists+0x68>)
 8003828:	f7fe fdb8 	bl	800239c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800382c:	480c      	ldr	r0, [pc, #48]	; (8003860 <prvInitialiseTaskLists+0x6c>)
 800382e:	f7fe fdb5 	bl	800239c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003832:	480c      	ldr	r0, [pc, #48]	; (8003864 <prvInitialiseTaskLists+0x70>)
 8003834:	f7fe fdb2 	bl	800239c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003838:	480b      	ldr	r0, [pc, #44]	; (8003868 <prvInitialiseTaskLists+0x74>)
 800383a:	f7fe fdaf 	bl	800239c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800383e:	4b0b      	ldr	r3, [pc, #44]	; (800386c <prvInitialiseTaskLists+0x78>)
 8003840:	4a05      	ldr	r2, [pc, #20]	; (8003858 <prvInitialiseTaskLists+0x64>)
 8003842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <prvInitialiseTaskLists+0x7c>)
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <prvInitialiseTaskLists+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000348 	.word	0x20000348
 8003858:	200003ac 	.word	0x200003ac
 800385c:	200003c0 	.word	0x200003c0
 8003860:	200003dc 	.word	0x200003dc
 8003864:	200003f0 	.word	0x200003f0
 8003868:	20000408 	.word	0x20000408
 800386c:	200003d4 	.word	0x200003d4
 8003870:	200003d8 	.word	0x200003d8

08003874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387a:	e019      	b.n	80038b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800387c:	f000 fbe6 	bl	800404c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003880:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <prvCheckTasksWaitingTermination+0x4c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fe0f 	bl	80024b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <prvCheckTasksWaitingTermination+0x50>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <prvCheckTasksWaitingTermination+0x50>)
 800389a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 80038a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038a6:	f000 fbff 	bl	80040a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f80e 	bl	80038cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e1      	bne.n	800387c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	200003f0 	.word	0x200003f0
 80038c4:	2000041c 	.word	0x2000041c
 80038c8:	20000404 	.word	0x20000404

080038cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd5c 	bl	80043a0 <vPortFree>
				vPortFree( pxTCB );
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fd59 	bl	80043a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038ee:	e017      	b.n	8003920 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d103      	bne.n	8003902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd50 	bl	80043a0 <vPortFree>
	}
 8003900:	e00e      	b.n	8003920 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003908:	2b02      	cmp	r3, #2
 800390a:	d009      	beq.n	8003920 <prvDeleteTCB+0x54>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	e7fe      	b.n	800391e <prvDeleteTCB+0x52>
	}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <prvResetNextTaskUnblockTime+0x44>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <prvResetNextTaskUnblockTime+0x14>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <prvResetNextTaskUnblockTime+0x16>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvResetNextTaskUnblockTime+0x48>)
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
 8003948:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800394a:	e008      	b.n	800395e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <prvResetNextTaskUnblockTime+0x44>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <prvResetNextTaskUnblockTime+0x48>)
 800395c:	6013      	str	r3, [r2, #0]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	200003d4 	.word	0x200003d4
 8003970:	2000043c 	.word	0x2000043c

08003974 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d073      	beq.n	8003a72 <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <xTaskPriorityInherit+0x108>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	429a      	cmp	r2, r3
 8003996:	d263      	bcs.n	8003a60 <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db06      	blt.n	80039ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <xTaskPriorityInherit+0x108>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	f1c3 0205 	rsb	r2, r3, #5
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6959      	ldr	r1, [r3, #20]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <xTaskPriorityInherit+0x10c>)
 80039c0:	4413      	add	r3, r2
 80039c2:	4299      	cmp	r1, r3
 80039c4:	d101      	bne.n	80039ca <xTaskPriorityInherit+0x56>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xTaskPriorityInherit+0x58>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d03a      	beq.n	8003a46 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fd6b 	bl	80024b0 <uxListRemove>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d115      	bne.n	8003a0c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4926      	ldr	r1, [pc, #152]	; (8003a80 <xTaskPriorityInherit+0x10c>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskPriorityInherit+0x98>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <xTaskPriorityInherit+0x110>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4013      	ands	r3, r2
 8003a08:	4a1e      	ldr	r2, [pc, #120]	; (8003a84 <xTaskPriorityInherit+0x110>)
 8003a0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <xTaskPriorityInherit+0x108>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <xTaskPriorityInherit+0x110>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <xTaskPriorityInherit+0x110>)
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <xTaskPriorityInherit+0x10c>)
 8003a36:	441a      	add	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f7fe fcd9 	bl	80023f6 <vListInsertEnd>
 8003a44:	e004      	b.n	8003a50 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <xTaskPriorityInherit+0x108>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	2049      	movs	r0, #73	; 0x49
 8003a56:	f001 f92d 	bl	8004cb4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	e008      	b.n	8003a72 <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <xTaskPriorityInherit+0x108>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d201      	bcs.n	8003a72 <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a72:	68fb      	ldr	r3, [r7, #12]
	}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000344 	.word	0x20000344
 8003a80:	20000348 	.word	0x20000348
 8003a84:	20000424 	.word	0x20000424

08003a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d071      	beq.n	8003b82 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <xTaskPriorityDisinherit+0x104>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d009      	beq.n	8003abc <xTaskPriorityDisinherit+0x34>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e7fe      	b.n	8003aba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <xTaskPriorityDisinherit+0x50>
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	e7fe      	b.n	8003ad6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d049      	beq.n	8003b82 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d145      	bne.n	8003b82 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	3304      	adds	r3, #4
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fcd8 	bl	80024b0 <uxListRemove>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d115      	bne.n	8003b32 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	4921      	ldr	r1, [pc, #132]	; (8003b90 <xTaskPriorityDisinherit+0x108>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <xTaskPriorityDisinherit+0xaa>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	2201      	movs	r2, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <xTaskPriorityDisinherit+0x10c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <xTaskPriorityDisinherit+0x10c>)
 8003b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4619      	mov	r1, r3
 8003b36:	204a      	movs	r0, #74	; 0x4a
 8003b38:	f001 f8bc 	bl	8004cb4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	f1c3 0205 	rsb	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	2201      	movs	r2, #1
 8003b56:	409a      	lsls	r2, r3
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <xTaskPriorityDisinherit+0x10c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <xTaskPriorityDisinherit+0x10c>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <xTaskPriorityDisinherit+0x108>)
 8003b70:	441a      	add	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe fc3c 	bl	80023f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b82:	697b      	ldr	r3, [r7, #20]
	}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000344 	.word	0x20000344
 8003b90:	20000348 	.word	0x20000348
 8003b94:	20000424 	.word	0x20000424

08003b98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 808f 	beq.w	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x138>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e7fe      	b.n	8003bcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d902      	bls.n	8003bde <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	e002      	b.n	8003be4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d070      	beq.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x138>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d16b      	bne.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x138>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003bf8:	4b37      	ldr	r3, [pc, #220]	; (8003cd8 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d109      	bne.n	8003c16 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	e7fe      	b.n	8003c14 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	204a      	movs	r0, #74	; 0x4a
 8003c1c:	f001 f84a 	bl	8004cb4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db04      	blt.n	8003c3e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f1c3 0205 	rsb	r2, r3, #5
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	6959      	ldr	r1, [r3, #20]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	4299      	cmp	r1, r3
 8003c52:	d101      	bne.n	8003c58 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d038      	beq.n	8003cd0 <vTaskPriorityDisinheritAfterTimeout+0x138>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fc24 	bl	80024b0 <uxListRemove>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <vTaskPriorityDisinheritAfterTimeout+0x102>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c72:	491a      	ldr	r1, [pc, #104]	; (8003cdc <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <vTaskPriorityDisinheritAfterTimeout+0x102>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	2201      	movs	r2, #1
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4013      	ands	r3, r2
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003c98:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fd67 	bl	8005770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4610      	mov	r0, r2
 8003ccc:	f7fe fb93 	bl	80023f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cd0:	bf00      	nop
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000344 	.word	0x20000344
 8003cdc:	20000348 	.word	0x20000348
 8003ce0:	20000424 	.word	0x20000424

08003ce4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cf6:	3201      	adds	r2, #1
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8003cfa:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <pvTaskIncrementMutexHeldCount+0x24>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
	}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000344 	.word	0x20000344

08003d0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d16:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d1c:	4b31      	ldr	r3, [pc, #196]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fbc4 	bl	80024b0 <uxListRemove>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	2201      	movs	r2, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4013      	ands	r3, r2
 8003d42:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003d44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d110      	bne.n	8003d70 <prvAddCurrentTaskToDelayedList+0x64>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	211b      	movs	r1, #27
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 fd4c 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4619      	mov	r1, r3
 8003d68:	4820      	ldr	r0, [pc, #128]	; (8003dec <prvAddCurrentTaskToDelayedList+0xe0>)
 8003d6a:	f7fe fb44 	bl	80023f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d6e:	e032      	b.n	8003dd6 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d20f      	bcs.n	8003da8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fd32 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe fb4c 	bl	800243e <vListInsert>
}
 8003da6:	e016      	b.n	8003dd6 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2104      	movs	r1, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 fd22 	bl	80057f8 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f7fe fb3c 	bl	800243e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d202      	bcs.n	8003dd6 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8003dd0:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6013      	str	r3, [r2, #0]
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000420 	.word	0x20000420
 8003de4:	20000344 	.word	0x20000344
 8003de8:	20000424 	.word	0x20000424
 8003dec:	20000408 	.word	0x20000408
 8003df0:	200003d8 	.word	0x200003d8
 8003df4:	200003d4 	.word	0x200003d4
 8003df8:	2000043c 	.word	0x2000043c

08003dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b04      	subs	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b04      	subs	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e2c:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <pxPortInitialiseStack+0x64>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b14      	subs	r3, #20
 8003e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3b04      	subs	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f06f 0202 	mvn.w	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3b20      	subs	r3, #32
 8003e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	08003e65 	.word	0x08003e65

08003e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <prvTaskExitError+0x50>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d009      	beq.n	8003e8c <prvTaskExitError+0x28>
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e7fe      	b.n	8003e8a <prvTaskExitError+0x26>
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e9e:	bf00      	nop
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0fc      	beq.n	8003ea0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	2000000c 	.word	0x2000000c
	...

08003ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <pxCurrentTCBConst2>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	f380 8809 	msr	PSP, r0
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	4770      	bx	lr
 8003edc:	f3af 8000 	nop.w

08003ee0 <pxCurrentTCBConst2>:
 8003ee0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop

08003ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <prvPortStartFirstTask+0x24>)
 8003eea:	6800      	ldr	r0, [r0, #0]
 8003eec:	6800      	ldr	r0, [r0, #0]
 8003eee:	f380 8808 	msr	MSP, r0
 8003ef2:	f04f 0000 	mov.w	r0, #0
 8003ef6:	f380 8814 	msr	CONTROL, r0
 8003efa:	b662      	cpsie	i
 8003efc:	b661      	cpsie	f
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	df00      	svc	0
 8003f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f0a:	bf00      	nop
 8003f0c:	e000ed08 	.word	0xe000ed08

08003f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <xPortStartScheduler+0x118>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a44      	ldr	r2, [pc, #272]	; (800402c <xPortStartScheduler+0x11c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d109      	bne.n	8003f34 <xPortStartScheduler+0x24>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e7fe      	b.n	8003f32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f34:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <xPortStartScheduler+0x118>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <xPortStartScheduler+0x120>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d109      	bne.n	8003f52 <xPortStartScheduler+0x42>
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e7fe      	b.n	8003f50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <xPortStartScheduler+0x124>)
 8003f54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	22ff      	movs	r2, #255	; 0xff
 8003f62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b30      	ldr	r3, [pc, #192]	; (8004038 <xPortStartScheduler+0x128>)
 8003f78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f7a:	4b30      	ldr	r3, [pc, #192]	; (800403c <xPortStartScheduler+0x12c>)
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f80:	e009      	b.n	8003f96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003f82:	4b2e      	ldr	r3, [pc, #184]	; (800403c <xPortStartScheduler+0x12c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4a2c      	ldr	r2, [pc, #176]	; (800403c <xPortStartScheduler+0x12c>)
 8003f8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d0ef      	beq.n	8003f82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <xPortStartScheduler+0x12c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1c3 0307 	rsb	r3, r3, #7
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d009      	beq.n	8003fc2 <xPortStartScheduler+0xb2>
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	e7fe      	b.n	8003fc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <xPortStartScheduler+0x12c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <xPortStartScheduler+0x12c>)
 8003fca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <xPortStartScheduler+0x12c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <xPortStartScheduler+0x12c>)
 8003fd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <xPortStartScheduler+0x130>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <xPortStartScheduler+0x130>)
 8003fe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <xPortStartScheduler+0x130>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	; (8004040 <xPortStartScheduler+0x130>)
 8003ff2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ff6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ff8:	f000 f8de 	bl	80041b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <xPortStartScheduler+0x134>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004002:	f000 f8fd 	bl	8004200 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <xPortStartScheduler+0x138>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <xPortStartScheduler+0x138>)
 800400c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004010:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004012:	f7ff ff69 	bl	8003ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004016:	f7ff fa5b 	bl	80034d0 <vTaskSwitchContext>
	prvTaskExitError();
 800401a:	f7ff ff23 	bl	8003e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed00 	.word	0xe000ed00
 800402c:	410fc271 	.word	0x410fc271
 8004030:	410fc270 	.word	0x410fc270
 8004034:	e000e400 	.word	0xe000e400
 8004038:	20000448 	.word	0x20000448
 800403c:	2000044c 	.word	0x2000044c
 8004040:	e000ed20 	.word	0xe000ed20
 8004044:	2000000c 	.word	0x2000000c
 8004048:	e000ef34 	.word	0xe000ef34

0800404c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004064:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <vPortEnterCritical+0x54>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <vPortEnterCritical+0x54>)
 800406c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <vPortEnterCritical+0x54>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d10e      	bne.n	8004094 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortEnterCritical+0x58>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <vPortEnterCritical+0x48>
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	e7fe      	b.n	8004092 <vPortEnterCritical+0x46>
	}
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	2000000c 	.word	0x2000000c
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <vPortExitCritical+0x4c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <vPortExitCritical+0x22>
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e7fe      	b.n	80040c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <vPortExitCritical+0x4c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <vPortExitCritical+0x4c>)
 80040d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <vPortExitCritical+0x4c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <vPortExitCritical+0x3e>
 80040dc:	2300      	movs	r3, #0
 80040de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c
	...

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b15      	ldr	r3, [pc, #84]	; (8004160 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f01e 0f10 	tst.w	lr, #16
 8004110:	bf08      	it	eq
 8004112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004124:	f380 8811 	msr	BASEPRI, r0
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f7ff f9ce 	bl	80034d0 <vTaskSwitchContext>
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f380 8811 	msr	BASEPRI, r0
 800413c:	bc09      	pop	{r0, r3}
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	f01e 0f10 	tst.w	lr, #16
 800414a:	bf08      	it	eq
 800414c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004150:	f380 8809 	msr	PSP, r0
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst>:
 8004160:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8004180:	f001 f9d8 	bl	8005534 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004184:	f7ff f8e4 	bl	8003350 <xTaskIncrementTick>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800418e:	f001 fa2f 	bl	80055f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <xPortSysTickHandler+0x4c>)
 8004194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e001      	b.n	80041a0 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800419c:	f001 fa0c 	bl	80055b8 <SEGGER_SYSVIEW_RecordExitISR>
 80041a0:	2300      	movs	r3, #0
 80041a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <vPortSetupTimerInterrupt+0x34>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <vPortSetupTimerInterrupt+0x38>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <vPortSetupTimerInterrupt+0x3c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <vPortSetupTimerInterrupt+0x40>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	099b      	lsrs	r3, r3, #6
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <vPortSetupTimerInterrupt+0x44>)
 80041d6:	3b01      	subs	r3, #1
 80041d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <vPortSetupTimerInterrupt+0x34>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010
 80041f0:	e000e018 	.word	0xe000e018
 80041f4:	20000000 	.word	0x20000000
 80041f8:	10624dd3 	.word	0x10624dd3
 80041fc:	e000e014 	.word	0xe000e014

08004200 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004200:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004210 <vPortEnableVFP+0x10>
 8004204:	6801      	ldr	r1, [r0, #0]
 8004206:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800420a:	6001      	str	r1, [r0, #0]
 800420c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800420e:	bf00      	nop
 8004210:	e000ed88 	.word	0xe000ed88

08004214 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	; 0x28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004220:	f7fe ffe8 	bl	80031f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004224:	4b59      	ldr	r3, [pc, #356]	; (800438c <pvPortMalloc+0x178>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800422c:	f000 f910 	bl	8004450 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004230:	4b57      	ldr	r3, [pc, #348]	; (8004390 <pvPortMalloc+0x17c>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 808c 	bne.w	8004356 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01c      	beq.n	800427e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004244:	2208      	movs	r2, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f023 0307 	bic.w	r3, r3, #7
 800425c:	3308      	adds	r3, #8
 800425e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <pvPortMalloc+0x6a>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e7fe      	b.n	800427c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d068      	beq.n	8004356 <pvPortMalloc+0x142>
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <pvPortMalloc+0x180>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d863      	bhi.n	8004356 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800428e:	4b42      	ldr	r3, [pc, #264]	; (8004398 <pvPortMalloc+0x184>)
 8004290:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004292:	4b41      	ldr	r3, [pc, #260]	; (8004398 <pvPortMalloc+0x184>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004298:	e004      	b.n	80042a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d903      	bls.n	80042b6 <pvPortMalloc+0xa2>
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f1      	bne.n	800429a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <pvPortMalloc+0x178>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	429a      	cmp	r2, r3
 80042be:	d04a      	beq.n	8004356 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2208      	movs	r2, #8
 80042c6:	4413      	add	r3, r2
 80042c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	2308      	movs	r3, #8
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	429a      	cmp	r2, r3
 80042e0:	d91e      	bls.n	8004320 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <pvPortMalloc+0xf4>
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e7fe      	b.n	8004306 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1ad2      	subs	r2, r2, r3
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800431a:	69b8      	ldr	r0, [r7, #24]
 800431c:	f000 f8fa 	bl	8004514 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004320:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <pvPortMalloc+0x180>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <pvPortMalloc+0x180>)
 800432c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <pvPortMalloc+0x180>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <pvPortMalloc+0x188>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d203      	bcs.n	8004342 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <pvPortMalloc+0x180>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <pvPortMalloc+0x188>)
 8004340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <pvPortMalloc+0x17c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	431a      	orrs	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004356:	f7fe ff5b 	bl	8003210 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004360:	f7fd fffb 	bl	800235a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <pvPortMalloc+0x16e>
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e7fe      	b.n	8004380 <pvPortMalloc+0x16c>
	return pvReturn;
 8004382:	69fb      	ldr	r3, [r7, #28]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20013058 	.word	0x20013058
 8004390:	20013064 	.word	0x20013064
 8004394:	2001305c 	.word	0x2001305c
 8004398:	20013050 	.word	0x20013050
 800439c:	20013060 	.word	0x20013060

080043a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d046      	beq.n	8004440 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043b2:	2308      	movs	r3, #8
 80043b4:	425b      	negs	r3, r3
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4413      	add	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <vPortFree+0xa8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <vPortFree+0x42>
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e7fe      	b.n	80043e0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <vPortFree+0x5e>
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	e7fe      	b.n	80043fc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <vPortFree+0xa8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d019      	beq.n	8004440 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d115      	bne.n	8004440 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <vPortFree+0xa8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004424:	f7fe fee6 	bl	80031f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4b07      	ldr	r3, [pc, #28]	; (800444c <vPortFree+0xac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4413      	add	r3, r2
 8004432:	4a06      	ldr	r2, [pc, #24]	; (800444c <vPortFree+0xac>)
 8004434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f000 f86c 	bl	8004514 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800443c:	f7fe fee8 	bl	8003210 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004440:	bf00      	nop
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20013064 	.word	0x20013064
 800444c:	2001305c 	.word	0x2001305c

08004450 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004456:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800445a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800445c:	4b27      	ldr	r3, [pc, #156]	; (80044fc <prvHeapInit+0xac>)
 800445e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3307      	adds	r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0307 	bic.w	r3, r3, #7
 8004476:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <prvHeapInit+0xac>)
 8004480:	4413      	add	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004488:	4a1d      	ldr	r2, [pc, #116]	; (8004500 <prvHeapInit+0xb0>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800448e:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <prvHeapInit+0xb0>)
 8004490:	2200      	movs	r2, #0
 8004492:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4413      	add	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800449c:	2208      	movs	r2, #8
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0307 	bic.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <prvHeapInit+0xb4>)
 80044b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <prvHeapInit+0xb4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <prvHeapInit+0xb4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <prvHeapInit+0xb4>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <prvHeapInit+0xb8>)
 80044de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a09      	ldr	r2, [pc, #36]	; (800450c <prvHeapInit+0xbc>)
 80044e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044e8:	4b09      	ldr	r3, [pc, #36]	; (8004510 <prvHeapInit+0xc0>)
 80044ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044ee:	601a      	str	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000450 	.word	0x20000450
 8004500:	20013050 	.word	0x20013050
 8004504:	20013058 	.word	0x20013058
 8004508:	20013060 	.word	0x20013060
 800450c:	2001305c 	.word	0x2001305c
 8004510:	20013064 	.word	0x20013064

08004514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <prvInsertBlockIntoFreeList+0xac>)
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e002      	b.n	8004528 <prvInsertBlockIntoFreeList+0x14>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d8f7      	bhi.n	8004522 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	4413      	add	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d108      	bne.n	8004556 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	441a      	add	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	441a      	add	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d118      	bne.n	800459c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d00d      	beq.n	8004592 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	e008      	b.n	80045a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e003      	b.n	80045a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d002      	beq.n	80045b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20013050 	.word	0x20013050
 80045c4:	20013058 	.word	0x20013058

080045c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80045d6:	2205      	movs	r2, #5
 80045d8:	492b      	ldr	r1, [pc, #172]	; (8004688 <SYSVIEW_AddTask+0xc0>)
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f001 fae0 	bl	8005ba0 <memcmp>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d04b      	beq.n	800467e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045e6:	4b29      	ldr	r3, [pc, #164]	; (800468c <SYSVIEW_AddTask+0xc4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	d903      	bls.n	80045f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045ee:	4828      	ldr	r0, [pc, #160]	; (8004690 <SYSVIEW_AddTask+0xc8>)
 80045f0:	f001 fa50 	bl	8005a94 <SEGGER_SYSVIEW_Warn>
    return;
 80045f4:	e044      	b.n	8004680 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <SYSVIEW_AddTask+0xc4>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4926      	ldr	r1, [pc, #152]	; (8004694 <SYSVIEW_AddTask+0xcc>)
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <SYSVIEW_AddTask+0xc4>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4921      	ldr	r1, [pc, #132]	; (8004694 <SYSVIEW_AddTask+0xcc>)
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3304      	adds	r3, #4
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <SYSVIEW_AddTask+0xc4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	491b      	ldr	r1, [pc, #108]	; (8004694 <SYSVIEW_AddTask+0xcc>)
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3308      	adds	r3, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <SYSVIEW_AddTask+0xc4>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4916      	ldr	r1, [pc, #88]	; (8004694 <SYSVIEW_AddTask+0xcc>)
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	330c      	adds	r3, #12
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <SYSVIEW_AddTask+0xc4>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4910      	ldr	r1, [pc, #64]	; (8004694 <SYSVIEW_AddTask+0xcc>)
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3310      	adds	r3, #16
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <SYSVIEW_AddTask+0xc4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <SYSVIEW_AddTask+0xc4>)
 800466a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f80e 	bl	8004698 <SYSVIEW_SendTaskInfo>
 800467c:	e000      	b.n	8004680 <SYSVIEW_AddTask+0xb8>
    return;
 800467e:	bf00      	nop

}
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	08005de8 	.word	0x08005de8
 800468c:	20013108 	.word	0x20013108
 8004690:	08005df0 	.word	0x08005df0
 8004694:	20013068 	.word	0x20013068

08004698 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	2214      	movs	r2, #20
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 fa90 	bl	8005bd4 <memset>
  TaskInfo.TaskID     = TaskID;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fe07 	bl	80052e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80046d2:	bf00      	nop
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <_DoInit+0x8c>)
 80046e4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2203      	movs	r2, #3
 80046ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2203      	movs	r2, #3
 80046f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	; (800476c <_DoInit+0x90>)
 80046f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <_DoInit+0x94>)
 80046fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004704:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a14      	ldr	r2, [pc, #80]	; (800476c <_DoInit+0x90>)
 800471c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <_DoInit+0x98>)
 8004722:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2210      	movs	r2, #16
 8004728:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3307      	adds	r3, #7
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <_DoInit+0x9c>)
 8004742:	6810      	ldr	r0, [r2, #0]
 8004744:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <_DoInit+0xa0>)
 800474a:	6810      	ldr	r0, [r2, #0]
 800474c:	6018      	str	r0, [r3, #0]
 800474e:	8891      	ldrh	r1, [r2, #4]
 8004750:	7992      	ldrb	r2, [r2, #6]
 8004752:	8099      	strh	r1, [r3, #4]
 8004754:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	719a      	strb	r2, [r3, #6]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20013680 	.word	0x20013680
 800476c:	08005e40 	.word	0x08005e40
 8004770:	2001310c 	.word	0x2001310c
 8004774:	2001350c 	.word	0x2001350c
 8004778:	08005e4c 	.word	0x08005e4c
 800477c:	08005e50 	.word	0x08005e50

08004780 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800478c:	4b3c      	ldr	r3, [pc, #240]	; (8004880 <SEGGER_RTT_ReadNoLock+0x100>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <SEGGER_RTT_ReadNoLock+0x18>
 8004794:	f7ff ffa2 	bl	80046dc <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	3360      	adds	r3, #96	; 0x60
 80047a4:	4a36      	ldr	r2, [pc, #216]	; (8004880 <SEGGER_RTT_ReadNoLock+0x100>)
 80047a6:	4413      	add	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d92a      	bls.n	800481c <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	bf28      	it	cs
 80047d8:	4613      	movcs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	4413      	add	r3, r2
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4619      	mov	r1, r3
 80047e8:	69f8      	ldr	r0, [r7, #28]
 80047ea:	f001 f9e8 	bl	8005bbe <memcpy>
    NumBytesRead += NumBytesRem;
 80047ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4413      	add	r3, r2
 80047fc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004806:	6a3a      	ldr	r2, [r7, #32]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	6a3a      	ldr	r2, [r7, #32]
 8004814:	429a      	cmp	r2, r3
 8004816:	d101      	bne.n	800481c <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4293      	cmp	r3, r2
 800482a:	bf28      	it	cs
 800482c:	4613      	movcs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	4413      	add	r3, r2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4619      	mov	r1, r3
 8004842:	69f8      	ldr	r0, [r7, #28]
 8004844:	f001 f9bb 	bl	8005bbe <memcpy>
    NumBytesRead += NumBytesRem;
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004876:	4618      	mov	r0, r3
 8004878:	3728      	adds	r7, #40	; 0x28
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20013680 	.word	0x20013680

08004884 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004894:	e002      	b.n	800489c <_EncodeStr+0x18>
    Len++;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3301      	adds	r3, #1
 800489a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f6      	bne.n	8004896 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d901      	bls.n	80048b4 <_EncodeStr+0x30>
    Len = Limit;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2bfe      	cmp	r3, #254	; 0xfe
 80048b8:	d806      	bhi.n	80048c8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	60fa      	str	r2, [r7, #12]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e011      	b.n	80048ec <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	60fa      	str	r2, [r7, #12]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	60fa      	str	r2, [r7, #12]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	0a19      	lsrs	r1, r3, #8
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	60fa      	str	r2, [r7, #12]
 80048e8:	b2ca      	uxtb	r2, r1
 80048ea:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048f0:	e00a      	b.n	8004908 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	1c53      	adds	r3, r2, #1
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	60f9      	str	r1, [r7, #12]
 80048fe:	7812      	ldrb	r2, [r2, #0]
 8004900:	701a      	strb	r2, [r3, #0]
    n++;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3301      	adds	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	429a      	cmp	r2, r3
 800490e:	d3f0      	bcc.n	80048f2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800493c:	1cfb      	adds	r3, r7, #3
 800493e:	2201      	movs	r2, #1
 8004940:	4619      	mov	r1, r3
 8004942:	2001      	movs	r0, #1
 8004944:	f7ff ff1c 	bl	8004780 <SEGGER_RTT_ReadNoLock>
 8004948:	4603      	mov	r3, r0
 800494a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	dd44      	ble.n	80049dc <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d01a      	beq.n	800498e <_HandleIncomingPacket+0x58>
 8004958:	2b04      	cmp	r3, #4
 800495a:	dc06      	bgt.n	800496a <_HandleIncomingPacket+0x34>
 800495c:	2b02      	cmp	r3, #2
 800495e:	d010      	beq.n	8004982 <_HandleIncomingPacket+0x4c>
 8004960:	2b02      	cmp	r3, #2
 8004962:	dc11      	bgt.n	8004988 <_HandleIncomingPacket+0x52>
 8004964:	2b01      	cmp	r3, #1
 8004966:	d009      	beq.n	800497c <_HandleIncomingPacket+0x46>
 8004968:	e02d      	b.n	80049c6 <_HandleIncomingPacket+0x90>
 800496a:	2b06      	cmp	r3, #6
 800496c:	d015      	beq.n	800499a <_HandleIncomingPacket+0x64>
 800496e:	2b06      	cmp	r3, #6
 8004970:	db10      	blt.n	8004994 <_HandleIncomingPacket+0x5e>
 8004972:	2b07      	cmp	r3, #7
 8004974:	d014      	beq.n	80049a0 <_HandleIncomingPacket+0x6a>
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d015      	beq.n	80049a6 <_HandleIncomingPacket+0x70>
 800497a:	e024      	b.n	80049c6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800497c:	f000 fb38 	bl	8004ff0 <SEGGER_SYSVIEW_Start>
      break;
 8004980:	e031      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004982:	f000 fbed 	bl	8005160 <SEGGER_SYSVIEW_Stop>
      break;
 8004986:	e02e      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004988:	f000 fda4 	bl	80054d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800498c:	e02b      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800498e:	f000 fd8d 	bl	80054ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004992:	e028      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004994:	f000 fc0a 	bl	80051ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004998:	e025      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800499a:	f001 f83d 	bl	8005a18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800499e:	e022      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80049a0:	f001 f81c 	bl	80059dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80049a4:	e01f      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049a6:	1cfb      	adds	r3, r7, #3
 80049a8:	2201      	movs	r2, #1
 80049aa:	4619      	mov	r1, r3
 80049ac:	2001      	movs	r0, #1
 80049ae:	f7ff fee7 	bl	8004780 <SEGGER_RTT_ReadNoLock>
 80049b2:	4603      	mov	r3, r0
 80049b4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dd11      	ble.n	80049e0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 ff8c 	bl	80058dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80049c4:	e00c      	b.n	80049e0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da0a      	bge.n	80049e4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049ce:	1cfb      	adds	r3, r7, #3
 80049d0:	2201      	movs	r2, #1
 80049d2:	4619      	mov	r1, r3
 80049d4:	2001      	movs	r0, #1
 80049d6:	f7ff fed3 	bl	8004780 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80049da:	e003      	b.n	80049e4 <_HandleIncomingPacket+0xae>
    }
  }
 80049dc:	bf00      	nop
 80049de:	e002      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
      break;
 80049e0:	bf00      	nop
 80049e2:	e000      	b.n	80049e6 <_HandleIncomingPacket+0xb0>
      break;
 80049e4:	bf00      	nop
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08c      	sub	sp, #48	; 0x30
 80049f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80049f6:	2301      	movs	r3, #1
 80049f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80049fa:	1d3b      	adds	r3, r7, #4
 80049fc:	3301      	adds	r3, #1
 80049fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a04:	4b30      	ldr	r3, [pc, #192]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	e00b      	b.n	8004a24 <_TrySendOverflowPacket+0x34>
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <_TrySendOverflowPacket+0x1c>
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <_TrySendOverflowPacket+0xdc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e00b      	b.n	8004a6c <_TrySendOverflowPacket+0x7c>
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	1c59      	adds	r1, r3, #1
 8004a5c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	09db      	lsrs	r3, r3, #7
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a70:	d8f0      	bhi.n	8004a54 <_TrySendOverflowPacket+0x64>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	627a      	str	r2, [r7, #36]	; 0x24
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7fb fbae 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a94:	4603      	mov	r3, r0
 8004a96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e004      	b.n	8004abc <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <_TrySendOverflowPacket+0xd8>)
 8004aba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004abc:	693b      	ldr	r3, [r7, #16]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3730      	adds	r7, #48	; 0x30
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2001351c 	.word	0x2001351c
 8004acc:	e0001004 	.word	0xe0001004

08004ad0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004adc:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <_SendPacket+0x19c>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d010      	beq.n	8004b06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ae4:	4b61      	ldr	r3, [pc, #388]	; (8004c6c <_SendPacket+0x19c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a1 	beq.w	8004c30 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <_SendPacket+0x19c>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d109      	bne.n	8004b0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004af6:	f7ff ff7b 	bl	80049f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004afa:	4b5c      	ldr	r3, [pc, #368]	; (8004c6c <_SendPacket+0x19c>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	f040 8098 	bne.w	8004c34 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004b04:	e001      	b.n	8004b0a <_SendPacket+0x3a>
    goto Send;
 8004b06:	bf00      	nop
 8004b08:	e000      	b.n	8004b0c <_SendPacket+0x3c>
Send:
 8004b0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b1f      	cmp	r3, #31
 8004b10:	d809      	bhi.n	8004b26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004b12:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <_SendPacket+0x19c>)
 8004b14:	69da      	ldr	r2, [r3, #28]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f040 8089 	bne.w	8004c38 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b17      	cmp	r3, #23
 8004b2a:	d807      	bhi.n	8004b3c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e03d      	b.n	8004bb8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b7f      	cmp	r3, #127	; 0x7f
 8004b48:	d912      	bls.n	8004b70 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	09da      	lsrs	r2, r3, #7
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	3a01      	subs	r2, #1
 8004b62:	60fa      	str	r2, [r7, #12]
 8004b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e006      	b.n	8004b7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b7f      	cmp	r3, #127	; 0x7f
 8004b82:	d912      	bls.n	8004baa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	09da      	lsrs	r2, r3, #7
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	60fa      	str	r2, [r7, #12]
 8004b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	e006      	b.n	8004bb8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <_SendPacket+0x1a0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <_SendPacket+0x19c>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	e00b      	b.n	8004bea <_SendPacket+0x11a>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	6279      	str	r1, [r7, #36]	; 0x24
 8004bdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	09db      	lsrs	r3, r3, #7
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	2b7f      	cmp	r3, #127	; 0x7f
 8004bee:	d8f0      	bhi.n	8004bd2 <_SendPacket+0x102>
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf6:	6a3a      	ldr	r2, [r7, #32]
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7fb faf0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c10:	4603      	mov	r3, r0
 8004c12:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <_SendPacket+0x19c>)
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	60d3      	str	r3, [r2, #12]
 8004c20:	e00b      	b.n	8004c3a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <_SendPacket+0x19c>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <_SendPacket+0x19c>)
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e004      	b.n	8004c3a <_SendPacket+0x16a>
    goto SendDone;
 8004c30:	bf00      	nop
 8004c32:	e002      	b.n	8004c3a <_SendPacket+0x16a>
      goto SendDone;
 8004c34:	bf00      	nop
 8004c36:	e000      	b.n	8004c3a <_SendPacket+0x16a>
      goto SendDone;
 8004c38:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <_SendPacket+0x1a4>)
 8004c3c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <_SendPacket+0x1a4>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d00b      	beq.n	8004c62 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <_SendPacket+0x19c>)
 8004c4c:	789b      	ldrb	r3, [r3, #2]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d107      	bne.n	8004c62 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c52:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <_SendPacket+0x19c>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c58:	f7ff fe6d 	bl	8004936 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	; (8004c6c <_SendPacket+0x19c>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c62:	bf00      	nop
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	2001351c 	.word	0x2001351c
 8004c70:	e0001004 	.word	0xe0001004
 8004c74:	20013680 	.word	0x20013680

08004c78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c80:	f3ef 8311 	mrs	r3, BASEPRI
 8004c84:	f04f 0120 	mov.w	r1, #32
 8004c88:	f381 8811 	msr	BASEPRI, r1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4808      	ldr	r0, [pc, #32]	; (8004cb0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c90:	f7ff fe45 	bl	800491e <_PreparePacket>
 8004c94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68b8      	ldr	r0, [r7, #8]
 8004c9c:	f7ff ff18 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f383 8811 	msr	BASEPRI, r3
}
 8004ca6:	bf00      	nop
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2001354c 	.word	0x2001354c

08004cb4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc2:	f04f 0120 	mov.w	r1, #32
 8004cc6:	f381 8811 	msr	BASEPRI, r1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	4816      	ldr	r0, [pc, #88]	; (8004d28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cce:	f7ff fe26 	bl	800491e <_PreparePacket>
 8004cd2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e00b      	b.n	8004cfa <SEGGER_SYSVIEW_RecordU32+0x46>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	61f9      	str	r1, [r7, #28]
 8004cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	09db      	lsrs	r3, r3, #7
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cfe:	d8f0      	bhi.n	8004ce2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	61fa      	str	r2, [r7, #28]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68f9      	ldr	r1, [r7, #12]
 8004d14:	6938      	ldr	r0, [r7, #16]
 8004d16:	f7ff fedb 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f383 8811 	msr	BASEPRI, r3
}
 8004d20:	bf00      	nop
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	2001354c 	.word	0x2001354c

08004d2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	; 0x30
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d38:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3c:	f04f 0120 	mov.w	r1, #32
 8004d40:	f381 8811 	msr	BASEPRI, r1
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	4825      	ldr	r0, [pc, #148]	; (8004ddc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d48:	f7ff fde9 	bl	800491e <_PreparePacket>
 8004d4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	e00b      	b.n	8004d74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	09db      	lsrs	r3, r3, #7
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d8f0      	bhi.n	8004d5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	e00b      	b.n	8004dac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	1c59      	adds	r1, r3, #1
 8004d9c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	09db      	lsrs	r3, r3, #7
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b7f      	cmp	r3, #127	; 0x7f
 8004db0:	d8f0      	bhi.n	8004d94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	627a      	str	r2, [r7, #36]	; 0x24
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	6979      	ldr	r1, [r7, #20]
 8004dc6:	69b8      	ldr	r0, [r7, #24]
 8004dc8:	f7ff fe82 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f383 8811 	msr	BASEPRI, r3
}
 8004dd2:	bf00      	nop
 8004dd4:	3730      	adds	r7, #48	; 0x30
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2001354c 	.word	0x2001354c

08004de0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08e      	sub	sp, #56	; 0x38
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dee:	f3ef 8311 	mrs	r3, BASEPRI
 8004df2:	f04f 0120 	mov.w	r1, #32
 8004df6:	f381 8811 	msr	BASEPRI, r1
 8004dfa:	61fb      	str	r3, [r7, #28]
 8004dfc:	4832      	ldr	r0, [pc, #200]	; (8004ec8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004dfe:	f7ff fd8e 	bl	800491e <_PreparePacket>
 8004e02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e10:	e00b      	b.n	8004e2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	1c59      	adds	r1, r3, #1
 8004e1a:	6379      	str	r1, [r7, #52]	; 0x34
 8004e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	09db      	lsrs	r3, r3, #7
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2e:	d8f0      	bhi.n	8004e12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	637a      	str	r2, [r7, #52]	; 0x34
 8004e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e48:	e00b      	b.n	8004e62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	1c59      	adds	r1, r3, #1
 8004e52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	2b7f      	cmp	r3, #127	; 0x7f
 8004e66:	d8f0      	bhi.n	8004e4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	e00b      	b.n	8004e9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9e:	d8f0      	bhi.n	8004e82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ea6:	6a3a      	ldr	r2, [r7, #32]
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	6979      	ldr	r1, [r7, #20]
 8004eb4:	69b8      	ldr	r0, [r7, #24]
 8004eb6:	f7ff fe0b 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f383 8811 	msr	BASEPRI, r3
}
 8004ec0:	bf00      	nop
 8004ec2:	3738      	adds	r7, #56	; 0x38
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2001354c 	.word	0x2001354c

08004ecc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b090      	sub	sp, #64	; 0x40
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004eda:	f3ef 8311 	mrs	r3, BASEPRI
 8004ede:	f04f 0120 	mov.w	r1, #32
 8004ee2:	f381 8811 	msr	BASEPRI, r1
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	4840      	ldr	r0, [pc, #256]	; (8004fec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004eea:	f7ff fd18 	bl	800491e <_PreparePacket>
 8004eee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efc:	e00b      	b.n	8004f16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f04:	1c59      	adds	r1, r3, #1
 8004f06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	09db      	lsrs	r3, r3, #7
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1a:	d8f0      	bhi.n	8004efe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
 8004f34:	e00b      	b.n	8004f4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3c:	1c59      	adds	r1, r3, #1
 8004f3e:	6379      	str	r1, [r7, #52]	; 0x34
 8004f40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2b7f      	cmp	r3, #127	; 0x7f
 8004f52:	d8f0      	bhi.n	8004f36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	637a      	str	r2, [r7, #52]	; 0x34
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6c:	e00b      	b.n	8004f86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	1c59      	adds	r1, r3, #1
 8004f76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	09db      	lsrs	r3, r3, #7
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	2b7f      	cmp	r3, #127	; 0x7f
 8004f8a:	d8f0      	bhi.n	8004f6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	e00b      	b.n	8004fbe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1c59      	adds	r1, r3, #1
 8004fae:	6279      	str	r1, [r7, #36]	; 0x24
 8004fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	09db      	lsrs	r3, r3, #7
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8004fc2:	d8f0      	bhi.n	8004fa6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	69b8      	ldr	r0, [r7, #24]
 8004fda:	f7ff fd79 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
 8004fe6:	3740      	adds	r7, #64	; 0x40
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	2001354c 	.word	0x2001354c

08004ff0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ff6:	4b57      	ldr	r3, [pc, #348]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004ffc:	f3ef 8311 	mrs	r3, BASEPRI
 8005000:	f04f 0120 	mov.w	r1, #32
 8005004:	f381 8811 	msr	BASEPRI, r1
 8005008:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800500a:	220a      	movs	r2, #10
 800500c:	4952      	ldr	r1, [pc, #328]	; (8005158 <SEGGER_SYSVIEW_Start+0x168>)
 800500e:	2001      	movs	r0, #1
 8005010:	f7fb f8ee 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800501a:	200a      	movs	r0, #10
 800501c:	f7ff fe2c 	bl	8004c78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005020:	f3ef 8311 	mrs	r3, BASEPRI
 8005024:	f04f 0120 	mov.w	r1, #32
 8005028:	f381 8811 	msr	BASEPRI, r1
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	484b      	ldr	r0, [pc, #300]	; (800515c <SEGGER_SYSVIEW_Start+0x16c>)
 8005030:	f7ff fc75 	bl	800491e <_PreparePacket>
 8005034:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503e:	4b45      	ldr	r3, [pc, #276]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_Start+0x6e>
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2b7f      	cmp	r3, #127	; 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_Start+0x56>
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
 8005078:	4b36      	ldr	r3, [pc, #216]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	e00b      	b.n	8005098 <SEGGER_SYSVIEW_Start+0xa8>
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	1c59      	adds	r1, r3, #1
 8005088:	6279      	str	r1, [r7, #36]	; 0x24
 800508a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	2b7f      	cmp	r3, #127	; 0x7f
 800509c:	d8f0      	bhi.n	8005080 <SEGGER_SYSVIEW_Start+0x90>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	627a      	str	r2, [r7, #36]	; 0x24
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	4b28      	ldr	r3, [pc, #160]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e00b      	b.n	80050d2 <SEGGER_SYSVIEW_Start+0xe2>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	1c59      	adds	r1, r3, #1
 80050c2:	61f9      	str	r1, [r7, #28]
 80050c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	09db      	lsrs	r3, r3, #7
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b7f      	cmp	r3, #127	; 0x7f
 80050d6:	d8f0      	bhi.n	80050ba <SEGGER_SYSVIEW_Start+0xca>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	61fa      	str	r2, [r7, #28]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	2302      	movs	r3, #2
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e00b      	b.n	800510a <SEGGER_SYSVIEW_Start+0x11a>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	6179      	str	r1, [r7, #20]
 80050fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	09db      	lsrs	r3, r3, #7
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b7f      	cmp	r3, #127	; 0x7f
 800510e:	d8f0      	bhi.n	80050f2 <SEGGER_SYSVIEW_Start+0x102>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	617a      	str	r2, [r7, #20]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005120:	2218      	movs	r2, #24
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fcd3 	bl	8004ad0 <_SendPacket>
      RECORD_END();
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005130:	4b08      	ldr	r3, [pc, #32]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <SEGGER_SYSVIEW_Start+0x164>)
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800513e:	f000 f9c9 	bl	80054d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005142:	f000 f9b3 	bl	80054ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005146:	f000 fc67 	bl	8005a18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800514a:	bf00      	nop
 800514c:	3730      	adds	r7, #48	; 0x30
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2001351c 	.word	0x2001351c
 8005158:	08005e70 	.word	0x08005e70
 800515c:	2001354c 	.word	0x2001354c

08005160 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005166:	f3ef 8311 	mrs	r3, BASEPRI
 800516a:	f04f 0120 	mov.w	r1, #32
 800516e:	f381 8811 	msr	BASEPRI, r1
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	480b      	ldr	r0, [pc, #44]	; (80051a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8005176:	f7ff fbd2 	bl	800491e <_PreparePacket>
 800517a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005184:	220b      	movs	r2, #11
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6838      	ldr	r0, [r7, #0]
 800518a:	f7ff fca1 	bl	8004ad0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f383 8811 	msr	BASEPRI, r3
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2001354c 	.word	0x2001354c
 80051a8:	2001351c 	.word	0x2001351c

080051ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051b2:	f3ef 8311 	mrs	r3, BASEPRI
 80051b6:	f04f 0120 	mov.w	r1, #32
 80051ba:	f381 8811 	msr	BASEPRI, r1
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	4845      	ldr	r0, [pc, #276]	; (80052d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051c2:	f7ff fbac 	bl	800491e <_PreparePacket>
 80051c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	4b42      	ldr	r3, [pc, #264]	; (80052dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	e00b      	b.n	80051f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
 800520a:	4b34      	ldr	r3, [pc, #208]	; (80052dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	e00b      	b.n	800522a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1c59      	adds	r1, r3, #1
 800521a:	6279      	str	r1, [r7, #36]	; 0x24
 800521c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	09db      	lsrs	r3, r3, #7
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	2b7f      	cmp	r3, #127	; 0x7f
 800522e:	d8f0      	bhi.n	8005212 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	627a      	str	r2, [r7, #36]	; 0x24
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	e00b      	b.n	8005264 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	1c59      	adds	r1, r3, #1
 8005254:	61f9      	str	r1, [r7, #28]
 8005256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	09db      	lsrs	r3, r3, #7
 8005262:	61bb      	str	r3, [r7, #24]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b7f      	cmp	r3, #127	; 0x7f
 8005268:	d8f0      	bhi.n	800524c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	61fa      	str	r2, [r7, #28]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	2302      	movs	r3, #2
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e00b      	b.n	800529c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	6179      	str	r1, [r7, #20]
 800528e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	09db      	lsrs	r3, r3, #7
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b7f      	cmp	r3, #127	; 0x7f
 80052a0:	d8f0      	bhi.n	8005284 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	617a      	str	r2, [r7, #20]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052b2:	2218      	movs	r2, #24
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f7ff fc0a 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	4798      	blx	r3
  }
}
 80052d0:	bf00      	nop
 80052d2:	3730      	adds	r7, #48	; 0x30
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	2001354c 	.word	0x2001354c
 80052dc:	2001351c 	.word	0x2001351c

080052e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b092      	sub	sp, #72	; 0x48
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052e8:	f3ef 8311 	mrs	r3, BASEPRI
 80052ec:	f04f 0120 	mov.w	r1, #32
 80052f0:	f381 8811 	msr	BASEPRI, r1
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	486b      	ldr	r0, [pc, #428]	; (80054a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80052f8:	f7ff fb11 	bl	800491e <_PreparePacket>
 80052fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	647b      	str	r3, [r7, #68]	; 0x44
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b67      	ldr	r3, [pc, #412]	; (80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
 8005314:	e00b      	b.n	800532e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8005316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005318:	b2da      	uxtb	r2, r3
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	1c59      	adds	r1, r3, #1
 800531e:	6479      	str	r1, [r7, #68]	; 0x44
 8005320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532a:	09db      	lsrs	r3, r3, #7
 800532c:	643b      	str	r3, [r7, #64]	; 0x40
 800532e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005330:	2b7f      	cmp	r3, #127	; 0x7f
 8005332:	d8f0      	bhi.n	8005316 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	647a      	str	r2, [r7, #68]	; 0x44
 800533a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005342:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
 800534e:	e00b      	b.n	8005368 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	63f9      	str	r1, [r7, #60]	; 0x3c
 800535a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	09db      	lsrs	r3, r3, #7
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	2b7f      	cmp	r3, #127	; 0x7f
 800536c:	d8f0      	bhi.n	8005350 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fa7c 	bl	8004884 <_EncodeStr>
 800538c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800538e:	2209      	movs	r2, #9
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f7ff fb9c 	bl	8004ad0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b40      	ldr	r3, [pc, #256]	; (80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	089b      	lsrs	r3, r3, #2
 80053ac:	633b      	str	r3, [r7, #48]	; 0x30
 80053ae:	e00b      	b.n	80053c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	6379      	str	r1, [r7, #52]	; 0x34
 80053ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d8f0      	bhi.n	80053b0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	637a      	str	r2, [r7, #52]	; 0x34
 80053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e8:	e00b      	b.n	8005402 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	1c59      	adds	r1, r3, #1
 80053f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	09db      	lsrs	r3, r3, #7
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	2b7f      	cmp	r3, #127	; 0x7f
 8005406:	d8f0      	bhi.n	80053ea <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e00b      	b.n	800543c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	b2da      	uxtb	r2, r3
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1c59      	adds	r1, r3, #1
 800542c:	6279      	str	r1, [r7, #36]	; 0x24
 800542e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	09db      	lsrs	r3, r3, #7
 800543a:	623b      	str	r3, [r7, #32]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b7f      	cmp	r3, #127	; 0x7f
 8005440:	d8f0      	bhi.n	8005424 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	627a      	str	r2, [r7, #36]	; 0x24
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e00b      	b.n	8005474 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	b2da      	uxtb	r2, r3
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	1c59      	adds	r1, r3, #1
 8005464:	61f9      	str	r1, [r7, #28]
 8005466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b7f      	cmp	r3, #127	; 0x7f
 8005478:	d8f0      	bhi.n	800545c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800548a:	2215      	movs	r2, #21
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	6938      	ldr	r0, [r7, #16]
 8005490:	f7ff fb1e 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f383 8811 	msr	BASEPRI, r3
}
 800549a:	bf00      	nop
 800549c:	3748      	adds	r7, #72	; 0x48
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2001354c 	.word	0x2001354c
 80054a8:	2001351c 	.word	0x2001351c

080054ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4798      	blx	r3
  }
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2001351c 	.word	0x2001351c

080054d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80054e2:	4b12      	ldr	r3, [pc, #72]	; (800552c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d014      	beq.n	8005516 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4798      	blx	r3
 80054f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80054f8:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80054fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	0013      	movs	r3, r2
 8005508:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800550a:	461a      	mov	r2, r3
 800550c:	4601      	mov	r1, r0
 800550e:	200d      	movs	r0, #13
 8005510:	f7ff fc0c 	bl	8004d2c <SEGGER_SYSVIEW_RecordU32x2>
 8005514:	e005      	b.n	8005522 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4619      	mov	r1, r3
 800551c:	200c      	movs	r0, #12
 800551e:	f7ff fbc9 	bl	8004cb4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}
 800552a:	bf00      	nop
 800552c:	2001351c 	.word	0x2001351c
 8005530:	e0001004 	.word	0xe0001004

08005534 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800553a:	f3ef 8311 	mrs	r3, BASEPRI
 800553e:	f04f 0120 	mov.w	r1, #32
 8005542:	f381 8811 	msr	BASEPRI, r1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	4819      	ldr	r0, [pc, #100]	; (80055b0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800554a:	f7ff f9e8 	bl	800491e <_PreparePacket>
 800554e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005554:	4b17      	ldr	r3, [pc, #92]	; (80055b4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e00b      	b.n	8005580 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	6179      	str	r1, [r7, #20]
 8005572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	09db      	lsrs	r3, r3, #7
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b7f      	cmp	r3, #127	; 0x7f
 8005584:	d8f0      	bhi.n	8005568 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	617a      	str	r2, [r7, #20]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005596:	2202      	movs	r2, #2
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68b8      	ldr	r0, [r7, #8]
 800559c:	f7ff fa98 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f383 8811 	msr	BASEPRI, r3
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	2001354c 	.word	0x2001354c
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055be:	f3ef 8311 	mrs	r3, BASEPRI
 80055c2:	f04f 0120 	mov.w	r1, #32
 80055c6:	f381 8811 	msr	BASEPRI, r1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	4807      	ldr	r0, [pc, #28]	; (80055ec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055ce:	f7ff f9a6 	bl	800491e <_PreparePacket>
 80055d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055d4:	2203      	movs	r2, #3
 80055d6:	6839      	ldr	r1, [r7, #0]
 80055d8:	6838      	ldr	r0, [r7, #0]
 80055da:	f7ff fa79 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f383 8811 	msr	BASEPRI, r3
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	2001354c 	.word	0x2001354c

080055f0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055f6:	f3ef 8311 	mrs	r3, BASEPRI
 80055fa:	f04f 0120 	mov.w	r1, #32
 80055fe:	f381 8811 	msr	BASEPRI, r1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	4807      	ldr	r0, [pc, #28]	; (8005624 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005606:	f7ff f98a 	bl	800491e <_PreparePacket>
 800560a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800560c:	2212      	movs	r2, #18
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6838      	ldr	r0, [r7, #0]
 8005612:	f7ff fa5d 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f383 8811 	msr	BASEPRI, r3
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	2001354c 	.word	0x2001354c

08005628 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800562e:	f3ef 8311 	mrs	r3, BASEPRI
 8005632:	f04f 0120 	mov.w	r1, #32
 8005636:	f381 8811 	msr	BASEPRI, r1
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	4807      	ldr	r0, [pc, #28]	; (800565c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800563e:	f7ff f96e 	bl	800491e <_PreparePacket>
 8005642:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005644:	2211      	movs	r2, #17
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6838      	ldr	r0, [r7, #0]
 800564a:	f7ff fa41 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f383 8811 	msr	BASEPRI, r3
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	2001354c 	.word	0x2001354c

08005660 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005668:	f3ef 8311 	mrs	r3, BASEPRI
 800566c:	f04f 0120 	mov.w	r1, #32
 8005670:	f381 8811 	msr	BASEPRI, r1
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	481a      	ldr	r0, [pc, #104]	; (80056e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005678:	f7ff f951 	bl	800491e <_PreparePacket>
 800567c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005682:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e00b      	b.n	80056b0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	b2da      	uxtb	r2, r3
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	1c59      	adds	r1, r3, #1
 80056a0:	61f9      	str	r1, [r7, #28]
 80056a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	09db      	lsrs	r3, r3, #7
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b7f      	cmp	r3, #127	; 0x7f
 80056b4:	d8f0      	bhi.n	8005698 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	61fa      	str	r2, [r7, #28]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056c6:	2208      	movs	r2, #8
 80056c8:	68f9      	ldr	r1, [r7, #12]
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f7ff fa00 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f383 8811 	msr	BASEPRI, r3
}
 80056d6:	bf00      	nop
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2001354c 	.word	0x2001354c
 80056e4:	2001351c 	.word	0x2001351c

080056e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056f0:	f3ef 8311 	mrs	r3, BASEPRI
 80056f4:	f04f 0120 	mov.w	r1, #32
 80056f8:	f381 8811 	msr	BASEPRI, r1
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	481a      	ldr	r0, [pc, #104]	; (8005768 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005700:	f7ff f90d 	bl	800491e <_PreparePacket>
 8005704:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800570a:	4b18      	ldr	r3, [pc, #96]	; (800576c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	089b      	lsrs	r3, r3, #2
 8005714:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e00b      	b.n	8005738 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	b2da      	uxtb	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	1c59      	adds	r1, r3, #1
 8005728:	61f9      	str	r1, [r7, #28]
 800572a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	09db      	lsrs	r3, r3, #7
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d8f0      	bhi.n	8005720 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800574e:	2204      	movs	r2, #4
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	6938      	ldr	r0, [r7, #16]
 8005754:	f7ff f9bc 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f383 8811 	msr	BASEPRI, r3
}
 800575e:	bf00      	nop
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2001354c 	.word	0x2001354c
 800576c:	2001351c 	.word	0x2001351c

08005770 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005778:	f3ef 8311 	mrs	r3, BASEPRI
 800577c:	f04f 0120 	mov.w	r1, #32
 8005780:	f381 8811 	msr	BASEPRI, r1
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	481a      	ldr	r0, [pc, #104]	; (80057f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005788:	f7ff f8c9 	bl	800491e <_PreparePacket>
 800578c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e00b      	b.n	80057c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	61f9      	str	r1, [r7, #28]
 80057b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	09db      	lsrs	r3, r3, #7
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b7f      	cmp	r3, #127	; 0x7f
 80057c4:	d8f0      	bhi.n	80057a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	61fa      	str	r2, [r7, #28]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	b2d2      	uxtb	r2, r2
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057d6:	2206      	movs	r2, #6
 80057d8:	68f9      	ldr	r1, [r7, #12]
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7ff f978 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f383 8811 	msr	BASEPRI, r3
}
 80057e6:	bf00      	nop
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	2001354c 	.word	0x2001354c
 80057f4:	2001351c 	.word	0x2001351c

080057f8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005802:	f3ef 8311 	mrs	r3, BASEPRI
 8005806:	f04f 0120 	mov.w	r1, #32
 800580a:	f381 8811 	msr	BASEPRI, r1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	4827      	ldr	r0, [pc, #156]	; (80058b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005812:	f7ff f884 	bl	800491e <_PreparePacket>
 8005816:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	089b      	lsrs	r3, r3, #2
 8005826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	e00b      	b.n	800584a <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	1c59      	adds	r1, r3, #1
 800583a:	6279      	str	r1, [r7, #36]	; 0x24
 800583c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005840:	b2d2      	uxtb	r2, r2
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	09db      	lsrs	r3, r3, #7
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	2b7f      	cmp	r3, #127	; 0x7f
 800584e:	d8f0      	bhi.n	8005832 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	627a      	str	r2, [r7, #36]	; 0x24
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e00b      	b.n	8005882 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	61f9      	str	r1, [r7, #28]
 8005874:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	09db      	lsrs	r3, r3, #7
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b7f      	cmp	r3, #127	; 0x7f
 8005886:	d8f0      	bhi.n	800586a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	61fa      	str	r2, [r7, #28]
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005898:	2207      	movs	r2, #7
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	6938      	ldr	r0, [r7, #16]
 800589e:	f7ff f917 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f383 8811 	msr	BASEPRI, r3
}
 80058a8:	bf00      	nop
 80058aa:	3728      	adds	r7, #40	; 0x28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	2001354c 	.word	0x2001354c
 80058b4:	2001351c 	.word	0x2001351c

080058b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80058c0:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	089b      	lsrs	r3, r3, #2
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	2001351c 	.word	0x2001351c

080058dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	; 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80058e6:	4b3b      	ldr	r3, [pc, #236]	; (80059d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d06d      	beq.n	80059ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058ee:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058f4:	2300      	movs	r3, #0
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f8:	e008      	b.n	800590c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	3301      	adds	r3, #1
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005910:	429a      	cmp	r2, r3
 8005912:	d3f2      	bcc.n	80058fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8005914:	e000      	b.n	8005918 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005916:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d055      	beq.n	80059ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800591e:	f3ef 8311 	mrs	r3, BASEPRI
 8005922:	f04f 0120 	mov.w	r1, #32
 8005926:	f381 8811 	msr	BASEPRI, r1
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	482a      	ldr	r0, [pc, #168]	; (80059d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800592e:	f7fe fff6 	bl	800491e <_PreparePacket>
 8005932:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	e00b      	b.n	800595a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	1c59      	adds	r1, r3, #1
 800594a:	6279      	str	r1, [r7, #36]	; 0x24
 800594c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	09db      	lsrs	r3, r3, #7
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	2b7f      	cmp	r3, #127	; 0x7f
 800595e:	d8f0      	bhi.n	8005942 <SEGGER_SYSVIEW_SendModule+0x66>
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	627a      	str	r2, [r7, #36]	; 0x24
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e00b      	b.n	8005994 <SEGGER_SYSVIEW_SendModule+0xb8>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	61f9      	str	r1, [r7, #28]
 8005986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	09db      	lsrs	r3, r3, #7
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b7f      	cmp	r3, #127	; 0x7f
 8005998:	d8f0      	bhi.n	800597c <SEGGER_SYSVIEW_SendModule+0xa0>
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	61fa      	str	r2, [r7, #28]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	4619      	mov	r1, r3
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7fe ff66 	bl	8004884 <_EncodeStr>
 80059b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80059ba:	2216      	movs	r2, #22
 80059bc:	68f9      	ldr	r1, [r7, #12]
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	f7ff f886 	bl	8004ad0 <_SendPacket>
      RECORD_END();
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80059ca:	bf00      	nop
 80059cc:	3730      	adds	r7, #48	; 0x30
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20013544 	.word	0x20013544
 80059d8:	2001354c 	.word	0x2001354c

080059dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00f      	beq.n	8005a0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f2      	bne.n	80059f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20013544 	.word	0x20013544

08005a18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a22:	f04f 0120 	mov.w	r1, #32
 8005a26:	f381 8811 	msr	BASEPRI, r1
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	4817      	ldr	r0, [pc, #92]	; (8005a8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a2e:	f7fe ff76 	bl	800491e <_PreparePacket>
 8005a32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e00b      	b.n	8005a5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	6179      	str	r1, [r7, #20]
 8005a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	09db      	lsrs	r3, r3, #7
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a60:	d8f0      	bhi.n	8005a44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	617a      	str	r2, [r7, #20]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a72:	221b      	movs	r2, #27
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68b8      	ldr	r0, [r7, #8]
 8005a78:	f7ff f82a 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f383 8811 	msr	BASEPRI, r3
}
 8005a82:	bf00      	nop
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	2001354c 	.word	0x2001354c
 8005a90:	20013548 	.word	0x20013548

08005a94 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b08a      	sub	sp, #40	; 0x28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa0:	f04f 0120 	mov.w	r1, #32
 8005aa4:	f381 8811 	msr	BASEPRI, r1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	4827      	ldr	r0, [pc, #156]	; (8005b48 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005aac:	f7fe ff37 	bl	800491e <_PreparePacket>
 8005ab0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	6938      	ldr	r0, [r7, #16]
 8005ab8:	f7fe fee4 	bl	8004884 <_EncodeStr>
 8005abc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	e00b      	b.n	8005ae0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ad2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	09db      	lsrs	r3, r3, #7
 8005ade:	623b      	str	r3, [r7, #32]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae4:	d8f0      	bhi.n	8005ac8 <SEGGER_SYSVIEW_Warn+0x34>
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	627a      	str	r2, [r7, #36]	; 0x24
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e00b      	b.n	8005b18 <SEGGER_SYSVIEW_Warn+0x84>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	61f9      	str	r1, [r7, #28]
 8005b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	09db      	lsrs	r3, r3, #7
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1c:	d8f0      	bhi.n	8005b00 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	61fa      	str	r2, [r7, #28]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b2e:	221a      	movs	r2, #26
 8005b30:	68f9      	ldr	r1, [r7, #12]
 8005b32:	6938      	ldr	r0, [r7, #16]
 8005b34:	f7fe ffcc 	bl	8004ad0 <_SendPacket>
  RECORD_END();
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
 8005b40:	3728      	adds	r7, #40	; 0x28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	2001354c 	.word	0x2001354c

08005b4c <__errno>:
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <__errno+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000010 	.word	0x20000010

08005b58 <__libc_init_array>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4e0d      	ldr	r6, [pc, #52]	; (8005b90 <__libc_init_array+0x38>)
 8005b5c:	4c0d      	ldr	r4, [pc, #52]	; (8005b94 <__libc_init_array+0x3c>)
 8005b5e:	1ba4      	subs	r4, r4, r6
 8005b60:	10a4      	asrs	r4, r4, #2
 8005b62:	2500      	movs	r5, #0
 8005b64:	42a5      	cmp	r5, r4
 8005b66:	d109      	bne.n	8005b7c <__libc_init_array+0x24>
 8005b68:	4e0b      	ldr	r6, [pc, #44]	; (8005b98 <__libc_init_array+0x40>)
 8005b6a:	4c0c      	ldr	r4, [pc, #48]	; (8005b9c <__libc_init_array+0x44>)
 8005b6c:	f000 f8da 	bl	8005d24 <_init>
 8005b70:	1ba4      	subs	r4, r4, r6
 8005b72:	10a4      	asrs	r4, r4, #2
 8005b74:	2500      	movs	r5, #0
 8005b76:	42a5      	cmp	r5, r4
 8005b78:	d105      	bne.n	8005b86 <__libc_init_array+0x2e>
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b80:	4798      	blx	r3
 8005b82:	3501      	adds	r5, #1
 8005b84:	e7ee      	b.n	8005b64 <__libc_init_array+0xc>
 8005b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b8a:	4798      	blx	r3
 8005b8c:	3501      	adds	r5, #1
 8005b8e:	e7f2      	b.n	8005b76 <__libc_init_array+0x1e>
 8005b90:	08005e84 	.word	0x08005e84
 8005b94:	08005e84 	.word	0x08005e84
 8005b98:	08005e84 	.word	0x08005e84
 8005b9c:	08005e88 	.word	0x08005e88

08005ba0 <memcmp>:
 8005ba0:	b530      	push	{r4, r5, lr}
 8005ba2:	2400      	movs	r4, #0
 8005ba4:	42a2      	cmp	r2, r4
 8005ba6:	d101      	bne.n	8005bac <memcmp+0xc>
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e007      	b.n	8005bbc <memcmp+0x1c>
 8005bac:	5d03      	ldrb	r3, [r0, r4]
 8005bae:	3401      	adds	r4, #1
 8005bb0:	190d      	adds	r5, r1, r4
 8005bb2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005bb6:	42ab      	cmp	r3, r5
 8005bb8:	d0f4      	beq.n	8005ba4 <memcmp+0x4>
 8005bba:	1b58      	subs	r0, r3, r5
 8005bbc:	bd30      	pop	{r4, r5, pc}

08005bbe <memcpy>:
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	1e43      	subs	r3, r0, #1
 8005bc2:	440a      	add	r2, r1
 8005bc4:	4291      	cmp	r1, r2
 8005bc6:	d100      	bne.n	8005bca <memcpy+0xc>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd2:	e7f7      	b.n	8005bc4 <memcpy+0x6>

08005bd4 <memset>:
 8005bd4:	4402      	add	r2, r0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d100      	bne.n	8005bde <memset+0xa>
 8005bdc:	4770      	bx	lr
 8005bde:	f803 1b01 	strb.w	r1, [r3], #1
 8005be2:	e7f9      	b.n	8005bd8 <memset+0x4>

08005be4 <srand>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <srand+0x38>)
 8005be8:	681c      	ldr	r4, [r3, #0]
 8005bea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bec:	4605      	mov	r5, r0
 8005bee:	b97b      	cbnz	r3, 8005c10 <srand+0x2c>
 8005bf0:	2018      	movs	r0, #24
 8005bf2:	f000 f823 	bl	8005c3c <malloc>
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <srand+0x3c>)
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <srand+0x40>)
 8005bfa:	63a0      	str	r0, [r4, #56]	; 0x38
 8005bfc:	e9c0 2300 	strd	r2, r3, [r0]
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <srand+0x44>)
 8005c02:	6083      	str	r3, [r0, #8]
 8005c04:	230b      	movs	r3, #11
 8005c06:	8183      	strh	r3, [r0, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005c10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c12:	2200      	movs	r2, #0
 8005c14:	611d      	str	r5, [r3, #16]
 8005c16:	615a      	str	r2, [r3, #20]
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000010 	.word	0x20000010
 8005c20:	abcd330e 	.word	0xabcd330e
 8005c24:	e66d1234 	.word	0xe66d1234
 8005c28:	0005deec 	.word	0x0005deec

08005c2c <strcpy>:
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c32:	f803 2b01 	strb.w	r2, [r3], #1
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	d1f9      	bne.n	8005c2e <strcpy+0x2>
 8005c3a:	4770      	bx	lr

08005c3c <malloc>:
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <malloc+0xc>)
 8005c3e:	4601      	mov	r1, r0
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f000 b803 	b.w	8005c4c <_malloc_r>
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010

08005c4c <_malloc_r>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	1ccd      	adds	r5, r1, #3
 8005c50:	f025 0503 	bic.w	r5, r5, #3
 8005c54:	3508      	adds	r5, #8
 8005c56:	2d0c      	cmp	r5, #12
 8005c58:	bf38      	it	cc
 8005c5a:	250c      	movcc	r5, #12
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	4606      	mov	r6, r0
 8005c60:	db01      	blt.n	8005c66 <_malloc_r+0x1a>
 8005c62:	42a9      	cmp	r1, r5
 8005c64:	d903      	bls.n	8005c6e <_malloc_r+0x22>
 8005c66:	230c      	movs	r3, #12
 8005c68:	6033      	str	r3, [r6, #0]
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	f000 f857 	bl	8005d20 <__malloc_lock>
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <_malloc_r+0xac>)
 8005c74:	6814      	ldr	r4, [r2, #0]
 8005c76:	4621      	mov	r1, r4
 8005c78:	b991      	cbnz	r1, 8005ca0 <_malloc_r+0x54>
 8005c7a:	4c20      	ldr	r4, [pc, #128]	; (8005cfc <_malloc_r+0xb0>)
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	b91b      	cbnz	r3, 8005c88 <_malloc_r+0x3c>
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f83d 	bl	8005d00 <_sbrk_r>
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f000 f838 	bl	8005d00 <_sbrk_r>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d124      	bne.n	8005cde <_malloc_r+0x92>
 8005c94:	230c      	movs	r3, #12
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f842 	bl	8005d22 <__malloc_unlock>
 8005c9e:	e7e4      	b.n	8005c6a <_malloc_r+0x1e>
 8005ca0:	680b      	ldr	r3, [r1, #0]
 8005ca2:	1b5b      	subs	r3, r3, r5
 8005ca4:	d418      	bmi.n	8005cd8 <_malloc_r+0x8c>
 8005ca6:	2b0b      	cmp	r3, #11
 8005ca8:	d90f      	bls.n	8005cca <_malloc_r+0x7e>
 8005caa:	600b      	str	r3, [r1, #0]
 8005cac:	50cd      	str	r5, [r1, r3]
 8005cae:	18cc      	adds	r4, r1, r3
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 f836 	bl	8005d22 <__malloc_unlock>
 8005cb6:	f104 000b 	add.w	r0, r4, #11
 8005cba:	1d23      	adds	r3, r4, #4
 8005cbc:	f020 0007 	bic.w	r0, r0, #7
 8005cc0:	1ac3      	subs	r3, r0, r3
 8005cc2:	d0d3      	beq.n	8005c6c <_malloc_r+0x20>
 8005cc4:	425a      	negs	r2, r3
 8005cc6:	50e2      	str	r2, [r4, r3]
 8005cc8:	e7d0      	b.n	8005c6c <_malloc_r+0x20>
 8005cca:	428c      	cmp	r4, r1
 8005ccc:	684b      	ldr	r3, [r1, #4]
 8005cce:	bf16      	itet	ne
 8005cd0:	6063      	strne	r3, [r4, #4]
 8005cd2:	6013      	streq	r3, [r2, #0]
 8005cd4:	460c      	movne	r4, r1
 8005cd6:	e7eb      	b.n	8005cb0 <_malloc_r+0x64>
 8005cd8:	460c      	mov	r4, r1
 8005cda:	6849      	ldr	r1, [r1, #4]
 8005cdc:	e7cc      	b.n	8005c78 <_malloc_r+0x2c>
 8005cde:	1cc4      	adds	r4, r0, #3
 8005ce0:	f024 0403 	bic.w	r4, r4, #3
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d005      	beq.n	8005cf4 <_malloc_r+0xa8>
 8005ce8:	1a21      	subs	r1, r4, r0
 8005cea:	4630      	mov	r0, r6
 8005cec:	f000 f808 	bl	8005d00 <_sbrk_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d0cf      	beq.n	8005c94 <_malloc_r+0x48>
 8005cf4:	6025      	str	r5, [r4, #0]
 8005cf6:	e7db      	b.n	8005cb0 <_malloc_r+0x64>
 8005cf8:	20013630 	.word	0x20013630
 8005cfc:	20013634 	.word	0x20013634

08005d00 <_sbrk_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4c06      	ldr	r4, [pc, #24]	; (8005d1c <_sbrk_r+0x1c>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4605      	mov	r5, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	f7fa fdd8 	bl	80008c0 <_sbrk>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_sbrk_r+0x1a>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_sbrk_r+0x1a>
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20013728 	.word	0x20013728

08005d20 <__malloc_lock>:
 8005d20:	4770      	bx	lr

08005d22 <__malloc_unlock>:
 8005d22:	4770      	bx	lr

08005d24 <_init>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr

08005d30 <_fini>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr
