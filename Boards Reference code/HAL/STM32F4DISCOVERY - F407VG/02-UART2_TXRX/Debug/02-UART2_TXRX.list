
02-UART2_TXRX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080023ac  080023ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e4  080023e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ec  080023ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080023f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000010  08002404  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002404  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d6d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001336  00000000  00000000  00026dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000600  00000000  00000000  000280e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000558  00000000  00000000  000286e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f6e3  00000000  00000000  00028c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068c3  00000000  00000000  00048323  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf65a  00000000  00000000  0004ebe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001738  00000000  00000000  0010e2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000010 	.word	0x20000010
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08002394 	.word	0x08002394

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000014 	.word	0x20000014
 80001e4:	08002394 	.word	0x08002394

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295
 8000208:	f04f 30ff 	movne.w	r0, #4294967295
 800020c:	f000 b972 	b.w	80004f4 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9e08      	ldr	r6, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	4688      	mov	r8, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14b      	bne.n	80002ce <__udivmoddi4+0xa6>
 8000236:	428a      	cmp	r2, r1
 8000238:	4615      	mov	r5, r2
 800023a:	d967      	bls.n	800030c <__udivmoddi4+0xe4>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b14a      	cbz	r2, 8000256 <__udivmoddi4+0x2e>
 8000242:	f1c2 0720 	rsb	r7, r2, #32
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	fa20 f707 	lsr.w	r7, r0, r7
 800024e:	4095      	lsls	r5, r2
 8000250:	ea47 0803 	orr.w	r8, r7, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000260:	fa1f fc85 	uxth.w	ip, r5
 8000264:	fb0e 8817 	mls	r8, lr, r7, r8
 8000268:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800026c:	fb07 f10c 	mul.w	r1, r7, ip
 8000270:	4299      	cmp	r1, r3
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x60>
 8000274:	18eb      	adds	r3, r5, r3
 8000276:	f107 30ff 	add.w	r0, r7, #4294967295
 800027a:	f080 811b 	bcs.w	80004b4 <__udivmoddi4+0x28c>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 8118 	bls.w	80004b4 <__udivmoddi4+0x28c>
 8000284:	3f02      	subs	r7, #2
 8000286:	442b      	add	r3, r5
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000290:	fb0e 3310 	mls	r3, lr, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 fc0c 	mul.w	ip, r0, ip
 800029c:	45a4      	cmp	ip, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x8c>
 80002a0:	192c      	adds	r4, r5, r4
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 8107 	bcs.w	80004b8 <__udivmoddi4+0x290>
 80002aa:	45a4      	cmp	ip, r4
 80002ac:	f240 8104 	bls.w	80004b8 <__udivmoddi4+0x290>
 80002b0:	3802      	subs	r0, #2
 80002b2:	442c      	add	r4, r5
 80002b4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b8:	eba4 040c 	sub.w	r4, r4, ip
 80002bc:	2700      	movs	r7, #0
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa0>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c6 4300 	strd	r4, r3, [r6]
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xbe>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80eb 	beq.w	80004ae <__udivmoddi4+0x286>
 80002d8:	2700      	movs	r7, #0
 80002da:	e9c6 0100 	strd	r0, r1, [r6]
 80002de:	4638      	mov	r0, r7
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f783 	clz	r7, r3
 80002ea:	2f00      	cmp	r7, #0
 80002ec:	d147      	bne.n	800037e <__udivmoddi4+0x156>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd0>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2c4>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa0>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa0>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xe8>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 808f 	bne.w	8000438 <__udivmoddi4+0x210>
 800031a:	1b49      	subs	r1, r1, r5
 800031c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000320:	fa1f f885 	uxth.w	r8, r5
 8000324:	2701      	movs	r7, #1
 8000326:	fbb1 fcfe 	udiv	ip, r1, lr
 800032a:	0c23      	lsrs	r3, r4, #16
 800032c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb08 f10c 	mul.w	r1, r8, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x124>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x122>
 8000344:	4299      	cmp	r1, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2bc>
 800034a:	4684      	mov	ip, r0
 800034c:	1a59      	subs	r1, r3, r1
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1410 	mls	r4, lr, r0, r1
 8000358:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x14c>
 8000364:	192c      	adds	r4, r5, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x14a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80b6 	bhi.w	80004de <__udivmoddi4+0x2b6>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e79f      	b.n	80002be <__udivmoddi4+0x96>
 800037e:	f1c7 0c20 	rsb	ip, r7, #32
 8000382:	40bb      	lsls	r3, r7
 8000384:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000388:	ea4e 0e03 	orr.w	lr, lr, r3
 800038c:	fa01 f407 	lsl.w	r4, r1, r7
 8000390:	fa20 f50c 	lsr.w	r5, r0, ip
 8000394:	fa21 f30c 	lsr.w	r3, r1, ip
 8000398:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800039c:	4325      	orrs	r5, r4
 800039e:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a2:	0c2c      	lsrs	r4, r5, #16
 80003a4:	fb08 3319 	mls	r3, r8, r9, r3
 80003a8:	fa1f fa8e 	uxth.w	sl, lr
 80003ac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b0:	fb09 f40a 	mul.w	r4, r9, sl
 80003b4:	429c      	cmp	r4, r3
 80003b6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ba:	fa00 f107 	lsl.w	r1, r0, r7
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b0>
 80003c0:	eb1e 0303 	adds.w	r3, lr, r3
 80003c4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c8:	f080 8087 	bcs.w	80004da <__udivmoddi4+0x2b2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	f240 8084 	bls.w	80004da <__udivmoddi4+0x2b2>
 80003d2:	f1a9 0902 	sub.w	r9, r9, #2
 80003d6:	4473      	add	r3, lr
 80003d8:	1b1b      	subs	r3, r3, r4
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e0:	fb08 3310 	mls	r3, r8, r0, r3
 80003e4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1da>
 80003f0:	eb1e 0404 	adds.w	r4, lr, r4
 80003f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f8:	d26b      	bcs.n	80004d2 <__udivmoddi4+0x2aa>
 80003fa:	45a2      	cmp	sl, r4
 80003fc:	d969      	bls.n	80004d2 <__udivmoddi4+0x2aa>
 80003fe:	3802      	subs	r0, #2
 8000400:	4474      	add	r4, lr
 8000402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000406:	fba0 8902 	umull	r8, r9, r0, r2
 800040a:	eba4 040a 	sub.w	r4, r4, sl
 800040e:	454c      	cmp	r4, r9
 8000410:	46c2      	mov	sl, r8
 8000412:	464b      	mov	r3, r9
 8000414:	d354      	bcc.n	80004c0 <__udivmoddi4+0x298>
 8000416:	d051      	beq.n	80004bc <__udivmoddi4+0x294>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d069      	beq.n	80004f0 <__udivmoddi4+0x2c8>
 800041c:	ebb1 050a 	subs.w	r5, r1, sl
 8000420:	eb64 0403 	sbc.w	r4, r4, r3
 8000424:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000428:	40fd      	lsrs	r5, r7
 800042a:	40fc      	lsrs	r4, r7
 800042c:	ea4c 0505 	orr.w	r5, ip, r5
 8000430:	e9c6 5400 	strd	r5, r4, [r6]
 8000434:	2700      	movs	r7, #0
 8000436:	e747      	b.n	80002c8 <__udivmoddi4+0xa0>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f703 	lsr.w	r7, r0, r3
 8000440:	4095      	lsls	r5, r2
 8000442:	fa01 f002 	lsl.w	r0, r1, r2
 8000446:	fa21 f303 	lsr.w	r3, r1, r3
 800044a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044e:	4338      	orrs	r0, r7
 8000450:	0c01      	lsrs	r1, r0, #16
 8000452:	fbb3 f7fe 	udiv	r7, r3, lr
 8000456:	fa1f f885 	uxth.w	r8, r5
 800045a:	fb0e 3317 	mls	r3, lr, r7, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb07 f308 	mul.w	r3, r7, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x256>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f107 3cff 	add.w	ip, r7, #4294967295
 8000474:	d22f      	bcs.n	80004d6 <__udivmoddi4+0x2ae>
 8000476:	428b      	cmp	r3, r1
 8000478:	d92d      	bls.n	80004d6 <__udivmoddi4+0x2ae>
 800047a:	3f02      	subs	r7, #2
 800047c:	4429      	add	r1, r5
 800047e:	1acb      	subs	r3, r1, r3
 8000480:	b281      	uxth	r1, r0
 8000482:	fbb3 f0fe 	udiv	r0, r3, lr
 8000486:	fb0e 3310 	mls	r3, lr, r0, r3
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb00 f308 	mul.w	r3, r0, r8
 8000492:	428b      	cmp	r3, r1
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x27e>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f100 3cff 	add.w	ip, r0, #4294967295
 800049c:	d217      	bcs.n	80004ce <__udivmoddi4+0x2a6>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d915      	bls.n	80004ce <__udivmoddi4+0x2a6>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ac:	e73b      	b.n	8000326 <__udivmoddi4+0xfe>
 80004ae:	4637      	mov	r7, r6
 80004b0:	4630      	mov	r0, r6
 80004b2:	e709      	b.n	80002c8 <__udivmoddi4+0xa0>
 80004b4:	4607      	mov	r7, r0
 80004b6:	e6e7      	b.n	8000288 <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fb      	b.n	80002b4 <__udivmoddi4+0x8c>
 80004bc:	4541      	cmp	r1, r8
 80004be:	d2ab      	bcs.n	8000418 <__udivmoddi4+0x1f0>
 80004c0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c4:	eb69 020e 	sbc.w	r2, r9, lr
 80004c8:	3801      	subs	r0, #1
 80004ca:	4613      	mov	r3, r2
 80004cc:	e7a4      	b.n	8000418 <__udivmoddi4+0x1f0>
 80004ce:	4660      	mov	r0, ip
 80004d0:	e7e9      	b.n	80004a6 <__udivmoddi4+0x27e>
 80004d2:	4618      	mov	r0, r3
 80004d4:	e795      	b.n	8000402 <__udivmoddi4+0x1da>
 80004d6:	4667      	mov	r7, ip
 80004d8:	e7d1      	b.n	800047e <__udivmoddi4+0x256>
 80004da:	4681      	mov	r9, r0
 80004dc:	e77c      	b.n	80003d8 <__udivmoddi4+0x1b0>
 80004de:	3802      	subs	r0, #2
 80004e0:	442c      	add	r4, r5
 80004e2:	e747      	b.n	8000374 <__udivmoddi4+0x14c>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	442b      	add	r3, r5
 80004ea:	e72f      	b.n	800034c <__udivmoddi4+0x124>
 80004ec:	4638      	mov	r0, r7
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xda>
 80004f0:	4637      	mov	r7, r6
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0xa0>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	; 0x70
 80004fc:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004fe:	f000 f95f 	bl	80007c0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000502:	f000 f84b 	bl	800059c <SystemClock_Config>

	/* Initialize all configured peripherals */
	USART2_UART_Init();
 8000506:	f000 f8a9 	bl	800065c <USART2_UART_Init>

	/* User Code */
	uint16_t len_of_data = strlen(user_data);
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <main+0x9c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fe6a 	bl	80001e8 <strlen>
 8000514:	4603      	mov	r3, r0
 8000516:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	HAL_UART_Transmit(&huart2,(uint8_t*)user_data,len_of_data,HAL_MAX_DELAY);
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <main+0x9c>)
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8000522:	f04f 33ff 	mov.w	r3, #4294967295
 8000526:	481c      	ldr	r0, [pc, #112]	; (8000598 <main+0xa0>)
 8000528:	f001 f9d9 	bl	80018de <HAL_UART_Transmit>

	uint8_t rcvd_data;
	uint8_t data_buffer[100];
	uint32_t count=0;
 800052c:	2300      	movs	r3, #0
 800052e:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Start Code */
	while (1)
	{
		HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY); //Tiene un while, modo bloqueante. Si hay recepcion avanza.
 8000530:	f107 0169 	add.w	r1, r7, #105	; 0x69
 8000534:	f04f 33ff 	mov.w	r3, #4294967295
 8000538:	2201      	movs	r2, #1
 800053a:	4817      	ldr	r0, [pc, #92]	; (8000598 <main+0xa0>)
 800053c:	f001 fa68 	bl	8001a10 <HAL_UART_Receive>
		if(rcvd_data == '\r')
 8000540:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000544:	2b0d      	cmp	r3, #13
 8000546:	d119      	bne.n	800057c <main+0x84>
		{
			data_buffer[count++]= '\r';
 8000548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800054e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000552:	4413      	add	r3, r2
 8000554:	220d      	movs	r2, #13
 8000556:	f803 2c6c 	strb.w	r2, [r3, #-108]
			HAL_UART_Transmit(&huart2,data_buffer,count,HAL_MAX_DELAY);
 800055a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800055c:	b29a      	uxth	r2, r3
 800055e:	1d39      	adds	r1, r7, #4
 8000560:	f04f 33ff 	mov.w	r3, #4294967295
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <main+0xa0>)
 8000566:	f001 f9ba 	bl	80018de <HAL_UART_Transmit>
			count=0;
 800056a:	2300      	movs	r3, #0
 800056c:	66fb      	str	r3, [r7, #108]	; 0x6c
			memset(data_buffer, 0, sizeof(data_buffer));
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2264      	movs	r2, #100	; 0x64
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f001 ff05 	bl	8002384 <memset>
 800057a:	e7d9      	b.n	8000530 <main+0x38>
		} else
		{
			data_buffer[count++]= rcvd_data;
 800057c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000582:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8000586:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800058a:	440b      	add	r3, r1
 800058c:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2,&rcvd_data,1,HAL_MAX_DELAY); //Tiene un while, modo bloqueante. Si hay recepcion avanza.
 8000590:	e7ce      	b.n	8000530 <main+0x38>
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000
 8000598:	2000002c 	.word	0x2000002c

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b096      	sub	sp, #88	; 0x58
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	2230      	movs	r2, #48	; 0x30
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 feea 	bl	8002384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e0:	2308      	movs	r3, #8
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fbe0 	bl	8000dbc <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000602:	f000 f855 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000616:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2105      	movs	r1, #5
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fe39 	bl	800129c <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000630:	f000 f83e 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000634:	2301      	movs	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000638:	23c0      	movs	r3, #192	; 0xc0
 800063a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f81c 	bl	8001680 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800064e:	f000 f82f 	bl	80006b0 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void USART2_UART_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <USART2_UART_Init+0x50>)
 8000664:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000668:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800066c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000682:	220c      	movs	r2, #12
 8000684:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <USART2_UART_Init+0x4c>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <USART2_UART_Init+0x4c>)
 8000694:	f001 f8d6 	bl	8001844 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069e:	f000 f807 	bl	80006b0 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000002c 	.word	0x2000002c
 80006ac:	40004400 	.word	0x40004400

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */


}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* System interrupt init*/


}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <HAL_UART_MspInit+0x84>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d12b      	bne.n	8000746 <HAL_UART_MspInit+0x7a>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_MspInit+0x88>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <HAL_UART_MspInit+0x88>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_UART_MspInit+0x88>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_UART_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_UART_MspInit+0x88>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_UART_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000726:	230c      	movs	r3, #12
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000736:	2307      	movs	r3, #7
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <HAL_UART_MspInit+0x8c>)
 8000742:	f000 f9a1 	bl	8000a88 <HAL_GPIO_Init>

  }

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40004400 	.word	0x40004400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000

0800075c <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

	  HAL_IncTick();
 8000786:	f000 f86d 	bl	8000864 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 800078a:	f000 f970 	bl	8000a6e <HAL_SYSTICK_IRQHandler>

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <SystemInit+0x28>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <SystemInit+0x28>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SystemInit+0x28>)
 80007aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ae:	609a      	str	r2, [r3, #8]
#endif
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f90d 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff63 	bl	80006be <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f917 	bl	8000a56 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f8ed 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000004 	.word	0x20000004
 800085c:	2000000c 	.word	0x2000000c
 8000860:	20000008 	.word	0x20000008

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	2000000c 	.word	0x2000000c
 8000888:	2000006c 	.word	0x2000006c

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000006c 	.word	0x2000006c

080008a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d6:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SetPriorityGrouping+0x44>)
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	60d3      	str	r3, [r2, #12]
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_GetPriorityGrouping+0x18>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	f003 0307 	and.w	r3, r3, #7
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff47 	bl	80008a4 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff5c 	bl	80008ec <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ffb0 	bl	80009c4 <SysTick_Config>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a72:	f000 f802 	bl	8000a7a <HAL_SYSTICK_Callback>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	e16b      	b.n	8000d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f040 815a 	bne.w	8000d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d007      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad6:	2b11      	cmp	r3, #17
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b12      	cmp	r3, #18
 8000ae0:	d130      	bne.n	8000b44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	2203      	movs	r2, #3
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4013      	ands	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	f003 0201 	and.w	r2, r3, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0xfc>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b12      	cmp	r3, #18
 8000b82:	d123      	bne.n	8000bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	08da      	lsrs	r2, r3, #3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3208      	adds	r2, #8
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	f003 0307 	and.w	r3, r3, #7
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	69b9      	ldr	r1, [r7, #24]
 8000bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0203 	and.w	r2, r3, #3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 80b4 	beq.w	8000d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b5f      	ldr	r3, [pc, #380]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a5e      	ldr	r2, [pc, #376]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_GPIO_Init+0x308>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2a:	4a5a      	ldr	r2, [pc, #360]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	3302      	adds	r3, #2
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a51      	ldr	r2, [pc, #324]	; (8000d98 <HAL_GPIO_Init+0x310>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d02b      	beq.n	8000cae <HAL_GPIO_Init+0x226>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a50      	ldr	r2, [pc, #320]	; (8000d9c <HAL_GPIO_Init+0x314>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d025      	beq.n	8000caa <HAL_GPIO_Init+0x222>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a4f      	ldr	r2, [pc, #316]	; (8000da0 <HAL_GPIO_Init+0x318>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d01f      	beq.n	8000ca6 <HAL_GPIO_Init+0x21e>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a4e      	ldr	r2, [pc, #312]	; (8000da4 <HAL_GPIO_Init+0x31c>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d019      	beq.n	8000ca2 <HAL_GPIO_Init+0x21a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <HAL_GPIO_Init+0x320>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x216>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_GPIO_Init+0x324>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x212>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <HAL_GPIO_Init+0x328>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x20e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <HAL_GPIO_Init+0x32c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x20a>
 8000c8e:	2307      	movs	r3, #7
 8000c90:	e00e      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c92:	2308      	movs	r3, #8
 8000c94:	e00c      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c96:	2306      	movs	r3, #6
 8000c98:	e00a      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	e008      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e004      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x228>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	f002 0203 	and.w	r2, r2, #3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc0:	4934      	ldr	r1, [pc, #208]	; (8000d94 <HAL_GPIO_Init+0x30c>)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cf2:	4a31      	ldr	r2, [pc, #196]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d1c:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_GPIO_Init+0x330>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	f67f ae90 	bls.w	8000aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	3724      	adds	r7, #36	; 0x24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020800 	.word	0x40020800
 8000da4:	40020c00 	.word	0x40020c00
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40021400 	.word	0x40021400
 8000db0:	40021800 	.word	0x40021800
 8000db4:	40021c00 	.word	0x40021c00
 8000db8:	40013c00 	.word	0x40013c00

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e25b      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d075      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dda:	4ba3      	ldr	r3, [pc, #652]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d00c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000de6:	4ba0      	ldr	r3, [pc, #640]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d112      	bne.n	8000e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000df2:	4b9d      	ldr	r3, [pc, #628]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dfe:	d10b      	bne.n	8000e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	4b99      	ldr	r3, [pc, #612]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d05b      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x108>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d157      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e236      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d106      	bne.n	8000e30 <HAL_RCC_OscConfig+0x74>
 8000e22:	4b91      	ldr	r3, [pc, #580]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a90      	ldr	r2, [pc, #576]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e01d      	b.n	8000e6c <HAL_RCC_OscConfig+0xb0>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x98>
 8000e3a:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a8a      	ldr	r2, [pc, #552]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b88      	ldr	r3, [pc, #544]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a87      	ldr	r2, [pc, #540]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0xb0>
 8000e54:	4b84      	ldr	r3, [pc, #528]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a83      	ldr	r2, [pc, #524]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b81      	ldr	r3, [pc, #516]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a80      	ldr	r2, [pc, #512]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd0a 	bl	800088c <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fd06 	bl	800088c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1fb      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	4b76      	ldr	r3, [pc, #472]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0xc0>
 8000e9a:	e014      	b.n	8000ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fcf6 	bl	800088c <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fcf2 	bl	800088c <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e1e7      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0xe8>
 8000ec2:	e000      	b.n	8000ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d063      	beq.n	8000f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ed2:	4b65      	ldr	r3, [pc, #404]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ede:	4b62      	ldr	r3, [pc, #392]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d11c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eea:	4b5f      	ldr	r3, [pc, #380]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d116      	bne.n	8000f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	4b5c      	ldr	r3, [pc, #368]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x152>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e1bb      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b56      	ldr	r3, [pc, #344]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4952      	ldr	r1, [pc, #328]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f22:	e03a      	b.n	8000f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d020      	beq.n	8000f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2c:	4b4f      	ldr	r3, [pc, #316]	; (800106c <HAL_RCC_OscConfig+0x2b0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f32:	f7ff fcab 	bl	800088c <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fca7 	bl	800088c <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e19c      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4940      	ldr	r1, [pc, #256]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
 8000f6c:	e015      	b.n	8000f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <HAL_RCC_OscConfig+0x2b0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc8a 	bl	800088c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc86 	bl	800088c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e17b      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d030      	beq.n	8001008 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d016      	beq.n	8000fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <HAL_RCC_OscConfig+0x2b4>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc6a 	bl	800088c <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc66 	bl	800088c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e15b      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0x200>
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_RCC_OscConfig+0x2b4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fc53 	bl	800088c <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fea:	f7ff fc4f 	bl	800088c <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e144      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8000ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f0      	bne.n	8000fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	f000 80a0 	beq.w	8001156 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10f      	bne.n	8001046 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_RCC_OscConfig+0x2b8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104e:	2b00      	cmp	r3, #0
 8001050:	d121      	bne.n	8001096 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_RCC_OscConfig+0x2b8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_RCC_OscConfig+0x2b8>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105e:	f7ff fc15 	bl	800088c <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	e011      	b.n	800108a <HAL_RCC_OscConfig+0x2ce>
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	42470000 	.word	0x42470000
 8001070:	42470e80 	.word	0x42470e80
 8001074:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001078:	f7ff fc08 	bl	800088c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e0fd      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108a:	4b81      	ldr	r3, [pc, #516]	; (8001290 <HAL_RCC_OscConfig+0x4d4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x2f0>
 800109e:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010a2:	4a7c      	ldr	r2, [pc, #496]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6713      	str	r3, [r2, #112]	; 0x70
 80010aa:	e01c      	b.n	80010e6 <HAL_RCC_OscConfig+0x32a>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d10c      	bne.n	80010ce <HAL_RCC_OscConfig+0x312>
 80010b4:	4b77      	ldr	r3, [pc, #476]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b8:	4a76      	ldr	r2, [pc, #472]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6713      	str	r3, [r2, #112]	; 0x70
 80010c0:	4b74      	ldr	r3, [pc, #464]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c4:	4a73      	ldr	r2, [pc, #460]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6713      	str	r3, [r2, #112]	; 0x70
 80010cc:	e00b      	b.n	80010e6 <HAL_RCC_OscConfig+0x32a>
 80010ce:	4b71      	ldr	r3, [pc, #452]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d2:	4a70      	ldr	r2, [pc, #448]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010d4:	f023 0301 	bic.w	r3, r3, #1
 80010d8:	6713      	str	r3, [r2, #112]	; 0x70
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010de:	4a6d      	ldr	r2, [pc, #436]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80010e0:	f023 0304 	bic.w	r3, r3, #4
 80010e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d015      	beq.n	800111a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ee:	f7ff fbcd 	bl	800088c <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f4:	e00a      	b.n	800110c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010f6:	f7ff fbc9 	bl	800088c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	f241 3288 	movw	r2, #5000	; 0x1388
 8001104:	4293      	cmp	r3, r2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e0bc      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110c:	4b61      	ldr	r3, [pc, #388]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 800110e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0ee      	beq.n	80010f6 <HAL_RCC_OscConfig+0x33a>
 8001118:	e014      	b.n	8001144 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fbb7 	bl	800088c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001120:	e00a      	b.n	8001138 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001122:	f7ff fbb3 	bl	800088c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001130:	4293      	cmp	r3, r2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e0a6      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001138:	4b56      	ldr	r3, [pc, #344]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 800113a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1ee      	bne.n	8001122 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d105      	bne.n	8001156 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a51      	ldr	r2, [pc, #324]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 8001150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8092 	beq.w	8001284 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d05c      	beq.n	8001226 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d141      	bne.n	80011f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001174:	4b48      	ldr	r3, [pc, #288]	; (8001298 <HAL_RCC_OscConfig+0x4dc>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fb87 	bl	800088c <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff fb83 	bl	800088c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e078      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f0      	bne.n	8001182 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69da      	ldr	r2, [r3, #28]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ae:	019b      	lsls	r3, r3, #6
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	085b      	lsrs	r3, r3, #1
 80011b8:	3b01      	subs	r3, #1
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	061b      	lsls	r3, r3, #24
 80011c4:	4933      	ldr	r1, [pc, #204]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_RCC_OscConfig+0x4dc>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb5c 	bl	800088c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d8:	f7ff fb58 	bl	800088c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e04d      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x41c>
 80011f6:	e045      	b.n	8001284 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_RCC_OscConfig+0x4dc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb45 	bl	800088c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fb41 	bl	800088c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e036      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x44a>
 8001224:	e02e      	b.n	8001284 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e029      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_RCC_OscConfig+0x4d8>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	429a      	cmp	r2, r3
 8001244:	d11c      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001250:	429a      	cmp	r2, r3
 8001252:	d115      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800125a:	4013      	ands	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001260:	4293      	cmp	r3, r2
 8001262:	d10d      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800126e:	429a      	cmp	r2, r3
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	40023800 	.word	0x40023800
 8001298:	42470060 	.word	0x42470060

0800129c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e0cc      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d90c      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012be:	4b65      	ldr	r3, [pc, #404]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0b8      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f0:	4b59      	ldr	r3, [pc, #356]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4a58      	ldr	r2, [pc, #352]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001308:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	494d      	ldr	r1, [pc, #308]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d044      	beq.n	80013bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d119      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e07f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d003      	beq.n	800135a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001356:	2b03      	cmp	r3, #3
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e067      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f023 0203 	bic.w	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4934      	ldr	r1, [pc, #208]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800138c:	f7ff fa7e 	bl	800088c <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	e00a      	b.n	80013aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001394:	f7ff fa7a 	bl	800088c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04f      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 020c 	and.w	r2, r3, #12
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d1eb      	bne.n	8001394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 030f 	and.w	r3, r3, #15
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d20c      	bcs.n	80013e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e032      	b.n	800144a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	490e      	ldr	r1, [pc, #56]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001422:	f000 f821 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 8001426:	4601      	mov	r1, r0
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	fa21 f303 	lsr.w	r3, r1, r3
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1c8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f9de 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00
 8001458:	40023800 	.word	0x40023800
 800145c:	080023cc 	.word	0x080023cc
 8001460:	20000004 	.word	0x20000004
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d007      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0x32>
 800148a:	2b08      	cmp	r3, #8
 800148c:	d008      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0x38>
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80b4 	bne.w	80015fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001494:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001496:	60bb      	str	r3, [r7, #8]
       break;
 8001498:	e0b3      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800149a:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800149c:	60bb      	str	r3, [r7, #8]
      break;
 800149e:	e0b0      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014a0:	4b5a      	ldr	r3, [pc, #360]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014aa:	4b58      	ldr	r3, [pc, #352]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d04a      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b6:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	ea03 0501 	and.w	r5, r3, r1
 80014cc:	ea04 0602 	and.w	r6, r4, r2
 80014d0:	4629      	mov	r1, r5
 80014d2:	4632      	mov	r2, r6
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	f04f 0400 	mov.w	r4, #0
 80014dc:	0154      	lsls	r4, r2, #5
 80014de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014e2:	014b      	lsls	r3, r1, #5
 80014e4:	4619      	mov	r1, r3
 80014e6:	4622      	mov	r2, r4
 80014e8:	1b49      	subs	r1, r1, r5
 80014ea:	eb62 0206 	sbc.w	r2, r2, r6
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f04f 0400 	mov.w	r4, #0
 80014f6:	0194      	lsls	r4, r2, #6
 80014f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014fc:	018b      	lsls	r3, r1, #6
 80014fe:	1a5b      	subs	r3, r3, r1
 8001500:	eb64 0402 	sbc.w	r4, r4, r2
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	00e2      	lsls	r2, r4, #3
 800150e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001512:	00d9      	lsls	r1, r3, #3
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	195b      	adds	r3, r3, r5
 800151a:	eb44 0406 	adc.w	r4, r4, r6
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	0262      	lsls	r2, r4, #9
 8001528:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800152c:	0259      	lsls	r1, r3, #9
 800152e:	460b      	mov	r3, r1
 8001530:	4614      	mov	r4, r2
 8001532:	4618      	mov	r0, r3
 8001534:	4621      	mov	r1, r4
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f04f 0400 	mov.w	r4, #0
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	f7fe fe5a 	bl	80001f8 <__aeabi_uldivmod>
 8001544:	4603      	mov	r3, r0
 8001546:	460c      	mov	r4, r1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e049      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	f240 11ff 	movw	r1, #511	; 0x1ff
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	ea03 0501 	and.w	r5, r3, r1
 8001562:	ea04 0602 	and.w	r6, r4, r2
 8001566:	4629      	mov	r1, r5
 8001568:	4632      	mov	r2, r6
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	0154      	lsls	r4, r2, #5
 8001574:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001578:	014b      	lsls	r3, r1, #5
 800157a:	4619      	mov	r1, r3
 800157c:	4622      	mov	r2, r4
 800157e:	1b49      	subs	r1, r1, r5
 8001580:	eb62 0206 	sbc.w	r2, r2, r6
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	f04f 0400 	mov.w	r4, #0
 800158c:	0194      	lsls	r4, r2, #6
 800158e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001592:	018b      	lsls	r3, r1, #6
 8001594:	1a5b      	subs	r3, r3, r1
 8001596:	eb64 0402 	sbc.w	r4, r4, r2
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	00e2      	lsls	r2, r4, #3
 80015a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015a8:	00d9      	lsls	r1, r3, #3
 80015aa:	460b      	mov	r3, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	195b      	adds	r3, r3, r5
 80015b0:	eb44 0406 	adc.w	r4, r4, r6
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	02a2      	lsls	r2, r4, #10
 80015be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015c2:	0299      	lsls	r1, r3, #10
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f04f 0400 	mov.w	r4, #0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4623      	mov	r3, r4
 80015d6:	f7fe fe0f 	bl	80001f8 <__aeabi_uldivmod>
 80015da:	4603      	mov	r3, r0
 80015dc:	460c      	mov	r4, r1
 80015de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	3301      	adds	r3, #1
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	60bb      	str	r3, [r7, #8]
      break;
 80015fa:	e002      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015fe:	60bb      	str	r3, [r7, #8]
      break;
 8001600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001602:	68bb      	ldr	r3, [r7, #8]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	00f42400 	.word	0x00f42400
 8001614:	007a1200 	.word	0x007a1200

08001618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_RCC_GetHCLKFreq+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff0 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001638:	4601      	mov	r1, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4a03      	ldr	r2, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	080023dc 	.word	0x080023dc

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffdc 	bl	8001618 <HAL_RCC_GetHCLKFreq>
 8001660:	4601      	mov	r1, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	0b5b      	lsrs	r3, r3, #13
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	080023dc 	.word	0x080023dc

08001680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d035      	beq.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80016ae:	f7ff f8ed 	bl	800088c <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80016b6:	f7ff f8e9 	bl	800088c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0b0      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80016c8:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f0      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	019a      	lsls	r2, r3, #6
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	071b      	lsls	r3, r3, #28
 80016e0:	4955      	ldr	r1, [pc, #340]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80016e8:	4b52      	ldr	r3, [pc, #328]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80016ee:	f7ff f8cd 	bl	800088c <HAL_GetTick>
 80016f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80016f6:	f7ff f8c9 	bl	800088c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e090      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8083 	beq.w	8001828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a43      	ldr	r2, [pc, #268]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800172c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800173e:	4b3f      	ldr	r3, [pc, #252]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800174a:	f7ff f89f 	bl	800088c <HAL_GetTick>
 800174e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff f89b 	bl	800088c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e062      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001770:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d02f      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	429a      	cmp	r2, r3
 800178c:	d028      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017a4:	4a24      	ldr	r2, [pc, #144]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017aa:	4b23      	ldr	r3, [pc, #140]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d114      	bne.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff f869 	bl	800088c <HAL_GetTick>
 80017ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f865 	bl	800088c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e02a      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017ec:	d10d      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001802:	490d      	ldr	r1, [pc, #52]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]
 8001808:	e005      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001810:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001814:	6093      	str	r3, [r2, #8]
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	4905      	ldr	r1, [pc, #20]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001824:	4313      	orrs	r3, r2
 8001826:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	42470068 	.word	0x42470068
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000
 8001840:	42470e40 	.word	0x42470e40

08001844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e03f      	b.n	80018d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe ff2e 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f9b1 	bl	8001bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800189c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b088      	sub	sp, #32
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	f040 8083 	bne.w	8001a06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HAL_UART_Transmit+0x2e>
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e07b      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_UART_Transmit+0x40>
 800191a:	2302      	movs	r3, #2
 800191c:	e074      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2221      	movs	r2, #33	; 0x21
 8001930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001934:	f7fe ffaa 	bl	800088c <HAL_GetTick>
 8001938:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800194e:	e042      	b.n	80019d6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001966:	d122      	bne.n	80019ae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2200      	movs	r2, #0
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f8f2 	bl	8001b5c <UART_WaitOnFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e042      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001994:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3302      	adds	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	e017      	b.n	80019d6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	e013      	b.n	80019d6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f8cf 	bl	8001b5c <UART_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e01f      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1b7      	bne.n	8001950 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2200      	movs	r2, #0
 80019e8:	2140      	movs	r1, #64	; 0x40
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f8b6 	bl	8001b5c <UART_WaitOnFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e006      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
  }
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	f040 8090 	bne.w	8001b52 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_UART_Receive+0x2e>
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e088      	b.n	8001b54 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_UART_Receive+0x40>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e081      	b.n	8001b54 <HAL_UART_Receive+0x144>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2222      	movs	r2, #34	; 0x22
 8001a62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a66:	f7fe ff11 	bl	800088c <HAL_GetTick>
 8001a6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	88fa      	ldrh	r2, [r7, #6]
 8001a70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a80:	e05c      	b.n	8001b3c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a98:	d12b      	bne.n	8001af2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f859 	bl	8001b5c <UART_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e04f      	b.n	8001b54 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10c      	bne.n	8001ada <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	e030      	b.n	8001b3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	e024      	b.n	8001b3c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2120      	movs	r1, #32
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f82d 	bl	8001b5c <UART_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e023      	b.n	8001b54 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d108      	bne.n	8001b26 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60ba      	str	r2, [r7, #8]
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e00a      	b.n	8001b3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d19d      	bne.n	8001a82 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001b52:	2302      	movs	r3, #2
  }
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b6c:	e02c      	b.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d028      	beq.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b7c:	f7fe fe86 	bl	800088c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d21d      	bcs.n	8001bc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e00f      	b.n	8001be8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d0c3      	beq.n	8001b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c32:	f023 030c 	bic.w	r3, r3, #12
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	68f9      	ldr	r1, [r7, #12]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5e:	f040 818b 	bne.w	8001f78 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4ac1      	ldr	r2, [pc, #772]	; (8001f6c <UART_SetConfig+0x37c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d005      	beq.n	8001c78 <UART_SetConfig+0x88>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4abf      	ldr	r2, [pc, #764]	; (8001f70 <UART_SetConfig+0x380>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	f040 80bd 	bne.w	8001df2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c78:	f7ff fcee 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8001c7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	461d      	mov	r5, r3
 8001c82:	f04f 0600 	mov.w	r6, #0
 8001c86:	46a8      	mov	r8, r5
 8001c88:	46b1      	mov	r9, r6
 8001c8a:	eb18 0308 	adds.w	r3, r8, r8
 8001c8e:	eb49 0409 	adc.w	r4, r9, r9
 8001c92:	4698      	mov	r8, r3
 8001c94:	46a1      	mov	r9, r4
 8001c96:	eb18 0805 	adds.w	r8, r8, r5
 8001c9a:	eb49 0906 	adc.w	r9, r9, r6
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001caa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001cae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001cb2:	4688      	mov	r8, r1
 8001cb4:	4691      	mov	r9, r2
 8001cb6:	eb18 0005 	adds.w	r0, r8, r5
 8001cba:	eb49 0106 	adc.w	r1, r9, r6
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	f04f 0600 	mov.w	r6, #0
 8001cc8:	196b      	adds	r3, r5, r5
 8001cca:	eb46 0406 	adc.w	r4, r6, r6
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	f7fe fa91 	bl	80001f8 <__aeabi_uldivmod>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4ba5      	ldr	r3, [pc, #660]	; (8001f74 <UART_SetConfig+0x384>)
 8001cde:	fba3 2302 	umull	r2, r3, r3, r2
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	461d      	mov	r5, r3
 8001cec:	f04f 0600 	mov.w	r6, #0
 8001cf0:	46a9      	mov	r9, r5
 8001cf2:	46b2      	mov	sl, r6
 8001cf4:	eb19 0309 	adds.w	r3, r9, r9
 8001cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	46a2      	mov	sl, r4
 8001d00:	eb19 0905 	adds.w	r9, r9, r5
 8001d04:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d08:	f04f 0100 	mov.w	r1, #0
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d1c:	4689      	mov	r9, r1
 8001d1e:	4692      	mov	sl, r2
 8001d20:	eb19 0005 	adds.w	r0, r9, r5
 8001d24:	eb4a 0106 	adc.w	r1, sl, r6
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	461d      	mov	r5, r3
 8001d2e:	f04f 0600 	mov.w	r6, #0
 8001d32:	196b      	adds	r3, r5, r5
 8001d34:	eb46 0406 	adc.w	r4, r6, r6
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	f7fe fa5c 	bl	80001f8 <__aeabi_uldivmod>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b8b      	ldr	r3, [pc, #556]	; (8001f74 <UART_SetConfig+0x384>)
 8001d48:	fba3 1302 	umull	r1, r3, r3, r2
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	2164      	movs	r1, #100	; 0x64
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	3332      	adds	r3, #50	; 0x32
 8001d5a:	4a86      	ldr	r2, [pc, #536]	; (8001f74 <UART_SetConfig+0x384>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d68:	4498      	add	r8, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	f04f 0600 	mov.w	r6, #0
 8001d72:	46a9      	mov	r9, r5
 8001d74:	46b2      	mov	sl, r6
 8001d76:	eb19 0309 	adds.w	r3, r9, r9
 8001d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8001d7e:	4699      	mov	r9, r3
 8001d80:	46a2      	mov	sl, r4
 8001d82:	eb19 0905 	adds.w	r9, r9, r5
 8001d86:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d9e:	4689      	mov	r9, r1
 8001da0:	4692      	mov	sl, r2
 8001da2:	eb19 0005 	adds.w	r0, r9, r5
 8001da6:	eb4a 0106 	adc.w	r1, sl, r6
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	461d      	mov	r5, r3
 8001db0:	f04f 0600 	mov.w	r6, #0
 8001db4:	196b      	adds	r3, r5, r5
 8001db6:	eb46 0406 	adc.w	r4, r6, r6
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	f7fe fa1b 	bl	80001f8 <__aeabi_uldivmod>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <UART_SetConfig+0x384>)
 8001dca:	fba3 1302 	umull	r1, r3, r3, r2
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2164      	movs	r1, #100	; 0x64
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	3332      	adds	r3, #50	; 0x32
 8001ddc:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <UART_SetConfig+0x384>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	f003 0207 	and.w	r2, r3, #7
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4442      	add	r2, r8
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	e26f      	b.n	80022d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001df2:	f7ff fc1d 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8001df6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	f04f 0600 	mov.w	r6, #0
 8001e00:	46a8      	mov	r8, r5
 8001e02:	46b1      	mov	r9, r6
 8001e04:	eb18 0308 	adds.w	r3, r8, r8
 8001e08:	eb49 0409 	adc.w	r4, r9, r9
 8001e0c:	4698      	mov	r8, r3
 8001e0e:	46a1      	mov	r9, r4
 8001e10:	eb18 0805 	adds.w	r8, r8, r5
 8001e14:	eb49 0906 	adc.w	r9, r9, r6
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e2c:	4688      	mov	r8, r1
 8001e2e:	4691      	mov	r9, r2
 8001e30:	eb18 0005 	adds.w	r0, r8, r5
 8001e34:	eb49 0106 	adc.w	r1, r9, r6
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	f04f 0600 	mov.w	r6, #0
 8001e42:	196b      	adds	r3, r5, r5
 8001e44:	eb46 0406 	adc.w	r4, r6, r6
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	f7fe f9d4 	bl	80001f8 <__aeabi_uldivmod>
 8001e50:	4603      	mov	r3, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <UART_SetConfig+0x384>)
 8001e58:	fba3 2302 	umull	r2, r3, r3, r2
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	461d      	mov	r5, r3
 8001e66:	f04f 0600 	mov.w	r6, #0
 8001e6a:	46a9      	mov	r9, r5
 8001e6c:	46b2      	mov	sl, r6
 8001e6e:	eb19 0309 	adds.w	r3, r9, r9
 8001e72:	eb4a 040a 	adc.w	r4, sl, sl
 8001e76:	4699      	mov	r9, r3
 8001e78:	46a2      	mov	sl, r4
 8001e7a:	eb19 0905 	adds.w	r9, r9, r5
 8001e7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e96:	4689      	mov	r9, r1
 8001e98:	4692      	mov	sl, r2
 8001e9a:	eb19 0005 	adds.w	r0, r9, r5
 8001e9e:	eb4a 0106 	adc.w	r1, sl, r6
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	f04f 0600 	mov.w	r6, #0
 8001eac:	196b      	adds	r3, r5, r5
 8001eae:	eb46 0406 	adc.w	r4, r6, r6
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	f7fe f99f 	bl	80001f8 <__aeabi_uldivmod>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <UART_SetConfig+0x384>)
 8001ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2164      	movs	r1, #100	; 0x64
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	3332      	adds	r3, #50	; 0x32
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <UART_SetConfig+0x384>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ee2:	4498      	add	r8, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	461d      	mov	r5, r3
 8001ee8:	f04f 0600 	mov.w	r6, #0
 8001eec:	46a9      	mov	r9, r5
 8001eee:	46b2      	mov	sl, r6
 8001ef0:	eb19 0309 	adds.w	r3, r9, r9
 8001ef4:	eb4a 040a 	adc.w	r4, sl, sl
 8001ef8:	4699      	mov	r9, r3
 8001efa:	46a2      	mov	sl, r4
 8001efc:	eb19 0905 	adds.w	r9, r9, r5
 8001f00:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f18:	4689      	mov	r9, r1
 8001f1a:	4692      	mov	sl, r2
 8001f1c:	eb19 0005 	adds.w	r0, r9, r5
 8001f20:	eb4a 0106 	adc.w	r1, sl, r6
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	461d      	mov	r5, r3
 8001f2a:	f04f 0600 	mov.w	r6, #0
 8001f2e:	196b      	adds	r3, r5, r5
 8001f30:	eb46 0406 	adc.w	r4, r6, r6
 8001f34:	461a      	mov	r2, r3
 8001f36:	4623      	mov	r3, r4
 8001f38:	f7fe f95e 	bl	80001f8 <__aeabi_uldivmod>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <UART_SetConfig+0x384>)
 8001f44:	fba3 1302 	umull	r1, r3, r3, r2
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	2164      	movs	r1, #100	; 0x64
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	3332      	adds	r3, #50	; 0x32
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <UART_SetConfig+0x384>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	095b      	lsrs	r3, r3, #5
 8001f5e:	f003 0207 	and.w	r2, r3, #7
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4442      	add	r2, r8
 8001f68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f6a:	e1b2      	b.n	80022d2 <UART_SetConfig+0x6e2>
 8001f6c:	40011000 	.word	0x40011000
 8001f70:	40011400 	.word	0x40011400
 8001f74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4ad7      	ldr	r2, [pc, #860]	; (80022dc <UART_SetConfig+0x6ec>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d005      	beq.n	8001f8e <UART_SetConfig+0x39e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4ad6      	ldr	r2, [pc, #856]	; (80022e0 <UART_SetConfig+0x6f0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	f040 80d1 	bne.w	8002130 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f8e:	f7ff fb63 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8001f92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	469a      	mov	sl, r3
 8001f98:	f04f 0b00 	mov.w	fp, #0
 8001f9c:	46d0      	mov	r8, sl
 8001f9e:	46d9      	mov	r9, fp
 8001fa0:	eb18 0308 	adds.w	r3, r8, r8
 8001fa4:	eb49 0409 	adc.w	r4, r9, r9
 8001fa8:	4698      	mov	r8, r3
 8001faa:	46a1      	mov	r9, r4
 8001fac:	eb18 080a 	adds.w	r8, r8, sl
 8001fb0:	eb49 090b 	adc.w	r9, r9, fp
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fc8:	4688      	mov	r8, r1
 8001fca:	4691      	mov	r9, r2
 8001fcc:	eb1a 0508 	adds.w	r5, sl, r8
 8001fd0:	eb4b 0609 	adc.w	r6, fp, r9
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	f04f 0400 	mov.w	r4, #0
 8001fe6:	0094      	lsls	r4, r2, #2
 8001fe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001fec:	008b      	lsls	r3, r1, #2
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	4631      	mov	r1, r6
 8001ff6:	f7fe f8ff 	bl	80001f8 <__aeabi_uldivmod>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	461a      	mov	r2, r3
 8002000:	4bb8      	ldr	r3, [pc, #736]	; (80022e4 <UART_SetConfig+0x6f4>)
 8002002:	fba3 2302 	umull	r2, r3, r3, r2
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	469b      	mov	fp, r3
 8002010:	f04f 0c00 	mov.w	ip, #0
 8002014:	46d9      	mov	r9, fp
 8002016:	46e2      	mov	sl, ip
 8002018:	eb19 0309 	adds.w	r3, r9, r9
 800201c:	eb4a 040a 	adc.w	r4, sl, sl
 8002020:	4699      	mov	r9, r3
 8002022:	46a2      	mov	sl, r4
 8002024:	eb19 090b 	adds.w	r9, r9, fp
 8002028:	eb4a 0a0c 	adc.w	sl, sl, ip
 800202c:	f04f 0100 	mov.w	r1, #0
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002038:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800203c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002040:	4689      	mov	r9, r1
 8002042:	4692      	mov	sl, r2
 8002044:	eb1b 0509 	adds.w	r5, fp, r9
 8002048:	eb4c 060a 	adc.w	r6, ip, sl
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4619      	mov	r1, r3
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	f04f 0400 	mov.w	r4, #0
 800205e:	0094      	lsls	r4, r2, #2
 8002060:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002064:	008b      	lsls	r3, r1, #2
 8002066:	461a      	mov	r2, r3
 8002068:	4623      	mov	r3, r4
 800206a:	4628      	mov	r0, r5
 800206c:	4631      	mov	r1, r6
 800206e:	f7fe f8c3 	bl	80001f8 <__aeabi_uldivmod>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	461a      	mov	r2, r3
 8002078:	4b9a      	ldr	r3, [pc, #616]	; (80022e4 <UART_SetConfig+0x6f4>)
 800207a:	fba3 1302 	umull	r1, r3, r3, r2
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2164      	movs	r1, #100	; 0x64
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	3332      	adds	r3, #50	; 0x32
 800208c:	4a95      	ldr	r2, [pc, #596]	; (80022e4 <UART_SetConfig+0x6f4>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	4498      	add	r8, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	469b      	mov	fp, r3
 800209e:	f04f 0c00 	mov.w	ip, #0
 80020a2:	46d9      	mov	r9, fp
 80020a4:	46e2      	mov	sl, ip
 80020a6:	eb19 0309 	adds.w	r3, r9, r9
 80020aa:	eb4a 040a 	adc.w	r4, sl, sl
 80020ae:	4699      	mov	r9, r3
 80020b0:	46a2      	mov	sl, r4
 80020b2:	eb19 090b 	adds.w	r9, r9, fp
 80020b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80020ba:	f04f 0100 	mov.w	r1, #0
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020ce:	4689      	mov	r9, r1
 80020d0:	4692      	mov	sl, r2
 80020d2:	eb1b 0509 	adds.w	r5, fp, r9
 80020d6:	eb4c 060a 	adc.w	r6, ip, sl
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	0094      	lsls	r4, r2, #2
 80020ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020f2:	008b      	lsls	r3, r1, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	4628      	mov	r0, r5
 80020fa:	4631      	mov	r1, r6
 80020fc:	f7fe f87c 	bl	80001f8 <__aeabi_uldivmod>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	461a      	mov	r2, r3
 8002106:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <UART_SetConfig+0x6f4>)
 8002108:	fba3 1302 	umull	r1, r3, r3, r2
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	2164      	movs	r1, #100	; 0x64
 8002110:	fb01 f303 	mul.w	r3, r1, r3
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	3332      	adds	r3, #50	; 0x32
 800211a:	4a72      	ldr	r2, [pc, #456]	; (80022e4 <UART_SetConfig+0x6f4>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	f003 020f 	and.w	r2, r3, #15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4442      	add	r2, r8
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e0d0      	b.n	80022d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002130:	f7ff fa7e 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 8002134:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	469a      	mov	sl, r3
 800213a:	f04f 0b00 	mov.w	fp, #0
 800213e:	46d0      	mov	r8, sl
 8002140:	46d9      	mov	r9, fp
 8002142:	eb18 0308 	adds.w	r3, r8, r8
 8002146:	eb49 0409 	adc.w	r4, r9, r9
 800214a:	4698      	mov	r8, r3
 800214c:	46a1      	mov	r9, r4
 800214e:	eb18 080a 	adds.w	r8, r8, sl
 8002152:	eb49 090b 	adc.w	r9, r9, fp
 8002156:	f04f 0100 	mov.w	r1, #0
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002162:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002166:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800216a:	4688      	mov	r8, r1
 800216c:	4691      	mov	r9, r2
 800216e:	eb1a 0508 	adds.w	r5, sl, r8
 8002172:	eb4b 0609 	adc.w	r6, fp, r9
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f04f 0400 	mov.w	r4, #0
 8002188:	0094      	lsls	r4, r2, #2
 800218a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800218e:	008b      	lsls	r3, r1, #2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	4628      	mov	r0, r5
 8002196:	4631      	mov	r1, r6
 8002198:	f7fe f82e 	bl	80001f8 <__aeabi_uldivmod>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <UART_SetConfig+0x6f4>)
 80021a4:	fba3 2302 	umull	r2, r3, r3, r2
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	469b      	mov	fp, r3
 80021b2:	f04f 0c00 	mov.w	ip, #0
 80021b6:	46d9      	mov	r9, fp
 80021b8:	46e2      	mov	sl, ip
 80021ba:	eb19 0309 	adds.w	r3, r9, r9
 80021be:	eb4a 040a 	adc.w	r4, sl, sl
 80021c2:	4699      	mov	r9, r3
 80021c4:	46a2      	mov	sl, r4
 80021c6:	eb19 090b 	adds.w	r9, r9, fp
 80021ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021e2:	4689      	mov	r9, r1
 80021e4:	4692      	mov	sl, r2
 80021e6:	eb1b 0509 	adds.w	r5, fp, r9
 80021ea:	eb4c 060a 	adc.w	r6, ip, sl
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	f04f 0400 	mov.w	r4, #0
 8002200:	0094      	lsls	r4, r2, #2
 8002202:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002206:	008b      	lsls	r3, r1, #2
 8002208:	461a      	mov	r2, r3
 800220a:	4623      	mov	r3, r4
 800220c:	4628      	mov	r0, r5
 800220e:	4631      	mov	r1, r6
 8002210:	f7fd fff2 	bl	80001f8 <__aeabi_uldivmod>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	461a      	mov	r2, r3
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <UART_SetConfig+0x6f4>)
 800221c:	fba3 1302 	umull	r1, r3, r3, r2
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	2164      	movs	r1, #100	; 0x64
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	3332      	adds	r3, #50	; 0x32
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <UART_SetConfig+0x6f4>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223a:	4498      	add	r8, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	469b      	mov	fp, r3
 8002240:	f04f 0c00 	mov.w	ip, #0
 8002244:	46d9      	mov	r9, fp
 8002246:	46e2      	mov	sl, ip
 8002248:	eb19 0309 	adds.w	r3, r9, r9
 800224c:	eb4a 040a 	adc.w	r4, sl, sl
 8002250:	4699      	mov	r9, r3
 8002252:	46a2      	mov	sl, r4
 8002254:	eb19 090b 	adds.w	r9, r9, fp
 8002258:	eb4a 0a0c 	adc.w	sl, sl, ip
 800225c:	f04f 0100 	mov.w	r1, #0
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800226c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002270:	4689      	mov	r9, r1
 8002272:	4692      	mov	sl, r2
 8002274:	eb1b 0509 	adds.w	r5, fp, r9
 8002278:	eb4c 060a 	adc.w	r6, ip, sl
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4619      	mov	r1, r3
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	f04f 0400 	mov.w	r4, #0
 800228e:	0094      	lsls	r4, r2, #2
 8002290:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002294:	008b      	lsls	r3, r1, #2
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	4628      	mov	r0, r5
 800229c:	4631      	mov	r1, r6
 800229e:	f7fd ffab 	bl	80001f8 <__aeabi_uldivmod>
 80022a2:	4603      	mov	r3, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <UART_SetConfig+0x6f4>)
 80022aa:	fba3 1302 	umull	r1, r3, r3, r2
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2164      	movs	r1, #100	; 0x64
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	3332      	adds	r3, #50	; 0x32
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <UART_SetConfig+0x6f4>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4442      	add	r2, r8
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	e7ff      	b.n	80022d2 <UART_SetConfig+0x6e2>
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	51eb851f 	.word	0x51eb851f

080022e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopForever+0xe>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopForever+0x16>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002312:	f7fe fa3f 	bl	8000794 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002316:	f000 f811 	bl	800233c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231a:	f7fe f8ed 	bl	80004f8 <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
  ldr   r0, =_estack
 8002320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800232c:	080023f4 	.word	0x080023f4
  ldr r2, =_sbss
 8002330:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002334:	20000070 	.word	0x20000070

08002338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <__libc_init_array>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4e0d      	ldr	r6, [pc, #52]	; (8002374 <__libc_init_array+0x38>)
 8002340:	4c0d      	ldr	r4, [pc, #52]	; (8002378 <__libc_init_array+0x3c>)
 8002342:	1ba4      	subs	r4, r4, r6
 8002344:	10a4      	asrs	r4, r4, #2
 8002346:	2500      	movs	r5, #0
 8002348:	42a5      	cmp	r5, r4
 800234a:	d109      	bne.n	8002360 <__libc_init_array+0x24>
 800234c:	4e0b      	ldr	r6, [pc, #44]	; (800237c <__libc_init_array+0x40>)
 800234e:	4c0c      	ldr	r4, [pc, #48]	; (8002380 <__libc_init_array+0x44>)
 8002350:	f000 f820 	bl	8002394 <_init>
 8002354:	1ba4      	subs	r4, r4, r6
 8002356:	10a4      	asrs	r4, r4, #2
 8002358:	2500      	movs	r5, #0
 800235a:	42a5      	cmp	r5, r4
 800235c:	d105      	bne.n	800236a <__libc_init_array+0x2e>
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002364:	4798      	blx	r3
 8002366:	3501      	adds	r5, #1
 8002368:	e7ee      	b.n	8002348 <__libc_init_array+0xc>
 800236a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800236e:	4798      	blx	r3
 8002370:	3501      	adds	r5, #1
 8002372:	e7f2      	b.n	800235a <__libc_init_array+0x1e>
 8002374:	080023ec 	.word	0x080023ec
 8002378:	080023ec 	.word	0x080023ec
 800237c:	080023ec 	.word	0x080023ec
 8002380:	080023f0 	.word	0x080023f0

08002384 <memset>:
 8002384:	4402      	add	r2, r0
 8002386:	4603      	mov	r3, r0
 8002388:	4293      	cmp	r3, r2
 800238a:	d100      	bne.n	800238e <memset+0xa>
 800238c:	4770      	bx	lr
 800238e:	f803 1b01 	strb.w	r1, [r3], #1
 8002392:	e7f9      	b.n	8002388 <memset+0x4>

08002394 <_init>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr

080023a0 <_fini>:
 80023a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a2:	bf00      	nop
 80023a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a6:	bc08      	pop	{r3}
 80023a8:	469e      	mov	lr, r3
 80023aa:	4770      	bx	lr
