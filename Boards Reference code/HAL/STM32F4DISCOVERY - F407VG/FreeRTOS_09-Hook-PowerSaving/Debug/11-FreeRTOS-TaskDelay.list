
11-FreeRTOS-TaskDelay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005a74  08005a74  00015a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd0  08005bd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bd8  08005bd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000156d8  20000074  08005c54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001574c  08005c54  0002574c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171c0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d8e  00000000  00000000  00037264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ffb  00000000  00000000  0003be20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b60  00000000  00000000  0005ee1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfd32  00000000  00000000  0007297b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001426ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004360  00000000  00000000  00142728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a5c 	.word	0x08005a5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005a5c 	.word	0x08005a5c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	200156a0 	.word	0x200156a0

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr
 800028c:	0000      	movs	r0, r0
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <USART2_UART_Init+0x4c>)
 8000668:	f001 fa86 	bl	8001b78 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f945 	bl	8000900 <Error_Handler>
  }

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200155f8 	.word	0x200155f8
 8000680:	40004400 	.word	0x40004400

08000684 <UART2_write>:

void UART2_write(char data[]){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fdf5 	bl	800027c <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <UART2_write+0x28>)
 800069e:	f001 fab8 	bl	8001c12 <HAL_UART_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200155f8 	.word	0x200155f8

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <main+0x64>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <main+0x64>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c2:	f000 f9d7 	bl	8000a74 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80006c6:	f000 f835 	bl	8000734 <SystemClock_Config>

	/* Configure the peripherals */
	GPIO_Init();
 80006ca:	f000 f893 	bl	80007f4 <GPIO_Init>
	USART2_UART_Init();
 80006ce:	f7ff ffaf 	bl	8000630 <USART2_UART_Init>

	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 80006d2:	f003 f9f3 	bl	8003abc <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80006d6:	f003 ffb9 	bl	800464c <SEGGER_SYSVIEW_Start>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(vtask1_Handler,"task1",500,NULL,2,&xTaskHandler1);
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0x68>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <main+0x6c>)
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <main+0x70>)
 80006ec:	f002 f847 	bl	800277e <xTaskCreate>
	//tarea 2
	xTaskCreate(vtask2_Handler,"task2",500,NULL,3,&xTaskHandler2);
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <main+0x74>)
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	2303      	movs	r3, #3
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <main+0x78>)
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x7c>)
 8000702:	f002 f83c 	bl	800277e <xTaskCreate>

	/* Start Message */
	//HAL_UART_Transmit(&huart2,(uint8_t*) "FreeRTOS Init\n", sizeof("FreeRTOS Init\n"), HAL_MAX_DELAY);
	UART2_write("FreeRTOS Init\n");
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <main+0x80>)
 8000708:	f7ff ffbc 	bl	8000684 <UART2_write>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 800070c:	f002 f9c6 	bl	8002a9c <vTaskStartScheduler>

	while (1);
 8000710:	e7fe      	b.n	8000710 <main+0x60>
 8000712:	bf00      	nop
 8000714:	e0001000 	.word	0xe0001000
 8000718:	20000090 	.word	0x20000090
 800071c:	08005a74 	.word	0x08005a74
 8000720:	080008a9 	.word	0x080008a9
 8000724:	20000094 	.word	0x20000094
 8000728:	08005a7c 	.word	0x08005a7c
 800072c:	080008e1 	.word	0x080008e1
 8000730:	08005a84 	.word	0x08005a84

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fd86 	bl	8005254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcae 	bl	80010f0 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800079a:	f000 f8b1 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff07 	bl	80015d0 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 f89a 	bl	8000900 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007d0:	23c0      	movs	r3, #192	; 0xc0
 80007d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f8ea 	bl	80019b4 <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e6:	f000 f88b 	bl	8000900 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	; 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <GPIO_Init>:

/**
  * @brief  Function of gpio init.
  * @retval None
  */
void GPIO_Init(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <GPIO_Init+0xa8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <GPIO_Init+0xa8>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <GPIO_Init+0xa8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <GPIO_Init+0xa8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1b      	ldr	r2, [pc, #108]	; (800089c <GPIO_Init+0xa8>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b19      	ldr	r3, [pc, #100]	; (800089c <GPIO_Init+0xa8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]


/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	4815      	ldr	r0, [pc, #84]	; (80008a0 <GPIO_Init+0xac>)
 800084a:	f000 fc1d 	bl	8001088 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(BUTTON_PORT, BUTTON_PIN, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <GPIO_Init+0xb0>)
 8000854:	f000 fc18 	bl	8001088 <HAL_GPIO_WritePin>


/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = LED_GREEN_PIN;
 8000858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800085c:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <GPIO_Init+0xac>)
 8000872:	f000 fa57 	bl	8000d24 <HAL_GPIO_Init>

/*Configure GPIO pins BUTTON */
GPIO_InitStruct.Pin = BUTTON_PIN;
 8000876:	2301      	movs	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <GPIO_Init+0xb0>)
 800088e:	f000 fa49 	bl	8000d24 <HAL_GPIO_Init>

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40020000 	.word	0x40020000

080008a8 <vtask1_Handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void vtask1_Handler(void *params){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	while(1){

		//Realizo e imprimo lectura de boton
		sprintf(msg,"Tarea 1. Lectura: %d\n",HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 80008b0:	2101      	movs	r1, #1
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <vtask1_Handler+0x2c>)
 80008b4:	f000 fbd0 	bl	8001058 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	461a      	mov	r2, r3
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <vtask1_Handler+0x30>)
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <vtask1_Handler+0x34>)
 80008c0:	f004 fcd0 	bl	8005264 <siprintf>
		UART2_write(msg);
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <vtask1_Handler+0x34>)
 80008c6:	f7ff fedd 	bl	8000684 <UART2_write>

		//Genero delay de 1000ms
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ce:	f002 f8ad 	bl	8002a2c <vTaskDelay>
		sprintf(msg,"Tarea 1. Lectura: %d\n",HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN));
 80008d2:	e7ed      	b.n	80008b0 <vtask1_Handler+0x8>
 80008d4:	40020000 	.word	0x40020000
 80008d8:	08005a94 	.word	0x08005a94
 80008dc:	20015638 	.word	0x20015638

080008e0 <vtask2_Handler>:

/**
  * @brief  Function of task2.
  * @retval None
  */
void vtask2_Handler(void *params){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	while(1){

		//Genero intermitencia en señal de boton
		HAL_GPIO_TogglePin(BUTTON_PORT, BUTTON_PIN);
 80008e8:	2101      	movs	r1, #1
 80008ea:	4804      	ldr	r0, [pc, #16]	; (80008fc <vtask2_Handler+0x1c>)
 80008ec:	f000 fbe5 	bl	80010ba <HAL_GPIO_TogglePin>
		//Genero delay de 1000ms
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f002 f89a 	bl	8002a2c <vTaskDelay>
		HAL_GPIO_TogglePin(BUTTON_PORT, BUTTON_PIN);
 80008f8:	e7f6      	b.n	80008e8 <vtask2_Handler+0x8>
 80008fa:	bf00      	nop
 80008fc:	40020000 	.word	0x40020000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f9d2 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	210f      	movs	r1, #15
 800091c:	f06f 0001 	mvn.w	r0, #1
 8000920:	f000 f9d7 	bl	8000cd2 <HAL_NVIC_SetPriority>

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12b      	bne.n	80009a2 <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_UART_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000982:	230c      	movs	r3, #12
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000992:	2307      	movs	r3, #7
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x8c>)
 800099e:	f000 f9c1 	bl	8000d24 <HAL_GPIO_Init>

  }
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000

080009b8 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 f899 	bl	8000b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009e6:	f002 fda7 	bl	8003538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x16>
		heap_end = &end;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <_sbrk+0x50>)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <_sbrk+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <_sbrk+0x50>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <_sbrk+0x50>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4413      	add	r3, r2
 8000a14:	466a      	mov	r2, sp
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d907      	bls.n	8000a2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a1a:	f004 fbd7 	bl	80051cc <__errno>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	230c      	movs	r3, #12
 8000a22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	e006      	b.n	8000a38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <_sbrk+0x50>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <_sbrk+0x50>)
 8000a34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000098 	.word	0x20000098
 8000a44:	20015750 	.word	0x20015750

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SystemInit+0x28>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <SystemInit+0x28>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SystemInit+0x28>)
 8000a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a62:	609a      	str	r2, [r3, #8]
#endif
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f90d 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff ff31 	bl	800090e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f917 	bl	8000d0a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f8ed 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	2001569c 	.word	0x2001569c

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2001569c 	.word	0x2001569c

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff47 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff5c 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffb0 	bl	8000c78 <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e16b      	b.n	8001018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 815a 	bne.w	8001012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d00b      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d007      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d72:	2b11      	cmp	r3, #17
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d130      	bne.n	8000de0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	f003 0201 	and.w	r2, r3, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0xfc>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b12      	cmp	r3, #18
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80b4 	beq.w	8001012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <HAL_GPIO_Init+0x308>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <HAL_GPIO_Init+0x308>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b5c      	ldr	r3, [pc, #368]	; (800102c <HAL_GPIO_Init+0x308>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a5a      	ldr	r2, [pc, #360]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a51      	ldr	r2, [pc, #324]	; (8001034 <HAL_GPIO_Init+0x310>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d02b      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a50      	ldr	r2, [pc, #320]	; (8001038 <HAL_GPIO_Init+0x314>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x222>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	; (800103c <HAL_GPIO_Init+0x318>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x21e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	; (8001040 <HAL_GPIO_Init+0x31c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x21a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	; (8001044 <HAL_GPIO_Init+0x320>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x216>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	; (8001048 <HAL_GPIO_Init+0x324>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x212>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	; (800104c <HAL_GPIO_Init+0x328>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x20e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	; (8001050 <HAL_GPIO_Init+0x32c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x20a>
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	e00e      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f2e:	2308      	movs	r3, #8
 8000f30:	e00c      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00a      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x228>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4934      	ldr	r1, [pc, #208]	; (8001030 <HAL_GPIO_Init+0x30c>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8e:	4a31      	ldr	r2, [pc, #196]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_GPIO_Init+0x330>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_GPIO_Init+0x330>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f ae90 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	3724      	adds	r7, #36	; 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40021c00 	.word	0x40021c00
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	887b      	ldrh	r3, [r7, #2]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e001      	b.n	800107a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	401a      	ands	r2, r3
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d104      	bne.n	80010de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	041a      	lsls	r2, r3, #16
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e25b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4ba0      	ldr	r3, [pc, #640]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b9d      	ldr	r3, [pc, #628]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b99      	ldr	r3, [pc, #612]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e236      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a90      	ldr	r2, [pc, #576]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a8a      	ldr	r2, [pc, #552]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b84      	ldr	r3, [pc, #528]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcca 	bl	8000b40 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcc6 	bl	8000b40 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1fb      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcb6 	bl	8000b40 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcb2 	bl	8000b40 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1e7      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b6c      	ldr	r3, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1bb      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4952      	ldr	r1, [pc, #328]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc6b 	bl	8000b40 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc67 	bl	8000b40 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e19c      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4940      	ldr	r1, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc4a 	bl	8000b40 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc46 	bl	8000b40 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e17b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d030      	beq.n	800133c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc2a 	bl	8000b40 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc26 	bl	8000b40 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e15b      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc13 	bl	8000b40 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc0f 	bl	8000b40 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e144      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a0 	beq.w	800148a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10f      	bne.n	800137a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbd5 	bl	8000b40 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e011      	b.n	80013be <HAL_RCC_OscConfig+0x2ce>
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470000 	.word	0x42470000
 80013a4:	42470e80 	.word	0x42470e80
 80013a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff fbc8 	bl	8000b40 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e0fd      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <HAL_RCC_OscConfig+0x4d4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2f0>
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a7c      	ldr	r2, [pc, #496]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x312>
 80013e8:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a76      	ldr	r2, [pc, #472]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	4b74      	ldr	r3, [pc, #464]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a73      	ldr	r2, [pc, #460]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 8001402:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a70      	ldr	r2, [pc, #448]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b6e      	ldr	r3, [pc, #440]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a6d      	ldr	r2, [pc, #436]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001422:	f7ff fb8d 	bl	8000b40 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fb89 	bl	8000b40 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0bc      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x33a>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb77 	bl	8000b40 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb73 	bl	8000b40 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0a6      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8092 	beq.w	80015b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001494:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d05c      	beq.n	800155a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d141      	bne.n	800152c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb47 	bl	8000b40 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fb43 	bl	8000b40 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e078      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	4933      	ldr	r1, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb1c 	bl	8000b40 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb18 	bl	8000b40 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e04d      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x41c>
 800152a:	e045      	b.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <HAL_RCC_OscConfig+0x4dc>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb05 	bl	8000b40 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb01 	bl	8000b40 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e036      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x44a>
 8001558:	e02e      	b.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e029      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_RCC_OscConfig+0x4d8>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d115      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800158e:	4013      	ands	r3, r2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001594:	4293      	cmp	r3, r2
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	42470060 	.word	0x42470060

080015d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0cc      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d90c      	bls.n	800160c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b65      	ldr	r3, [pc, #404]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	4b63      	ldr	r3, [pc, #396]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d001      	beq.n	800160c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0b8      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d020      	beq.n	800165a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4a58      	ldr	r2, [pc, #352]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800162e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4a52      	ldr	r2, [pc, #328]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	494d      	ldr	r1, [pc, #308]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	d044      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b47      	ldr	r3, [pc, #284]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e07f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d003      	beq.n	800168e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e067      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f023 0203 	bic.w	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c0:	f7ff fa3e 	bl	8000b40 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	e00a      	b.n	80016de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c8:	f7ff fa3a 	bl	8000b40 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e04f      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 020c 	and.w	r2, r3, #12
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d1eb      	bne.n	80016c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d20c      	bcs.n	8001718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e032      	b.n	800177e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4916      	ldr	r1, [pc, #88]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	490e      	ldr	r1, [pc, #56]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001756:	f000 f821 	bl	800179c <HAL_RCC_GetSysClockFreq>
 800175a:	4601      	mov	r1, r0
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	091b      	lsrs	r3, r3, #4
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	fa21 f303 	lsr.w	r3, r1, r3
 800176e:	4a09      	ldr	r2, [pc, #36]	; (8001794 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff f99e 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00
 800178c:	40023800 	.word	0x40023800
 8001790:	08005b70 	.word	0x08005b70
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d007      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x32>
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d008      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x38>
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80b4 	bne.w	8001930 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017ca:	60bb      	str	r3, [r7, #8]
       break;
 80017cc:	e0b3      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017d0:	60bb      	str	r3, [r7, #8]
      break;
 80017d2:	e0b0      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b5a      	ldr	r3, [pc, #360]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b58      	ldr	r3, [pc, #352]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d04a      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	f04f 0400 	mov.w	r4, #0
 80017f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	ea03 0501 	and.w	r5, r3, r1
 8001800:	ea04 0602 	and.w	r6, r4, r2
 8001804:	4629      	mov	r1, r5
 8001806:	4632      	mov	r2, r6
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	f04f 0400 	mov.w	r4, #0
 8001810:	0154      	lsls	r4, r2, #5
 8001812:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001816:	014b      	lsls	r3, r1, #5
 8001818:	4619      	mov	r1, r3
 800181a:	4622      	mov	r2, r4
 800181c:	1b49      	subs	r1, r1, r5
 800181e:	eb62 0206 	sbc.w	r2, r2, r6
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	0194      	lsls	r4, r2, #6
 800182c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001830:	018b      	lsls	r3, r1, #6
 8001832:	1a5b      	subs	r3, r3, r1
 8001834:	eb64 0402 	sbc.w	r4, r4, r2
 8001838:	f04f 0100 	mov.w	r1, #0
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	00e2      	lsls	r2, r4, #3
 8001842:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001846:	00d9      	lsls	r1, r3, #3
 8001848:	460b      	mov	r3, r1
 800184a:	4614      	mov	r4, r2
 800184c:	195b      	adds	r3, r3, r5
 800184e:	eb44 0406 	adc.w	r4, r4, r6
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	0262      	lsls	r2, r4, #9
 800185c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001860:	0259      	lsls	r1, r3, #9
 8001862:	460b      	mov	r3, r1
 8001864:	4614      	mov	r4, r2
 8001866:	4618      	mov	r0, r3
 8001868:	4621      	mov	r1, r4
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f04f 0400 	mov.w	r4, #0
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	f7fe fd5c 	bl	8000330 <__aeabi_uldivmod>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e049      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	099b      	lsrs	r3, r3, #6
 8001886:	f04f 0400 	mov.w	r4, #0
 800188a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	ea03 0501 	and.w	r5, r3, r1
 8001896:	ea04 0602 	and.w	r6, r4, r2
 800189a:	4629      	mov	r1, r5
 800189c:	4632      	mov	r2, r6
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	f04f 0400 	mov.w	r4, #0
 80018a6:	0154      	lsls	r4, r2, #5
 80018a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ac:	014b      	lsls	r3, r1, #5
 80018ae:	4619      	mov	r1, r3
 80018b0:	4622      	mov	r2, r4
 80018b2:	1b49      	subs	r1, r1, r5
 80018b4:	eb62 0206 	sbc.w	r2, r2, r6
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f04f 0400 	mov.w	r4, #0
 80018c0:	0194      	lsls	r4, r2, #6
 80018c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018c6:	018b      	lsls	r3, r1, #6
 80018c8:	1a5b      	subs	r3, r3, r1
 80018ca:	eb64 0402 	sbc.w	r4, r4, r2
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	00e2      	lsls	r2, r4, #3
 80018d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018dc:	00d9      	lsls	r1, r3, #3
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	195b      	adds	r3, r3, r5
 80018e4:	eb44 0406 	adc.w	r4, r4, r6
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	02a2      	lsls	r2, r4, #10
 80018f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018f6:	0299      	lsls	r1, r3, #10
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	4621      	mov	r1, r4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f04f 0400 	mov.w	r4, #0
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	f7fe fd11 	bl	8000330 <__aeabi_uldivmod>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	fbb2 f3f3 	udiv	r3, r2, r3
 800192c:	60bb      	str	r3, [r7, #8]
      break;
 800192e:	e002      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001932:	60bb      	str	r3, [r7, #8]
      break;
 8001934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001936:	68bb      	ldr	r3, [r7, #8]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	007a1200 	.word	0x007a1200

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4601      	mov	r1, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08005b80 	.word	0x08005b80

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4601      	mov	r1, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08005b80 	.word	0x08005b80

080019b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d035      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80019dc:	4b62      	ldr	r3, [pc, #392]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019e2:	f7ff f8ad 	bl	8000b40 <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019ea:	f7ff f8a9 	bl	8000b40 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0b0      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	019a      	lsls	r2, r3, #6
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	071b      	lsls	r3, r3, #28
 8001a14:	4955      	ldr	r1, [pc, #340]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a22:	f7ff f88d 	bl	8000b40 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a2a:	f7ff f889 	bl	8000b40 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e090      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 8083 	beq.w	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a3e      	ldr	r2, [pc, #248]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff f85f 	bl	8000b40 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff f85b 	bl	8000b40 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e062      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d02f      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d028      	beq.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ad8:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d114      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f829 	bl	8000b40 <HAL_GetTick>
 8001aee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7ff f825 	bl	8000b40 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e02a      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ee      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b20:	d10d      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b36:	490d      	ldr	r1, [pc, #52]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
 8001b3c:	e005      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b44:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b48:	6093      	str	r3, [r2, #8]
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b56:	4905      	ldr	r1, [pc, #20]	; (8001b6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	42470068 	.word	0x42470068
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000
 8001b74:	42470e40 	.word	0x42470e40

08001b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e03f      	b.n	8001c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fec2 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	; 0x24
 8001ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f90b 	bl	8001dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b088      	sub	sp, #32
 8001c16:	af02      	add	r7, sp, #8
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	f040 8083 	bne.w	8001d3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_UART_Transmit+0x2e>
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e07b      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Transmit+0x40>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e074      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2221      	movs	r2, #33	; 0x21
 8001c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c68:	f7fe ff6a 	bl	8000b40 <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c82:	e042      	b.n	8001d0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9a:	d122      	bne.n	8001ce2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f84c 	bl	8001d44 <UART_WaitOnFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e042      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cc8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	e017      	b.n	8001d0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	e013      	b.n	8001d0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2180      	movs	r1, #128	; 0x80
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f829 	bl	8001d44 <UART_WaitOnFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e01f      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1b7      	bne.n	8001c84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f810 	bl	8001d44 <UART_WaitOnFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e006      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2220      	movs	r2, #32
 8001d32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e000      	b.n	8001d3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d54:	e02c      	b.n	8001db0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d028      	beq.n	8001db0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d64:	f7fe feec 	bl	8000b40 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d21d      	bcs.n	8001db0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e00f      	b.n	8001dd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d0c3      	beq.n	8001d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e1a:	f023 030c 	bic.w	r3, r3, #12
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	68f9      	ldr	r1, [r7, #12]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e46:	f040 818b 	bne.w	8002160 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4ac1      	ldr	r2, [pc, #772]	; (8002154 <UART_SetConfig+0x37c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d005      	beq.n	8001e60 <UART_SetConfig+0x88>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4abf      	ldr	r2, [pc, #764]	; (8002158 <UART_SetConfig+0x380>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 80bd 	bne.w	8001fda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e60:	f7ff fd94 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8001e64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	461d      	mov	r5, r3
 8001e6a:	f04f 0600 	mov.w	r6, #0
 8001e6e:	46a8      	mov	r8, r5
 8001e70:	46b1      	mov	r9, r6
 8001e72:	eb18 0308 	adds.w	r3, r8, r8
 8001e76:	eb49 0409 	adc.w	r4, r9, r9
 8001e7a:	4698      	mov	r8, r3
 8001e7c:	46a1      	mov	r9, r4
 8001e7e:	eb18 0805 	adds.w	r8, r8, r5
 8001e82:	eb49 0906 	adc.w	r9, r9, r6
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e9a:	4688      	mov	r8, r1
 8001e9c:	4691      	mov	r9, r2
 8001e9e:	eb18 0005 	adds.w	r0, r8, r5
 8001ea2:	eb49 0106 	adc.w	r1, r9, r6
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	461d      	mov	r5, r3
 8001eac:	f04f 0600 	mov.w	r6, #0
 8001eb0:	196b      	adds	r3, r5, r5
 8001eb2:	eb46 0406 	adc.w	r4, r6, r6
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	f7fe fa39 	bl	8000330 <__aeabi_uldivmod>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	460c      	mov	r4, r1
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4ba5      	ldr	r3, [pc, #660]	; (800215c <UART_SetConfig+0x384>)
 8001ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	461d      	mov	r5, r3
 8001ed4:	f04f 0600 	mov.w	r6, #0
 8001ed8:	46a9      	mov	r9, r5
 8001eda:	46b2      	mov	sl, r6
 8001edc:	eb19 0309 	adds.w	r3, r9, r9
 8001ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	46a2      	mov	sl, r4
 8001ee8:	eb19 0905 	adds.w	r9, r9, r5
 8001eec:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ef0:	f04f 0100 	mov.w	r1, #0
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f04:	4689      	mov	r9, r1
 8001f06:	4692      	mov	sl, r2
 8001f08:	eb19 0005 	adds.w	r0, r9, r5
 8001f0c:	eb4a 0106 	adc.w	r1, sl, r6
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	461d      	mov	r5, r3
 8001f16:	f04f 0600 	mov.w	r6, #0
 8001f1a:	196b      	adds	r3, r5, r5
 8001f1c:	eb46 0406 	adc.w	r4, r6, r6
 8001f20:	461a      	mov	r2, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	f7fe fa04 	bl	8000330 <__aeabi_uldivmod>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b8b      	ldr	r3, [pc, #556]	; (800215c <UART_SetConfig+0x384>)
 8001f30:	fba3 1302 	umull	r1, r3, r3, r2
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	2164      	movs	r1, #100	; 0x64
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	3332      	adds	r3, #50	; 0x32
 8001f42:	4a86      	ldr	r2, [pc, #536]	; (800215c <UART_SetConfig+0x384>)
 8001f44:	fba2 2303 	umull	r2, r3, r2, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f50:	4498      	add	r8, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	461d      	mov	r5, r3
 8001f56:	f04f 0600 	mov.w	r6, #0
 8001f5a:	46a9      	mov	r9, r5
 8001f5c:	46b2      	mov	sl, r6
 8001f5e:	eb19 0309 	adds.w	r3, r9, r9
 8001f62:	eb4a 040a 	adc.w	r4, sl, sl
 8001f66:	4699      	mov	r9, r3
 8001f68:	46a2      	mov	sl, r4
 8001f6a:	eb19 0905 	adds.w	r9, r9, r5
 8001f6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f86:	4689      	mov	r9, r1
 8001f88:	4692      	mov	sl, r2
 8001f8a:	eb19 0005 	adds.w	r0, r9, r5
 8001f8e:	eb4a 0106 	adc.w	r1, sl, r6
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	461d      	mov	r5, r3
 8001f98:	f04f 0600 	mov.w	r6, #0
 8001f9c:	196b      	adds	r3, r5, r5
 8001f9e:	eb46 0406 	adc.w	r4, r6, r6
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	f7fe f9c3 	bl	8000330 <__aeabi_uldivmod>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <UART_SetConfig+0x384>)
 8001fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	2164      	movs	r1, #100	; 0x64
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	3332      	adds	r3, #50	; 0x32
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <UART_SetConfig+0x384>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	f003 0207 	and.w	r2, r3, #7
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4442      	add	r2, r8
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e26f      	b.n	80024ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fda:	f7ff fcc3 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 8001fde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	f04f 0600 	mov.w	r6, #0
 8001fe8:	46a8      	mov	r8, r5
 8001fea:	46b1      	mov	r9, r6
 8001fec:	eb18 0308 	adds.w	r3, r8, r8
 8001ff0:	eb49 0409 	adc.w	r4, r9, r9
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	46a1      	mov	r9, r4
 8001ff8:	eb18 0805 	adds.w	r8, r8, r5
 8001ffc:	eb49 0906 	adc.w	r9, r9, r6
 8002000:	f04f 0100 	mov.w	r1, #0
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800200c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002010:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002014:	4688      	mov	r8, r1
 8002016:	4691      	mov	r9, r2
 8002018:	eb18 0005 	adds.w	r0, r8, r5
 800201c:	eb49 0106 	adc.w	r1, r9, r6
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	461d      	mov	r5, r3
 8002026:	f04f 0600 	mov.w	r6, #0
 800202a:	196b      	adds	r3, r5, r5
 800202c:	eb46 0406 	adc.w	r4, r6, r6
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	f7fe f97c 	bl	8000330 <__aeabi_uldivmod>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	461a      	mov	r2, r3
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <UART_SetConfig+0x384>)
 8002040:	fba3 2302 	umull	r2, r3, r3, r2
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	461d      	mov	r5, r3
 800204e:	f04f 0600 	mov.w	r6, #0
 8002052:	46a9      	mov	r9, r5
 8002054:	46b2      	mov	sl, r6
 8002056:	eb19 0309 	adds.w	r3, r9, r9
 800205a:	eb4a 040a 	adc.w	r4, sl, sl
 800205e:	4699      	mov	r9, r3
 8002060:	46a2      	mov	sl, r4
 8002062:	eb19 0905 	adds.w	r9, r9, r5
 8002066:	eb4a 0a06 	adc.w	sl, sl, r6
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800207a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800207e:	4689      	mov	r9, r1
 8002080:	4692      	mov	sl, r2
 8002082:	eb19 0005 	adds.w	r0, r9, r5
 8002086:	eb4a 0106 	adc.w	r1, sl, r6
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	461d      	mov	r5, r3
 8002090:	f04f 0600 	mov.w	r6, #0
 8002094:	196b      	adds	r3, r5, r5
 8002096:	eb46 0406 	adc.w	r4, r6, r6
 800209a:	461a      	mov	r2, r3
 800209c:	4623      	mov	r3, r4
 800209e:	f7fe f947 	bl	8000330 <__aeabi_uldivmod>
 80020a2:	4603      	mov	r3, r0
 80020a4:	460c      	mov	r4, r1
 80020a6:	461a      	mov	r2, r3
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <UART_SetConfig+0x384>)
 80020aa:	fba3 1302 	umull	r1, r3, r3, r2
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2164      	movs	r1, #100	; 0x64
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	3332      	adds	r3, #50	; 0x32
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <UART_SetConfig+0x384>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ca:	4498      	add	r8, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	461d      	mov	r5, r3
 80020d0:	f04f 0600 	mov.w	r6, #0
 80020d4:	46a9      	mov	r9, r5
 80020d6:	46b2      	mov	sl, r6
 80020d8:	eb19 0309 	adds.w	r3, r9, r9
 80020dc:	eb4a 040a 	adc.w	r4, sl, sl
 80020e0:	4699      	mov	r9, r3
 80020e2:	46a2      	mov	sl, r4
 80020e4:	eb19 0905 	adds.w	r9, r9, r5
 80020e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002100:	4689      	mov	r9, r1
 8002102:	4692      	mov	sl, r2
 8002104:	eb19 0005 	adds.w	r0, r9, r5
 8002108:	eb4a 0106 	adc.w	r1, sl, r6
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	461d      	mov	r5, r3
 8002112:	f04f 0600 	mov.w	r6, #0
 8002116:	196b      	adds	r3, r5, r5
 8002118:	eb46 0406 	adc.w	r4, r6, r6
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	f7fe f906 	bl	8000330 <__aeabi_uldivmod>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	461a      	mov	r2, r3
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <UART_SetConfig+0x384>)
 800212c:	fba3 1302 	umull	r1, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	2164      	movs	r1, #100	; 0x64
 8002134:	fb01 f303 	mul.w	r3, r1, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <UART_SetConfig+0x384>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	f003 0207 	and.w	r2, r3, #7
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4442      	add	r2, r8
 8002150:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002152:	e1b2      	b.n	80024ba <UART_SetConfig+0x6e2>
 8002154:	40011000 	.word	0x40011000
 8002158:	40011400 	.word	0x40011400
 800215c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4ad7      	ldr	r2, [pc, #860]	; (80024c4 <UART_SetConfig+0x6ec>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d005      	beq.n	8002176 <UART_SetConfig+0x39e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4ad6      	ldr	r2, [pc, #856]	; (80024c8 <UART_SetConfig+0x6f0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	f040 80d1 	bne.w	8002318 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002176:	f7ff fc09 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 800217a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	469a      	mov	sl, r3
 8002180:	f04f 0b00 	mov.w	fp, #0
 8002184:	46d0      	mov	r8, sl
 8002186:	46d9      	mov	r9, fp
 8002188:	eb18 0308 	adds.w	r3, r8, r8
 800218c:	eb49 0409 	adc.w	r4, r9, r9
 8002190:	4698      	mov	r8, r3
 8002192:	46a1      	mov	r9, r4
 8002194:	eb18 080a 	adds.w	r8, r8, sl
 8002198:	eb49 090b 	adc.w	r9, r9, fp
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021b0:	4688      	mov	r8, r1
 80021b2:	4691      	mov	r9, r2
 80021b4:	eb1a 0508 	adds.w	r5, sl, r8
 80021b8:	eb4b 0609 	adc.w	r6, fp, r9
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f04f 0400 	mov.w	r4, #0
 80021ce:	0094      	lsls	r4, r2, #2
 80021d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021d4:	008b      	lsls	r3, r1, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	4623      	mov	r3, r4
 80021da:	4628      	mov	r0, r5
 80021dc:	4631      	mov	r1, r6
 80021de:	f7fe f8a7 	bl	8000330 <__aeabi_uldivmod>
 80021e2:	4603      	mov	r3, r0
 80021e4:	460c      	mov	r4, r1
 80021e6:	461a      	mov	r2, r3
 80021e8:	4bb8      	ldr	r3, [pc, #736]	; (80024cc <UART_SetConfig+0x6f4>)
 80021ea:	fba3 2302 	umull	r2, r3, r3, r2
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	469b      	mov	fp, r3
 80021f8:	f04f 0c00 	mov.w	ip, #0
 80021fc:	46d9      	mov	r9, fp
 80021fe:	46e2      	mov	sl, ip
 8002200:	eb19 0309 	adds.w	r3, r9, r9
 8002204:	eb4a 040a 	adc.w	r4, sl, sl
 8002208:	4699      	mov	r9, r3
 800220a:	46a2      	mov	sl, r4
 800220c:	eb19 090b 	adds.w	r9, r9, fp
 8002210:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002214:	f04f 0100 	mov.w	r1, #0
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002228:	4689      	mov	r9, r1
 800222a:	4692      	mov	sl, r2
 800222c:	eb1b 0509 	adds.w	r5, fp, r9
 8002230:	eb4c 060a 	adc.w	r6, ip, sl
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4619      	mov	r1, r3
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	f04f 0400 	mov.w	r4, #0
 8002246:	0094      	lsls	r4, r2, #2
 8002248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800224c:	008b      	lsls	r3, r1, #2
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	4628      	mov	r0, r5
 8002254:	4631      	mov	r1, r6
 8002256:	f7fe f86b 	bl	8000330 <__aeabi_uldivmod>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	461a      	mov	r2, r3
 8002260:	4b9a      	ldr	r3, [pc, #616]	; (80024cc <UART_SetConfig+0x6f4>)
 8002262:	fba3 1302 	umull	r1, r3, r3, r2
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2164      	movs	r1, #100	; 0x64
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	3332      	adds	r3, #50	; 0x32
 8002274:	4a95      	ldr	r2, [pc, #596]	; (80024cc <UART_SetConfig+0x6f4>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	4498      	add	r8, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	469b      	mov	fp, r3
 8002286:	f04f 0c00 	mov.w	ip, #0
 800228a:	46d9      	mov	r9, fp
 800228c:	46e2      	mov	sl, ip
 800228e:	eb19 0309 	adds.w	r3, r9, r9
 8002292:	eb4a 040a 	adc.w	r4, sl, sl
 8002296:	4699      	mov	r9, r3
 8002298:	46a2      	mov	sl, r4
 800229a:	eb19 090b 	adds.w	r9, r9, fp
 800229e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022b6:	4689      	mov	r9, r1
 80022b8:	4692      	mov	sl, r2
 80022ba:	eb1b 0509 	adds.w	r5, fp, r9
 80022be:	eb4c 060a 	adc.w	r6, ip, sl
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	0094      	lsls	r4, r2, #2
 80022d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022da:	008b      	lsls	r3, r1, #2
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	4628      	mov	r0, r5
 80022e2:	4631      	mov	r1, r6
 80022e4:	f7fe f824 	bl	8000330 <__aeabi_uldivmod>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b77      	ldr	r3, [pc, #476]	; (80024cc <UART_SetConfig+0x6f4>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	; 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	3332      	adds	r3, #50	; 0x32
 8002302:	4a72      	ldr	r2, [pc, #456]	; (80024cc <UART_SetConfig+0x6f4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4442      	add	r2, r8
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e0d0      	b.n	80024ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002318:	f7ff fb24 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 800231c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	469a      	mov	sl, r3
 8002322:	f04f 0b00 	mov.w	fp, #0
 8002326:	46d0      	mov	r8, sl
 8002328:	46d9      	mov	r9, fp
 800232a:	eb18 0308 	adds.w	r3, r8, r8
 800232e:	eb49 0409 	adc.w	r4, r9, r9
 8002332:	4698      	mov	r8, r3
 8002334:	46a1      	mov	r9, r4
 8002336:	eb18 080a 	adds.w	r8, r8, sl
 800233a:	eb49 090b 	adc.w	r9, r9, fp
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800234a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800234e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002352:	4688      	mov	r8, r1
 8002354:	4691      	mov	r9, r2
 8002356:	eb1a 0508 	adds.w	r5, sl, r8
 800235a:	eb4b 0609 	adc.w	r6, fp, r9
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4619      	mov	r1, r3
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	f04f 0400 	mov.w	r4, #0
 8002370:	0094      	lsls	r4, r2, #2
 8002372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002376:	008b      	lsls	r3, r1, #2
 8002378:	461a      	mov	r2, r3
 800237a:	4623      	mov	r3, r4
 800237c:	4628      	mov	r0, r5
 800237e:	4631      	mov	r1, r6
 8002380:	f7fd ffd6 	bl	8000330 <__aeabi_uldivmod>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
 8002388:	461a      	mov	r2, r3
 800238a:	4b50      	ldr	r3, [pc, #320]	; (80024cc <UART_SetConfig+0x6f4>)
 800238c:	fba3 2302 	umull	r2, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	469b      	mov	fp, r3
 800239a:	f04f 0c00 	mov.w	ip, #0
 800239e:	46d9      	mov	r9, fp
 80023a0:	46e2      	mov	sl, ip
 80023a2:	eb19 0309 	adds.w	r3, r9, r9
 80023a6:	eb4a 040a 	adc.w	r4, sl, sl
 80023aa:	4699      	mov	r9, r3
 80023ac:	46a2      	mov	sl, r4
 80023ae:	eb19 090b 	adds.w	r9, r9, fp
 80023b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ca:	4689      	mov	r9, r1
 80023cc:	4692      	mov	sl, r2
 80023ce:	eb1b 0509 	adds.w	r5, fp, r9
 80023d2:	eb4c 060a 	adc.w	r6, ip, sl
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	f04f 0400 	mov.w	r4, #0
 80023e8:	0094      	lsls	r4, r2, #2
 80023ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	4628      	mov	r0, r5
 80023f6:	4631      	mov	r1, r6
 80023f8:	f7fd ff9a 	bl	8000330 <__aeabi_uldivmod>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	461a      	mov	r2, r3
 8002402:	4b32      	ldr	r3, [pc, #200]	; (80024cc <UART_SetConfig+0x6f4>)
 8002404:	fba3 1302 	umull	r1, r3, r3, r2
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	2164      	movs	r1, #100	; 0x64
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	3332      	adds	r3, #50	; 0x32
 8002416:	4a2d      	ldr	r2, [pc, #180]	; (80024cc <UART_SetConfig+0x6f4>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002422:	4498      	add	r8, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	469b      	mov	fp, r3
 8002428:	f04f 0c00 	mov.w	ip, #0
 800242c:	46d9      	mov	r9, fp
 800242e:	46e2      	mov	sl, ip
 8002430:	eb19 0309 	adds.w	r3, r9, r9
 8002434:	eb4a 040a 	adc.w	r4, sl, sl
 8002438:	4699      	mov	r9, r3
 800243a:	46a2      	mov	sl, r4
 800243c:	eb19 090b 	adds.w	r9, r9, fp
 8002440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002458:	4689      	mov	r9, r1
 800245a:	4692      	mov	sl, r2
 800245c:	eb1b 0509 	adds.w	r5, fp, r9
 8002460:	eb4c 060a 	adc.w	r6, ip, sl
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	f04f 0400 	mov.w	r4, #0
 8002476:	0094      	lsls	r4, r2, #2
 8002478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800247c:	008b      	lsls	r3, r1, #2
 800247e:	461a      	mov	r2, r3
 8002480:	4623      	mov	r3, r4
 8002482:	4628      	mov	r0, r5
 8002484:	4631      	mov	r1, r6
 8002486:	f7fd ff53 	bl	8000330 <__aeabi_uldivmod>
 800248a:	4603      	mov	r3, r0
 800248c:	460c      	mov	r4, r1
 800248e:	461a      	mov	r2, r3
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <UART_SetConfig+0x6f4>)
 8002492:	fba3 1302 	umull	r1, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2164      	movs	r1, #100	; 0x64
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	3332      	adds	r3, #50	; 0x32
 80024a4:	4a09      	ldr	r2, [pc, #36]	; (80024cc <UART_SetConfig+0x6f4>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4442      	add	r2, r8
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	e7ff      	b.n	80024ba <UART_SetConfig+0x6e2>
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40011400 	.word	0x40011400
 80024cc:	51eb851f 	.word	0x51eb851f

080024d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d4:	480d      	ldr	r0, [pc, #52]	; (800250c <LoopForever+0x6>)
  ldr r1, =_edata
 80024d6:	490e      	ldr	r1, [pc, #56]	; (8002510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d8:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <LoopForever+0xe>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024dc:	e002      	b.n	80024e4 <LoopCopyDataInit>

080024de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e2:	3304      	adds	r3, #4

080024e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e8:	d3f9      	bcc.n	80024de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ea:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024ec:	4c0b      	ldr	r4, [pc, #44]	; (800251c <LoopForever+0x16>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f0:	e001      	b.n	80024f6 <LoopFillZerobss>

080024f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f4:	3204      	adds	r2, #4

080024f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f8:	d3fb      	bcc.n	80024f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024fa:	f7fe faa5 	bl	8000a48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024fe:	f002 fe6b 	bl	80051d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002502:	f7fe f8d5 	bl	80006b0 <main>

08002506 <LoopForever>:

LoopForever:
    b LoopForever
 8002506:	e7fe      	b.n	8002506 <LoopForever>
  ldr   r0, =_estack
 8002508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002514:	08005be0 	.word	0x08005be0
  ldr r2, =_sbss
 8002518:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800251c:	2001574c 	.word	0x2001574c

08002520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>

08002522 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a07      	ldr	r2, [pc, #28]	; (800255c <vApplicationGetIdleTaskMemory+0x2c>)
 8002540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <vApplicationGetIdleTaskMemory+0x30>)
 8002546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2282      	movs	r2, #130	; 0x82
 800254c:	601a      	str	r2, [r3, #0]
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000009c 	.word	0x2000009c
 8002560:	200000f4 	.word	0x200000f4

08002564 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f103 0208 	add.w	r2, r3, #8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 0208 	add.w	r2, r3, #8
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0208 	add.w	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d103      	bne.n	8002626 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e00c      	b.n	8002640 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3308      	adds	r3, #8
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e002      	b.n	8002634 <vListInsert+0x2e>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	429a      	cmp	r2, r3
 800263e:	d2f6      	bcs.n	800262e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6852      	ldr	r2, [r2, #4]
 8002698:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d103      	bne.n	80026ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1e5a      	subs	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	e7fe      	b.n	80026f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <xTaskCreateStatic+0x42>
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e7fe      	b.n	800270c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800270e:	2358      	movs	r3, #88	; 0x58
 8002710:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b58      	cmp	r3, #88	; 0x58
 8002716:	d009      	beq.n	800272c <xTaskCreateStatic+0x60>
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e7fe      	b.n	800272a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	2b00      	cmp	r3, #0
 8002730:	d01e      	beq.n	8002770 <xTaskCreateStatic+0xa4>
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01b      	beq.n	8002770 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002740:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800274a:	2300      	movs	r3, #0
 800274c:	9303      	str	r3, [sp, #12]
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f850 	bl	8002808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800276a:	f000 f8d3 	bl	8002914 <prvAddNewTaskToReadyList>
 800276e:	e001      	b.n	8002774 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002774:	697b      	ldr	r3, [r7, #20]
	}
 8002776:	4618      	mov	r0, r3
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800277e:	b580      	push	{r7, lr}
 8002780:	b08c      	sub	sp, #48	; 0x30
 8002782:	af04      	add	r7, sp, #16
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4618      	mov	r0, r3
 8002794:	f000 ffaa 	bl	80036ec <pvPortMalloc>
 8002798:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027a0:	2058      	movs	r0, #88	; 0x58
 80027a2:	f000 ffa3 	bl	80036ec <pvPortMalloc>
 80027a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
 80027b4:	e005      	b.n	80027c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f001 f85e 	bl	8003878 <vPortFree>
 80027bc:	e001      	b.n	80027c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d017      	beq.n	80027f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027d0:	88fa      	ldrh	r2, [r7, #6]
 80027d2:	2300      	movs	r3, #0
 80027d4:	9303      	str	r3, [sp, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	9302      	str	r3, [sp, #8]
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f80e 	bl	8002808 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027ec:	69f8      	ldr	r0, [r7, #28]
 80027ee:	f000 f891 	bl	8002914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e002      	b.n	80027fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
 80027fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80027fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	461a      	mov	r2, r3
 8002820:	21a5      	movs	r1, #165	; 0xa5
 8002822:	f002 fd17 	bl	8005254 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002830:	3b01      	subs	r3, #1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f023 0307 	bic.w	r3, r3, #7
 800283e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <prvInitialiseNewTask+0x56>
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e7fe      	b.n	800285c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e012      	b.n	800288a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	7819      	ldrb	r1, [r3, #0]
 800286c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	3334      	adds	r3, #52	; 0x34
 8002874:	460a      	mov	r2, r1
 8002876:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	2b09      	cmp	r3, #9
 800288e:	d9e9      	bls.n	8002864 <prvInitialiseNewTask+0x5c>
 8002890:	e000      	b.n	8002894 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002892:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d901      	bls.n	80028a6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028a2:	2304      	movs	r3, #4
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ba:	3304      	adds	r3, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe71 	bl	80025a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	3318      	adds	r3, #24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fe6c 	bl	80025a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f1c3 0205 	rsb	r2, r3, #5
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	2200      	movs	r2, #0
 80028e6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	68f9      	ldr	r1, [r7, #12]
 80028f4:	69b8      	ldr	r0, [r7, #24]
 80028f6:	f000 fc6d 	bl	80031d4 <pxPortInitialiseStack>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800291c:	f000 fd7e 	bl	800341c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <prvAddNewTaskToReadyList+0xfc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a3a      	ldr	r2, [pc, #232]	; (8002a10 <prvAddNewTaskToReadyList+0xfc>)
 8002928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <prvAddNewTaskToReadyList+0x100>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002932:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <prvAddNewTaskToReadyList+0x100>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <prvAddNewTaskToReadyList+0xfc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d110      	bne.n	8002962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002940:	f000 fb10 	bl	8002f64 <prvInitialiseTaskLists>
 8002944:	e00d      	b.n	8002962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002946:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <prvAddNewTaskToReadyList+0x104>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <prvAddNewTaskToReadyList+0x100>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	429a      	cmp	r2, r3
 800295a:	d802      	bhi.n	8002962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800295c:	4a2d      	ldr	r2, [pc, #180]	; (8002a14 <prvAddNewTaskToReadyList+0x100>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002962:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <prvAddNewTaskToReadyList+0x108>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3301      	adds	r3, #1
 8002968:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <prvAddNewTaskToReadyList+0x108>)
 800296a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <prvAddNewTaskToReadyList+0x108>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <prvAddNewTaskToReadyList+0x94>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f002 f9c1 	bl	8004d04 <SEGGER_SYSVIEW_OnTaskCreate>
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	461d      	mov	r5, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461c      	mov	r4, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1ae3      	subs	r3, r4, r3
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	462b      	mov	r3, r5
 80029a4:	f001 f924 	bl	8003bf0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fa32 	bl	8004e14 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	2201      	movs	r2, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <prvAddNewTaskToReadyList+0x10c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4313      	orrs	r3, r2
 80029be:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <prvAddNewTaskToReadyList+0x10c>)
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <prvAddNewTaskToReadyList+0x110>)
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f7ff fdf0 	bl	80025be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029de:	f000 fd4b 	bl	8003478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <prvAddNewTaskToReadyList+0x104>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <prvAddNewTaskToReadyList+0x100>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <prvAddNewTaskToReadyList+0x114>)
 80029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a10:	200003d4 	.word	0x200003d4
 8002a14:	200002fc 	.word	0x200002fc
 8002a18:	200003e0 	.word	0x200003e0
 8002a1c:	200003f0 	.word	0x200003f0
 8002a20:	200003dc 	.word	0x200003dc
 8002a24:	20000300 	.word	0x20000300
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01a      	beq.n	8002a74 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <vTaskDelay+0x68>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <vTaskDelay+0x2e>
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	e7fe      	b.n	8002a58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a5a:	f000 f87d 	bl	8002b58 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	2023      	movs	r0, #35	; 0x23
 8002a62:	f001 fd5d 	bl	8004520 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fb3b 	bl	80030e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a6e:	f000 f881 	bl	8002b74 <xTaskResumeAll>
 8002a72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <vTaskDelay+0x6c>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200003fc 	.word	0x200003fc
 8002a98:	e000ed04 	.word	0xe000ed04

08002a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aaa:	463a      	mov	r2, r7
 8002aac:	1d39      	adds	r1, r7, #4
 8002aae:	f107 0308 	add.w	r3, r7, #8
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fd3c 	bl	8002530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	460a      	mov	r2, r1
 8002aca:	491d      	ldr	r1, [pc, #116]	; (8002b40 <vTaskStartScheduler+0xa4>)
 8002acc:	481d      	ldr	r0, [pc, #116]	; (8002b44 <vTaskStartScheduler+0xa8>)
 8002ace:	f7ff fdfd 	bl	80026cc <xTaskCreateStatic>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <vTaskStartScheduler+0xac>)
 8002ad6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <vTaskStartScheduler+0xac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	e001      	b.n	8002aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d115      	bne.n	8002b1c <vTaskStartScheduler+0x80>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <vTaskStartScheduler+0xb0>)
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <vTaskStartScheduler+0xb4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <vTaskStartScheduler+0xb8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b16:	f000 fbe3 	bl	80032e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b1a:	e00d      	b.n	8002b38 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b22:	d109      	bne.n	8002b38 <vTaskStartScheduler+0x9c>
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e7fe      	b.n	8002b36 <vTaskStartScheduler+0x9a>
}
 8002b38:	bf00      	nop
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	08005aac 	.word	0x08005aac
 8002b44:	08002f35 	.word	0x08002f35
 8002b48:	200003f8 	.word	0x200003f8
 8002b4c:	200003f4 	.word	0x200003f4
 8002b50:	200003e0 	.word	0x200003e0
 8002b54:	200003d8 	.word	0x200003d8

08002b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <vTaskSuspendAll+0x18>)
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	200003fc 	.word	0x200003fc

08002b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <xTaskResumeAll+0x2a>
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	e7fe      	b.n	8002b9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b9e:	f000 fc3d 	bl	800341c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <xTaskResumeAll+0x11c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d165      	bne.n	8002c80 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <xTaskResumeAll+0x120>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d061      	beq.n	8002c80 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bbc:	e032      	b.n	8002c24 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <xTaskResumeAll+0x124>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3318      	adds	r3, #24
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fd54 	bl	8002678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd4f 	bl	8002678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 f919 	bl	8004e14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	2201      	movs	r2, #1
 8002be8:	409a      	lsls	r2, r3
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <xTaskResumeAll+0x128>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <xTaskResumeAll+0x128>)
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <xTaskResumeAll+0x12c>)
 8002c02:	441a      	add	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f7ff fcd7 	bl	80025be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <xTaskResumeAll+0x130>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <xTaskResumeAll+0x134>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <xTaskResumeAll+0x124>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c8      	bne.n	8002bbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c32:	f000 fa31 	bl	8003098 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <xTaskResumeAll+0x138>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c42:	f000 f849 	bl	8002cd8 <xTaskIncrementTick>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <xTaskResumeAll+0x134>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f1      	bne.n	8002c42 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <xTaskResumeAll+0x138>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <xTaskResumeAll+0x134>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d009      	beq.n	8002c80 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <xTaskResumeAll+0x13c>)
 8002c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c80:	f000 fbfa 	bl	8003478 <vPortExitCritical>

	return xAlreadyYielded;
 8002c84:	68bb      	ldr	r3, [r7, #8]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200003fc 	.word	0x200003fc
 8002c94:	200003d4 	.word	0x200003d4
 8002c98:	20000394 	.word	0x20000394
 8002c9c:	200003dc 	.word	0x200003dc
 8002ca0:	20000300 	.word	0x20000300
 8002ca4:	200002fc 	.word	0x200002fc
 8002ca8:	200003e8 	.word	0x200003e8
 8002cac:	200003e4 	.word	0x200003e4
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cba:	f000 fc93 	bl	80035e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <xTaskGetTickCountFromISR+0x20>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002cc8:	683b      	ldr	r3, [r7, #0]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200003d8 	.word	0x200003d8

08002cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce2:	4b52      	ldr	r3, [pc, #328]	; (8002e2c <xTaskIncrementTick+0x154>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8090 	bne.w	8002e0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <xTaskIncrementTick+0x158>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <xTaskIncrementTick+0x158>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d11f      	bne.n	8002d40 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <xTaskIncrementTick+0x15c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <xTaskIncrementTick+0x46>
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	e7fe      	b.n	8002d1c <xTaskIncrementTick+0x44>
 8002d1e:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <xTaskIncrementTick+0x15c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <xTaskIncrementTick+0x160>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a42      	ldr	r2, [pc, #264]	; (8002e34 <xTaskIncrementTick+0x15c>)
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <xTaskIncrementTick+0x160>)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <xTaskIncrementTick+0x164>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a40      	ldr	r2, [pc, #256]	; (8002e3c <xTaskIncrementTick+0x164>)
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	f000 f9ac 	bl	8003098 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <xTaskIncrementTick+0x168>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d351      	bcc.n	8002dee <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d4a:	4b3a      	ldr	r3, [pc, #232]	; (8002e34 <xTaskIncrementTick+0x15c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <xTaskIncrementTick+0x80>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <xTaskIncrementTick+0x82>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5e:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <xTaskIncrementTick+0x168>)
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	601a      	str	r2, [r3, #0]
					break;
 8002d66:	e042      	b.n	8002dee <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <xTaskIncrementTick+0x15c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d203      	bcs.n	8002d88 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d80:	4a2f      	ldr	r2, [pc, #188]	; (8002e40 <xTaskIncrementTick+0x168>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
						break;
 8002d86:	e032      	b.n	8002dee <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fc73 	bl	8002678 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d004      	beq.n	8002da4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fc6a 	bl	8002678 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 f834 	bl	8004e14 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	2201      	movs	r2, #1
 8002db2:	409a      	lsls	r2, r3
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <xTaskIncrementTick+0x16c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <xTaskIncrementTick+0x16c>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <xTaskIncrementTick+0x170>)
 8002dcc:	441a      	add	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7ff fbf2 	bl	80025be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <xTaskIncrementTick+0x174>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3b0      	bcc.n	8002d4a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dec:	e7ad      	b.n	8002d4a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dee:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <xTaskIncrementTick+0x174>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	4914      	ldr	r1, [pc, #80]	; (8002e48 <xTaskIncrementTick+0x170>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d907      	bls.n	8002e16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e004      	b.n	8002e16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <xTaskIncrementTick+0x178>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <xTaskIncrementTick+0x178>)
 8002e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <xTaskIncrementTick+0x17c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e22:	697b      	ldr	r3, [r7, #20]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200003fc 	.word	0x200003fc
 8002e30:	200003d8 	.word	0x200003d8
 8002e34:	2000038c 	.word	0x2000038c
 8002e38:	20000390 	.word	0x20000390
 8002e3c:	200003ec 	.word	0x200003ec
 8002e40:	200003f4 	.word	0x200003f4
 8002e44:	200003dc 	.word	0x200003dc
 8002e48:	20000300 	.word	0x20000300
 8002e4c:	200002fc 	.word	0x200002fc
 8002e50:	200003e4 	.word	0x200003e4
 8002e54:	200003e8 	.word	0x200003e8

08002e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <vTaskSwitchContext+0xc4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <vTaskSwitchContext+0xc8>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e6c:	e051      	b.n	8002f12 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <vTaskSwitchContext+0xc8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <vTaskSwitchContext+0xcc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f1c3 031f 	rsb	r3, r3, #31
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	4927      	ldr	r1, [pc, #156]	; (8002f28 <vTaskSwitchContext+0xd0>)
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e7fe      	b.n	8002eb0 <vTaskSwitchContext+0x58>
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <vTaskSwitchContext+0xd0>)
 8002ebe:	4413      	add	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d104      	bne.n	8002ee2 <vTaskSwitchContext+0x8a>
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <vTaskSwitchContext+0xd4>)
 8002eea:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <vTaskSwitchContext+0xd4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3334      	adds	r3, #52	; 0x34
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <vTaskSwitchContext+0xd8>)
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f002 f992 	bl	8005220 <memcmp>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <vTaskSwitchContext+0xb6>
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <vTaskSwitchContext+0xd4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 ff40 	bl	8004d8c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f0c:	e001      	b.n	8002f12 <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8002f0e:	f001 fedd 	bl	8004ccc <SEGGER_SYSVIEW_OnIdle>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200003fc 	.word	0x200003fc
 8002f20:	200003e8 	.word	0x200003e8
 8002f24:	200003dc 	.word	0x200003dc
 8002f28:	20000300 	.word	0x20000300
 8002f2c:	200002fc 	.word	0x200002fc
 8002f30:	08005aac 	.word	0x08005aac

08002f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f3c:	f000 f852 	bl	8002fe4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <prvIdleTask+0x28>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d9f9      	bls.n	8002f3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <prvIdleTask+0x2c>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f58:	e7f0      	b.n	8002f3c <prvIdleTask+0x8>
 8002f5a:	bf00      	nop
 8002f5c:	20000300 	.word	0x20000300
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	e00c      	b.n	8002f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <prvInitialiseTaskLists+0x60>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff faf0 	bl	8002564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3301      	adds	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d9ef      	bls.n	8002f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <prvInitialiseTaskLists+0x64>)
 8002f92:	f7ff fae7 	bl	8002564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <prvInitialiseTaskLists+0x68>)
 8002f98:	f7ff fae4 	bl	8002564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <prvInitialiseTaskLists+0x6c>)
 8002f9e:	f7ff fae1 	bl	8002564 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fa2:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <prvInitialiseTaskLists+0x70>)
 8002fa4:	f7ff fade 	bl	8002564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fa8:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <prvInitialiseTaskLists+0x74>)
 8002faa:	f7ff fadb 	bl	8002564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <prvInitialiseTaskLists+0x78>)
 8002fb0:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <prvInitialiseTaskLists+0x64>)
 8002fb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <prvInitialiseTaskLists+0x7c>)
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <prvInitialiseTaskLists+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000300 	.word	0x20000300
 8002fc8:	20000364 	.word	0x20000364
 8002fcc:	20000378 	.word	0x20000378
 8002fd0:	20000394 	.word	0x20000394
 8002fd4:	200003a8 	.word	0x200003a8
 8002fd8:	200003c0 	.word	0x200003c0
 8002fdc:	2000038c 	.word	0x2000038c
 8002fe0:	20000390 	.word	0x20000390

08002fe4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fea:	e019      	b.n	8003020 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fec:	f000 fa16 	bl	800341c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <prvCheckTasksWaitingTermination+0x4c>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fb3b 	bl	8002678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <prvCheckTasksWaitingTermination+0x50>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <prvCheckTasksWaitingTermination+0x50>)
 800300a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <prvCheckTasksWaitingTermination+0x54>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3b01      	subs	r3, #1
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <prvCheckTasksWaitingTermination+0x54>)
 8003014:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003016:	f000 fa2f 	bl	8003478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f80e 	bl	800303c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <prvCheckTasksWaitingTermination+0x54>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e1      	bne.n	8002fec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	200003a8 	.word	0x200003a8
 8003034:	200003d4 	.word	0x200003d4
 8003038:	200003bc 	.word	0x200003bc

0800303c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fc10 	bl	8003878 <vPortFree>
				vPortFree( pxTCB );
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fc0d 	bl	8003878 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800305e:	e017      	b.n	8003090 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003066:	2b01      	cmp	r3, #1
 8003068:	d103      	bne.n	8003072 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fc04 	bl	8003878 <vPortFree>
	}
 8003070:	e00e      	b.n	8003090 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003078:	2b02      	cmp	r3, #2
 800307a:	d009      	beq.n	8003090 <prvDeleteTCB+0x54>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e7fe      	b.n	800308e <prvDeleteTCB+0x52>
	}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800309e:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <prvResetNextTaskUnblockTime+0x44>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <prvResetNextTaskUnblockTime+0x14>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <prvResetNextTaskUnblockTime+0x16>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <prvResetNextTaskUnblockTime+0x48>)
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030ba:	e008      	b.n	80030ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030bc:	4b07      	ldr	r3, [pc, #28]	; (80030dc <prvResetNextTaskUnblockTime+0x44>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <prvResetNextTaskUnblockTime+0x48>)
 80030cc:	6013      	str	r3, [r2, #0]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	2000038c 	.word	0x2000038c
 80030e0:	200003f4 	.word	0x200003f4

080030e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fabc 	bl	8002678 <uxListRemove>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4013      	ands	r3, r2
 800311a:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800311c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d110      	bne.n	8003148 <prvAddCurrentTaskToDelayedList+0x64>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	211b      	movs	r1, #27
 8003132:	4618      	mov	r0, r3
 8003134:	f001 feb2 	bl	8004e9c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4820      	ldr	r0, [pc, #128]	; (80031c4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003142:	f7ff fa3c 	bl	80025be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003146:	e032      	b.n	80031ae <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d20f      	bcs.n	8003180 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2104      	movs	r1, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fe98 	bl	8004e9c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f7ff fa44 	bl	8002606 <vListInsert>
}
 800317e:	e016      	b.n	80031ae <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2104      	movs	r1, #4
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fe88 	bl	8004e9c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3304      	adds	r3, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f7ff fa34 	bl	8002606 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d202      	bcs.n	80031ae <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6013      	str	r3, [r2, #0]
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200003d8 	.word	0x200003d8
 80031bc:	200002fc 	.word	0x200002fc
 80031c0:	200003dc 	.word	0x200003dc
 80031c4:	200003c0 	.word	0x200003c0
 80031c8:	20000390 	.word	0x20000390
 80031cc:	2000038c 	.word	0x2000038c
 80031d0:	200003f4 	.word	0x200003f4

080031d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	3b04      	subs	r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3b04      	subs	r3, #4
 80031f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f023 0201 	bic.w	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3b04      	subs	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <pxPortInitialiseStack+0x64>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3b14      	subs	r3, #20
 800320e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3b04      	subs	r3, #4
 800321a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f06f 0202 	mvn.w	r2, #2
 8003222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3b20      	subs	r3, #32
 8003228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	0800323d 	.word	0x0800323d

0800323c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <prvTaskExitError+0x50>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d009      	beq.n	8003264 <prvTaskExitError+0x28>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e7fe      	b.n	8003262 <prvTaskExitError+0x26>
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003276:	bf00      	nop
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0fc      	beq.n	8003278 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c

08003290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <pxCurrentTCBConst2>)
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	6808      	ldr	r0, [r1, #0]
 8003296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329a:	f380 8809 	msr	PSP, r0
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f380 8811 	msr	BASEPRI, r0
 80032aa:	4770      	bx	lr
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst2>:
 80032b0:	200002fc 	.word	0x200002fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80032b8:	4808      	ldr	r0, [pc, #32]	; (80032dc <prvPortStartFirstTask+0x24>)
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f380 8808 	msr	MSP, r0
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8814 	msr	CONTROL, r0
 80032ca:	b662      	cpsie	i
 80032cc:	b661      	cpsie	f
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	df00      	svc	0
 80032d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032da:	bf00      	nop
 80032dc:	e000ed08 	.word	0xe000ed08

080032e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032e6:	4b44      	ldr	r3, [pc, #272]	; (80033f8 <xPortStartScheduler+0x118>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a44      	ldr	r2, [pc, #272]	; (80033fc <xPortStartScheduler+0x11c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d109      	bne.n	8003304 <xPortStartScheduler+0x24>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e7fe      	b.n	8003302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003304:	4b3c      	ldr	r3, [pc, #240]	; (80033f8 <xPortStartScheduler+0x118>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <xPortStartScheduler+0x120>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d109      	bne.n	8003322 <xPortStartScheduler+0x42>
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e7fe      	b.n	8003320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <xPortStartScheduler+0x124>)
 8003324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <xPortStartScheduler+0x128>)
 8003348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <xPortStartScheduler+0x12c>)
 800334c:	2207      	movs	r2, #7
 800334e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003350:	e009      	b.n	8003366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <xPortStartScheduler+0x12c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <xPortStartScheduler+0x12c>)
 800335a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d0ef      	beq.n	8003352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <xPortStartScheduler+0x12c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	d009      	beq.n	8003392 <xPortStartScheduler+0xb2>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	e7fe      	b.n	8003390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <xPortStartScheduler+0x12c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <xPortStartScheduler+0x12c>)
 800339a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <xPortStartScheduler+0x12c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033a4:	4a19      	ldr	r2, [pc, #100]	; (800340c <xPortStartScheduler+0x12c>)
 80033a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <xPortStartScheduler+0x130>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a16      	ldr	r2, [pc, #88]	; (8003410 <xPortStartScheduler+0x130>)
 80033b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <xPortStartScheduler+0x130>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <xPortStartScheduler+0x130>)
 80033c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80033c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80033c8:	f000 f8de 	bl	8003588 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <xPortStartScheduler+0x134>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80033d2:	f000 f8fd 	bl	80035d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <xPortStartScheduler+0x138>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <xPortStartScheduler+0x138>)
 80033dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80033e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80033e2:	f7ff ff69 	bl	80032b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80033e6:	f7ff fd37 	bl	8002e58 <vTaskSwitchContext>
	prvTaskExitError();
 80033ea:	f7ff ff27 	bl	800323c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed00 	.word	0xe000ed00
 80033fc:	410fc271 	.word	0x410fc271
 8003400:	410fc270 	.word	0x410fc270
 8003404:	e000e400 	.word	0xe000e400
 8003408:	20000400 	.word	0x20000400
 800340c:	20000404 	.word	0x20000404
 8003410:	e000ed20 	.word	0xe000ed20
 8003414:	2000000c 	.word	0x2000000c
 8003418:	e000ef34 	.word	0xe000ef34

0800341c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003434:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <vPortEnterCritical+0x54>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <vPortEnterCritical+0x54>)
 800343c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <vPortEnterCritical+0x54>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10e      	bne.n	8003464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <vPortEnterCritical+0x58>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d009      	beq.n	8003464 <vPortEnterCritical+0x48>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	e7fe      	b.n	8003462 <vPortEnterCritical+0x46>
	}
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	2000000c 	.word	0x2000000c
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <vPortExitCritical+0x4c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <vPortExitCritical+0x22>
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e7fe      	b.n	8003498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <vPortExitCritical+0x4c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <vPortExitCritical+0x4c>)
 80034a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <vPortExitCritical+0x4c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <vPortExitCritical+0x3e>
 80034ac:	2300      	movs	r3, #0
 80034ae:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	2000000c 	.word	0x2000000c
	...

080034d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80034d0:	f3ef 8009 	mrs	r0, PSP
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	4b15      	ldr	r3, [pc, #84]	; (8003530 <pxCurrentTCBConst>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f01e 0f10 	tst.w	lr, #16
 80034e0:	bf08      	it	eq
 80034e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ea:	6010      	str	r0, [r2, #0]
 80034ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034f4:	f380 8811 	msr	BASEPRI, r0
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f7ff fcaa 	bl	8002e58 <vTaskSwitchContext>
 8003504:	f04f 0000 	mov.w	r0, #0
 8003508:	f380 8811 	msr	BASEPRI, r0
 800350c:	bc09      	pop	{r0, r3}
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	6808      	ldr	r0, [r1, #0]
 8003512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003516:	f01e 0f10 	tst.w	lr, #16
 800351a:	bf08      	it	eq
 800351c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003520:	f380 8809 	msr	PSP, r0
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst>:
 8003530:	200002fc 	.word	0x200002fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	__asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003550:	f001 fb42 	bl	8004bd8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003554:	f7ff fbc0 	bl	8002cd8 <xTaskIncrementTick>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800355e:	f001 fb99 	bl	8004c94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <xPortSysTickHandler+0x4c>)
 8003564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e001      	b.n	8003570 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800356c:	f001 fb76 	bl	8004c5c <SEGGER_SYSVIEW_RecordExitISR>
 8003570:	2300      	movs	r3, #0
 8003572:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <vPortSetupTimerInterrupt+0x34>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <vPortSetupTimerInterrupt+0x38>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <vPortSetupTimerInterrupt+0x3c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <vPortSetupTimerInterrupt+0x40>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	4a09      	ldr	r2, [pc, #36]	; (80035cc <vPortSetupTimerInterrupt+0x44>)
 80035a6:	3b01      	subs	r3, #1
 80035a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <vPortSetupTimerInterrupt+0x34>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010
 80035c0:	e000e018 	.word	0xe000e018
 80035c4:	20000000 	.word	0x20000000
 80035c8:	10624dd3 	.word	0x10624dd3
 80035cc:	e000e014 	.word	0xe000e014

080035d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80035d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80035e0 <vPortEnableVFP+0x10>
 80035d4:	6801      	ldr	r1, [r0, #0]
 80035d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035da:	6001      	str	r1, [r0, #0]
 80035dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80035de:	bf00      	nop
 80035e0:	e000ed88 	.word	0xe000ed88

080035e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 80035ea:	f000 f839 	bl	8003660 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80035ee:	f3ef 8305 	mrs	r3, IPSR
 80035f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b0f      	cmp	r3, #15
 80035f8:	d913      	bls.n	8003622 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035fa:	4a15      	ldr	r2, [pc, #84]	; (8003650 <vPortValidateInterruptPriority+0x6c>)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <vPortValidateInterruptPriority+0x70>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	7afa      	ldrb	r2, [r7, #11]
 800360a:	429a      	cmp	r2, r3
 800360c:	d209      	bcs.n	8003622 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	e7fe      	b.n	8003620 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003622:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <vPortValidateInterruptPriority+0x74>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <vPortValidateInterruptPriority+0x78>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d909      	bls.n	8003646 <vPortValidateInterruptPriority+0x62>
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	e7fe      	b.n	8003644 <vPortValidateInterruptPriority+0x60>
	}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	e000e3f0 	.word	0xe000e3f0
 8003654:	20000400 	.word	0x20000400
 8003658:	e000ed0c 	.word	0xe000ed0c
 800365c:	20000404 	.word	0x20000404

08003660 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <vSetVarulMaxPRIGROUPValue+0x84>)
 8003668:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	22ff      	movs	r2, #255	; 0xff
 800366e:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 800367a:	2207      	movs	r2, #7
 800367c:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800367e:	e009      	b.n	8003694 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003688:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d0ef      	beq.n	8003680 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1c3 0307 	rsb	r3, r3, #7
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d009      	beq.n	80036c0 <vSetVarulMaxPRIGROUPValue+0x60>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	e7fe      	b.n	80036be <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 80036c8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <vSetVarulMaxPRIGROUPValue+0x88>)
 80036d4:	6013      	str	r3, [r2, #0]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000e400 	.word	0xe000e400
 80036e8:	20000404 	.word	0x20000404

080036ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80036f8:	f7ff fa2e 	bl	8002b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <pvPortMalloc+0x178>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003704:	f000 f910 	bl	8003928 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003708:	4b57      	ldr	r3, [pc, #348]	; (8003868 <pvPortMalloc+0x17c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 808c 	bne.w	800382e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01c      	beq.n	8003756 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800371c:	2208      	movs	r2, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	3308      	adds	r3, #8
 8003736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <pvPortMalloc+0x6a>
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e7fe      	b.n	8003754 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d068      	beq.n	800382e <pvPortMalloc+0x142>
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <pvPortMalloc+0x180>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d863      	bhi.n	800382e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003766:	4b42      	ldr	r3, [pc, #264]	; (8003870 <pvPortMalloc+0x184>)
 8003768:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <pvPortMalloc+0x184>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003770:	e004      	b.n	800377c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d903      	bls.n	800378e <pvPortMalloc+0xa2>
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f1      	bne.n	8003772 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800378e:	4b35      	ldr	r3, [pc, #212]	; (8003864 <pvPortMalloc+0x178>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	429a      	cmp	r2, r3
 8003796:	d04a      	beq.n	800382e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2208      	movs	r2, #8
 800379e:	4413      	add	r3, r2
 80037a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	2308      	movs	r3, #8
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d91e      	bls.n	80037f8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <pvPortMalloc+0xf4>
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e7fe      	b.n	80037de <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	1ad2      	subs	r2, r2, r3
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80037f2:	69b8      	ldr	r0, [r7, #24]
 80037f4:	f000 f8fa 	bl	80039ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <pvPortMalloc+0x180>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	4a1a      	ldr	r2, [pc, #104]	; (800386c <pvPortMalloc+0x180>)
 8003804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <pvPortMalloc+0x180>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <pvPortMalloc+0x188>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d203      	bcs.n	800381a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <pvPortMalloc+0x180>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <pvPortMalloc+0x188>)
 8003818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <pvPortMalloc+0x17c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	431a      	orrs	r2, r3
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800382e:	f7ff f9a1 	bl	8002b74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003838:	f7fe fe73 	bl	8002522 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <pvPortMalloc+0x16e>
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e7fe      	b.n	8003858 <pvPortMalloc+0x16c>
	return pvReturn;
 800385a:	69fb      	ldr	r3, [r7, #28]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20013010 	.word	0x20013010
 8003868:	2001301c 	.word	0x2001301c
 800386c:	20013014 	.word	0x20013014
 8003870:	20013008 	.word	0x20013008
 8003874:	20013018 	.word	0x20013018

08003878 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d046      	beq.n	8003918 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800388a:	2308      	movs	r3, #8
 800388c:	425b      	negs	r3, r3
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4413      	add	r3, r2
 8003892:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <vPortFree+0xa8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <vPortFree+0x42>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e7fe      	b.n	80038b8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <vPortFree+0x5e>
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	e7fe      	b.n	80038d4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <vPortFree+0xa8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d115      	bne.n	8003918 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <vPortFree+0xa8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	401a      	ands	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80038fc:	f7ff f92c 	bl	8002b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <vPortFree+0xac>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4413      	add	r3, r2
 800390a:	4a06      	ldr	r2, [pc, #24]	; (8003924 <vPortFree+0xac>)
 800390c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800390e:	6938      	ldr	r0, [r7, #16]
 8003910:	f000 f86c 	bl	80039ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003914:	f7ff f92e 	bl	8002b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003918:	bf00      	nop
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	2001301c 	.word	0x2001301c
 8003924:	20013014 	.word	0x20013014

08003928 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800392e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003932:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <prvHeapInit+0xac>)
 8003936:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00c      	beq.n	800395c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3307      	adds	r3, #7
 8003946:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0307 	bic.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <prvHeapInit+0xac>)
 8003958:	4413      	add	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <prvHeapInit+0xb0>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <prvHeapInit+0xb0>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4413      	add	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003974:	2208      	movs	r2, #8
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <prvHeapInit+0xb4>)
 8003988:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <prvHeapInit+0xb4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <prvHeapInit+0xb4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvHeapInit+0xb4>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <prvHeapInit+0xb8>)
 80039b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <prvHeapInit+0xbc>)
 80039be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <prvHeapInit+0xc0>)
 80039c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000408 	.word	0x20000408
 80039d8:	20013008 	.word	0x20013008
 80039dc:	20013010 	.word	0x20013010
 80039e0:	20013018 	.word	0x20013018
 80039e4:	20013014 	.word	0x20013014
 80039e8:	2001301c 	.word	0x2001301c

080039ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <prvInsertBlockIntoFreeList+0xac>)
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e002      	b.n	8003a00 <prvInsertBlockIntoFreeList+0x14>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d8f7      	bhi.n	80039fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4413      	add	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d108      	bne.n	8003a2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	441a      	add	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d118      	bne.n	8003a74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <prvInsertBlockIntoFreeList+0xb0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d00d      	beq.n	8003a6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e008      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <prvInsertBlockIntoFreeList+0xb0>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e003      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d002      	beq.n	8003a8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20013008 	.word	0x20013008
 8003a9c:	20013010 	.word	0x20013010

08003aa0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003aa4:	4803      	ldr	r0, [pc, #12]	; (8003ab4 <_cbSendSystemDesc+0x14>)
 8003aa6:	f001 f843 	bl	8004b30 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003aaa:	4803      	ldr	r0, [pc, #12]	; (8003ab8 <_cbSendSystemDesc+0x18>)
 8003aac:	f001 f840 	bl	8004b30 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08005ab4 	.word	0x08005ab4
 8003ab8:	08005ae8 	.word	0x08005ae8

08003abc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <SEGGER_SYSVIEW_Conf+0x20>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SEGGER_SYSVIEW_Conf+0x20>)
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <SEGGER_SYSVIEW_Conf+0x24>)
 8003aca:	4a06      	ldr	r2, [pc, #24]	; (8003ae4 <SEGGER_SYSVIEW_Conf+0x28>)
 8003acc:	f000 fcbc 	bl	8004448 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003ad0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003ad4:	f000 fcf6 	bl	80044c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	08003aa1 	.word	0x08003aa1
 8003ae4:	08005b88 	.word	0x08005b88

08003ae8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	e034      	b.n	8003b5e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003af4:	491e      	ldr	r1, [pc, #120]	; (8003b70 <_cbSendTaskList+0x88>)
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	491a      	ldr	r1, [pc, #104]	; (8003b70 <_cbSendTaskList+0x88>)
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3304      	adds	r3, #4
 8003b14:	681c      	ldr	r4, [r3, #0]
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <_cbSendTaskList+0x88>)
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3308      	adds	r3, #8
 8003b26:	681d      	ldr	r5, [r3, #0]
 8003b28:	4911      	ldr	r1, [pc, #68]	; (8003b70 <_cbSendTaskList+0x88>)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	330c      	adds	r3, #12
 8003b38:	681e      	ldr	r6, [r3, #0]
 8003b3a:	490d      	ldr	r1, [pc, #52]	; (8003b70 <_cbSendTaskList+0x88>)
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3310      	adds	r3, #16
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	4633      	mov	r3, r6
 8003b50:	462a      	mov	r2, r5
 8003b52:	4621      	mov	r1, r4
 8003b54:	f000 f8b4 	bl	8003cc0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <_cbSendTaskList+0x8c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d3c5      	bcc.n	8003af4 <_cbSendTaskList+0xc>
  }
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b70:	20013020 	.word	0x20013020
 8003b74:	200130c0 	.word	0x200130c0

08003b78 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003b7e:	f7ff f899 	bl	8002cb4 <xTaskGetTickCountFromISR>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f04f 0400 	mov.w	r4, #0
 8003b88:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003b8c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003b90:	462b      	mov	r3, r5
 8003b92:	4634      	mov	r4, r6
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	0162      	lsls	r2, r4, #5
 8003b9e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	1b5b      	subs	r3, r3, r5
 8003baa:	eb64 0406 	sbc.w	r4, r4, r6
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	00a2      	lsls	r2, r4, #2
 8003bb8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003bbc:	0099      	lsls	r1, r3, #2
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	195b      	adds	r3, r3, r5
 8003bc4:	eb44 0406 	adc.w	r4, r4, r6
 8003bc8:	f04f 0100 	mov.w	r1, #0
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	00e2      	lsls	r2, r4, #3
 8003bd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bd6:	00d9      	lsls	r1, r3, #3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4614      	mov	r4, r2
 8003bdc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003be0:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	4621      	mov	r1, r4
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bf0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003bfe:	2205      	movs	r2, #5
 8003c00:	492b      	ldr	r1, [pc, #172]	; (8003cb0 <SYSVIEW_AddTask+0xc0>)
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f001 fb0c 	bl	8005220 <memcmp>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04b      	beq.n	8003ca6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b07      	cmp	r3, #7
 8003c14:	d903      	bls.n	8003c1e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003c16:	4828      	ldr	r0, [pc, #160]	; (8003cb8 <SYSVIEW_AddTask+0xc8>)
 8003c18:	f001 fa7c 	bl	8005114 <SEGGER_SYSVIEW_Warn>
    return;
 8003c1c:	e044      	b.n	8003ca8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4926      	ldr	r1, [pc, #152]	; (8003cbc <SYSVIEW_AddTask+0xcc>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4921      	ldr	r1, [pc, #132]	; (8003cbc <SYSVIEW_AddTask+0xcc>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3304      	adds	r3, #4
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	491b      	ldr	r1, [pc, #108]	; (8003cbc <SYSVIEW_AddTask+0xcc>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3308      	adds	r3, #8
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4916      	ldr	r1, [pc, #88]	; (8003cbc <SYSVIEW_AddTask+0xcc>)
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	330c      	adds	r3, #12
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003c74:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4910      	ldr	r1, [pc, #64]	; (8003cbc <SYSVIEW_AddTask+0xcc>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3310      	adds	r3, #16
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <SYSVIEW_AddTask+0xc4>)
 8003c92:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f80e 	bl	8003cc0 <SYSVIEW_SendTaskInfo>
 8003ca4:	e000      	b.n	8003ca8 <SYSVIEW_AddTask+0xb8>
    return;
 8003ca6:	bf00      	nop

}
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	08005af8 	.word	0x08005af8
 8003cb4:	200130c0 	.word	0x200130c0
 8003cb8:	08005b00 	.word	0x08005b00
 8003cbc:	20013020 	.word	0x20013020

08003cc0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003cce:	f107 0314 	add.w	r3, r7, #20
 8003cd2:	2214      	movs	r2, #20
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fabc 	bl	8005254 <memset>
  TaskInfo.TaskID     = TaskID;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fe21 	bl	800493c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003cfa:	bf00      	nop
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <_DoInit+0x8c>)
 8003d0c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2203      	movs	r2, #3
 8003d12:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <_DoInit+0x90>)
 8003d1e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <_DoInit+0x94>)
 8003d24:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <_DoInit+0x90>)
 8003d44:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <_DoInit+0x98>)
 8003d4a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3307      	adds	r3, #7
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <_DoInit+0x9c>)
 8003d6a:	6810      	ldr	r0, [r2, #0]
 8003d6c:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a0c      	ldr	r2, [pc, #48]	; (8003da4 <_DoInit+0xa0>)
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	6018      	str	r0, [r3, #0]
 8003d76:	8891      	ldrh	r1, [r2, #4]
 8003d78:	7992      	ldrb	r2, [r2, #6]
 8003d7a:	8099      	strh	r1, [r3, #4]
 8003d7c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	719a      	strb	r2, [r3, #6]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	200156a0 	.word	0x200156a0
 8003d94:	08005b50 	.word	0x08005b50
 8003d98:	200130c4 	.word	0x200130c4
 8003d9c:	200134c4 	.word	0x200134c4
 8003da0:	08005b5c 	.word	0x08005b5c
 8003da4:	08005b60 	.word	0x08005b60

08003da8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003db4:	4b3c      	ldr	r3, [pc, #240]	; (8003ea8 <SEGGER_RTT_ReadNoLock+0x100>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <SEGGER_RTT_ReadNoLock+0x18>
 8003dbc:	f7ff ffa2 	bl	8003d04 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3360      	adds	r3, #96	; 0x60
 8003dcc:	4a36      	ldr	r2, [pc, #216]	; (8003ea8 <SEGGER_RTT_ReadNoLock+0x100>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d92a      	bls.n	8003e44 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf28      	it	cs
 8003e00:	4613      	movcs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	69f8      	ldr	r0, [r7, #28]
 8003e12:	f001 fa14 	bl	800523e <memcpy>
    NumBytesRead += NumBytesRem;
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	6a3a      	ldr	r2, [r7, #32]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d101      	bne.n	8003e44 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003e40:	2300      	movs	r3, #0
 8003e42:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4293      	cmp	r3, r2
 8003e52:	bf28      	it	cs
 8003e54:	4613      	movcs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d018      	beq.n	8003e90 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	4413      	add	r3, r2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	69f8      	ldr	r0, [r7, #28]
 8003e6c:	f001 f9e7 	bl	800523e <memcpy>
    NumBytesRead += NumBytesRem;
 8003e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200156a0 	.word	0x200156a0

08003eac <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003ec2:	f7ff ff1f 	bl	8003d04 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d24c      	bcs.n	8003f6c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ed6:	f04f 0120 	mov.w	r1, #32
 8003eda:	f381 8811 	msr	BASEPRI, r1
 8003ede:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d032      	beq.n	8003f4c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003ee6:	4925      	ldr	r1, [pc, #148]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003efa:	4920      	ldr	r1, [pc, #128]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f10:	491a      	ldr	r1, [pc, #104]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3320      	adds	r3, #32
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003f24:	4915      	ldr	r1, [pc, #84]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	440b      	add	r3, r1
 8003f32:	3328      	adds	r3, #40	; 0x28
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003f38:	4910      	ldr	r1, [pc, #64]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	3324      	adds	r3, #36	; 0x24
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003f4c:	490b      	ldr	r1, [pc, #44]	; (8003f7c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4613      	mov	r3, r2
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	440b      	add	r3, r1
 8003f5a:	332c      	adds	r3, #44	; 0x2c
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e002      	b.n	8003f72 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f72:	697b      	ldr	r3, [r7, #20]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200156a0 	.word	0x200156a0

08003f80 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003f96:	f7ff feb5 	bl	8003d04 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003f9a:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d24b      	bcs.n	800403e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8003faa:	f04f 0120 	mov.w	r1, #32
 8003fae:	f381 8811 	msr	BASEPRI, r1
 8003fb2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d031      	beq.n	800401e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003fba:	4925      	ldr	r1, [pc, #148]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3360      	adds	r3, #96	; 0x60
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003fce:	4920      	ldr	r1, [pc, #128]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	440b      	add	r3, r1
 8003fdc:	3364      	adds	r3, #100	; 0x64
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003fe2:	491b      	ldr	r1, [pc, #108]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	440b      	add	r3, r1
 8003ff0:	3368      	adds	r3, #104	; 0x68
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003ff6:	4916      	ldr	r1, [pc, #88]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	440b      	add	r3, r1
 8004004:	3370      	adds	r3, #112	; 0x70
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800400a:	4911      	ldr	r1, [pc, #68]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	336c      	adds	r3, #108	; 0x6c
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800401e:	490c      	ldr	r1, [pc, #48]	; (8004050 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	3374      	adds	r3, #116	; 0x74
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e002      	b.n	8004044 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295
 8004042:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004044:	697b      	ldr	r3, [r7, #20]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200156a0 	.word	0x200156a0

08004054 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004064:	e002      	b.n	800406c <_EncodeStr+0x18>
    Len++;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3301      	adds	r3, #1
 800406a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f6      	bne.n	8004066 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	d901      	bls.n	8004084 <_EncodeStr+0x30>
    Len = Limit;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2bfe      	cmp	r3, #254	; 0xfe
 8004088:	d806      	bhi.n	8004098 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e011      	b.n	80040bc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	60fa      	str	r2, [r7, #12]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	0a19      	lsrs	r1, r3, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	b2ca      	uxtb	r2, r1
 80040ba:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040c0:	e00a      	b.n	80040d8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	1c53      	adds	r3, r2, #1
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	60f9      	str	r1, [r7, #12]
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	701a      	strb	r2, [r3, #0]
    n++;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3301      	adds	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3f0      	bcc.n	80040c2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800410c:	1cfb      	adds	r3, r7, #3
 800410e:	2201      	movs	r2, #1
 8004110:	4619      	mov	r1, r3
 8004112:	2001      	movs	r0, #1
 8004114:	f7ff fe48 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 8004118:	4603      	mov	r3, r0
 800411a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	dd44      	ble.n	80041ac <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d01a      	beq.n	800415e <_HandleIncomingPacket+0x58>
 8004128:	2b04      	cmp	r3, #4
 800412a:	dc06      	bgt.n	800413a <_HandleIncomingPacket+0x34>
 800412c:	2b02      	cmp	r3, #2
 800412e:	d010      	beq.n	8004152 <_HandleIncomingPacket+0x4c>
 8004130:	2b02      	cmp	r3, #2
 8004132:	dc11      	bgt.n	8004158 <_HandleIncomingPacket+0x52>
 8004134:	2b01      	cmp	r3, #1
 8004136:	d009      	beq.n	800414c <_HandleIncomingPacket+0x46>
 8004138:	e02d      	b.n	8004196 <_HandleIncomingPacket+0x90>
 800413a:	2b06      	cmp	r3, #6
 800413c:	d015      	beq.n	800416a <_HandleIncomingPacket+0x64>
 800413e:	2b06      	cmp	r3, #6
 8004140:	db10      	blt.n	8004164 <_HandleIncomingPacket+0x5e>
 8004142:	2b07      	cmp	r3, #7
 8004144:	d014      	beq.n	8004170 <_HandleIncomingPacket+0x6a>
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d015      	beq.n	8004176 <_HandleIncomingPacket+0x70>
 800414a:	e024      	b.n	8004196 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800414c:	f000 fa7e 	bl	800464c <SEGGER_SYSVIEW_Start>
      break;
 8004150:	e031      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004152:	f000 fb33 	bl	80047bc <SEGGER_SYSVIEW_Stop>
      break;
 8004156:	e02e      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004158:	f000 fd0e 	bl	8004b78 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800415c:	e02b      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800415e:	f000 fcd3 	bl	8004b08 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004162:	e028      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004164:	f000 fb50 	bl	8004808 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004168:	e025      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800416a:	f000 ff95 	bl	8005098 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800416e:	e022      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004170:	f000 ff74 	bl	800505c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004174:	e01f      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004176:	1cfb      	adds	r3, r7, #3
 8004178:	2201      	movs	r2, #1
 800417a:	4619      	mov	r1, r3
 800417c:	2001      	movs	r0, #1
 800417e:	f7ff fe13 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
 8004182:	4603      	mov	r3, r0
 8004184:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dd11      	ble.n	80041b0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fee4 	bl	8004f5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004194:	e00c      	b.n	80041b0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	b25b      	sxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	da0a      	bge.n	80041b4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800419e:	1cfb      	adds	r3, r7, #3
 80041a0:	2201      	movs	r2, #1
 80041a2:	4619      	mov	r1, r3
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7ff fdff 	bl	8003da8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80041aa:	e003      	b.n	80041b4 <_HandleIncomingPacket+0xae>
    }
  }
 80041ac:	bf00      	nop
 80041ae:	e002      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
      break;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <_HandleIncomingPacket+0xb0>
      break;
 80041b4:	bf00      	nop
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80041c6:	2301      	movs	r3, #1
 80041c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	3301      	adds	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	e00b      	b.n	80041f4 <_TrySendOverflowPacket+0x34>
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	1c59      	adds	r1, r3, #1
 80041e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	09db      	lsrs	r3, r3, #7
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	2b7f      	cmp	r3, #127	; 0x7f
 80041f8:	d8f0      	bhi.n	80041dc <_TrySendOverflowPacket+0x1c>
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004200:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <_TrySendOverflowPacket+0xdc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004210:	4b21      	ldr	r3, [pc, #132]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	e00b      	b.n	800423c <_TrySendOverflowPacket+0x7c>
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	6279      	str	r1, [r7, #36]	; 0x24
 800422e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	09db      	lsrs	r3, r3, #7
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d8f0      	bhi.n	8004224 <_TrySendOverflowPacket+0x64>
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	461a      	mov	r2, r3
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	4619      	mov	r1, r3
 800425e:	2001      	movs	r0, #1
 8004260:	f7fb ffc6 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004264:	4603      	mov	r3, r0
 8004266:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3b01      	subs	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e004      	b.n	800428c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	3301      	adds	r3, #1
 8004288:	4a03      	ldr	r2, [pc, #12]	; (8004298 <_TrySendOverflowPacket+0xd8>)
 800428a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800428c:	693b      	ldr	r3, [r7, #16]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3730      	adds	r7, #48	; 0x30
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	200154dc 	.word	0x200154dc
 800429c:	e0001004 	.word	0xe0001004

080042a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80042ac:	4b63      	ldr	r3, [pc, #396]	; (800443c <_SendPacket+0x19c>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d010      	beq.n	80042d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80042b4:	4b61      	ldr	r3, [pc, #388]	; (800443c <_SendPacket+0x19c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 80a1 	beq.w	8004400 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <_SendPacket+0x19c>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d109      	bne.n	80042da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80042c6:	f7ff ff7b 	bl	80041c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80042ca:	4b5c      	ldr	r3, [pc, #368]	; (800443c <_SendPacket+0x19c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	f040 8098 	bne.w	8004404 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80042d4:	e001      	b.n	80042da <_SendPacket+0x3a>
    goto Send;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <_SendPacket+0x3c>
Send:
 80042da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b1f      	cmp	r3, #31
 80042e0:	d809      	bhi.n	80042f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042e2:	4b56      	ldr	r3, [pc, #344]	; (800443c <_SendPacket+0x19c>)
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 8089 	bne.w	8004408 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b17      	cmp	r3, #23
 80042fa:	d807      	bhi.n	800430c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3b01      	subs	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e03d      	b.n	8004388 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b7f      	cmp	r3, #127	; 0x7f
 8004318:	d912      	bls.n	8004340 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	09da      	lsrs	r2, r3, #7
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b01      	subs	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	3a01      	subs	r2, #1
 8004332:	60fa      	str	r2, [r7, #12]
 8004334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	e006      	b.n	800434e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b7f      	cmp	r3, #127	; 0x7f
 8004352:	d912      	bls.n	800437a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	09da      	lsrs	r2, r3, #7
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	3a01      	subs	r2, #1
 800436c:	60fa      	str	r2, [r7, #12]
 800436e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e006      	b.n	8004388 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b01      	subs	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004388:	4b2d      	ldr	r3, [pc, #180]	; (8004440 <_SendPacket+0x1a0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800438e:	4b2b      	ldr	r3, [pc, #172]	; (800443c <_SendPacket+0x19c>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	623b      	str	r3, [r7, #32]
 80043a0:	e00b      	b.n	80043ba <_SendPacket+0x11a>
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	6279      	str	r1, [r7, #36]	; 0x24
 80043ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b7f      	cmp	r3, #127	; 0x7f
 80043be:	d8f0      	bhi.n	80043a2 <_SendPacket+0x102>
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	627a      	str	r2, [r7, #36]	; 0x24
 80043c6:	6a3a      	ldr	r2, [r7, #32]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	68f9      	ldr	r1, [r7, #12]
 80043da:	2001      	movs	r0, #1
 80043dc:	f7fb ff08 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043e0:	4603      	mov	r3, r0
 80043e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <_SendPacket+0x19c>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e00b      	b.n	800440a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <_SendPacket+0x19c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <_SendPacket+0x19c>)
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e004      	b.n	800440a <_SendPacket+0x16a>
    goto SendDone;
 8004400:	bf00      	nop
 8004402:	e002      	b.n	800440a <_SendPacket+0x16a>
      goto SendDone;
 8004404:	bf00      	nop
 8004406:	e000      	b.n	800440a <_SendPacket+0x16a>
      goto SendDone;
 8004408:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <_SendPacket+0x1a4>)
 800440c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <_SendPacket+0x1a4>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	429a      	cmp	r2, r3
 8004418:	d00b      	beq.n	8004432 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800441a:	4b08      	ldr	r3, [pc, #32]	; (800443c <_SendPacket+0x19c>)
 800441c:	789b      	ldrb	r3, [r3, #2]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <_SendPacket+0x19c>)
 8004424:	2201      	movs	r2, #1
 8004426:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004428:	f7ff fe6d 	bl	8004106 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <_SendPacket+0x19c>)
 800442e:	2200      	movs	r2, #0
 8004430:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004432:	bf00      	nop
 8004434:	3728      	adds	r7, #40	; 0x28
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	200154dc 	.word	0x200154dc
 8004440:	e0001004 	.word	0xe0001004
 8004444:	200156a0 	.word	0x200156a0

08004448 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800445e:	4a14      	ldr	r2, [pc, #80]	; (80044b0 <SEGGER_SYSVIEW_Init+0x68>)
 8004460:	4914      	ldr	r1, [pc, #80]	; (80044b4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004462:	2001      	movs	r0, #1
 8004464:	f7ff fd22 	bl	8003eac <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2308      	movs	r3, #8
 800446e:	4a12      	ldr	r2, [pc, #72]	; (80044b8 <SEGGER_SYSVIEW_Init+0x70>)
 8004470:	4910      	ldr	r1, [pc, #64]	; (80044b4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004472:	2001      	movs	r0, #1
 8004474:	f7ff fd84 	bl	8003f80 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004478:	4b10      	ldr	r3, [pc, #64]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <SEGGER_SYSVIEW_Init+0x78>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 8004486:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004488:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800448e:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004494:	4a09      	ldr	r2, [pc, #36]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <SEGGER_SYSVIEW_Init+0x74>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200134d4 	.word	0x200134d4
 80044b4:	08005b68 	.word	0x08005b68
 80044b8:	200154d4 	.word	0x200154d4
 80044bc:	200154dc 	.word	0x200154dc
 80044c0:	e0001004 	.word	0xe0001004

080044c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6113      	str	r3, [r2, #16]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	200154dc 	.word	0x200154dc

080044e4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044ec:	f3ef 8311 	mrs	r3, BASEPRI
 80044f0:	f04f 0120 	mov.w	r1, #32
 80044f4:	f381 8811 	msr	BASEPRI, r1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	4808      	ldr	r0, [pc, #32]	; (800451c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80044fc:	f7ff fdf7 	bl	80040ee <_PreparePacket>
 8004500:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7ff feca 	bl	80042a0 <_SendPacket>
  RECORD_END();
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f383 8811 	msr	BASEPRI, r3
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	2001550c 	.word	0x2001550c

08004520 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800452a:	f3ef 8311 	mrs	r3, BASEPRI
 800452e:	f04f 0120 	mov.w	r1, #32
 8004532:	f381 8811 	msr	BASEPRI, r1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	4816      	ldr	r0, [pc, #88]	; (8004594 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800453a:	f7ff fdd8 	bl	80040ee <_PreparePacket>
 800453e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e00b      	b.n	8004566 <SEGGER_SYSVIEW_RecordU32+0x46>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	61f9      	str	r1, [r7, #28]
 8004558:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	09db      	lsrs	r3, r3, #7
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b7f      	cmp	r3, #127	; 0x7f
 800456a:	d8f0      	bhi.n	800454e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	61fa      	str	r2, [r7, #28]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	6938      	ldr	r0, [r7, #16]
 8004582:	f7ff fe8d 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f383 8811 	msr	BASEPRI, r3
}
 800458c:	bf00      	nop
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	2001550c 	.word	0x2001550c

08004598 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80045a4:	f3ef 8311 	mrs	r3, BASEPRI
 80045a8:	f04f 0120 	mov.w	r1, #32
 80045ac:	f381 8811 	msr	BASEPRI, r1
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	4825      	ldr	r0, [pc, #148]	; (8004648 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80045b4:	f7ff fd9b 	bl	80040ee <_PreparePacket>
 80045b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c6:	e00b      	b.n	80045e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	1c59      	adds	r1, r3, #1
 80045d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	09db      	lsrs	r3, r3, #7
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	2b7f      	cmp	r3, #127	; 0x7f
 80045e4:	d8f0      	bhi.n	80045c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	; 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	; 0x7f
 800461c:	d8f0      	bhi.n	8004600 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	; 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	69b8      	ldr	r0, [r7, #24]
 8004634:	f7ff fe34 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f383 8811 	msr	BASEPRI, r3
}
 800463e:	bf00      	nop
 8004640:	3730      	adds	r7, #48	; 0x30
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2001550c 	.word	0x2001550c

0800464c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004652:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004658:	f3ef 8311 	mrs	r3, BASEPRI
 800465c:	f04f 0120 	mov.w	r1, #32
 8004660:	f381 8811 	msr	BASEPRI, r1
 8004664:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004666:	220a      	movs	r2, #10
 8004668:	4952      	ldr	r1, [pc, #328]	; (80047b4 <SEGGER_SYSVIEW_Start+0x168>)
 800466a:	2001      	movs	r0, #1
 800466c:	f7fb fdc0 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004676:	200a      	movs	r0, #10
 8004678:	f7ff ff34 	bl	80044e4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800467c:	f3ef 8311 	mrs	r3, BASEPRI
 8004680:	f04f 0120 	mov.w	r1, #32
 8004684:	f381 8811 	msr	BASEPRI, r1
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	484b      	ldr	r0, [pc, #300]	; (80047b8 <SEGGER_SYSVIEW_Start+0x16c>)
 800468c:	f7ff fd2f 	bl	80040ee <_PreparePacket>
 8004690:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a0:	e00b      	b.n	80046ba <SEGGER_SYSVIEW_Start+0x6e>
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	1c59      	adds	r1, r3, #1
 80046aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	09db      	lsrs	r3, r3, #7
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2b7f      	cmp	r3, #127	; 0x7f
 80046be:	d8f0      	bhi.n	80046a2 <SEGGER_SYSVIEW_Start+0x56>
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	e00b      	b.n	80046f4 <SEGGER_SYSVIEW_Start+0xa8>
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	6279      	str	r1, [r7, #36]	; 0x24
 80046e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	09db      	lsrs	r3, r3, #7
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b7f      	cmp	r3, #127	; 0x7f
 80046f8:	d8f0      	bhi.n	80046dc <SEGGER_SYSVIEW_Start+0x90>
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e00b      	b.n	800472e <SEGGER_SYSVIEW_Start+0xe2>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	1c59      	adds	r1, r3, #1
 800471e:	61f9      	str	r1, [r7, #28]
 8004720:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	09db      	lsrs	r3, r3, #7
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b7f      	cmp	r3, #127	; 0x7f
 8004732:	d8f0      	bhi.n	8004716 <SEGGER_SYSVIEW_Start+0xca>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	2302      	movs	r3, #2
 800474a:	613b      	str	r3, [r7, #16]
 800474c:	e00b      	b.n	8004766 <SEGGER_SYSVIEW_Start+0x11a>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	1c59      	adds	r1, r3, #1
 8004756:	6179      	str	r1, [r7, #20]
 8004758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	09db      	lsrs	r3, r3, #7
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b7f      	cmp	r3, #127	; 0x7f
 800476a:	d8f0      	bhi.n	800474e <SEGGER_SYSVIEW_Start+0x102>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	617a      	str	r2, [r7, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800477c:	2218      	movs	r2, #24
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fd8d 	bl	80042a0 <_SendPacket>
      RECORD_END();
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004794:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <SEGGER_SYSVIEW_Start+0x164>)
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800479a:	f000 f9ed 	bl	8004b78 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800479e:	f000 f9b3 	bl	8004b08 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80047a2:	f000 fc79 	bl	8005098 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80047a6:	bf00      	nop
 80047a8:	3730      	adds	r7, #48	; 0x30
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	200154dc 	.word	0x200154dc
 80047b4:	08005b90 	.word	0x08005b90
 80047b8:	2001550c 	.word	0x2001550c

080047bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047c2:	f3ef 8311 	mrs	r3, BASEPRI
 80047c6:	f04f 0120 	mov.w	r1, #32
 80047ca:	f381 8811 	msr	BASEPRI, r1
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	480b      	ldr	r0, [pc, #44]	; (8004800 <SEGGER_SYSVIEW_Stop+0x44>)
 80047d2:	f7ff fc8c 	bl	80040ee <_PreparePacket>
 80047d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <SEGGER_SYSVIEW_Stop+0x48>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80047e0:	220b      	movs	r2, #11
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6838      	ldr	r0, [r7, #0]
 80047e6:	f7ff fd5b 	bl	80042a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <SEGGER_SYSVIEW_Stop+0x48>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f383 8811 	msr	BASEPRI, r3
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2001550c 	.word	0x2001550c
 8004804:	200154dc 	.word	0x200154dc

08004808 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	; 0x30
 800480c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800480e:	f3ef 8311 	mrs	r3, BASEPRI
 8004812:	f04f 0120 	mov.w	r1, #32
 8004816:	f381 8811 	msr	BASEPRI, r1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	4845      	ldr	r0, [pc, #276]	; (8004934 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800481e:	f7ff fc66 	bl	80040ee <_PreparePacket>
 8004822:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482c:	4b42      	ldr	r3, [pc, #264]	; (8004938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
 8004832:	e00b      	b.n	800484c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	b2da      	uxtb	r2, r3
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800483e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	09db      	lsrs	r3, r3, #7
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b7f      	cmp	r3, #127	; 0x7f
 8004850:	d8f0      	bhi.n	8004834 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	e00b      	b.n	8004886 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1c59      	adds	r1, r3, #1
 8004876:	6279      	str	r1, [r7, #36]	; 0x24
 8004878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	09db      	lsrs	r3, r3, #7
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b7f      	cmp	r3, #127	; 0x7f
 800488a:	d8f0      	bhi.n	800486e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	627a      	str	r2, [r7, #36]	; 0x24
 8004892:	6a3a      	ldr	r2, [r7, #32]
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	4b25      	ldr	r3, [pc, #148]	; (8004938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	61bb      	str	r3, [r7, #24]
 80048a6:	e00b      	b.n	80048c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	61f9      	str	r1, [r7, #28]
 80048b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	09db      	lsrs	r3, r3, #7
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b7f      	cmp	r3, #127	; 0x7f
 80048c4:	d8f0      	bhi.n	80048a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	61fa      	str	r2, [r7, #28]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	2302      	movs	r3, #2
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e00b      	b.n	80048f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1c59      	adds	r1, r3, #1
 80048e8:	6179      	str	r1, [r7, #20]
 80048ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	09db      	lsrs	r3, r3, #7
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b7f      	cmp	r3, #127	; 0x7f
 80048fc:	d8f0      	bhi.n	80048e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	617a      	str	r2, [r7, #20]
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800490e:	2218      	movs	r2, #24
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f7ff fcc4 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004926:	4b04      	ldr	r3, [pc, #16]	; (8004938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	4798      	blx	r3
  }
}
 800492c:	bf00      	nop
 800492e:	3730      	adds	r7, #48	; 0x30
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	2001550c 	.word	0x2001550c
 8004938:	200154dc 	.word	0x200154dc

0800493c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b092      	sub	sp, #72	; 0x48
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004944:	f3ef 8311 	mrs	r3, BASEPRI
 8004948:	f04f 0120 	mov.w	r1, #32
 800494c:	f381 8811 	msr	BASEPRI, r1
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	486b      	ldr	r0, [pc, #428]	; (8004b00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004954:	f7ff fbcb 	bl	80040ee <_PreparePacket>
 8004958:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	643b      	str	r3, [r7, #64]	; 0x40
 8004970:	e00b      	b.n	800498a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004974:	b2da      	uxtb	r2, r3
 8004976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	6479      	str	r1, [r7, #68]	; 0x44
 800497c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004986:	09db      	lsrs	r3, r3, #7
 8004988:	643b      	str	r3, [r7, #64]	; 0x40
 800498a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498c:	2b7f      	cmp	r3, #127	; 0x7f
 800498e:	d8f0      	bhi.n	8004972 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	647a      	str	r2, [r7, #68]	; 0x44
 8004996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049aa:	e00b      	b.n	80049c4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80049ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	63f9      	str	r1, [r7, #60]	; 0x3c
 80049b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	09db      	lsrs	r3, r3, #7
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	2b7f      	cmp	r3, #127	; 0x7f
 80049c8:	d8f0      	bhi.n	80049ac <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80049ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	4619      	mov	r1, r3
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fb36 	bl	8004054 <_EncodeStr>
 80049e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80049ea:	2209      	movs	r2, #9
 80049ec:	68f9      	ldr	r1, [r7, #12]
 80049ee:	6938      	ldr	r0, [r7, #16]
 80049f0:	f7ff fc56 	bl	80042a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	089b      	lsrs	r3, r3, #2
 8004a08:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	6379      	str	r1, [r7, #52]	; 0x34
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a44:	e00b      	b.n	8004a5e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b7f      	cmp	r3, #127	; 0x7f
 8004a62:	d8f0      	bhi.n	8004a46 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e00b      	b.n	8004a98 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	6279      	str	r1, [r7, #36]	; 0x24
 8004a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	09db      	lsrs	r3, r3, #7
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9c:	d8f0      	bhi.n	8004a80 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	627a      	str	r2, [r7, #36]	; 0x24
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e00b      	b.n	8004ad0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	61f9      	str	r1, [r7, #28]
 8004ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	09db      	lsrs	r3, r3, #7
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad4:	d8f0      	bhi.n	8004ab8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	61fa      	str	r2, [r7, #28]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004ae6:	2215      	movs	r2, #21
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	6938      	ldr	r0, [r7, #16]
 8004aec:	f7ff fbd8 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f383 8811 	msr	BASEPRI, r3
}
 8004af6:	bf00      	nop
 8004af8:	3748      	adds	r7, #72	; 0x48
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	2001550c 	.word	0x2001550c
 8004b04:	200154dc 	.word	0x200154dc

08004b08 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b0c:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b1e:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4798      	blx	r3
  }
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200154dc 	.word	0x200154dc

08004b30 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b38:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3c:	f04f 0120 	mov.w	r1, #32
 8004b40:	f381 8811 	msr	BASEPRI, r1
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	480b      	ldr	r0, [pc, #44]	; (8004b74 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004b48:	f7ff fad1 	bl	80040ee <_PreparePacket>
 8004b4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b4e:	2280      	movs	r2, #128	; 0x80
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	6938      	ldr	r0, [r7, #16]
 8004b54:	f7ff fa7e 	bl	8004054 <_EncodeStr>
 8004b58:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004b5a:	220e      	movs	r2, #14
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f7ff fb9e 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f383 8811 	msr	BASEPRI, r3
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2001550c 	.word	0x2001550c

08004b78 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d019      	beq.n	8004bba <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d014      	beq.n	8004bba <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4798      	blx	r3
 8004b98:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004b9c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004b9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	0013      	movs	r3, r2
 8004bac:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4601      	mov	r1, r0
 8004bb2:	200d      	movs	r0, #13
 8004bb4:	f7ff fcf0 	bl	8004598 <SEGGER_SYSVIEW_RecordU32x2>
 8004bb8:	e005      	b.n	8004bc6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	200c      	movs	r0, #12
 8004bc2:	f7ff fcad 	bl	8004520 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd90      	pop	{r4, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	200154dc 	.word	0x200154dc
 8004bd4:	e0001004 	.word	0xe0001004

08004bd8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bde:	f3ef 8311 	mrs	r3, BASEPRI
 8004be2:	f04f 0120 	mov.w	r1, #32
 8004be6:	f381 8811 	msr	BASEPRI, r1
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	4819      	ldr	r0, [pc, #100]	; (8004c54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004bee:	f7ff fa7e 	bl	80040ee <_PreparePacket>
 8004bf2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004bf8:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	e00b      	b.n	8004c24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	6179      	str	r1, [r7, #20]
 8004c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	09db      	lsrs	r3, r3, #7
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b7f      	cmp	r3, #127	; 0x7f
 8004c28:	d8f0      	bhi.n	8004c0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	617a      	str	r2, [r7, #20]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	68b8      	ldr	r0, [r7, #8]
 8004c40:	f7ff fb2e 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f383 8811 	msr	BASEPRI, r3
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2001550c 	.word	0x2001550c
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c62:	f3ef 8311 	mrs	r3, BASEPRI
 8004c66:	f04f 0120 	mov.w	r1, #32
 8004c6a:	f381 8811 	msr	BASEPRI, r1
 8004c6e:	607b      	str	r3, [r7, #4]
 8004c70:	4807      	ldr	r0, [pc, #28]	; (8004c90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004c72:	f7ff fa3c 	bl	80040ee <_PreparePacket>
 8004c76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004c78:	2203      	movs	r2, #3
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	f7ff fb0f 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f383 8811 	msr	BASEPRI, r3
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	2001550c 	.word	0x2001550c

08004c94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9e:	f04f 0120 	mov.w	r1, #32
 8004ca2:	f381 8811 	msr	BASEPRI, r1
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	4807      	ldr	r0, [pc, #28]	; (8004cc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004caa:	f7ff fa20 	bl	80040ee <_PreparePacket>
 8004cae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004cb0:	2212      	movs	r2, #18
 8004cb2:	6839      	ldr	r1, [r7, #0]
 8004cb4:	6838      	ldr	r0, [r7, #0]
 8004cb6:	f7ff faf3 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f383 8811 	msr	BASEPRI, r3
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	2001550c 	.word	0x2001550c

08004ccc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd6:	f04f 0120 	mov.w	r1, #32
 8004cda:	f381 8811 	msr	BASEPRI, r1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	4807      	ldr	r0, [pc, #28]	; (8004d00 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ce2:	f7ff fa04 	bl	80040ee <_PreparePacket>
 8004ce6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ce8:	2211      	movs	r2, #17
 8004cea:	6839      	ldr	r1, [r7, #0]
 8004cec:	6838      	ldr	r0, [r7, #0]
 8004cee:	f7ff fad7 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f383 8811 	msr	BASEPRI, r3
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	2001550c 	.word	0x2001550c

08004d04 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d10:	f04f 0120 	mov.w	r1, #32
 8004d14:	f381 8811 	msr	BASEPRI, r1
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	481a      	ldr	r0, [pc, #104]	; (8004d84 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004d1c:	f7ff f9e7 	bl	80040ee <_PreparePacket>
 8004d20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d26:	4b18      	ldr	r3, [pc, #96]	; (8004d88 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	e00b      	b.n	8004d54 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	61f9      	str	r1, [r7, #28]
 8004d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	09db      	lsrs	r3, r3, #7
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b7f      	cmp	r3, #127	; 0x7f
 8004d58:	d8f0      	bhi.n	8004d3c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	61fa      	str	r2, [r7, #28]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	6938      	ldr	r0, [r7, #16]
 8004d70:	f7ff fa96 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f383 8811 	msr	BASEPRI, r3
}
 8004d7a:	bf00      	nop
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	2001550c 	.word	0x2001550c
 8004d88:	200154dc 	.word	0x200154dc

08004d8c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d94:	f3ef 8311 	mrs	r3, BASEPRI
 8004d98:	f04f 0120 	mov.w	r1, #32
 8004d9c:	f381 8811 	msr	BASEPRI, r1
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	481a      	ldr	r0, [pc, #104]	; (8004e0c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004da4:	f7ff f9a3 	bl	80040ee <_PreparePacket>
 8004da8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e00b      	b.n	8004ddc <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	61f9      	str	r1, [r7, #28]
 8004dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	09db      	lsrs	r3, r3, #7
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b7f      	cmp	r3, #127	; 0x7f
 8004de0:	d8f0      	bhi.n	8004dc4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	61fa      	str	r2, [r7, #28]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004df2:	2204      	movs	r2, #4
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	6938      	ldr	r0, [r7, #16]
 8004df8:	f7ff fa52 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f383 8811 	msr	BASEPRI, r3
}
 8004e02:	bf00      	nop
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2001550c 	.word	0x2001550c
 8004e10:	200154dc 	.word	0x200154dc

08004e14 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e20:	f04f 0120 	mov.w	r1, #32
 8004e24:	f381 8811 	msr	BASEPRI, r1
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	481a      	ldr	r0, [pc, #104]	; (8004e94 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004e2c:	f7ff f95f 	bl	80040ee <_PreparePacket>
 8004e30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	089b      	lsrs	r3, r3, #2
 8004e40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e00b      	b.n	8004e64 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	1c59      	adds	r1, r3, #1
 8004e54:	61f9      	str	r1, [r7, #28]
 8004e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	09db      	lsrs	r3, r3, #7
 8004e62:	61bb      	str	r3, [r7, #24]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b7f      	cmp	r3, #127	; 0x7f
 8004e68:	d8f0      	bhi.n	8004e4c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	61fa      	str	r2, [r7, #28]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	6938      	ldr	r0, [r7, #16]
 8004e80:	f7ff fa0e 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f383 8811 	msr	BASEPRI, r3
}
 8004e8a:	bf00      	nop
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2001550c 	.word	0x2001550c
 8004e98:	200154dc 	.word	0x200154dc

08004e9c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	; 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ea6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eaa:	f04f 0120 	mov.w	r1, #32
 8004eae:	f381 8811 	msr	BASEPRI, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	4827      	ldr	r0, [pc, #156]	; (8004f54 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004eb6:	f7ff f91a 	bl	80040ee <_PreparePacket>
 8004eba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	089b      	lsrs	r3, r3, #2
 8004eca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	e00b      	b.n	8004eee <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	1c59      	adds	r1, r3, #1
 8004ede:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	09db      	lsrs	r3, r3, #7
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef2:	d8f0      	bhi.n	8004ed6 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e00b      	b.n	8004f26 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	61f9      	str	r1, [r7, #28]
 8004f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	09db      	lsrs	r3, r3, #7
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2a:	d8f0      	bhi.n	8004f0e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004f3c:	2207      	movs	r2, #7
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6938      	ldr	r0, [r7, #16]
 8004f42:	f7ff f9ad 	bl	80042a0 <_SendPacket>
  RECORD_END();
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f383 8811 	msr	BASEPRI, r3
}
 8004f4c:	bf00      	nop
 8004f4e:	3728      	adds	r7, #40	; 0x28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	2001550c 	.word	0x2001550c
 8004f58:	200154dc 	.word	0x200154dc

08004f5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	; 0x30
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f66:	4b3b      	ldr	r3, [pc, #236]	; (8005054 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d06d      	beq.n	800504a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f78:	e008      	b.n	8004f8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d007      	beq.n	8004f96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	3301      	adds	r3, #1
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d3f2      	bcc.n	8004f7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004f94:	e000      	b.n	8004f98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004f96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d055      	beq.n	800504a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa2:	f04f 0120 	mov.w	r1, #32
 8004fa6:	f381 8811 	msr	BASEPRI, r1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	482a      	ldr	r0, [pc, #168]	; (8005058 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004fae:	f7ff f89e 	bl	80040ee <_PreparePacket>
 8004fb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	623b      	str	r3, [r7, #32]
 8004fc0:	e00b      	b.n	8004fda <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1c59      	adds	r1, r3, #1
 8004fca:	6279      	str	r1, [r7, #36]	; 0x24
 8004fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	09db      	lsrs	r3, r3, #7
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fde:	d8f0      	bhi.n	8004fc2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe6:	6a3a      	ldr	r2, [r7, #32]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	e00b      	b.n	8005014 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	61f9      	str	r1, [r7, #28]
 8005006:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	09db      	lsrs	r3, r3, #7
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b7f      	cmp	r3, #127	; 0x7f
 8005018:	d8f0      	bhi.n	8004ffc <SEGGER_SYSVIEW_SendModule+0xa0>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	61fa      	str	r2, [r7, #28]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2280      	movs	r2, #128	; 0x80
 8005030:	4619      	mov	r1, r3
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff f80e 	bl	8004054 <_EncodeStr>
 8005038:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800503a:	2216      	movs	r2, #22
 800503c:	68f9      	ldr	r1, [r7, #12]
 800503e:	6938      	ldr	r0, [r7, #16]
 8005040:	f7ff f92e 	bl	80042a0 <_SendPacket>
      RECORD_END();
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800504a:	bf00      	nop
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20015504 	.word	0x20015504
 8005058:	2001550c 	.word	0x2001550c

0800505c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00f      	beq.n	800508a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f2      	bne.n	8005070 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20015504 	.word	0x20015504

08005098 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800509e:	f3ef 8311 	mrs	r3, BASEPRI
 80050a2:	f04f 0120 	mov.w	r1, #32
 80050a6:	f381 8811 	msr	BASEPRI, r1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	4817      	ldr	r0, [pc, #92]	; (800510c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050ae:	f7ff f81e 	bl	80040ee <_PreparePacket>
 80050b2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	e00b      	b.n	80050dc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1c59      	adds	r1, r3, #1
 80050cc:	6179      	str	r1, [r7, #20]
 80050ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	09db      	lsrs	r3, r3, #7
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b7f      	cmp	r3, #127	; 0x7f
 80050e0:	d8f0      	bhi.n	80050c4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	617a      	str	r2, [r7, #20]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80050f2:	221b      	movs	r2, #27
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f7ff f8d2 	bl	80042a0 <_SendPacket>
  RECORD_END();
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f383 8811 	msr	BASEPRI, r3
}
 8005102:	bf00      	nop
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	2001550c 	.word	0x2001550c
 8005110:	20015508 	.word	0x20015508

08005114 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08a      	sub	sp, #40	; 0x28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800511c:	f3ef 8311 	mrs	r3, BASEPRI
 8005120:	f04f 0120 	mov.w	r1, #32
 8005124:	f381 8811 	msr	BASEPRI, r1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	4827      	ldr	r0, [pc, #156]	; (80051c8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800512c:	f7fe ffdf 	bl	80040ee <_PreparePacket>
 8005130:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f7fe ff8c 	bl	8004054 <_EncodeStr>
 800513c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	2301      	movs	r3, #1
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	e00b      	b.n	8005160 <SEGGER_SYSVIEW_Warn+0x4c>
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	6279      	str	r1, [r7, #36]	; 0x24
 8005152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	09db      	lsrs	r3, r3, #7
 800515e:	623b      	str	r3, [r7, #32]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	2b7f      	cmp	r3, #127	; 0x7f
 8005164:	d8f0      	bhi.n	8005148 <SEGGER_SYSVIEW_Warn+0x34>
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	627a      	str	r2, [r7, #36]	; 0x24
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	e00b      	b.n	8005198 <SEGGER_SYSVIEW_Warn+0x84>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	61f9      	str	r1, [r7, #28]
 800518a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	09db      	lsrs	r3, r3, #7
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b7f      	cmp	r3, #127	; 0x7f
 800519c:	d8f0      	bhi.n	8005180 <SEGGER_SYSVIEW_Warn+0x6c>
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	61fa      	str	r2, [r7, #28]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051ae:	221a      	movs	r2, #26
 80051b0:	68f9      	ldr	r1, [r7, #12]
 80051b2:	6938      	ldr	r0, [r7, #16]
 80051b4:	f7ff f874 	bl	80042a0 <_SendPacket>
  RECORD_END();
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f383 8811 	msr	BASEPRI, r3
}
 80051be:	bf00      	nop
 80051c0:	3728      	adds	r7, #40	; 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2001550c 	.word	0x2001550c

080051cc <__errno>:
 80051cc:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <__errno+0x8>)
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010

080051d8 <__libc_init_array>:
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4e0d      	ldr	r6, [pc, #52]	; (8005210 <__libc_init_array+0x38>)
 80051dc:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <__libc_init_array+0x3c>)
 80051de:	1ba4      	subs	r4, r4, r6
 80051e0:	10a4      	asrs	r4, r4, #2
 80051e2:	2500      	movs	r5, #0
 80051e4:	42a5      	cmp	r5, r4
 80051e6:	d109      	bne.n	80051fc <__libc_init_array+0x24>
 80051e8:	4e0b      	ldr	r6, [pc, #44]	; (8005218 <__libc_init_array+0x40>)
 80051ea:	4c0c      	ldr	r4, [pc, #48]	; (800521c <__libc_init_array+0x44>)
 80051ec:	f000 fc36 	bl	8005a5c <_init>
 80051f0:	1ba4      	subs	r4, r4, r6
 80051f2:	10a4      	asrs	r4, r4, #2
 80051f4:	2500      	movs	r5, #0
 80051f6:	42a5      	cmp	r5, r4
 80051f8:	d105      	bne.n	8005206 <__libc_init_array+0x2e>
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
 80051fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005200:	4798      	blx	r3
 8005202:	3501      	adds	r5, #1
 8005204:	e7ee      	b.n	80051e4 <__libc_init_array+0xc>
 8005206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800520a:	4798      	blx	r3
 800520c:	3501      	adds	r5, #1
 800520e:	e7f2      	b.n	80051f6 <__libc_init_array+0x1e>
 8005210:	08005bd8 	.word	0x08005bd8
 8005214:	08005bd8 	.word	0x08005bd8
 8005218:	08005bd8 	.word	0x08005bd8
 800521c:	08005bdc 	.word	0x08005bdc

08005220 <memcmp>:
 8005220:	b530      	push	{r4, r5, lr}
 8005222:	2400      	movs	r4, #0
 8005224:	42a2      	cmp	r2, r4
 8005226:	d101      	bne.n	800522c <memcmp+0xc>
 8005228:	2000      	movs	r0, #0
 800522a:	e007      	b.n	800523c <memcmp+0x1c>
 800522c:	5d03      	ldrb	r3, [r0, r4]
 800522e:	3401      	adds	r4, #1
 8005230:	190d      	adds	r5, r1, r4
 8005232:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005236:	42ab      	cmp	r3, r5
 8005238:	d0f4      	beq.n	8005224 <memcmp+0x4>
 800523a:	1b58      	subs	r0, r3, r5
 800523c:	bd30      	pop	{r4, r5, pc}

0800523e <memcpy>:
 800523e:	b510      	push	{r4, lr}
 8005240:	1e43      	subs	r3, r0, #1
 8005242:	440a      	add	r2, r1
 8005244:	4291      	cmp	r1, r2
 8005246:	d100      	bne.n	800524a <memcpy+0xc>
 8005248:	bd10      	pop	{r4, pc}
 800524a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005252:	e7f7      	b.n	8005244 <memcpy+0x6>

08005254 <memset>:
 8005254:	4402      	add	r2, r0
 8005256:	4603      	mov	r3, r0
 8005258:	4293      	cmp	r3, r2
 800525a:	d100      	bne.n	800525e <memset+0xa>
 800525c:	4770      	bx	lr
 800525e:	f803 1b01 	strb.w	r1, [r3], #1
 8005262:	e7f9      	b.n	8005258 <memset+0x4>

08005264 <siprintf>:
 8005264:	b40e      	push	{r1, r2, r3}
 8005266:	b500      	push	{lr}
 8005268:	b09c      	sub	sp, #112	; 0x70
 800526a:	ab1d      	add	r3, sp, #116	; 0x74
 800526c:	9002      	str	r0, [sp, #8]
 800526e:	9006      	str	r0, [sp, #24]
 8005270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005274:	4809      	ldr	r0, [pc, #36]	; (800529c <siprintf+0x38>)
 8005276:	9107      	str	r1, [sp, #28]
 8005278:	9104      	str	r1, [sp, #16]
 800527a:	4909      	ldr	r1, [pc, #36]	; (80052a0 <siprintf+0x3c>)
 800527c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005280:	9105      	str	r1, [sp, #20]
 8005282:	6800      	ldr	r0, [r0, #0]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	a902      	add	r1, sp, #8
 8005288:	f000 f866 	bl	8005358 <_svfiprintf_r>
 800528c:	9b02      	ldr	r3, [sp, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	b01c      	add	sp, #112	; 0x70
 8005294:	f85d eb04 	ldr.w	lr, [sp], #4
 8005298:	b003      	add	sp, #12
 800529a:	4770      	bx	lr
 800529c:	20000010 	.word	0x20000010
 80052a0:	ffff0208 	.word	0xffff0208

080052a4 <__ssputs_r>:
 80052a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	688e      	ldr	r6, [r1, #8]
 80052aa:	429e      	cmp	r6, r3
 80052ac:	4682      	mov	sl, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	4690      	mov	r8, r2
 80052b2:	4699      	mov	r9, r3
 80052b4:	d837      	bhi.n	8005326 <__ssputs_r+0x82>
 80052b6:	898a      	ldrh	r2, [r1, #12]
 80052b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052bc:	d031      	beq.n	8005322 <__ssputs_r+0x7e>
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	6909      	ldr	r1, [r1, #16]
 80052c2:	1a6f      	subs	r7, r5, r1
 80052c4:	6965      	ldr	r5, [r4, #20]
 80052c6:	2302      	movs	r3, #2
 80052c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80052d0:	f109 0301 	add.w	r3, r9, #1
 80052d4:	443b      	add	r3, r7
 80052d6:	429d      	cmp	r5, r3
 80052d8:	bf38      	it	cc
 80052da:	461d      	movcc	r5, r3
 80052dc:	0553      	lsls	r3, r2, #21
 80052de:	d530      	bpl.n	8005342 <__ssputs_r+0x9e>
 80052e0:	4629      	mov	r1, r5
 80052e2:	f000 fb21 	bl	8005928 <_malloc_r>
 80052e6:	4606      	mov	r6, r0
 80052e8:	b950      	cbnz	r0, 8005300 <__ssputs_r+0x5c>
 80052ea:	230c      	movs	r3, #12
 80052ec:	f8ca 3000 	str.w	r3, [sl]
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	463a      	mov	r2, r7
 8005302:	6921      	ldr	r1, [r4, #16]
 8005304:	f7ff ff9b 	bl	800523e <memcpy>
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	81a3      	strh	r3, [r4, #12]
 8005314:	6126      	str	r6, [r4, #16]
 8005316:	6165      	str	r5, [r4, #20]
 8005318:	443e      	add	r6, r7
 800531a:	1bed      	subs	r5, r5, r7
 800531c:	6026      	str	r6, [r4, #0]
 800531e:	60a5      	str	r5, [r4, #8]
 8005320:	464e      	mov	r6, r9
 8005322:	454e      	cmp	r6, r9
 8005324:	d900      	bls.n	8005328 <__ssputs_r+0x84>
 8005326:	464e      	mov	r6, r9
 8005328:	4632      	mov	r2, r6
 800532a:	4641      	mov	r1, r8
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	f000 fa93 	bl	8005858 <memmove>
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	1b9b      	subs	r3, r3, r6
 8005336:	60a3      	str	r3, [r4, #8]
 8005338:	6823      	ldr	r3, [r4, #0]
 800533a:	441e      	add	r6, r3
 800533c:	6026      	str	r6, [r4, #0]
 800533e:	2000      	movs	r0, #0
 8005340:	e7dc      	b.n	80052fc <__ssputs_r+0x58>
 8005342:	462a      	mov	r2, r5
 8005344:	f000 fb4a 	bl	80059dc <_realloc_r>
 8005348:	4606      	mov	r6, r0
 800534a:	2800      	cmp	r0, #0
 800534c:	d1e2      	bne.n	8005314 <__ssputs_r+0x70>
 800534e:	6921      	ldr	r1, [r4, #16]
 8005350:	4650      	mov	r0, sl
 8005352:	f000 fa9b 	bl	800588c <_free_r>
 8005356:	e7c8      	b.n	80052ea <__ssputs_r+0x46>

08005358 <_svfiprintf_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	461d      	mov	r5, r3
 800535e:	898b      	ldrh	r3, [r1, #12]
 8005360:	061f      	lsls	r7, r3, #24
 8005362:	b09d      	sub	sp, #116	; 0x74
 8005364:	4680      	mov	r8, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4616      	mov	r6, r2
 800536a:	d50f      	bpl.n	800538c <_svfiprintf_r+0x34>
 800536c:	690b      	ldr	r3, [r1, #16]
 800536e:	b96b      	cbnz	r3, 800538c <_svfiprintf_r+0x34>
 8005370:	2140      	movs	r1, #64	; 0x40
 8005372:	f000 fad9 	bl	8005928 <_malloc_r>
 8005376:	6020      	str	r0, [r4, #0]
 8005378:	6120      	str	r0, [r4, #16]
 800537a:	b928      	cbnz	r0, 8005388 <_svfiprintf_r+0x30>
 800537c:	230c      	movs	r3, #12
 800537e:	f8c8 3000 	str.w	r3, [r8]
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	e0c8      	b.n	800551a <_svfiprintf_r+0x1c2>
 8005388:	2340      	movs	r3, #64	; 0x40
 800538a:	6163      	str	r3, [r4, #20]
 800538c:	2300      	movs	r3, #0
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
 8005390:	2320      	movs	r3, #32
 8005392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005396:	2330      	movs	r3, #48	; 0x30
 8005398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800539c:	9503      	str	r5, [sp, #12]
 800539e:	f04f 0b01 	mov.w	fp, #1
 80053a2:	4637      	mov	r7, r6
 80053a4:	463d      	mov	r5, r7
 80053a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80053aa:	b10b      	cbz	r3, 80053b0 <_svfiprintf_r+0x58>
 80053ac:	2b25      	cmp	r3, #37	; 0x25
 80053ae:	d13e      	bne.n	800542e <_svfiprintf_r+0xd6>
 80053b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80053b4:	d00b      	beq.n	80053ce <_svfiprintf_r+0x76>
 80053b6:	4653      	mov	r3, sl
 80053b8:	4632      	mov	r2, r6
 80053ba:	4621      	mov	r1, r4
 80053bc:	4640      	mov	r0, r8
 80053be:	f7ff ff71 	bl	80052a4 <__ssputs_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	f000 80a4 	beq.w	8005510 <_svfiprintf_r+0x1b8>
 80053c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ca:	4453      	add	r3, sl
 80053cc:	9309      	str	r3, [sp, #36]	; 0x24
 80053ce:	783b      	ldrb	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 809d 	beq.w	8005510 <_svfiprintf_r+0x1b8>
 80053d6:	2300      	movs	r3, #0
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9307      	str	r3, [sp, #28]
 80053e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e8:	931a      	str	r3, [sp, #104]	; 0x68
 80053ea:	462f      	mov	r7, r5
 80053ec:	2205      	movs	r2, #5
 80053ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80053f2:	4850      	ldr	r0, [pc, #320]	; (8005534 <_svfiprintf_r+0x1dc>)
 80053f4:	f7fa ff4c 	bl	8000290 <memchr>
 80053f8:	9b04      	ldr	r3, [sp, #16]
 80053fa:	b9d0      	cbnz	r0, 8005432 <_svfiprintf_r+0xda>
 80053fc:	06d9      	lsls	r1, r3, #27
 80053fe:	bf44      	itt	mi
 8005400:	2220      	movmi	r2, #32
 8005402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005406:	071a      	lsls	r2, r3, #28
 8005408:	bf44      	itt	mi
 800540a:	222b      	movmi	r2, #43	; 0x2b
 800540c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005410:	782a      	ldrb	r2, [r5, #0]
 8005412:	2a2a      	cmp	r2, #42	; 0x2a
 8005414:	d015      	beq.n	8005442 <_svfiprintf_r+0xea>
 8005416:	9a07      	ldr	r2, [sp, #28]
 8005418:	462f      	mov	r7, r5
 800541a:	2000      	movs	r0, #0
 800541c:	250a      	movs	r5, #10
 800541e:	4639      	mov	r1, r7
 8005420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005424:	3b30      	subs	r3, #48	; 0x30
 8005426:	2b09      	cmp	r3, #9
 8005428:	d94d      	bls.n	80054c6 <_svfiprintf_r+0x16e>
 800542a:	b1b8      	cbz	r0, 800545c <_svfiprintf_r+0x104>
 800542c:	e00f      	b.n	800544e <_svfiprintf_r+0xf6>
 800542e:	462f      	mov	r7, r5
 8005430:	e7b8      	b.n	80053a4 <_svfiprintf_r+0x4c>
 8005432:	4a40      	ldr	r2, [pc, #256]	; (8005534 <_svfiprintf_r+0x1dc>)
 8005434:	1a80      	subs	r0, r0, r2
 8005436:	fa0b f000 	lsl.w	r0, fp, r0
 800543a:	4318      	orrs	r0, r3
 800543c:	9004      	str	r0, [sp, #16]
 800543e:	463d      	mov	r5, r7
 8005440:	e7d3      	b.n	80053ea <_svfiprintf_r+0x92>
 8005442:	9a03      	ldr	r2, [sp, #12]
 8005444:	1d11      	adds	r1, r2, #4
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	9103      	str	r1, [sp, #12]
 800544a:	2a00      	cmp	r2, #0
 800544c:	db01      	blt.n	8005452 <_svfiprintf_r+0xfa>
 800544e:	9207      	str	r2, [sp, #28]
 8005450:	e004      	b.n	800545c <_svfiprintf_r+0x104>
 8005452:	4252      	negs	r2, r2
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	9207      	str	r2, [sp, #28]
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	783b      	ldrb	r3, [r7, #0]
 800545e:	2b2e      	cmp	r3, #46	; 0x2e
 8005460:	d10c      	bne.n	800547c <_svfiprintf_r+0x124>
 8005462:	787b      	ldrb	r3, [r7, #1]
 8005464:	2b2a      	cmp	r3, #42	; 0x2a
 8005466:	d133      	bne.n	80054d0 <_svfiprintf_r+0x178>
 8005468:	9b03      	ldr	r3, [sp, #12]
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	9203      	str	r2, [sp, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	bfb8      	it	lt
 8005474:	f04f 33ff 	movlt.w	r3, #4294967295
 8005478:	3702      	adds	r7, #2
 800547a:	9305      	str	r3, [sp, #20]
 800547c:	4d2e      	ldr	r5, [pc, #184]	; (8005538 <_svfiprintf_r+0x1e0>)
 800547e:	7839      	ldrb	r1, [r7, #0]
 8005480:	2203      	movs	r2, #3
 8005482:	4628      	mov	r0, r5
 8005484:	f7fa ff04 	bl	8000290 <memchr>
 8005488:	b138      	cbz	r0, 800549a <_svfiprintf_r+0x142>
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	1b40      	subs	r0, r0, r5
 800548e:	fa03 f000 	lsl.w	r0, r3, r0
 8005492:	9b04      	ldr	r3, [sp, #16]
 8005494:	4303      	orrs	r3, r0
 8005496:	3701      	adds	r7, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	7839      	ldrb	r1, [r7, #0]
 800549c:	4827      	ldr	r0, [pc, #156]	; (800553c <_svfiprintf_r+0x1e4>)
 800549e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a2:	2206      	movs	r2, #6
 80054a4:	1c7e      	adds	r6, r7, #1
 80054a6:	f7fa fef3 	bl	8000290 <memchr>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d038      	beq.n	8005520 <_svfiprintf_r+0x1c8>
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <_svfiprintf_r+0x1e8>)
 80054b0:	bb13      	cbnz	r3, 80054f8 <_svfiprintf_r+0x1a0>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	3307      	adds	r3, #7
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	3308      	adds	r3, #8
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054c0:	444b      	add	r3, r9
 80054c2:	9309      	str	r3, [sp, #36]	; 0x24
 80054c4:	e76d      	b.n	80053a2 <_svfiprintf_r+0x4a>
 80054c6:	fb05 3202 	mla	r2, r5, r2, r3
 80054ca:	2001      	movs	r0, #1
 80054cc:	460f      	mov	r7, r1
 80054ce:	e7a6      	b.n	800541e <_svfiprintf_r+0xc6>
 80054d0:	2300      	movs	r3, #0
 80054d2:	3701      	adds	r7, #1
 80054d4:	9305      	str	r3, [sp, #20]
 80054d6:	4619      	mov	r1, r3
 80054d8:	250a      	movs	r5, #10
 80054da:	4638      	mov	r0, r7
 80054dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e0:	3a30      	subs	r2, #48	; 0x30
 80054e2:	2a09      	cmp	r2, #9
 80054e4:	d903      	bls.n	80054ee <_svfiprintf_r+0x196>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c8      	beq.n	800547c <_svfiprintf_r+0x124>
 80054ea:	9105      	str	r1, [sp, #20]
 80054ec:	e7c6      	b.n	800547c <_svfiprintf_r+0x124>
 80054ee:	fb05 2101 	mla	r1, r5, r1, r2
 80054f2:	2301      	movs	r3, #1
 80054f4:	4607      	mov	r7, r0
 80054f6:	e7f0      	b.n	80054da <_svfiprintf_r+0x182>
 80054f8:	ab03      	add	r3, sp, #12
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	4622      	mov	r2, r4
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <_svfiprintf_r+0x1ec>)
 8005500:	a904      	add	r1, sp, #16
 8005502:	4640      	mov	r0, r8
 8005504:	f3af 8000 	nop.w
 8005508:	f1b0 3fff 	cmp.w	r0, #4294967295
 800550c:	4681      	mov	r9, r0
 800550e:	d1d6      	bne.n	80054be <_svfiprintf_r+0x166>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	065b      	lsls	r3, r3, #25
 8005514:	f53f af35 	bmi.w	8005382 <_svfiprintf_r+0x2a>
 8005518:	9809      	ldr	r0, [sp, #36]	; 0x24
 800551a:	b01d      	add	sp, #116	; 0x74
 800551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005520:	ab03      	add	r3, sp, #12
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	4622      	mov	r2, r4
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <_svfiprintf_r+0x1ec>)
 8005528:	a904      	add	r1, sp, #16
 800552a:	4640      	mov	r0, r8
 800552c:	f000 f882 	bl	8005634 <_printf_i>
 8005530:	e7ea      	b.n	8005508 <_svfiprintf_r+0x1b0>
 8005532:	bf00      	nop
 8005534:	08005b9a 	.word	0x08005b9a
 8005538:	08005ba0 	.word	0x08005ba0
 800553c:	08005ba4 	.word	0x08005ba4
 8005540:	00000000 	.word	0x00000000
 8005544:	080052a5 	.word	0x080052a5

08005548 <_printf_common>:
 8005548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	4691      	mov	r9, r2
 800554e:	461f      	mov	r7, r3
 8005550:	688a      	ldr	r2, [r1, #8]
 8005552:	690b      	ldr	r3, [r1, #16]
 8005554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005558:	4293      	cmp	r3, r2
 800555a:	bfb8      	it	lt
 800555c:	4613      	movlt	r3, r2
 800555e:	f8c9 3000 	str.w	r3, [r9]
 8005562:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005566:	4606      	mov	r6, r0
 8005568:	460c      	mov	r4, r1
 800556a:	b112      	cbz	r2, 8005572 <_printf_common+0x2a>
 800556c:	3301      	adds	r3, #1
 800556e:	f8c9 3000 	str.w	r3, [r9]
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	0699      	lsls	r1, r3, #26
 8005576:	bf42      	ittt	mi
 8005578:	f8d9 3000 	ldrmi.w	r3, [r9]
 800557c:	3302      	addmi	r3, #2
 800557e:	f8c9 3000 	strmi.w	r3, [r9]
 8005582:	6825      	ldr	r5, [r4, #0]
 8005584:	f015 0506 	ands.w	r5, r5, #6
 8005588:	d107      	bne.n	800559a <_printf_common+0x52>
 800558a:	f104 0a19 	add.w	sl, r4, #25
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	f8d9 2000 	ldr.w	r2, [r9]
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	42ab      	cmp	r3, r5
 8005598:	dc28      	bgt.n	80055ec <_printf_common+0xa4>
 800559a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	3300      	adds	r3, #0
 80055a2:	bf18      	it	ne
 80055a4:	2301      	movne	r3, #1
 80055a6:	0692      	lsls	r2, r2, #26
 80055a8:	d42d      	bmi.n	8005606 <_printf_common+0xbe>
 80055aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ae:	4639      	mov	r1, r7
 80055b0:	4630      	mov	r0, r6
 80055b2:	47c0      	blx	r8
 80055b4:	3001      	adds	r0, #1
 80055b6:	d020      	beq.n	80055fa <_printf_common+0xb2>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	68e5      	ldr	r5, [r4, #12]
 80055bc:	f8d9 2000 	ldr.w	r2, [r9]
 80055c0:	f003 0306 	and.w	r3, r3, #6
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	bf08      	it	eq
 80055c8:	1aad      	subeq	r5, r5, r2
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	6922      	ldr	r2, [r4, #16]
 80055ce:	bf0c      	ite	eq
 80055d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d4:	2500      	movne	r5, #0
 80055d6:	4293      	cmp	r3, r2
 80055d8:	bfc4      	itt	gt
 80055da:	1a9b      	subgt	r3, r3, r2
 80055dc:	18ed      	addgt	r5, r5, r3
 80055de:	f04f 0900 	mov.w	r9, #0
 80055e2:	341a      	adds	r4, #26
 80055e4:	454d      	cmp	r5, r9
 80055e6:	d11a      	bne.n	800561e <_printf_common+0xd6>
 80055e8:	2000      	movs	r0, #0
 80055ea:	e008      	b.n	80055fe <_printf_common+0xb6>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4652      	mov	r2, sl
 80055f0:	4639      	mov	r1, r7
 80055f2:	4630      	mov	r0, r6
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d103      	bne.n	8005602 <_printf_common+0xba>
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005602:	3501      	adds	r5, #1
 8005604:	e7c3      	b.n	800558e <_printf_common+0x46>
 8005606:	18e1      	adds	r1, r4, r3
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	2030      	movs	r0, #48	; 0x30
 800560c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005610:	4422      	add	r2, r4
 8005612:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005616:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800561a:	3302      	adds	r3, #2
 800561c:	e7c5      	b.n	80055aa <_printf_common+0x62>
 800561e:	2301      	movs	r3, #1
 8005620:	4622      	mov	r2, r4
 8005622:	4639      	mov	r1, r7
 8005624:	4630      	mov	r0, r6
 8005626:	47c0      	blx	r8
 8005628:	3001      	adds	r0, #1
 800562a:	d0e6      	beq.n	80055fa <_printf_common+0xb2>
 800562c:	f109 0901 	add.w	r9, r9, #1
 8005630:	e7d8      	b.n	80055e4 <_printf_common+0x9c>
	...

08005634 <_printf_i>:
 8005634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005638:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800563c:	460c      	mov	r4, r1
 800563e:	7e09      	ldrb	r1, [r1, #24]
 8005640:	b085      	sub	sp, #20
 8005642:	296e      	cmp	r1, #110	; 0x6e
 8005644:	4617      	mov	r7, r2
 8005646:	4606      	mov	r6, r0
 8005648:	4698      	mov	r8, r3
 800564a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800564c:	f000 80b3 	beq.w	80057b6 <_printf_i+0x182>
 8005650:	d822      	bhi.n	8005698 <_printf_i+0x64>
 8005652:	2963      	cmp	r1, #99	; 0x63
 8005654:	d036      	beq.n	80056c4 <_printf_i+0x90>
 8005656:	d80a      	bhi.n	800566e <_printf_i+0x3a>
 8005658:	2900      	cmp	r1, #0
 800565a:	f000 80b9 	beq.w	80057d0 <_printf_i+0x19c>
 800565e:	2958      	cmp	r1, #88	; 0x58
 8005660:	f000 8083 	beq.w	800576a <_printf_i+0x136>
 8005664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005668:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800566c:	e032      	b.n	80056d4 <_printf_i+0xa0>
 800566e:	2964      	cmp	r1, #100	; 0x64
 8005670:	d001      	beq.n	8005676 <_printf_i+0x42>
 8005672:	2969      	cmp	r1, #105	; 0x69
 8005674:	d1f6      	bne.n	8005664 <_printf_i+0x30>
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	6813      	ldr	r3, [r2, #0]
 800567a:	0605      	lsls	r5, r0, #24
 800567c:	f103 0104 	add.w	r1, r3, #4
 8005680:	d52a      	bpl.n	80056d8 <_printf_i+0xa4>
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da03      	bge.n	8005692 <_printf_i+0x5e>
 800568a:	222d      	movs	r2, #45	; 0x2d
 800568c:	425b      	negs	r3, r3
 800568e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005692:	486f      	ldr	r0, [pc, #444]	; (8005850 <_printf_i+0x21c>)
 8005694:	220a      	movs	r2, #10
 8005696:	e039      	b.n	800570c <_printf_i+0xd8>
 8005698:	2973      	cmp	r1, #115	; 0x73
 800569a:	f000 809d 	beq.w	80057d8 <_printf_i+0x1a4>
 800569e:	d808      	bhi.n	80056b2 <_printf_i+0x7e>
 80056a0:	296f      	cmp	r1, #111	; 0x6f
 80056a2:	d020      	beq.n	80056e6 <_printf_i+0xb2>
 80056a4:	2970      	cmp	r1, #112	; 0x70
 80056a6:	d1dd      	bne.n	8005664 <_printf_i+0x30>
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	f043 0320 	orr.w	r3, r3, #32
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	e003      	b.n	80056ba <_printf_i+0x86>
 80056b2:	2975      	cmp	r1, #117	; 0x75
 80056b4:	d017      	beq.n	80056e6 <_printf_i+0xb2>
 80056b6:	2978      	cmp	r1, #120	; 0x78
 80056b8:	d1d4      	bne.n	8005664 <_printf_i+0x30>
 80056ba:	2378      	movs	r3, #120	; 0x78
 80056bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056c0:	4864      	ldr	r0, [pc, #400]	; (8005854 <_printf_i+0x220>)
 80056c2:	e055      	b.n	8005770 <_printf_i+0x13c>
 80056c4:	6813      	ldr	r3, [r2, #0]
 80056c6:	1d19      	adds	r1, r3, #4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6011      	str	r1, [r2, #0]
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056d4:	2301      	movs	r3, #1
 80056d6:	e08c      	b.n	80057f2 <_printf_i+0x1be>
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6011      	str	r1, [r2, #0]
 80056dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056e0:	bf18      	it	ne
 80056e2:	b21b      	sxthne	r3, r3
 80056e4:	e7cf      	b.n	8005686 <_printf_i+0x52>
 80056e6:	6813      	ldr	r3, [r2, #0]
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	1d18      	adds	r0, r3, #4
 80056ec:	6010      	str	r0, [r2, #0]
 80056ee:	0628      	lsls	r0, r5, #24
 80056f0:	d501      	bpl.n	80056f6 <_printf_i+0xc2>
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	e002      	b.n	80056fc <_printf_i+0xc8>
 80056f6:	0668      	lsls	r0, r5, #25
 80056f8:	d5fb      	bpl.n	80056f2 <_printf_i+0xbe>
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	4854      	ldr	r0, [pc, #336]	; (8005850 <_printf_i+0x21c>)
 80056fe:	296f      	cmp	r1, #111	; 0x6f
 8005700:	bf14      	ite	ne
 8005702:	220a      	movne	r2, #10
 8005704:	2208      	moveq	r2, #8
 8005706:	2100      	movs	r1, #0
 8005708:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800570c:	6865      	ldr	r5, [r4, #4]
 800570e:	60a5      	str	r5, [r4, #8]
 8005710:	2d00      	cmp	r5, #0
 8005712:	f2c0 8095 	blt.w	8005840 <_printf_i+0x20c>
 8005716:	6821      	ldr	r1, [r4, #0]
 8005718:	f021 0104 	bic.w	r1, r1, #4
 800571c:	6021      	str	r1, [r4, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d13d      	bne.n	800579e <_printf_i+0x16a>
 8005722:	2d00      	cmp	r5, #0
 8005724:	f040 808e 	bne.w	8005844 <_printf_i+0x210>
 8005728:	4665      	mov	r5, ip
 800572a:	2a08      	cmp	r2, #8
 800572c:	d10b      	bne.n	8005746 <_printf_i+0x112>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	07db      	lsls	r3, r3, #31
 8005732:	d508      	bpl.n	8005746 <_printf_i+0x112>
 8005734:	6923      	ldr	r3, [r4, #16]
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	bfde      	ittt	le
 800573c:	2330      	movle	r3, #48	; 0x30
 800573e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005742:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005746:	ebac 0305 	sub.w	r3, ip, r5
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	f8cd 8000 	str.w	r8, [sp]
 8005750:	463b      	mov	r3, r7
 8005752:	aa03      	add	r2, sp, #12
 8005754:	4621      	mov	r1, r4
 8005756:	4630      	mov	r0, r6
 8005758:	f7ff fef6 	bl	8005548 <_printf_common>
 800575c:	3001      	adds	r0, #1
 800575e:	d14d      	bne.n	80057fc <_printf_i+0x1c8>
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	b005      	add	sp, #20
 8005766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800576a:	4839      	ldr	r0, [pc, #228]	; (8005850 <_printf_i+0x21c>)
 800576c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005770:	6813      	ldr	r3, [r2, #0]
 8005772:	6821      	ldr	r1, [r4, #0]
 8005774:	1d1d      	adds	r5, r3, #4
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6015      	str	r5, [r2, #0]
 800577a:	060a      	lsls	r2, r1, #24
 800577c:	d50b      	bpl.n	8005796 <_printf_i+0x162>
 800577e:	07ca      	lsls	r2, r1, #31
 8005780:	bf44      	itt	mi
 8005782:	f041 0120 	orrmi.w	r1, r1, #32
 8005786:	6021      	strmi	r1, [r4, #0]
 8005788:	b91b      	cbnz	r3, 8005792 <_printf_i+0x15e>
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	f022 0220 	bic.w	r2, r2, #32
 8005790:	6022      	str	r2, [r4, #0]
 8005792:	2210      	movs	r2, #16
 8005794:	e7b7      	b.n	8005706 <_printf_i+0xd2>
 8005796:	064d      	lsls	r5, r1, #25
 8005798:	bf48      	it	mi
 800579a:	b29b      	uxthmi	r3, r3
 800579c:	e7ef      	b.n	800577e <_printf_i+0x14a>
 800579e:	4665      	mov	r5, ip
 80057a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80057a4:	fb02 3311 	mls	r3, r2, r1, r3
 80057a8:	5cc3      	ldrb	r3, [r0, r3]
 80057aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80057ae:	460b      	mov	r3, r1
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d1f5      	bne.n	80057a0 <_printf_i+0x16c>
 80057b4:	e7b9      	b.n	800572a <_printf_i+0xf6>
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	6825      	ldr	r5, [r4, #0]
 80057ba:	6961      	ldr	r1, [r4, #20]
 80057bc:	1d18      	adds	r0, r3, #4
 80057be:	6010      	str	r0, [r2, #0]
 80057c0:	0628      	lsls	r0, r5, #24
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0x196>
 80057c6:	6019      	str	r1, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <_printf_i+0x19c>
 80057ca:	066a      	lsls	r2, r5, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0x192>
 80057ce:	8019      	strh	r1, [r3, #0]
 80057d0:	2300      	movs	r3, #0
 80057d2:	6123      	str	r3, [r4, #16]
 80057d4:	4665      	mov	r5, ip
 80057d6:	e7b9      	b.n	800574c <_printf_i+0x118>
 80057d8:	6813      	ldr	r3, [r2, #0]
 80057da:	1d19      	adds	r1, r3, #4
 80057dc:	6011      	str	r1, [r2, #0]
 80057de:	681d      	ldr	r5, [r3, #0]
 80057e0:	6862      	ldr	r2, [r4, #4]
 80057e2:	2100      	movs	r1, #0
 80057e4:	4628      	mov	r0, r5
 80057e6:	f7fa fd53 	bl	8000290 <memchr>
 80057ea:	b108      	cbz	r0, 80057f0 <_printf_i+0x1bc>
 80057ec:	1b40      	subs	r0, r0, r5
 80057ee:	6060      	str	r0, [r4, #4]
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	6123      	str	r3, [r4, #16]
 80057f4:	2300      	movs	r3, #0
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fa:	e7a7      	b.n	800574c <_printf_i+0x118>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	462a      	mov	r2, r5
 8005800:	4639      	mov	r1, r7
 8005802:	4630      	mov	r0, r6
 8005804:	47c0      	blx	r8
 8005806:	3001      	adds	r0, #1
 8005808:	d0aa      	beq.n	8005760 <_printf_i+0x12c>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	079b      	lsls	r3, r3, #30
 800580e:	d413      	bmi.n	8005838 <_printf_i+0x204>
 8005810:	68e0      	ldr	r0, [r4, #12]
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	4298      	cmp	r0, r3
 8005816:	bfb8      	it	lt
 8005818:	4618      	movlt	r0, r3
 800581a:	e7a3      	b.n	8005764 <_printf_i+0x130>
 800581c:	2301      	movs	r3, #1
 800581e:	464a      	mov	r2, r9
 8005820:	4639      	mov	r1, r7
 8005822:	4630      	mov	r0, r6
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d09a      	beq.n	8005760 <_printf_i+0x12c>
 800582a:	3501      	adds	r5, #1
 800582c:	68e3      	ldr	r3, [r4, #12]
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	42ab      	cmp	r3, r5
 8005834:	dcf2      	bgt.n	800581c <_printf_i+0x1e8>
 8005836:	e7eb      	b.n	8005810 <_printf_i+0x1dc>
 8005838:	2500      	movs	r5, #0
 800583a:	f104 0919 	add.w	r9, r4, #25
 800583e:	e7f5      	b.n	800582c <_printf_i+0x1f8>
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1ac      	bne.n	800579e <_printf_i+0x16a>
 8005844:	7803      	ldrb	r3, [r0, #0]
 8005846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800584e:	e76c      	b.n	800572a <_printf_i+0xf6>
 8005850:	08005bab 	.word	0x08005bab
 8005854:	08005bbc 	.word	0x08005bbc

08005858 <memmove>:
 8005858:	4288      	cmp	r0, r1
 800585a:	b510      	push	{r4, lr}
 800585c:	eb01 0302 	add.w	r3, r1, r2
 8005860:	d807      	bhi.n	8005872 <memmove+0x1a>
 8005862:	1e42      	subs	r2, r0, #1
 8005864:	4299      	cmp	r1, r3
 8005866:	d00a      	beq.n	800587e <memmove+0x26>
 8005868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800586c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005870:	e7f8      	b.n	8005864 <memmove+0xc>
 8005872:	4283      	cmp	r3, r0
 8005874:	d9f5      	bls.n	8005862 <memmove+0xa>
 8005876:	1881      	adds	r1, r0, r2
 8005878:	1ad2      	subs	r2, r2, r3
 800587a:	42d3      	cmn	r3, r2
 800587c:	d100      	bne.n	8005880 <memmove+0x28>
 800587e:	bd10      	pop	{r4, pc}
 8005880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005888:	e7f7      	b.n	800587a <memmove+0x22>
	...

0800588c <_free_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4605      	mov	r5, r0
 8005890:	2900      	cmp	r1, #0
 8005892:	d045      	beq.n	8005920 <_free_r+0x94>
 8005894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005898:	1f0c      	subs	r4, r1, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	bfb8      	it	lt
 800589e:	18e4      	addlt	r4, r4, r3
 80058a0:	f000 f8d2 	bl	8005a48 <__malloc_lock>
 80058a4:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <_free_r+0x98>)
 80058a6:	6813      	ldr	r3, [r2, #0]
 80058a8:	4610      	mov	r0, r2
 80058aa:	b933      	cbnz	r3, 80058ba <_free_r+0x2e>
 80058ac:	6063      	str	r3, [r4, #4]
 80058ae:	6014      	str	r4, [r2, #0]
 80058b0:	4628      	mov	r0, r5
 80058b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b6:	f000 b8c8 	b.w	8005a4a <__malloc_unlock>
 80058ba:	42a3      	cmp	r3, r4
 80058bc:	d90c      	bls.n	80058d8 <_free_r+0x4c>
 80058be:	6821      	ldr	r1, [r4, #0]
 80058c0:	1862      	adds	r2, r4, r1
 80058c2:	4293      	cmp	r3, r2
 80058c4:	bf04      	itt	eq
 80058c6:	681a      	ldreq	r2, [r3, #0]
 80058c8:	685b      	ldreq	r3, [r3, #4]
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	bf04      	itt	eq
 80058ce:	1852      	addeq	r2, r2, r1
 80058d0:	6022      	streq	r2, [r4, #0]
 80058d2:	6004      	str	r4, [r0, #0]
 80058d4:	e7ec      	b.n	80058b0 <_free_r+0x24>
 80058d6:	4613      	mov	r3, r2
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	b10a      	cbz	r2, 80058e0 <_free_r+0x54>
 80058dc:	42a2      	cmp	r2, r4
 80058de:	d9fa      	bls.n	80058d6 <_free_r+0x4a>
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	1858      	adds	r0, r3, r1
 80058e4:	42a0      	cmp	r0, r4
 80058e6:	d10b      	bne.n	8005900 <_free_r+0x74>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	4401      	add	r1, r0
 80058ec:	1858      	adds	r0, r3, r1
 80058ee:	4282      	cmp	r2, r0
 80058f0:	6019      	str	r1, [r3, #0]
 80058f2:	d1dd      	bne.n	80058b0 <_free_r+0x24>
 80058f4:	6810      	ldr	r0, [r2, #0]
 80058f6:	6852      	ldr	r2, [r2, #4]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	4401      	add	r1, r0
 80058fc:	6019      	str	r1, [r3, #0]
 80058fe:	e7d7      	b.n	80058b0 <_free_r+0x24>
 8005900:	d902      	bls.n	8005908 <_free_r+0x7c>
 8005902:	230c      	movs	r3, #12
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	e7d3      	b.n	80058b0 <_free_r+0x24>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	1821      	adds	r1, r4, r0
 800590c:	428a      	cmp	r2, r1
 800590e:	bf04      	itt	eq
 8005910:	6811      	ldreq	r1, [r2, #0]
 8005912:	6852      	ldreq	r2, [r2, #4]
 8005914:	6062      	str	r2, [r4, #4]
 8005916:	bf04      	itt	eq
 8005918:	1809      	addeq	r1, r1, r0
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	605c      	str	r4, [r3, #4]
 800591e:	e7c7      	b.n	80058b0 <_free_r+0x24>
 8005920:	bd38      	pop	{r3, r4, r5, pc}
 8005922:	bf00      	nop
 8005924:	200155f0 	.word	0x200155f0

08005928 <_malloc_r>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	1ccd      	adds	r5, r1, #3
 800592c:	f025 0503 	bic.w	r5, r5, #3
 8005930:	3508      	adds	r5, #8
 8005932:	2d0c      	cmp	r5, #12
 8005934:	bf38      	it	cc
 8005936:	250c      	movcc	r5, #12
 8005938:	2d00      	cmp	r5, #0
 800593a:	4606      	mov	r6, r0
 800593c:	db01      	blt.n	8005942 <_malloc_r+0x1a>
 800593e:	42a9      	cmp	r1, r5
 8005940:	d903      	bls.n	800594a <_malloc_r+0x22>
 8005942:	230c      	movs	r3, #12
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	2000      	movs	r0, #0
 8005948:	bd70      	pop	{r4, r5, r6, pc}
 800594a:	f000 f87d 	bl	8005a48 <__malloc_lock>
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <_malloc_r+0xac>)
 8005950:	6814      	ldr	r4, [r2, #0]
 8005952:	4621      	mov	r1, r4
 8005954:	b991      	cbnz	r1, 800597c <_malloc_r+0x54>
 8005956:	4c20      	ldr	r4, [pc, #128]	; (80059d8 <_malloc_r+0xb0>)
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	b91b      	cbnz	r3, 8005964 <_malloc_r+0x3c>
 800595c:	4630      	mov	r0, r6
 800595e:	f000 f863 	bl	8005a28 <_sbrk_r>
 8005962:	6020      	str	r0, [r4, #0]
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f000 f85e 	bl	8005a28 <_sbrk_r>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d124      	bne.n	80059ba <_malloc_r+0x92>
 8005970:	230c      	movs	r3, #12
 8005972:	6033      	str	r3, [r6, #0]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f868 	bl	8005a4a <__malloc_unlock>
 800597a:	e7e4      	b.n	8005946 <_malloc_r+0x1e>
 800597c:	680b      	ldr	r3, [r1, #0]
 800597e:	1b5b      	subs	r3, r3, r5
 8005980:	d418      	bmi.n	80059b4 <_malloc_r+0x8c>
 8005982:	2b0b      	cmp	r3, #11
 8005984:	d90f      	bls.n	80059a6 <_malloc_r+0x7e>
 8005986:	600b      	str	r3, [r1, #0]
 8005988:	50cd      	str	r5, [r1, r3]
 800598a:	18cc      	adds	r4, r1, r3
 800598c:	4630      	mov	r0, r6
 800598e:	f000 f85c 	bl	8005a4a <__malloc_unlock>
 8005992:	f104 000b 	add.w	r0, r4, #11
 8005996:	1d23      	adds	r3, r4, #4
 8005998:	f020 0007 	bic.w	r0, r0, #7
 800599c:	1ac3      	subs	r3, r0, r3
 800599e:	d0d3      	beq.n	8005948 <_malloc_r+0x20>
 80059a0:	425a      	negs	r2, r3
 80059a2:	50e2      	str	r2, [r4, r3]
 80059a4:	e7d0      	b.n	8005948 <_malloc_r+0x20>
 80059a6:	428c      	cmp	r4, r1
 80059a8:	684b      	ldr	r3, [r1, #4]
 80059aa:	bf16      	itet	ne
 80059ac:	6063      	strne	r3, [r4, #4]
 80059ae:	6013      	streq	r3, [r2, #0]
 80059b0:	460c      	movne	r4, r1
 80059b2:	e7eb      	b.n	800598c <_malloc_r+0x64>
 80059b4:	460c      	mov	r4, r1
 80059b6:	6849      	ldr	r1, [r1, #4]
 80059b8:	e7cc      	b.n	8005954 <_malloc_r+0x2c>
 80059ba:	1cc4      	adds	r4, r0, #3
 80059bc:	f024 0403 	bic.w	r4, r4, #3
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d005      	beq.n	80059d0 <_malloc_r+0xa8>
 80059c4:	1a21      	subs	r1, r4, r0
 80059c6:	4630      	mov	r0, r6
 80059c8:	f000 f82e 	bl	8005a28 <_sbrk_r>
 80059cc:	3001      	adds	r0, #1
 80059ce:	d0cf      	beq.n	8005970 <_malloc_r+0x48>
 80059d0:	6025      	str	r5, [r4, #0]
 80059d2:	e7db      	b.n	800598c <_malloc_r+0x64>
 80059d4:	200155f0 	.word	0x200155f0
 80059d8:	200155f4 	.word	0x200155f4

080059dc <_realloc_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	4607      	mov	r7, r0
 80059e0:	4614      	mov	r4, r2
 80059e2:	460e      	mov	r6, r1
 80059e4:	b921      	cbnz	r1, 80059f0 <_realloc_r+0x14>
 80059e6:	4611      	mov	r1, r2
 80059e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059ec:	f7ff bf9c 	b.w	8005928 <_malloc_r>
 80059f0:	b922      	cbnz	r2, 80059fc <_realloc_r+0x20>
 80059f2:	f7ff ff4b 	bl	800588c <_free_r>
 80059f6:	4625      	mov	r5, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fc:	f000 f826 	bl	8005a4c <_malloc_usable_size_r>
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d20f      	bcs.n	8005a24 <_realloc_r+0x48>
 8005a04:	4621      	mov	r1, r4
 8005a06:	4638      	mov	r0, r7
 8005a08:	f7ff ff8e 	bl	8005928 <_malloc_r>
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d0f2      	beq.n	80059f8 <_realloc_r+0x1c>
 8005a12:	4631      	mov	r1, r6
 8005a14:	4622      	mov	r2, r4
 8005a16:	f7ff fc12 	bl	800523e <memcpy>
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f7ff ff35 	bl	800588c <_free_r>
 8005a22:	e7e9      	b.n	80059f8 <_realloc_r+0x1c>
 8005a24:	4635      	mov	r5, r6
 8005a26:	e7e7      	b.n	80059f8 <_realloc_r+0x1c>

08005a28 <_sbrk_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4c06      	ldr	r4, [pc, #24]	; (8005a44 <_sbrk_r+0x1c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	4605      	mov	r5, r0
 8005a30:	4608      	mov	r0, r1
 8005a32:	6023      	str	r3, [r4, #0]
 8005a34:	f7fa ffdc 	bl	80009f0 <_sbrk>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d102      	bne.n	8005a42 <_sbrk_r+0x1a>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	b103      	cbz	r3, 8005a42 <_sbrk_r+0x1a>
 8005a40:	602b      	str	r3, [r5, #0]
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	20015748 	.word	0x20015748

08005a48 <__malloc_lock>:
 8005a48:	4770      	bx	lr

08005a4a <__malloc_unlock>:
 8005a4a:	4770      	bx	lr

08005a4c <_malloc_usable_size_r>:
 8005a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a50:	1f18      	subs	r0, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bfbc      	itt	lt
 8005a56:	580b      	ldrlt	r3, [r1, r0]
 8005a58:	18c0      	addlt	r0, r0, r3
 8005a5a:	4770      	bx	lr

08005a5c <_init>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr

08005a68 <_fini>:
 8005a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6a:	bf00      	nop
 8005a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6e:	bc08      	pop	{r3}
 8005a70:	469e      	mov	lr, r3
 8005a72:	4770      	bx	lr
