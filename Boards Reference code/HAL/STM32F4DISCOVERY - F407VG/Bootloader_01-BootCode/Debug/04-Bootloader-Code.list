
04-Bootloader-Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080043f0  080043f0  000143f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004944  08004944  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004944  08004944  00014944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800494c  0800494c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000078  080049cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080049cc  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a458  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cc0  00000000  00000000  0002a500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ad5  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5f7  00000000  00000000  0004dced  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1cc2  00000000  00000000  000582e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119fa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c8  00000000  00000000  0011a024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080043d8 	.word	0x080043d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080043d8 	.word	0x080043d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a4:	f001 f8cc 	bl	8001740 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005a8:	f000 f822 	bl	80005f0 <SystemClock_Config>

	/* Configure the peripherals */
    GPIO_Init();
 80005ac:	f000 f8fa 	bl	80007a4 <GPIO_Init>
    USART2_Init();
 80005b0:	f000 f87e 	bl	80006b0 <USART2_Init>
    USART3_Init();
 80005b4:	f000 f8a6 	bl	8000704 <USART3_Init>
    CRC_Init();
 80005b8:	f000 f950 	bl	800085c <CRC_Init>

	/* Start Code */

    /* Lets check whether button is pressed or not, if not pressed jump to user application */
    if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET )
 80005bc:	2101      	movs	r1, #1
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x44>)
 80005c0:	f001 ffa2 	bl	8002508 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d105      	bne.n	80005d6 <main+0x36>
    {
  	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x48>)
 80005cc:	f000 f8c4 	bl	8000758 <printmsg>

  	  //we should continue in bootloader mode
  	  bootloader_uart_read_data();
 80005d0:	f000 f958 	bl	8000884 <bootloader_uart_read_data>
 80005d4:	e004      	b.n	80005e0 <main+0x40>

    }
    else
    {
  	  printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x4c>)
 80005d8:	f000 f8be 	bl	8000758 <printmsg>

  		//jump to user application
  		bootloader_jump_to_user_app();
 80005dc:	f000 f9cc 	bl	8000978 <bootloader_jump_to_user_app>

    }
    while(1);
 80005e0:	e7fe      	b.n	80005e0 <main+0x40>
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	080043f0 	.word	0x080043f0
 80005ec:	08004428 	.word	0x08004428

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fadc 	bl	8003bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB+ and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	4618      	mov	r0, r3
 800064c:	f001 ffcc 	bl	80025e8 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000656:	f000 f9bb 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fa25 	bl	8002ac8 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000684:	f000 f9a4 	bl	80009d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800068c:	23c0      	movs	r3, #192	; 0xc0
 800068e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fc08 	bl	8002eac <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a2:	f000 f995 	bl	80009d0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <USART2_Init>:

void USART2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <USART2_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <USART2_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <USART2_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <USART2_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <USART2_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <USART2_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <USART2_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <USART2_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <USART2_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <USART2_Init+0x4c>)
 80006e8:	f002 fcc2 	bl	8003070 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <USART2_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f96d 	bl	80009d0 <Error_Handler>
  }

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e8 	.word	0x200000e8
 8000700:	40004400 	.word	0x40004400

08000704 <USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void USART3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <USART3_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <USART3_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <USART3_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <USART3_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <USART3_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <USART3_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <USART3_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <USART3_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <USART3_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <USART3_Init+0x4c>)
 800073c:	f002 fc98 	bl	8003070 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <USART3_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f943 	bl	80009d0 <Error_Handler>
  }

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000a0 	.word	0x200000a0
 8000754:	40004800 	.word	0x40004800

08000758 <printmsg>:

/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 8000758:	b40f      	push	{r0, r1, r2, r3}
 800075a:	b580      	push	{r7, lr}
 800075c:	b096      	sub	sp, #88	; 0x58
 800075e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fa42 	bl	8003bf8 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd39 	bl	80001f0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0108 	add.w	r1, r7, #8
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <printmsg+0x48>)
 800078c:	f002 fcbd 	bl	800310a <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000790:	bf00      	nop
 8000792:	3758      	adds	r7, #88	; 0x58
 8000794:	46bd      	mov	sp, r7
 8000796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000e8 	.word	0x200000e8

080007a4 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <GPIO_Init+0xa8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <GPIO_Init+0xa8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <GPIO_Init+0xa8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <GPIO_Init+0xa8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <GPIO_Init+0xa8>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <GPIO_Init+0xa8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007f8:	4815      	ldr	r0, [pc, #84]	; (8000850 <GPIO_Init+0xac>)
 80007fa:	f001 fe9d 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <GPIO_Init+0xb0>)
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <GPIO_Init+0xb4>)
 8000812:	f001 fcdf 	bl	80021d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000816:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <GPIO_Init+0xac>)
 8000830:	f001 fcd0 	bl	80021d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2006      	movs	r0, #6
 800083a:	f001 f8ce 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800083e:	2006      	movs	r0, #6
 8000840:	f001 f8e7 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020c00 	.word	0x40020c00
 8000854:	10210000 	.word	0x10210000
 8000858:	40020000 	.word	0x40020000

0800085c <CRC_Init>:

void CRC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <CRC_Init+0x20>)
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <CRC_Init+0x24>)
 8000864:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <CRC_Init+0x20>)
 8000868:	f001 f8fa 	bl	8001a60 <HAL_CRC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <CRC_Init+0x1a>
  {
    Error_Handler();
 8000872:	f000 f8ad 	bl	80009d0 <Error_Handler>
  }

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000e0 	.word	0x200000e0
 8000880:	40023000 	.word	0x40023000

08000884 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
   uint8_t rcv_len=0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 800088e:	22c8      	movs	r2, #200	; 0xc8
 8000890:	2100      	movs	r1, #0
 8000892:	4835      	ldr	r0, [pc, #212]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000894:	f003 f992 	bl	8003bbc <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	2201      	movs	r2, #1
 800089e:	4932      	ldr	r1, [pc, #200]	; (8000968 <bootloader_uart_read_data+0xe4>)
 80008a0:	4832      	ldr	r0, [pc, #200]	; (800096c <bootloader_uart_read_data+0xe8>)
 80008a2:	f002 fccb 	bl	800323c <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 80008a6:	4b30      	ldr	r3, [pc, #192]	; (8000968 <bootloader_uart_read_data+0xe4>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	492e      	ldr	r1, [pc, #184]	; (8000970 <bootloader_uart_read_data+0xec>)
 80008b6:	482d      	ldr	r0, [pc, #180]	; (800096c <bootloader_uart_read_data+0xe8>)
 80008b8:	f002 fcc0 	bl	800323c <HAL_UART_Receive>

		switch(bl_rx_buffer[1])
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <bootloader_uart_read_data+0xe4>)
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	3b51      	subs	r3, #81	; 0x51
 80008c2:	2b0b      	cmp	r3, #11
 80008c4:	d84a      	bhi.n	800095c <bootloader_uart_read_data+0xd8>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <bootloader_uart_read_data+0x48>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008fd 	.word	0x080008fd
 80008d0:	08000905 	.word	0x08000905
 80008d4:	0800090d 	.word	0x0800090d
 80008d8:	08000915 	.word	0x08000915
 80008dc:	0800091d 	.word	0x0800091d
 80008e0:	08000925 	.word	0x08000925
 80008e4:	0800092d 	.word	0x0800092d
 80008e8:	08000935 	.word	0x08000935
 80008ec:	0800093d 	.word	0x0800093d
 80008f0:	08000945 	.word	0x08000945
 80008f4:	0800094d 	.word	0x0800094d
 80008f8:	08000955 	.word	0x08000955
		{
            case BL_GET_VER:
            	bootloader_handle_getver_cmd(bl_rx_buffer);
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <bootloader_uart_read_data+0xe4>)
 80008fe:	f000 f86f 	bl	80009e0 <bootloader_handle_getver_cmd>
                break;
 8000902:	e02f      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000904:	4818      	ldr	r0, [pc, #96]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000906:	f000 f92f 	bl	8000b68 <bootloader_handle_gethelp_cmd>
                break;
 800090a:	e02b      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 800090c:	4816      	ldr	r0, [pc, #88]	; (8000968 <bootloader_uart_read_data+0xe4>)
 800090e:	f000 f967 	bl	8000be0 <bootloader_handle_getcid_cmd>
                break;
 8000912:	e027      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000914:	4814      	ldr	r0, [pc, #80]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000916:	f000 f9c1 	bl	8000c9c <bootloader_handle_getrdp_cmd>
                break;
 800091a:	e023      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 800091c:	4812      	ldr	r0, [pc, #72]	; (8000968 <bootloader_uart_read_data+0xe4>)
 800091e:	f000 fa1d 	bl	8000d5c <bootloader_handle_go_cmd>
                break;
 8000922:	e01f      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000926:	f000 fac1 	bl	8000eac <bootloader_handle_flash_erase_cmd>
                break;
 800092a:	e01b      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 800092c:	480e      	ldr	r0, [pc, #56]	; (8000968 <bootloader_uart_read_data+0xe4>)
 800092e:	f000 fb71 	bl	8001014 <bootloader_handle_mem_write_cmd>
                break;
 8000932:	e017      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000936:	f000 fc23 	bl	8001180 <bootloader_handle_en_rw_protect>
                break;
 800093a:	e013      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);  //
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <bootloader_uart_read_data+0xe4>)
 800093e:	f000 fd18 	bl	8001372 <bootloader_handle_mem_read>
                break;
 8000942:	e00f      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000946:	f000 fd1f 	bl	8001388 <bootloader_handle_read_sector_protection_status>
                break;
 800094a:	e00b      	b.n	8000964 <bootloader_uart_read_data+0xe0>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer); //
 800094c:	4806      	ldr	r0, [pc, #24]	; (8000968 <bootloader_uart_read_data+0xe4>)
 800094e:	f000 fdaf 	bl	80014b0 <bootloader_handle_read_otp>
                break;
 8000952:	e007      	b.n	8000964 <bootloader_uart_read_data+0xe0>
			case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <bootloader_uart_read_data+0xe4>)
 8000956:	f000 fd5f 	bl	8001418 <bootloader_handle_dis_rw_protect>
                break;
 800095a:	e003      	b.n	8000964 <bootloader_uart_read_data+0xe0>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <bootloader_uart_read_data+0xf0>)
 800095e:	f7ff fefb 	bl	8000758 <printmsg>
                break;
 8000962:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000964:	e793      	b.n	800088e <bootloader_uart_read_data+0xa>
 8000966:	bf00      	nop
 8000968:	20000128 	.word	0x20000128
 800096c:	200000a0 	.word	0x200000a0
 8000970:	20000129 	.word	0x20000129
 8000974:	08004464 	.word	0x08004464

08000978 <bootloader_jump_to_user_app>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800097e:	480f      	ldr	r0, [pc, #60]	; (80009bc <bootloader_jump_to_user_app+0x44>)
 8000980:	f7ff feea 	bl	8000758 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <bootloader_jump_to_user_app+0x48>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <bootloader_jump_to_user_app+0x4c>)
 800098e:	f7ff fee3 	bl	8000758 <printmsg>
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f383 8808 	msr	MSP, r3
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4 */

    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <bootloader_jump_to_user_app+0x50>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <bootloader_jump_to_user_app+0x54>)
 80009aa:	f7ff fed5 	bl	8000758 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4798      	blx	r3

}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	0800449c 	.word	0x0800449c
 80009c0:	08008000 	.word	0x08008000
 80009c4:	080044c8 	.word	0x080044c8
 80009c8:	08008004 	.word	0x08008004
 80009cc:	080044e8 	.word	0x080044e8

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <bootloader_handle_getver_cmd>:
**************Implementation of Boot-loader Command Handle functions *********
******************************************************************************
*/
/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

    uint8_t bl_version;

    // 1) verify the checksum
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 80009e8:	481d      	ldr	r0, [pc, #116]	; (8000a60 <bootloader_handle_getver_cmd+0x80>)
 80009ea:	f7ff feb5 	bl	8000758 <printmsg>

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3b04      	subs	r3, #4
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3b04      	subs	r3, #4
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f000 f85c 	bl	8000ac8 <bootloader_verify_crc>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d11a      	bne.n	8000a4c <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <bootloader_handle_getver_cmd+0x84>)
 8000a18:	f7ff fe9e 	bl	8000758 <printmsg>
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f824 	bl	8000a70 <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8000a28:	f000 f896 	bl	8000b58 <get_bootloader_version>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4619      	mov	r1, r3
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	461a      	mov	r2, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <bootloader_handle_getver_cmd+0x88>)
 8000a3a:	f7ff fe8d 	bl	8000758 <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 8000a3e:	f107 030f 	add.w	r3, r7, #15
 8000a42:	2101      	movs	r1, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f873 	bl	8000b30 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        //checksum is wrong send nack
        bootloader_send_nack();
    }

}
 8000a4a:	e004      	b.n	8000a56 <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <bootloader_handle_getver_cmd+0x8c>)
 8000a4e:	f7ff fe83 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000a52:	f000 f827 	bl	8000aa4 <bootloader_send_nack>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08004514 	.word	0x08004514
 8000a64:	08004540 	.word	0x08004540
 8000a68:	08004564 	.word	0x08004564
 8000a6c:	08004584 	.word	0x08004584

08000a70 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000a80:	23a5      	movs	r3, #165	; 0xa5
 8000a82:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8000a88:	f107 010c 	add.w	r1, r7, #12
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	2202      	movs	r2, #2
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <bootloader_send_ack+0x30>)
 8000a94:	f002 fb39 	bl	800310a <HAL_UART_Transmit>

}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000a0 	.word	0x200000a0

08000aa4 <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000aaa:	237f      	movs	r3, #127	; 0x7f
 8000aac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8000aae:	1df9      	adds	r1, r7, #7
 8000ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <bootloader_send_nack+0x20>)
 8000ab8:	f002 fb27 	bl	800310a <HAL_UART_Transmit>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000a0 	.word	0x200000a0

08000ac8 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 8000ad4:	23ff      	movs	r3, #255	; 0xff
 8000ad6:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
 8000adc:	e00f      	b.n	8000afe <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2201      	movs	r2, #1
 8000aee:	4619      	mov	r1, r3
 8000af0:	480e      	ldr	r0, [pc, #56]	; (8000b2c <bootloader_verify_crc+0x64>)
 8000af2:	f000 ffd1 	bl	8001a98 <HAL_CRC_Accumulate>
 8000af6:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	3301      	adds	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d3eb      	bcc.n	8000ade <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <bootloader_verify_crc+0x64>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <bootloader_verify_crc+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f042 0201 	orr.w	r2, r2, #1
 8000b14:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d101      	bne.n	8000b22 <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000e0 	.word	0x200000e0

08000b30 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <bootloader_uart_write_data+0x24>)
 8000b46:	f002 fae0 	bl	800310a <HAL_UART_Transmit>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000a0 	.word	0x200000a0

08000b58 <get_bootloader_version>:

//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8000b5c:	2310      	movs	r3, #16
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000b70:	4816      	ldr	r0, [pc, #88]	; (8000bcc <bootloader_handle_gethelp_cmd+0x64>)
 8000b72:	f7ff fdf1 	bl	8000758 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <bootloader_handle_gethelp_cmd+0x68>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]

	//extract the CRC sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3b04      	subs	r3, #4
 8000b82:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <bootloader_handle_gethelp_cmd+0x68>)
 8000b84:	4413      	add	r3, r2
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b04      	subs	r3, #4
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	4619      	mov	r1, r3
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <bootloader_handle_gethelp_cmd+0x68>)
 8000b94:	f7ff ff98 	bl	8000ac8 <bootloader_verify_crc>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10d      	bne.n	8000bba <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <bootloader_handle_gethelp_cmd+0x6c>)
 8000ba0:	f7ff fdda 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2108      	movs	r1, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff60 	bl	8000a70 <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <bootloader_handle_gethelp_cmd+0x70>)
 8000bb4:	f7ff ffbc 	bl	8000b30 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000bb8:	e004      	b.n	8000bc4 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000bba:	4808      	ldr	r0, [pc, #32]	; (8000bdc <bootloader_handle_gethelp_cmd+0x74>)
 8000bbc:	f7ff fdcc 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000bc0:	f7ff ff70 	bl	8000aa4 <bootloader_send_nack>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	080045a4 	.word	0x080045a4
 8000bd0:	20000128 	.word	0x20000128
 8000bd4:	08004540 	.word	0x08004540
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	08004584 	.word	0x08004584

08000be0 <bootloader_handle_getcid_cmd>:


/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000bec:	481d      	ldr	r0, [pc, #116]	; (8000c64 <bootloader_handle_getcid_cmd+0x84>)
 8000bee:	f7ff fdb3 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <bootloader_handle_getcid_cmd+0x88>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3b04      	subs	r3, #4
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <bootloader_handle_getcid_cmd+0x88>)
 8000c00:	4413      	add	r3, r2
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3b04      	subs	r3, #4
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4816      	ldr	r0, [pc, #88]	; (8000c68 <bootloader_handle_getcid_cmd+0x88>)
 8000c10:	f7ff ff5a 	bl	8000ac8 <bootloader_verify_crc>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d11a      	bne.n	8000c50 <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c1a:	4814      	ldr	r0, [pc, #80]	; (8000c6c <bootloader_handle_getcid_cmd+0x8c>)
 8000c1c:	f7ff fd9c 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2102      	movs	r1, #2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ff22 	bl	8000a70 <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8000c2c:	f000 f824 	bl	8000c78 <get_mcu_chip_id>
 8000c30:	4603      	mov	r3, r0
 8000c32:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000c34:	89fb      	ldrh	r3, [r7, #14]
 8000c36:	4619      	mov	r1, r3
 8000c38:	89fb      	ldrh	r3, [r7, #14]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <bootloader_handle_getcid_cmd+0x90>)
 8000c3e:	f7ff fd8b 	bl	8000758 <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000c42:	f107 030e 	add.w	r3, r7, #14
 8000c46:	2102      	movs	r1, #2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff71 	bl	8000b30 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000c4e:	e004      	b.n	8000c5a <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <bootloader_handle_getcid_cmd+0x94>)
 8000c52:	f7ff fd81 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000c56:	f7ff ff25 	bl	8000aa4 <bootloader_send_nack>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	080045d0 	.word	0x080045d0
 8000c68:	20000128 	.word	0x20000128
 8000c6c:	08004540 	.word	0x08004540
 8000c70:	080045fc 	.word	0x080045fc
 8000c74:	08004584 	.word	0x08004584

08000c78 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <get_mcu_chip_id+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c88:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000c8a:	88fb      	ldrh	r3, [r7, #6]

}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e0042000 	.word	0xe0042000

08000c9c <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000ca8:	481d      	ldr	r0, [pc, #116]	; (8000d20 <bootloader_handle_getrdp_cmd+0x84>)
 8000caa:	f7ff fd55 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <bootloader_handle_getrdp_cmd+0x88>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3b04      	subs	r3, #4
 8000cba:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <bootloader_handle_getrdp_cmd+0x88>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3b04      	subs	r3, #4
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <bootloader_handle_getrdp_cmd+0x88>)
 8000ccc:	f7ff fefc 	bl	8000ac8 <bootloader_verify_crc>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d11a      	bne.n	8000d0c <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <bootloader_handle_getrdp_cmd+0x8c>)
 8000cd8:	f7ff fd3e 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fec4 	bl	8000a70 <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000ce8:	f000 f824 	bl	8000d34 <get_flash_rdp_level>
 8000cec:	4603      	mov	r3, r0
 8000cee:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <bootloader_handle_getrdp_cmd+0x90>)
 8000cfa:	f7ff fd2d 	bl	8000758 <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 8000cfe:	f107 030f 	add.w	r3, r7, #15
 8000d02:	2101      	movs	r1, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff13 	bl	8000b30 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000d0a:	e004      	b.n	8000d16 <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <bootloader_handle_getrdp_cmd+0x94>)
 8000d0e:	f7ff fd23 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000d12:	f7ff fec7 	bl	8000aa4 <bootloader_send_nack>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08004620 	.word	0x08004620
 8000d24:	20000128 	.word	0x20000128
 8000d28:	08004540 	.word	0x08004540
 8000d2c:	0800464c 	.word	0x0800464c
 8000d30:	08004584 	.word	0x08004584

08000d34 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <get_flash_rdp_level+0x24>)
 8000d40:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]

}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	1fffc000 	.word	0x1fffc000

08000d5c <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <bootloader_handle_go_cmd+0xb8>)
 8000d72:	f7ff fcf1 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <bootloader_handle_go_cmd+0xbc>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	3b04      	subs	r3, #4
 8000d82:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <bootloader_handle_go_cmd+0xbc>)
 8000d84:	4413      	add	r3, r2
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	3b04      	subs	r3, #4
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4821      	ldr	r0, [pc, #132]	; (8000e18 <bootloader_handle_go_cmd+0xbc>)
 8000d94:	f7ff fe98 	bl	8000ac8 <bootloader_verify_crc>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d131      	bne.n	8000e02 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d9e:	481f      	ldr	r0, [pc, #124]	; (8000e1c <bootloader_handle_go_cmd+0xc0>)
 8000da0:	f7ff fcda 	bl	8000758 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fe60 	bl	8000a70 <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000db6:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000db8:	69f9      	ldr	r1, [r7, #28]
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <bootloader_handle_go_cmd+0xc4>)
 8000dbc:	f7ff fccc 	bl	8000758 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000dc0:	69f8      	ldr	r0, [r7, #28]
 8000dc2:	f000 f835 	bl	8000e30 <verify_address>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d110      	bne.n	8000dee <bootloader_handle_go_cmd+0x92>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000dcc:	f107 030f 	add.w	r3, r7, #15
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff feac 	bl	8000b30 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000de2:	4810      	ldr	r0, [pc, #64]	; (8000e24 <bootloader_handle_go_cmd+0xc8>)
 8000de4:	f7ff fcb8 	bl	8000758 <printmsg>

            lets_jump();
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000dec:	e00e      	b.n	8000e0c <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000dee:	480e      	ldr	r0, [pc, #56]	; (8000e28 <bootloader_handle_go_cmd+0xcc>)
 8000df0:	f7ff fcb2 	bl	8000758 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000df4:	f107 030e 	add.w	r3, r7, #14
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe98 	bl	8000b30 <bootloader_uart_write_data>
}
 8000e00:	e004      	b.n	8000e0c <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e02:	480a      	ldr	r0, [pc, #40]	; (8000e2c <bootloader_handle_go_cmd+0xd0>)
 8000e04:	f7ff fca8 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000e08:	f7ff fe4c 	bl	8000aa4 <bootloader_send_nack>
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	0800466c 	.word	0x0800466c
 8000e18:	20000128 	.word	0x20000128
 8000e1c:	08004540 	.word	0x08004540
 8000e20:	08004694 	.word	0x08004694
 8000e24:	080046b0 	.word	0x080046b0
 8000e28:	080046d8 	.word	0x080046d8
 8000e2c:	08004584 	.word	0x08004584

08000e30 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e3e:	d305      	bcc.n	8000e4c <verify_address+0x1c>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <verify_address+0x68>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d801      	bhi.n	8000e4c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e01e      	b.n	8000e8a <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <verify_address+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d905      	bls.n	8000e60 <verify_address+0x30>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <verify_address+0x70>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d801      	bhi.n	8000e60 <verify_address+0x30>
	{
		return ADDR_VALID;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e014      	b.n	8000e8a <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000e66:	d305      	bcc.n	8000e74 <verify_address+0x44>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000e6e:	d201      	bcs.n	8000e74 <verify_address+0x44>
	{
		return ADDR_VALID;
 8000e70:	2300      	movs	r3, #0
 8000e72:	e00a      	b.n	8000e8a <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <verify_address+0x74>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d905      	bls.n	8000e88 <verify_address+0x58>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <verify_address+0x78>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d801      	bhi.n	8000e88 <verify_address+0x58>
	{
		return ADDR_VALID;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e000      	b.n	8000e8a <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8000e88:	2301      	movs	r3, #1
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2001c000 	.word	0x2001c000
 8000e9c:	2001bfff 	.word	0x2001bfff
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	40023fff 	.word	0x40023fff
 8000ea8:	40025000 	.word	0x40025000

08000eac <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000eb8:	482b      	ldr	r0, [pc, #172]	; (8000f68 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000eba:	f7ff fc4d 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <bootloader_handle_flash_erase_cmd+0xc0>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3b04      	subs	r3, #4
 8000eca:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <bootloader_handle_flash_erase_cmd+0xc0>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3b04      	subs	r3, #4
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4824      	ldr	r0, [pc, #144]	; (8000f6c <bootloader_handle_flash_erase_cmd+0xc0>)
 8000edc:	f7ff fdf4 	bl	8000ac8 <bootloader_verify_crc>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d137      	bne.n	8000f56 <bootloader_handle_flash_erase_cmd+0xaa>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000ee6:	4822      	ldr	r0, [pc, #136]	; (8000f70 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000ee8:	f7ff fc36 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fdbc 	bl	8000a70 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3302      	adds	r3, #2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3303      	adds	r3, #3
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	481a      	ldr	r0, [pc, #104]	; (8000f74 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f0a:	f7ff fc25 	bl	8000758 <printmsg>

        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000f16:	f001 fb0f 	bl	8002538 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3303      	adds	r3, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f000 f82b 	bl	8000f84 <execute_flash_erase>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin,0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f38:	480f      	ldr	r0, [pc, #60]	; (8000f78 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000f3a:	f001 fafd 	bl	8002538 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4619      	mov	r1, r3
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <bootloader_handle_flash_erase_cmd+0xd0>)
 8000f44:	f7ff fc08 	bl	8000758 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000f48:	f107 030f 	add.w	r3, r7, #15
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fdee 	bl	8000b30 <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000f54:	e004      	b.n	8000f60 <bootloader_handle_flash_erase_cmd+0xb4>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000f56:	480a      	ldr	r0, [pc, #40]	; (8000f80 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000f58:	f7ff fbfe 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8000f5c:	f7ff fda2 	bl	8000aa4 <bootloader_send_nack>
}
 8000f60:	bf00      	nop
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	080046fc 	.word	0x080046fc
 8000f6c:	20000128 	.word	0x20000128
 8000f70:	08004540 	.word	0x08004540
 8000f74:	0800472c 	.word	0x0800472c
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	08004760 	.word	0x08004760
 8000f80:	08004584 	.word	0x08004584

08000f84 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d901      	bls.n	8000f9e <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e035      	b.n	800100a <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d002      	beq.n	8000faa <execute_flash_erase+0x26>
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d82e      	bhi.n	8001008 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2bff      	cmp	r3, #255	; 0xff
 8000fae:	d102      	bne.n	8000fb6 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	e012      	b.n	8000fdc <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f1c3 0308 	rsb	r3, r3, #8
 8000fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
           if( number_of_sector > remanining_sector)
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d902      	bls.n	8000fd0 <execute_flash_erase+0x4c>
           {
           	number_of_sector = remanining_sector;
 8000fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fce:	71bb      	strb	r3, [r7, #6]
           }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000fe0:	f000 fdda 	bl	8001b98 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000fe8:	f107 020c 	add.w	r2, r7, #12
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 ff5c 	bl	8001eb0 <HAL_FLASHEx_Erase>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000ffe:	f000 fded 	bl	8001bdc <HAL_FLASH_Lock>

		return status;
 8001002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001006:	e000      	b.n	800100a <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8001008:	2304      	movs	r3, #4
}
 800100a:	4618      	mov	r0, r3
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t chksum = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	77fb      	strb	r3, [r7, #31]
	uint8_t len = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	77bb      	strb	r3, [r7, #30]
	uint8_t addr_valid = ADDR_VALID;
 8001024:	2300      	movs	r3, #0
 8001026:	777b      	strb	r3, [r7, #29]
	uint8_t write_status = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
	len = pBuffer[0];
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	77bb      	strb	r3, [r7, #30]
	uint8_t payload_len = pBuffer[6];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800103e:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 8001040:	7fbb      	ldrb	r3, [r7, #30]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	77fb      	strb	r3, [r7, #31]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 800104a:	482f      	ldr	r0, [pc, #188]	; (8001108 <bootloader_handle_mem_write_cmd+0xf4>)
 800104c:	f7ff fb84 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001050:	4b2e      	ldr	r3, [pc, #184]	; (800110c <bootloader_handle_mem_write_cmd+0xf8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3b04      	subs	r3, #4
 800105c:	4a2b      	ldr	r2, [pc, #172]	; (800110c <bootloader_handle_mem_write_cmd+0xf8>)
 800105e:	4413      	add	r3, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3b04      	subs	r3, #4
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4619      	mov	r1, r3
 800106c:	4827      	ldr	r0, [pc, #156]	; (800110c <bootloader_handle_mem_write_cmd+0xf8>)
 800106e:	f7ff fd2b 	bl	8000ac8 <bootloader_verify_crc>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d13d      	bne.n	80010f4 <bootloader_handle_mem_write_cmd+0xe0>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <bootloader_handle_mem_write_cmd+0xfc>)
 800107a:	f7ff fb6d 	bl	8000758 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fcf3 	bl	8000a70 <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 800108a:	69b9      	ldr	r1, [r7, #24]
 800108c:	4821      	ldr	r0, [pc, #132]	; (8001114 <bootloader_handle_mem_write_cmd+0x100>)
 800108e:	f7ff fb63 	bl	8000758 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8001092:	69b8      	ldr	r0, [r7, #24]
 8001094:	f7ff fecc 	bl	8000e30 <verify_address>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d11e      	bne.n	80010dc <bootloader_handle_mem_write_cmd+0xc8>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <bootloader_handle_mem_write_cmd+0x104>)
 80010a0:	f7ff fb5a 	bl	8000758 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010aa:	481c      	ldr	r0, [pc, #112]	; (800111c <bootloader_handle_mem_write_cmd+0x108>)
 80010ac:	f001 fa44 	bl	8002538 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3307      	adds	r3, #7
 80010b4:	7f3a      	ldrb	r2, [r7, #28]
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f835 	bl	8001128 <execute_mem_write>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <bootloader_handle_mem_write_cmd+0x108>)
 80010ca:	f001 fa35 	bl	8002538 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 80010ce:	f107 030f 	add.w	r3, r7, #15
 80010d2:	2101      	movs	r1, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd2b 	bl	8000b30 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80010da:	e010      	b.n	80010fe <bootloader_handle_mem_write_cmd+0xea>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 80010dc:	4810      	ldr	r0, [pc, #64]	; (8001120 <bootloader_handle_mem_write_cmd+0x10c>)
 80010de:	f7ff fb3b 	bl	8000758 <printmsg>
            write_status = ADDR_INVALID;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 80010e6:	f107 030f 	add.w	r3, r7, #15
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fd1f 	bl	8000b30 <bootloader_uart_write_data>
}
 80010f2:	e004      	b.n	80010fe <bootloader_handle_mem_write_cmd+0xea>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <bootloader_handle_mem_write_cmd+0x110>)
 80010f6:	f7ff fb2f 	bl	8000758 <printmsg>
        bootloader_send_nack();
 80010fa:	f7ff fcd3 	bl	8000aa4 <bootloader_send_nack>
}
 80010fe:	bf00      	nop
 8001100:	3720      	adds	r7, #32
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08004788 	.word	0x08004788
 800110c:	20000128 	.word	0x20000128
 8001110:	08004540 	.word	0x08004540
 8001114:	080047b8 	.word	0x080047b8
 8001118:	080047e0 	.word	0x080047e0
 800111c:	40020c00 	.word	0x40020c00
 8001120:	08004808 	.word	0x08004808
 8001124:	08004584 	.word	0x08004584

08001128 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8001138:	f000 fd2e 	bl	8001b98 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	e013      	b.n	800116a <execute_mem_write+0x42>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	18d1      	adds	r1, r2, r3
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f04f 0400 	mov.w	r4, #0
 8001156:	461a      	mov	r2, r3
 8001158:	4623      	mov	r3, r4
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fcc8 	bl	8001af0 <HAL_FLASH_Program>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3e7      	bcc.n	8001142 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8001172:	f000 fd33 	bl	8001bdc <HAL_FLASH_Lock>

    return status;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
}
 8001178:	4618      	mov	r0, r3
 800117a:	371c      	adds	r7, #28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}

08001180 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <bootloader_handle_en_rw_protect+0x90>)
 800118e:	f7ff fae3 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <bootloader_handle_en_rw_protect+0x94>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3b04      	subs	r3, #4
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <bootloader_handle_en_rw_protect+0x94>)
 80011a0:	4413      	add	r3, r2
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3b04      	subs	r3, #4
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4819      	ldr	r0, [pc, #100]	; (8001214 <bootloader_handle_en_rw_protect+0x94>)
 80011b0:	f7ff fc8a 	bl	8000ac8 <bootloader_verify_crc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d120      	bne.n	80011fc <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <bootloader_handle_en_rw_protect+0x98>)
 80011bc:	f7ff facc 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fc52 	bl	8000a70 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3302      	adds	r3, #2
 80011d0:	7818      	ldrb	r0, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3303      	adds	r3, #3
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2200      	movs	r2, #0
 80011da:	4619      	mov	r1, r3
 80011dc:	f000 f822 	bl	8001224 <configure_flash_sector_rw_protection>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <bootloader_handle_en_rw_protect+0x9c>)
 80011ea:	f7ff fab5 	bl	8000758 <printmsg>

        bootloader_uart_write_data(&status,1);
 80011ee:	f107 030f 	add.w	r3, r7, #15
 80011f2:	2101      	movs	r1, #1
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fc9b 	bl	8000b30 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80011fa:	e004      	b.n	8001206 <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <bootloader_handle_en_rw_protect+0xa0>)
 80011fe:	f7ff faab 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8001202:	f7ff fc4f 	bl	8000aa4 <bootloader_send_nack>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	08004834 	.word	0x08004834
 8001214:	20000128 	.word	0x20000128
 8001218:	08004540 	.word	0x08004540
 800121c:	08004760 	.word	0x08004760
 8001220:	08004584 	.word	0x08004584

08001224 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	460b      	mov	r3, r1
 8001230:	71bb      	strb	r3, [r7, #6]
 8001232:	4613      	mov	r3, r2
 8001234:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <configure_flash_sector_rw_protection+0x124>)
 8001238:	60fb      	str	r3, [r7, #12]

	  if(disable)
 800123a:	797b      	ldrb	r3, [r7, #5]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d025      	beq.n	800128c <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001240:	f000 fcdc 	bl	8001bfc <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001244:	bf00      	nop
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f9      	bne.n	8001246 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f043 0202 	orr.w	r2, r3, #2
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001276:	bf00      	nop
 8001278:	4b34      	ldr	r3, [pc, #208]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f9      	bne.n	8001278 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8001284:	f000 fcd6 	bl	8001c34 <HAL_FLASH_OB_Lock>

			return 0;
 8001288:	2300      	movs	r3, #0
 800128a:	e058      	b.n	800133e <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d126      	bne.n	80012e0 <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 8001292:	f000 fcb3 	bl	8001bfc <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001296:	bf00      	nop
 8001298:	4b2c      	ldr	r3, [pc, #176]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f9      	bne.n	8001298 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	0412      	lsls	r2, r2, #16
 80012b8:	43d2      	mvns	r2, r2
 80012ba:	401a      	ands	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f043 0202 	orr.w	r2, r3, #2
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012cc:	bf00      	nop
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f9      	bne.n	80012ce <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 80012da:	f000 fcab 	bl	8001c34 <HAL_FLASH_OB_Lock>
 80012de:	e02d      	b.n	800133c <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d12a      	bne.n	800133c <configure_flash_sector_rw_protection+0x118>
    {

	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80012e6:	f000 fc89 	bl	8001bfc <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80012ea:	bf00      	nop
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f9      	bne.n	80012ec <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	79fa      	ldrb	r2, [r7, #7]
 8001316:	0412      	lsls	r2, r2, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f043 0202 	orr.w	r2, r3, #2
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 800132a:	bf00      	nop
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <configure_flash_sector_rw_protection+0x128>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8001338:	f000 fc7c 	bl	8001c34 <HAL_FLASH_OB_Lock>

    }

		return 0;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023c14 	.word	0x40023c14
 800134c:	40023c00 	.word	0x40023c00

08001350 <read_OB_rw_protection_status>:


uint16_t read_OB_rw_protection_status(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001356:	f000 fc51 	bl	8001bfc <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fe17 	bl	8001f90 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 8001362:	f000 fc3b 	bl	8001bdc <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	b29b      	uxth	r3, r3

}
 800136a:	4618      	mov	r0, r3
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <bootloader_handle_mem_read>:


/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]


}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <bootloader_handle_read_sector_protection_status+0x7c>)
 8001392:	f7ff f9e1 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <bootloader_handle_read_sector_protection_status+0x80>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3b04      	subs	r3, #4
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <bootloader_handle_read_sector_protection_status+0x80>)
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3b04      	subs	r3, #4
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <bootloader_handle_read_sector_protection_status+0x80>)
 80013b4:	f7ff fb88 	bl	8000ac8 <bootloader_verify_crc>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d118      	bne.n	80013f0 <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <bootloader_handle_read_sector_protection_status+0x84>)
 80013c0:	f7ff f9ca 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb50 	bl	8000a70 <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 80013d0:	f7ff ffbe 	bl	8001350 <read_OB_rw_protection_status>
 80013d4:	4603      	mov	r3, r0
 80013d6:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <bootloader_handle_read_sector_protection_status+0x88>)
 80013de:	f7ff f9bb 	bl	8000758 <printmsg>
        bootloader_uart_write_data((uint8_t*)&status,2);
 80013e2:	f107 030e 	add.w	r3, r7, #14
 80013e6:	2102      	movs	r1, #2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fba1 	bl	8000b30 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 80013ee:	e004      	b.n	80013fa <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <bootloader_handle_read_sector_protection_status+0x8c>)
 80013f2:	f7ff f9b1 	bl	8000758 <printmsg>
        bootloader_send_nack();
 80013f6:	f7ff fb55 	bl	8000aa4 <bootloader_send_nack>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08004868 	.word	0x08004868
 8001408:	20000128 	.word	0x20000128
 800140c:	08004540 	.word	0x08004540
 8001410:	080048a8 	.word	0x080048a8
 8001414:	08004584 	.word	0x08004584

08001418 <bootloader_handle_dis_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8001424:	481d      	ldr	r0, [pc, #116]	; (800149c <bootloader_handle_dis_rw_protect+0x84>)
 8001426:	f7ff f997 	bl	8000758 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <bootloader_handle_dis_rw_protect+0x88>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3b04      	subs	r3, #4
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <bootloader_handle_dis_rw_protect+0x88>)
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3b04      	subs	r3, #4
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4619      	mov	r1, r3
 8001446:	4816      	ldr	r0, [pc, #88]	; (80014a0 <bootloader_handle_dis_rw_protect+0x88>)
 8001448:	f7ff fb3e 	bl	8000ac8 <bootloader_verify_crc>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d11b      	bne.n	800148a <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <bootloader_handle_dis_rw_protect+0x8c>)
 8001454:	f7ff f980 	bl	8000758 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb06 	bl	8000a70 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 8001464:	2201      	movs	r2, #1
 8001466:	2100      	movs	r1, #0
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff fedb 	bl	8001224 <configure_flash_sector_rw_protection>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <bootloader_handle_dis_rw_protect+0x90>)
 8001478:	f7ff f96e 	bl	8000758 <printmsg>

        bootloader_uart_write_data(&status,1);
 800147c:	f107 030f 	add.w	r3, r7, #15
 8001480:	2101      	movs	r1, #1
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb54 	bl	8000b30 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8001488:	e004      	b.n	8001494 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <bootloader_handle_dis_rw_protect+0x94>)
 800148c:	f7ff f964 	bl	8000758 <printmsg>
        bootloader_send_nack();
 8001490:	f7ff fb08 	bl	8000aa4 <bootloader_send_nack>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	080048c8 	.word	0x080048c8
 80014a0:	20000128 	.word	0x20000128
 80014a4:	08004540 	.word	0x08004540
 80014a8:	08004760 	.word	0x08004760
 80014ac:	08004584 	.word	0x08004584

080014b0 <bootloader_handle_read_otp>:


/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]


}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	f06f 000b 	mvn.w	r0, #11
 80014d0:	f000 fa83 	bl	80019da <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	f06f 000a 	mvn.w	r0, #10
 80014dc:	f000 fa7d 	bl	80019da <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	f06f 0009 	mvn.w	r0, #9
 80014e8:	f000 fa77 	bl	80019da <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2100      	movs	r1, #0
 80014f0:	f06f 0004 	mvn.w	r0, #4
 80014f4:	f000 fa71 	bl	80019da <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	f06f 0003 	mvn.w	r0, #3
 8001500:	f000 fa6b 	bl	80019da <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	f06f 0001 	mvn.w	r0, #1
 800150c:	f000 fa65 	bl	80019da <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 fa5f 	bl	80019da <HAL_NVIC_SetPriority>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800151c:	2007      	movs	r0, #7
 800151e:	f000 fa51 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/


}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_CRC_MspInit+0x3c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10d      	bne.n	8001556 <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_CRC_MspInit+0x40>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_CRC_MspInit+0x40>)
 8001544:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <HAL_CRC_MspInit+0x40>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40023000 	.word	0x40023000
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a32      	ldr	r2, [pc, #200]	; (8001654 <HAL_UART_MspInit+0xe8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d12c      	bne.n	80015e8 <HAL_UART_MspInit+0x7c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c6:	230c      	movs	r3, #12
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	481e      	ldr	r0, [pc, #120]	; (800165c <HAL_UART_MspInit+0xf0>)
 80015e2:	f000 fdf7 	bl	80021d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  }

}
 80015e6:	e031      	b.n	800164c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <HAL_UART_MspInit+0xf4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12c      	bne.n	800164c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_UART_MspInit+0xec>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_UART_MspInit+0xec>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_10;
 800162a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800163c:	2307      	movs	r3, #7
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <HAL_UART_MspInit+0xf8>)
 8001648:	f000 fdc4 	bl	80021d4 <HAL_GPIO_Init>
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004400 	.word	0x40004400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000
 8001660:	40004800 	.word	0x40004800
 8001664:	40020800 	.word	0x40020800

08001668 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	af00      	add	r7, sp, #0

	  HAL_IncTick();
 8001692:	f000 f8a7 	bl	80017e4 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 8001696:	f000 f9d6 	bl	8001a46 <HAL_SYSTICK_IRQHandler>

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <EXTI0_IRQHandler>:
* @brief This function handles USART2 global interrupt.
*/


void EXTI0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 80016a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <EXTI0_IRQHandler+0x18>)
 80016aa:	f000 ff5e 	bl	800256a <HAL_GPIO_TogglePin>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 ff76 	bl	80025a0 <HAL_GPIO_EXTI_IRQHandler>

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40020c00 	.word	0x40020c00

080016bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <_sbrk+0x50>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x16>
		heap_end = &end;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <_sbrk+0x50>)
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <_sbrk+0x54>)
 80016d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <_sbrk+0x50>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <_sbrk+0x50>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	466a      	mov	r2, sp
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d907      	bls.n	80016f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016e6:	f002 fa3f 	bl	8003b68 <__errno>
 80016ea:	4602      	mov	r2, r0
 80016ec:	230c      	movs	r3, #12
 80016ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	e006      	b.n	8001704 <_sbrk+0x48>
	}

	heap_end += incr;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_sbrk+0x50>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <_sbrk+0x50>)
 8001700:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000094 	.word	0x20000094
 8001710:	20000218 	.word	0x20000218

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <SystemInit+0x28>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171e:	4a07      	ldr	r2, [pc, #28]	; (800173c <SystemInit+0x28>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <SystemInit+0x28>)
 800172a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800172e:	609a      	str	r2, [r3, #8]
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f92b 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f000 f808 	bl	8001784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fea6 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f943 	bl	8001a2e <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f90b 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000008 	.word	0x20000008
 80017dc:	20000010 	.word	0x20000010
 80017e0:	2000000c 	.word	0x2000000c

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000010 	.word	0x20000010
 8001808:	200001f0 	.word	0x200001f0

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200001f0 	.word	0x200001f0

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a4a:	f000 f802 	bl	8001a52 <HAL_SYSTICK_Callback>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	795b      	ldrb	r3, [r3, #5]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff fd50 	bl	8001528 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00a      	b.n	8001aca <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	441a      	add	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3f0      	bcc.n	8001ab4 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001ae0:	693b      	ldr	r3, [r7, #16]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_FLASH_Program+0xa0>)
 8001b04:	7e1b      	ldrb	r3, [r3, #24]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_FLASH_Program+0x1e>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e03b      	b.n	8001b86 <HAL_FLASH_Program+0x96>
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_FLASH_Program+0xa0>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b18:	f000 f89c 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12b      	bne.n	8001b7e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b2c:	783b      	ldrb	r3, [r7, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	f000 f945 	bl	8001dc0 <FLASH_Program_Byte>
 8001b36:	e016      	b.n	8001b66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b3e:	883b      	ldrh	r3, [r7, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	68b8      	ldr	r0, [r7, #8]
 8001b44:	f000 f918 	bl	8001d78 <FLASH_Program_HalfWord>
 8001b48:	e00d      	b.n	8001b66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d105      	bne.n	8001b5c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4619      	mov	r1, r3
 8001b54:	68b8      	ldr	r0, [r7, #8]
 8001b56:	f000 f8ed 	bl	8001d34 <FLASH_Program_Word>
 8001b5a:	e004      	b.n	8001b66 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b60:	68b8      	ldr	r0, [r7, #8]
 8001b62:	f000 f8b7 	bl	8001cd4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b6a:	f000 f873 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_FLASH_Program+0xa4>)
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_FLASH_Program+0xa4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <HAL_FLASH_Program+0xa0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200001f4 	.word	0x200001f4
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_FLASH_Unlock+0x38>)
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da0b      	bge.n	8001bc2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_FLASH_Unlock+0x38>)
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_FLASH_Unlock+0x3c>)
 8001bae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_FLASH_Unlock+0x38>)
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_FLASH_Unlock+0x40>)
 8001bb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_FLASH_Unlock+0x38>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da01      	bge.n	8001bc2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023c00 	.word	0x40023c00
 8001bd4:	45670123 	.word	0x45670123
 8001bd8:	cdef89ab 	.word	0xcdef89ab

08001bdc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_FLASH_Lock+0x1c>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <HAL_FLASH_Lock+0x1c>)
 8001be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_FLASH_OB_Unlock+0x30>)
 8001c10:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_FLASH_OB_Unlock+0x2c>)
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_FLASH_OB_Unlock+0x34>)
 8001c16:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	08192a3b 	.word	0x08192a3b
 8001c30:	4c5d6e7f 	.word	0x4c5d6e7f

08001c34 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_FLASH_OB_Lock+0x1c>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_FLASH_OB_Lock+0x1c>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <FLASH_WaitForLastOperation+0x78>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c66:	f7ff fdd1 	bl	800180c <HAL_GetTick>
 8001c6a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c6c:	e010      	b.n	8001c90 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d00c      	beq.n	8001c90 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d007      	beq.n	8001c8c <FLASH_WaitForLastOperation+0x38>
 8001c7c:	f7ff fdc6 	bl	800180c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d201      	bcs.n	8001c90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e019      	b.n	8001cc4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e8      	bne.n	8001c6e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <FLASH_WaitForLastOperation+0x7c>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001cba:	f000 f8a3 	bl	8001e04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
  
}  
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200001f4 	.word	0x200001f4
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001cd4:	b490      	push	{r4, r7}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001cf2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <FLASH_Program_DoubleWord+0x5c>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	2400      	movs	r4, #0
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	3204      	adds	r2, #4
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc90      	pop	{r4, r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023c00 	.word	0x40023c00

08001d34 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <FLASH_Program_Word+0x40>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	601a      	str	r2, [r3, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d84:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <FLASH_Program_HalfWord+0x44>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	801a      	strh	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <FLASH_Program_Byte+0x40>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	701a      	strb	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f043 0310 	orr.w	r3, r3, #16
 8001e1c:	4a23      	ldr	r2, [pc, #140]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e1e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e22:	2210      	movs	r2, #16
 8001e24:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e40:	2220      	movs	r2, #32
 8001e42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e50:	4b16      	ldr	r3, [pc, #88]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e5a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e78:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f043 0320 	orr.w	r3, r3, #32
 8001e94:	4a05      	ldr	r2, [pc, #20]	; (8001eac <FLASH_SetErrorCode+0xa8>)
 8001e96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <FLASH_SetErrorCode+0xa4>)
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	60da      	str	r2, [r3, #12]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40023c00 	.word	0x40023c00
 8001eac:	200001f4 	.word	0x200001f4

08001eb0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <HAL_FLASHEx_Erase+0xd8>)
 8001ec4:	7e1b      	ldrb	r3, [r3, #24]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_FLASHEx_Erase+0x1e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e058      	b.n	8001f80 <HAL_FLASHEx_Erase+0xd0>
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <HAL_FLASHEx_Erase+0xd8>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ed8:	f7ff febc 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d148      	bne.n	8001f78 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d115      	bne.n	8001f22 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4619      	mov	r1, r3
 8001f02:	4610      	mov	r0, r2
 8001f04:	f000 f868 	bl	8001fd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f0c:	f7ff fea2 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001f10:	4603      	mov	r3, r0
 8001f12:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_FLASHEx_Erase+0xdc>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_FLASHEx_Erase+0xdc>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6113      	str	r3, [r2, #16]
 8001f20:	e028      	b.n	8001f74 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e01c      	b.n	8001f64 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f000 f874 	bl	8002020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3c:	f7ff fe8a 	bl	8001c54 <FLASH_WaitForLastOperation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_FLASHEx_Erase+0xdc>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_FLASHEx_Erase+0xdc>)
 8001f4a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001f4e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	601a      	str	r2, [r3, #0]
          break;
 8001f5c:	e00a      	b.n	8001f74 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3da      	bcc.n	8001f2a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001f74:	f000 f8e8 	bl	8002148 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_FLASHEx_Erase+0xd8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	761a      	strb	r2, [r3, #24]

  return status;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200001f4 	.word	0x200001f4
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001f9e:	f000 f897 	bl	80020d0 <FLASH_OB_GetWRP>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001faa:	f000 f89d 	bl	80020e8 <FLASH_OB_GetRDP>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001fb6:	f000 f87b 	bl	80020b0 <FLASH_OB_GetUser>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001fc2:	f000 f8b1 	bl	8002128 <FLASH_OB_GetBOR>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	615a      	str	r2, [r3, #20]
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <FLASH_MassErase+0x44>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <FLASH_MassErase+0x44>)
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <FLASH_MassErase+0x44>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <FLASH_MassErase+0x44>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <FLASH_MassErase+0x44>)
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <FLASH_MassErase+0x44>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6113      	str	r3, [r2, #16]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e010      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d103      	bne.n	800204a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e009      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d103      	bne.n	8002058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e002      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800205e:	4b13      	ldr	r3, [pc, #76]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002068:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	490f      	ldr	r1, [pc, #60]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 800207c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4313      	orrs	r3, r2
 800208c:	4a07      	ldr	r2, [pc, #28]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <FLASH_Erase_Sector+0x8c>)
 800209a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209e:	6113      	str	r3, [r2, #16]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	40023c00 	.word	0x40023c00

080020b0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <FLASH_OB_GetUser+0x1c>)
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f023 031f 	bic.w	r3, r3, #31
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <FLASH_OB_GetWRP+0x14>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40023c16 	.word	0x40023c16

080020e8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80020ee:	23aa      	movs	r3, #170	; 0xaa
 80020f0:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <FLASH_OB_GetRDP+0x3c>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2bcc      	cmp	r3, #204	; 0xcc
 80020fa:	d102      	bne.n	8002102 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80020fc:	23cc      	movs	r3, #204	; 0xcc
 80020fe:	71fb      	strb	r3, [r7, #7]
 8002100:	e009      	b.n	8002116 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <FLASH_OB_GetRDP+0x3c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2baa      	cmp	r3, #170	; 0xaa
 800210a:	d102      	bne.n	8002112 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800210c:	23aa      	movs	r3, #170	; 0xaa
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	e001      	b.n	8002116 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8002112:	2355      	movs	r3, #85	; 0x55
 8002114:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002116:	79fb      	ldrb	r3, [r7, #7]
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40023c15 	.word	0x40023c15

08002128 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <FLASH_OB_GetBOR+0x1c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	b2db      	uxtb	r3, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023c14 	.word	0x40023c14

08002148 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002154:	2b00      	cmp	r3, #0
 8002156:	d017      	beq.n	8002188 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800215e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <FLASH_FlushCaches+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800216a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <FLASH_FlushCaches+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <FLASH_FlushCaches+0x88>)
 8002176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800217a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <FLASH_FlushCaches+0x88>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d017      	beq.n	80021c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <FLASH_FlushCaches+0x88>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <FLASH_FlushCaches+0x88>)
 800219a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <FLASH_FlushCaches+0x88>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c2:	6013      	str	r3, [r2, #0]
  }
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023c00 	.word	0x40023c00

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e16b      	b.n	80024c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 815a 	bne.w	80024c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d00b      	beq.n	800222e <HAL_GPIO_Init+0x5a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002222:	2b11      	cmp	r3, #17
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b12      	cmp	r3, #18
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0xfc>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80b4 	beq.w	80024c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_GPIO_Init+0x308>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_GPIO_Init+0x308>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_GPIO_Init+0x308>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a5a      	ldr	r2, [pc, #360]	; (80024e0 <HAL_GPIO_Init+0x30c>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a51      	ldr	r2, [pc, #324]	; (80024e4 <HAL_GPIO_Init+0x310>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d02b      	beq.n	80023fa <HAL_GPIO_Init+0x226>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_GPIO_Init+0x314>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d025      	beq.n	80023f6 <HAL_GPIO_Init+0x222>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a4f      	ldr	r2, [pc, #316]	; (80024ec <HAL_GPIO_Init+0x318>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01f      	beq.n	80023f2 <HAL_GPIO_Init+0x21e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a4e      	ldr	r2, [pc, #312]	; (80024f0 <HAL_GPIO_Init+0x31c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d019      	beq.n	80023ee <HAL_GPIO_Init+0x21a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a4d      	ldr	r2, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x320>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0x216>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x324>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00d      	beq.n	80023e6 <HAL_GPIO_Init+0x212>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4b      	ldr	r2, [pc, #300]	; (80024fc <HAL_GPIO_Init+0x328>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x32c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_GPIO_Init+0x20a>
 80023da:	2307      	movs	r3, #7
 80023dc:	e00e      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023de:	2308      	movs	r3, #8
 80023e0:	e00c      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e2:	2306      	movs	r3, #6
 80023e4:	e00a      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e008      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ea:	2304      	movs	r3, #4
 80023ec:	e006      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023ee:	2303      	movs	r3, #3
 80023f0:	e004      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e002      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_GPIO_Init+0x228>
 80023fa:	2300      	movs	r3, #0
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	f002 0203 	and.w	r2, r2, #3
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	4093      	lsls	r3, r2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800240c:	4934      	ldr	r1, [pc, #208]	; (80024e0 <HAL_GPIO_Init+0x30c>)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241a:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_GPIO_Init+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243e:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_GPIO_Init+0x330>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <HAL_GPIO_Init+0x330>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <HAL_GPIO_Init+0x330>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_GPIO_Init+0x330>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_GPIO_Init+0x330>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_GPIO_Init+0x330>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_GPIO_Init+0x330>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b0f      	cmp	r3, #15
 80024cc:	f67f ae90 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024d0:	bf00      	nop
 80024d2:	3724      	adds	r7, #36	; 0x24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40013800 	.word	0x40013800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40020800 	.word	0x40020800
 80024f0:	40020c00 	.word	0x40020c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800
 8002500:	40021c00 	.word	0x40021c00
 8002504:	40013c00 	.word	0x40013c00

08002508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	e001      	b.n	800252a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695a      	ldr	r2, [r3, #20]
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	401a      	ands	r2, r3
 800257e:	887b      	ldrh	r3, [r7, #2]
 8002580:	429a      	cmp	r2, r3
 8002582:	d104      	bne.n	800258e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	041a      	lsls	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800258c:	e002      	b.n	8002594 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d006      	beq.n	80025c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f806 	bl	80025d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e25b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d075      	beq.n	80026f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002606:	4ba3      	ldr	r3, [pc, #652]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d00c      	beq.n	800262c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4ba0      	ldr	r3, [pc, #640]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	2b08      	cmp	r3, #8
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b9d      	ldr	r3, [pc, #628]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262a:	d10b      	bne.n	8002644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	4b99      	ldr	r3, [pc, #612]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x108>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d157      	bne.n	80026f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e236      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x74>
 800264e:	4b91      	ldr	r3, [pc, #580]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a90      	ldr	r2, [pc, #576]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b8b      	ldr	r3, [pc, #556]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a8a      	ldr	r2, [pc, #552]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a87      	ldr	r2, [pc, #540]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xb0>
 8002680:	4b84      	ldr	r3, [pc, #528]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a83      	ldr	r2, [pc, #524]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff f8b4 	bl	800180c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a8:	f7ff f8b0 	bl	800180c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1fb      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b76      	ldr	r3, [pc, #472]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xc0>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7ff f8a0 	bl	800180c <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7ff f89c 	bl	800180c <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1e7      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b6c      	ldr	r3, [pc, #432]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0xe8>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b5c      	ldr	r3, [pc, #368]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1bb      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b56      	ldr	r3, [pc, #344]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4952      	ldr	r1, [pc, #328]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <HAL_RCC_OscConfig+0x2b0>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7ff f855 	bl	800180c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002766:	f7ff f851 	bl	800180c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e19c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b46      	ldr	r3, [pc, #280]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4940      	ldr	r1, [pc, #256]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x2b0>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7ff f834 	bl	800180c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a8:	f7ff f830 	bl	800180c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e17b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d030      	beq.n	8002834 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b30      	ldr	r3, [pc, #192]	; (800289c <HAL_RCC_OscConfig+0x2b4>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff f814 	bl	800180c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e8:	f7ff f810 	bl	800180c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e15b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x200>
 8002806:	e015      	b.n	8002834 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x2b4>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280e:	f7fe fffd 	bl	800180c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7fe fff9 	bl	800180c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e144      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a0 	beq.w	8002982 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800286e:	2301      	movs	r3, #1
 8002870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_OscConfig+0x2b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCC_OscConfig+0x2b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <HAL_RCC_OscConfig+0x2b8>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288a:	f7fe ffbf 	bl	800180c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002890:	e011      	b.n	80028b6 <HAL_RCC_OscConfig+0x2ce>
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	42470000 	.word	0x42470000
 800289c:	42470e80 	.word	0x42470e80
 80028a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7fe ffb2 	bl	800180c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e0fd      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b81      	ldr	r3, [pc, #516]	; (8002abc <HAL_RCC_OscConfig+0x4d4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d106      	bne.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
 80028ca:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a7c      	ldr	r2, [pc, #496]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e01c      	b.n	8002912 <HAL_RCC_OscConfig+0x32a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x312>
 80028e0:	4b77      	ldr	r3, [pc, #476]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a76      	ldr	r2, [pc, #472]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	4b74      	ldr	r3, [pc, #464]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a73      	ldr	r2, [pc, #460]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x32a>
 80028fa:	4b71      	ldr	r3, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a70      	ldr	r2, [pc, #448]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a6d      	ldr	r2, [pc, #436]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe ff77 	bl	800180c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe ff73 	bl	800180c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0bc      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x33a>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe ff61 	bl	800180c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe ff5d 	bl	800180c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0a6      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a51      	ldr	r2, [pc, #324]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8092 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d05c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d141      	bne.n	8002a24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCC_OscConfig+0x4dc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe ff31 	bl	800180c <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe ff2d 	bl	800180c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e078      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	019b      	lsls	r3, r3, #6
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	061b      	lsls	r3, r3, #24
 80029f0:	4933      	ldr	r1, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f6:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <HAL_RCC_OscConfig+0x4dc>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7fe ff06 	bl	800180c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe ff02 	bl	800180c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e04d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x41c>
 8002a22:	e045      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x4dc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe feef 	bl	800180c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe feeb 	bl	800180c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e036      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x44a>
 8002a50:	e02e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e029      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_RCC_OscConfig+0x4d8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11c      	bne.n	8002aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d115      	bne.n	8002aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a86:	4013      	ands	r3, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470060 	.word	0x42470060

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fe28 	bl	800180c <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe fe24 	bl	800180c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4601      	mov	r1, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	fa21 f303 	lsr.w	r3, r1, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fd88 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	080048f8 	.word	0x080048f8
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	2000000c 	.word	0x2000000c

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002caa:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d007      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x32>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d008      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x38>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 80b4 	bne.w	8002e28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cc2:	60bb      	str	r3, [r7, #8]
       break;
 8002cc4:	e0b3      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc6:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cc8:	60bb      	str	r3, [r7, #8]
      break;
 8002cca:	e0b0      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd6:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04a      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	f04f 0400 	mov.w	r4, #0
 8002cec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	ea03 0501 	and.w	r5, r3, r1
 8002cf8:	ea04 0602 	and.w	r6, r4, r2
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4632      	mov	r2, r6
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	f04f 0400 	mov.w	r4, #0
 8002d08:	0154      	lsls	r4, r2, #5
 8002d0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d0e:	014b      	lsls	r3, r1, #5
 8002d10:	4619      	mov	r1, r3
 8002d12:	4622      	mov	r2, r4
 8002d14:	1b49      	subs	r1, r1, r5
 8002d16:	eb62 0206 	sbc.w	r2, r2, r6
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	f04f 0400 	mov.w	r4, #0
 8002d22:	0194      	lsls	r4, r2, #6
 8002d24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d28:	018b      	lsls	r3, r1, #6
 8002d2a:	1a5b      	subs	r3, r3, r1
 8002d2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	00e2      	lsls	r2, r4, #3
 8002d3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d3e:	00d9      	lsls	r1, r3, #3
 8002d40:	460b      	mov	r3, r1
 8002d42:	4614      	mov	r4, r2
 8002d44:	195b      	adds	r3, r3, r5
 8002d46:	eb44 0406 	adc.w	r4, r4, r6
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	0262      	lsls	r2, r4, #9
 8002d54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d58:	0259      	lsls	r1, r3, #9
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4621      	mov	r1, r4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	f7fd fa98 	bl	80002a0 <__aeabi_uldivmod>
 8002d70:	4603      	mov	r3, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e049      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	f04f 0400 	mov.w	r4, #0
 8002d82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	ea03 0501 	and.w	r5, r3, r1
 8002d8e:	ea04 0602 	and.w	r6, r4, r2
 8002d92:	4629      	mov	r1, r5
 8002d94:	4632      	mov	r2, r6
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f04f 0400 	mov.w	r4, #0
 8002d9e:	0154      	lsls	r4, r2, #5
 8002da0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002da4:	014b      	lsls	r3, r1, #5
 8002da6:	4619      	mov	r1, r3
 8002da8:	4622      	mov	r2, r4
 8002daa:	1b49      	subs	r1, r1, r5
 8002dac:	eb62 0206 	sbc.w	r2, r2, r6
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	f04f 0400 	mov.w	r4, #0
 8002db8:	0194      	lsls	r4, r2, #6
 8002dba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	1a5b      	subs	r3, r3, r1
 8002dc2:	eb64 0402 	sbc.w	r4, r4, r2
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	00e2      	lsls	r2, r4, #3
 8002dd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dd4:	00d9      	lsls	r1, r3, #3
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4614      	mov	r4, r2
 8002dda:	195b      	adds	r3, r3, r5
 8002ddc:	eb44 0406 	adc.w	r4, r4, r6
 8002de0:	f04f 0100 	mov.w	r1, #0
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	02a2      	lsls	r2, r4, #10
 8002dea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dee:	0299      	lsls	r1, r3, #10
 8002df0:	460b      	mov	r3, r1
 8002df2:	4614      	mov	r4, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	4621      	mov	r1, r4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4623      	mov	r3, r4
 8002e02:	f7fd fa4d 	bl	80002a0 <__aeabi_uldivmod>
 8002e06:	4603      	mov	r3, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	3301      	adds	r3, #1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e24:	60bb      	str	r3, [r7, #8]
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e2a:	60bb      	str	r3, [r7, #8]
      break;
 8002e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	007a1200 	.word	0x007a1200

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e64:	4601      	mov	r1, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0a9b      	lsrs	r3, r3, #10
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08004908 	.word	0x08004908

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e88:	f7ff ffdc 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4601      	mov	r1, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0b5b      	lsrs	r3, r3, #13
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08004908 	.word	0x08004908

08002eac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d035      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ed4:	4b62      	ldr	r3, [pc, #392]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eda:	f7fe fc97 	bl	800180c <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ee2:	f7fe fc93 	bl	800180c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0b0      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef4:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	019a      	lsls	r2, r3, #6
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	071b      	lsls	r3, r3, #28
 8002f0c:	4955      	ldr	r1, [pc, #340]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f14:	4b52      	ldr	r3, [pc, #328]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1a:	f7fe fc77 	bl	800180c <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f22:	f7fe fc73 	bl	800180c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e090      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8083 	beq.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a43      	ldr	r2, [pc, #268]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3e      	ldr	r2, [pc, #248]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f76:	f7fe fc49 	bl	800180c <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fe fc45 	bl	800180c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e062      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02f      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d028      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fd6:	4b23      	ldr	r3, [pc, #140]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d114      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fe fc13 	bl	800180c <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fc0f 	bl	800180c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e02a      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003018:	d10d      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800302a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302e:	490d      	ldr	r1, [pc, #52]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	608b      	str	r3, [r1, #8]
 8003034:	e005      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800303c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003040:	6093      	str	r3, [r2, #8]
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	4905      	ldr	r1, [pc, #20]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	42470068 	.word	0x42470068
 8003064:	40023800 	.word	0x40023800
 8003068:	40007000 	.word	0x40007000
 800306c:	42470e40 	.word	0x42470e40

08003070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e03f      	b.n	8003102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fa68 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f9b1 	bl	800341c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b088      	sub	sp, #32
 800310e:	af02      	add	r7, sp, #8
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 8083 	bne.w	8003232 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_UART_Transmit+0x2e>
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_UART_Transmit+0x40>
 8003146:	2302      	movs	r3, #2
 8003148:	e074      	b.n	8003234 <HAL_UART_Transmit+0x12a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	; 0x21
 800315c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003160:	f7fe fb54 	bl	800180c <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800317a:	e042      	b.n	8003202 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003192:	d122      	bne.n	80031da <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f8f2 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e042      	b.n	8003234 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3302      	adds	r3, #2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e017      	b.n	8003202 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	e013      	b.n	8003202 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2200      	movs	r2, #0
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f8cf 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e01f      	b.n	8003234 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	60ba      	str	r2, [r7, #8]
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1b7      	bne.n	800317c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	2140      	movs	r1, #64	; 0x40
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f8b6 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e006      	b.n	8003234 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	f040 8090 	bne.w	800337e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_UART_Receive+0x2e>
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e088      	b.n	8003380 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_UART_Receive+0x40>
 8003278:	2302      	movs	r3, #2
 800327a:	e081      	b.n	8003380 <HAL_UART_Receive+0x144>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2222      	movs	r2, #34	; 0x22
 800328e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003292:	f7fe fabb 	bl	800180c <HAL_GetTick>
 8003296:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032ac:	e05c      	b.n	8003368 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	d12b      	bne.n	800331e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2120      	movs	r1, #32
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f859 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e04f      	b.n	8003380 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10c      	bne.n	8003306 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3302      	adds	r3, #2
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e030      	b.n	8003368 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	b29a      	uxth	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e024      	b.n	8003368 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2200      	movs	r2, #0
 8003326:	2120      	movs	r1, #32
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f82d 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e023      	b.n	8003380 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	60ba      	str	r2, [r7, #8]
 800334c:	b2ca      	uxtb	r2, r1
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e00a      	b.n	8003368 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1c59      	adds	r1, r3, #1
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d19d      	bne.n	80032ae <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	e02c      	b.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d028      	beq.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a8:	f7fe fa30 	bl	800180c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d21d      	bcs.n	80033f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e00f      	b.n	8003414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	4013      	ands	r3, r2
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	429a      	cmp	r2, r3
 8003410:	d0c3      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800345e:	f023 030c 	bic.w	r3, r3, #12
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	68f9      	ldr	r1, [r7, #12]
 8003468:	430b      	orrs	r3, r1
 800346a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348a:	f040 818b 	bne.w	80037a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4ac1      	ldr	r2, [pc, #772]	; (8003798 <UART_SetConfig+0x37c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d005      	beq.n	80034a4 <UART_SetConfig+0x88>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4abf      	ldr	r2, [pc, #764]	; (800379c <UART_SetConfig+0x380>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	f040 80bd 	bne.w	800361e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034a4:	f7ff fcee 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 80034a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	461d      	mov	r5, r3
 80034ae:	f04f 0600 	mov.w	r6, #0
 80034b2:	46a8      	mov	r8, r5
 80034b4:	46b1      	mov	r9, r6
 80034b6:	eb18 0308 	adds.w	r3, r8, r8
 80034ba:	eb49 0409 	adc.w	r4, r9, r9
 80034be:	4698      	mov	r8, r3
 80034c0:	46a1      	mov	r9, r4
 80034c2:	eb18 0805 	adds.w	r8, r8, r5
 80034c6:	eb49 0906 	adc.w	r9, r9, r6
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034de:	4688      	mov	r8, r1
 80034e0:	4691      	mov	r9, r2
 80034e2:	eb18 0005 	adds.w	r0, r8, r5
 80034e6:	eb49 0106 	adc.w	r1, r9, r6
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	461d      	mov	r5, r3
 80034f0:	f04f 0600 	mov.w	r6, #0
 80034f4:	196b      	adds	r3, r5, r5
 80034f6:	eb46 0406 	adc.w	r4, r6, r6
 80034fa:	461a      	mov	r2, r3
 80034fc:	4623      	mov	r3, r4
 80034fe:	f7fc fecf 	bl	80002a0 <__aeabi_uldivmod>
 8003502:	4603      	mov	r3, r0
 8003504:	460c      	mov	r4, r1
 8003506:	461a      	mov	r2, r3
 8003508:	4ba5      	ldr	r3, [pc, #660]	; (80037a0 <UART_SetConfig+0x384>)
 800350a:	fba3 2302 	umull	r2, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	461d      	mov	r5, r3
 8003518:	f04f 0600 	mov.w	r6, #0
 800351c:	46a9      	mov	r9, r5
 800351e:	46b2      	mov	sl, r6
 8003520:	eb19 0309 	adds.w	r3, r9, r9
 8003524:	eb4a 040a 	adc.w	r4, sl, sl
 8003528:	4699      	mov	r9, r3
 800352a:	46a2      	mov	sl, r4
 800352c:	eb19 0905 	adds.w	r9, r9, r5
 8003530:	eb4a 0a06 	adc.w	sl, sl, r6
 8003534:	f04f 0100 	mov.w	r1, #0
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003540:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003544:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003548:	4689      	mov	r9, r1
 800354a:	4692      	mov	sl, r2
 800354c:	eb19 0005 	adds.w	r0, r9, r5
 8003550:	eb4a 0106 	adc.w	r1, sl, r6
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	461d      	mov	r5, r3
 800355a:	f04f 0600 	mov.w	r6, #0
 800355e:	196b      	adds	r3, r5, r5
 8003560:	eb46 0406 	adc.w	r4, r6, r6
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	f7fc fe9a 	bl	80002a0 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <UART_SetConfig+0x384>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a86      	ldr	r2, [pc, #536]	; (80037a0 <UART_SetConfig+0x384>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003594:	4498      	add	r8, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	461d      	mov	r5, r3
 800359a:	f04f 0600 	mov.w	r6, #0
 800359e:	46a9      	mov	r9, r5
 80035a0:	46b2      	mov	sl, r6
 80035a2:	eb19 0309 	adds.w	r3, r9, r9
 80035a6:	eb4a 040a 	adc.w	r4, sl, sl
 80035aa:	4699      	mov	r9, r3
 80035ac:	46a2      	mov	sl, r4
 80035ae:	eb19 0905 	adds.w	r9, r9, r5
 80035b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80035b6:	f04f 0100 	mov.w	r1, #0
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ca:	4689      	mov	r9, r1
 80035cc:	4692      	mov	sl, r2
 80035ce:	eb19 0005 	adds.w	r0, r9, r5
 80035d2:	eb4a 0106 	adc.w	r1, sl, r6
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	461d      	mov	r5, r3
 80035dc:	f04f 0600 	mov.w	r6, #0
 80035e0:	196b      	adds	r3, r5, r5
 80035e2:	eb46 0406 	adc.w	r4, r6, r6
 80035e6:	461a      	mov	r2, r3
 80035e8:	4623      	mov	r3, r4
 80035ea:	f7fc fe59 	bl	80002a0 <__aeabi_uldivmod>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <UART_SetConfig+0x384>)
 80035f6:	fba3 1302 	umull	r1, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2164      	movs	r1, #100	; 0x64
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	3332      	adds	r3, #50	; 0x32
 8003608:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <UART_SetConfig+0x384>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f003 0207 	and.w	r2, r3, #7
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4442      	add	r2, r8
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	e26f      	b.n	8003afe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800361e:	f7ff fc1d 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	461d      	mov	r5, r3
 8003628:	f04f 0600 	mov.w	r6, #0
 800362c:	46a8      	mov	r8, r5
 800362e:	46b1      	mov	r9, r6
 8003630:	eb18 0308 	adds.w	r3, r8, r8
 8003634:	eb49 0409 	adc.w	r4, r9, r9
 8003638:	4698      	mov	r8, r3
 800363a:	46a1      	mov	r9, r4
 800363c:	eb18 0805 	adds.w	r8, r8, r5
 8003640:	eb49 0906 	adc.w	r9, r9, r6
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003658:	4688      	mov	r8, r1
 800365a:	4691      	mov	r9, r2
 800365c:	eb18 0005 	adds.w	r0, r8, r5
 8003660:	eb49 0106 	adc.w	r1, r9, r6
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	461d      	mov	r5, r3
 800366a:	f04f 0600 	mov.w	r6, #0
 800366e:	196b      	adds	r3, r5, r5
 8003670:	eb46 0406 	adc.w	r4, r6, r6
 8003674:	461a      	mov	r2, r3
 8003676:	4623      	mov	r3, r4
 8003678:	f7fc fe12 	bl	80002a0 <__aeabi_uldivmod>
 800367c:	4603      	mov	r3, r0
 800367e:	460c      	mov	r4, r1
 8003680:	461a      	mov	r2, r3
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <UART_SetConfig+0x384>)
 8003684:	fba3 2302 	umull	r2, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	461d      	mov	r5, r3
 8003692:	f04f 0600 	mov.w	r6, #0
 8003696:	46a9      	mov	r9, r5
 8003698:	46b2      	mov	sl, r6
 800369a:	eb19 0309 	adds.w	r3, r9, r9
 800369e:	eb4a 040a 	adc.w	r4, sl, sl
 80036a2:	4699      	mov	r9, r3
 80036a4:	46a2      	mov	sl, r4
 80036a6:	eb19 0905 	adds.w	r9, r9, r5
 80036aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036c2:	4689      	mov	r9, r1
 80036c4:	4692      	mov	sl, r2
 80036c6:	eb19 0005 	adds.w	r0, r9, r5
 80036ca:	eb4a 0106 	adc.w	r1, sl, r6
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	461d      	mov	r5, r3
 80036d4:	f04f 0600 	mov.w	r6, #0
 80036d8:	196b      	adds	r3, r5, r5
 80036da:	eb46 0406 	adc.w	r4, r6, r6
 80036de:	461a      	mov	r2, r3
 80036e0:	4623      	mov	r3, r4
 80036e2:	f7fc fddd 	bl	80002a0 <__aeabi_uldivmod>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <UART_SetConfig+0x384>)
 80036ee:	fba3 1302 	umull	r1, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2164      	movs	r1, #100	; 0x64
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	3332      	adds	r3, #50	; 0x32
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <UART_SetConfig+0x384>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800370e:	4498      	add	r8, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	461d      	mov	r5, r3
 8003714:	f04f 0600 	mov.w	r6, #0
 8003718:	46a9      	mov	r9, r5
 800371a:	46b2      	mov	sl, r6
 800371c:	eb19 0309 	adds.w	r3, r9, r9
 8003720:	eb4a 040a 	adc.w	r4, sl, sl
 8003724:	4699      	mov	r9, r3
 8003726:	46a2      	mov	sl, r4
 8003728:	eb19 0905 	adds.w	r9, r9, r5
 800372c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800373c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003744:	4689      	mov	r9, r1
 8003746:	4692      	mov	sl, r2
 8003748:	eb19 0005 	adds.w	r0, r9, r5
 800374c:	eb4a 0106 	adc.w	r1, sl, r6
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	461d      	mov	r5, r3
 8003756:	f04f 0600 	mov.w	r6, #0
 800375a:	196b      	adds	r3, r5, r5
 800375c:	eb46 0406 	adc.w	r4, r6, r6
 8003760:	461a      	mov	r2, r3
 8003762:	4623      	mov	r3, r4
 8003764:	f7fc fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8003768:	4603      	mov	r3, r0
 800376a:	460c      	mov	r4, r1
 800376c:	461a      	mov	r2, r3
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <UART_SetConfig+0x384>)
 8003770:	fba3 1302 	umull	r1, r3, r3, r2
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	2164      	movs	r1, #100	; 0x64
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	3332      	adds	r3, #50	; 0x32
 8003782:	4a07      	ldr	r2, [pc, #28]	; (80037a0 <UART_SetConfig+0x384>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	f003 0207 	and.w	r2, r3, #7
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4442      	add	r2, r8
 8003794:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003796:	e1b2      	b.n	8003afe <UART_SetConfig+0x6e2>
 8003798:	40011000 	.word	0x40011000
 800379c:	40011400 	.word	0x40011400
 80037a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4ad7      	ldr	r2, [pc, #860]	; (8003b08 <UART_SetConfig+0x6ec>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d005      	beq.n	80037ba <UART_SetConfig+0x39e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4ad6      	ldr	r2, [pc, #856]	; (8003b0c <UART_SetConfig+0x6f0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	f040 80d1 	bne.w	800395c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80037ba:	f7ff fb63 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 80037be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	469a      	mov	sl, r3
 80037c4:	f04f 0b00 	mov.w	fp, #0
 80037c8:	46d0      	mov	r8, sl
 80037ca:	46d9      	mov	r9, fp
 80037cc:	eb18 0308 	adds.w	r3, r8, r8
 80037d0:	eb49 0409 	adc.w	r4, r9, r9
 80037d4:	4698      	mov	r8, r3
 80037d6:	46a1      	mov	r9, r4
 80037d8:	eb18 080a 	adds.w	r8, r8, sl
 80037dc:	eb49 090b 	adc.w	r9, r9, fp
 80037e0:	f04f 0100 	mov.w	r1, #0
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037f4:	4688      	mov	r8, r1
 80037f6:	4691      	mov	r9, r2
 80037f8:	eb1a 0508 	adds.w	r5, sl, r8
 80037fc:	eb4b 0609 	adc.w	r6, fp, r9
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4619      	mov	r1, r3
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	f04f 0400 	mov.w	r4, #0
 8003812:	0094      	lsls	r4, r2, #2
 8003814:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003818:	008b      	lsls	r3, r1, #2
 800381a:	461a      	mov	r2, r3
 800381c:	4623      	mov	r3, r4
 800381e:	4628      	mov	r0, r5
 8003820:	4631      	mov	r1, r6
 8003822:	f7fc fd3d 	bl	80002a0 <__aeabi_uldivmod>
 8003826:	4603      	mov	r3, r0
 8003828:	460c      	mov	r4, r1
 800382a:	461a      	mov	r2, r3
 800382c:	4bb8      	ldr	r3, [pc, #736]	; (8003b10 <UART_SetConfig+0x6f4>)
 800382e:	fba3 2302 	umull	r2, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	469b      	mov	fp, r3
 800383c:	f04f 0c00 	mov.w	ip, #0
 8003840:	46d9      	mov	r9, fp
 8003842:	46e2      	mov	sl, ip
 8003844:	eb19 0309 	adds.w	r3, r9, r9
 8003848:	eb4a 040a 	adc.w	r4, sl, sl
 800384c:	4699      	mov	r9, r3
 800384e:	46a2      	mov	sl, r4
 8003850:	eb19 090b 	adds.w	r9, r9, fp
 8003854:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003864:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003868:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800386c:	4689      	mov	r9, r1
 800386e:	4692      	mov	sl, r2
 8003870:	eb1b 0509 	adds.w	r5, fp, r9
 8003874:	eb4c 060a 	adc.w	r6, ip, sl
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	f04f 0400 	mov.w	r4, #0
 800388a:	0094      	lsls	r4, r2, #2
 800388c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003890:	008b      	lsls	r3, r1, #2
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	4628      	mov	r0, r5
 8003898:	4631      	mov	r1, r6
 800389a:	f7fc fd01 	bl	80002a0 <__aeabi_uldivmod>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b9a      	ldr	r3, [pc, #616]	; (8003b10 <UART_SetConfig+0x6f4>)
 80038a6:	fba3 1302 	umull	r1, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2164      	movs	r1, #100	; 0x64
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	3332      	adds	r3, #50	; 0x32
 80038b8:	4a95      	ldr	r2, [pc, #596]	; (8003b10 <UART_SetConfig+0x6f4>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c4:	4498      	add	r8, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	469b      	mov	fp, r3
 80038ca:	f04f 0c00 	mov.w	ip, #0
 80038ce:	46d9      	mov	r9, fp
 80038d0:	46e2      	mov	sl, ip
 80038d2:	eb19 0309 	adds.w	r3, r9, r9
 80038d6:	eb4a 040a 	adc.w	r4, sl, sl
 80038da:	4699      	mov	r9, r3
 80038dc:	46a2      	mov	sl, r4
 80038de:	eb19 090b 	adds.w	r9, r9, fp
 80038e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038fa:	4689      	mov	r9, r1
 80038fc:	4692      	mov	sl, r2
 80038fe:	eb1b 0509 	adds.w	r5, fp, r9
 8003902:	eb4c 060a 	adc.w	r6, ip, sl
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4619      	mov	r1, r3
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	f04f 0400 	mov.w	r4, #0
 8003918:	0094      	lsls	r4, r2, #2
 800391a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	461a      	mov	r2, r3
 8003922:	4623      	mov	r3, r4
 8003924:	4628      	mov	r0, r5
 8003926:	4631      	mov	r1, r6
 8003928:	f7fc fcba 	bl	80002a0 <__aeabi_uldivmod>
 800392c:	4603      	mov	r3, r0
 800392e:	460c      	mov	r4, r1
 8003930:	461a      	mov	r2, r3
 8003932:	4b77      	ldr	r3, [pc, #476]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a72      	ldr	r2, [pc, #456]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4442      	add	r2, r8
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	e0d0      	b.n	8003afe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7ff fa7e 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003960:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	469a      	mov	sl, r3
 8003966:	f04f 0b00 	mov.w	fp, #0
 800396a:	46d0      	mov	r8, sl
 800396c:	46d9      	mov	r9, fp
 800396e:	eb18 0308 	adds.w	r3, r8, r8
 8003972:	eb49 0409 	adc.w	r4, r9, r9
 8003976:	4698      	mov	r8, r3
 8003978:	46a1      	mov	r9, r4
 800397a:	eb18 080a 	adds.w	r8, r8, sl
 800397e:	eb49 090b 	adc.w	r9, r9, fp
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800398e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003992:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003996:	4688      	mov	r8, r1
 8003998:	4691      	mov	r9, r2
 800399a:	eb1a 0508 	adds.w	r5, sl, r8
 800399e:	eb4b 0609 	adc.w	r6, fp, r9
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	f04f 0400 	mov.w	r4, #0
 80039b4:	0094      	lsls	r4, r2, #2
 80039b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039ba:	008b      	lsls	r3, r1, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	4631      	mov	r1, r6
 80039c4:	f7fc fc6c 	bl	80002a0 <__aeabi_uldivmod>
 80039c8:	4603      	mov	r3, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <UART_SetConfig+0x6f4>)
 80039d0:	fba3 2302 	umull	r2, r3, r3, r2
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	469b      	mov	fp, r3
 80039de:	f04f 0c00 	mov.w	ip, #0
 80039e2:	46d9      	mov	r9, fp
 80039e4:	46e2      	mov	sl, ip
 80039e6:	eb19 0309 	adds.w	r3, r9, r9
 80039ea:	eb4a 040a 	adc.w	r4, sl, sl
 80039ee:	4699      	mov	r9, r3
 80039f0:	46a2      	mov	sl, r4
 80039f2:	eb19 090b 	adds.w	r9, r9, fp
 80039f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039fa:	f04f 0100 	mov.w	r1, #0
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a0e:	4689      	mov	r9, r1
 8003a10:	4692      	mov	sl, r2
 8003a12:	eb1b 0509 	adds.w	r5, fp, r9
 8003a16:	eb4c 060a 	adc.w	r6, ip, sl
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	0094      	lsls	r4, r2, #2
 8003a2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a32:	008b      	lsls	r3, r1, #2
 8003a34:	461a      	mov	r2, r3
 8003a36:	4623      	mov	r3, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	f7fc fc30 	bl	80002a0 <__aeabi_uldivmod>
 8003a40:	4603      	mov	r3, r0
 8003a42:	460c      	mov	r4, r1
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	; 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	3332      	adds	r3, #50	; 0x32
 8003a5a:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a66:	4498      	add	r8, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	469b      	mov	fp, r3
 8003a6c:	f04f 0c00 	mov.w	ip, #0
 8003a70:	46d9      	mov	r9, fp
 8003a72:	46e2      	mov	sl, ip
 8003a74:	eb19 0309 	adds.w	r3, r9, r9
 8003a78:	eb4a 040a 	adc.w	r4, sl, sl
 8003a7c:	4699      	mov	r9, r3
 8003a7e:	46a2      	mov	sl, r4
 8003a80:	eb19 090b 	adds.w	r9, r9, fp
 8003a84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a9c:	4689      	mov	r9, r1
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	eb1b 0509 	adds.w	r5, fp, r9
 8003aa4:	eb4c 060a 	adc.w	r6, ip, sl
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	0094      	lsls	r4, r2, #2
 8003abc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ac0:	008b      	lsls	r3, r1, #2
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	4631      	mov	r1, r6
 8003aca:	f7fc fbe9 	bl	80002a0 <__aeabi_uldivmod>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2164      	movs	r1, #100	; 0x64
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	3332      	adds	r3, #50	; 0x32
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <UART_SetConfig+0x6f4>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4442      	add	r2, r8
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	e7ff      	b.n	8003afe <UART_SetConfig+0x6e2>
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b08:	40011000 	.word	0x40011000
 8003b0c:	40011400 	.word	0x40011400
 8003b10:	51eb851f 	.word	0x51eb851f

08003b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b14:	480d      	ldr	r0, [pc, #52]	; (8003b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b18:	480d      	ldr	r0, [pc, #52]	; (8003b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b1a:	490e      	ldr	r1, [pc, #56]	; (8003b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <LoopForever+0xe>)
  movs r3, #0
 8003b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b20:	e002      	b.n	8003b28 <LoopCopyDataInit>

08003b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b26:	3304      	adds	r3, #4

08003b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b2c:	d3f9      	bcc.n	8003b22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b2e:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b30:	4c0b      	ldr	r4, [pc, #44]	; (8003b60 <LoopForever+0x16>)
  movs r3, #0
 8003b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b34:	e001      	b.n	8003b3a <LoopFillZerobss>

08003b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b38:	3204      	adds	r2, #4

08003b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b3c:	d3fb      	bcc.n	8003b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b3e:	f7fd fde9 	bl	8001714 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003b42:	f000 f817 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b46:	f7fc fd2b 	bl	80005a0 <main>

08003b4a <LoopForever>:

LoopForever:
    b LoopForever
 8003b4a:	e7fe      	b.n	8003b4a <LoopForever>
  ldr   r0, =_estack
 8003b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003b58:	08004954 	.word	0x08004954
  ldr r2, =_sbss
 8003b5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003b60:	20000218 	.word	0x20000218

08003b64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b64:	e7fe      	b.n	8003b64 <ADC_IRQHandler>
	...

08003b68 <__errno>:
 8003b68:	4b01      	ldr	r3, [pc, #4]	; (8003b70 <__errno+0x8>)
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000014 	.word	0x20000014

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	4e0d      	ldr	r6, [pc, #52]	; (8003bac <__libc_init_array+0x38>)
 8003b78:	4c0d      	ldr	r4, [pc, #52]	; (8003bb0 <__libc_init_array+0x3c>)
 8003b7a:	1ba4      	subs	r4, r4, r6
 8003b7c:	10a4      	asrs	r4, r4, #2
 8003b7e:	2500      	movs	r5, #0
 8003b80:	42a5      	cmp	r5, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	4e0b      	ldr	r6, [pc, #44]	; (8003bb4 <__libc_init_array+0x40>)
 8003b86:	4c0c      	ldr	r4, [pc, #48]	; (8003bb8 <__libc_init_array+0x44>)
 8003b88:	f000 fc26 	bl	80043d8 <_init>
 8003b8c:	1ba4      	subs	r4, r4, r6
 8003b8e:	10a4      	asrs	r4, r4, #2
 8003b90:	2500      	movs	r5, #0
 8003b92:	42a5      	cmp	r5, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9c:	4798      	blx	r3
 8003b9e:	3501      	adds	r5, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ba6:	4798      	blx	r3
 8003ba8:	3501      	adds	r5, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	0800494c 	.word	0x0800494c
 8003bb0:	0800494c 	.word	0x0800494c
 8003bb4:	0800494c 	.word	0x0800494c
 8003bb8:	08004950 	.word	0x08004950

08003bbc <memset>:
 8003bbc:	4402      	add	r2, r0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d100      	bne.n	8003bc6 <memset+0xa>
 8003bc4:	4770      	bx	lr
 8003bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bca:	e7f9      	b.n	8003bc0 <memset+0x4>

08003bcc <_vsiprintf_r>:
 8003bcc:	b500      	push	{lr}
 8003bce:	b09b      	sub	sp, #108	; 0x6c
 8003bd0:	9100      	str	r1, [sp, #0]
 8003bd2:	9104      	str	r1, [sp, #16]
 8003bd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd8:	9105      	str	r1, [sp, #20]
 8003bda:	9102      	str	r1, [sp, #8]
 8003bdc:	4905      	ldr	r1, [pc, #20]	; (8003bf4 <_vsiprintf_r+0x28>)
 8003bde:	9103      	str	r1, [sp, #12]
 8003be0:	4669      	mov	r1, sp
 8003be2:	f000 f86d 	bl	8003cc0 <_svfiprintf_r>
 8003be6:	9b00      	ldr	r3, [sp, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	b01b      	add	sp, #108	; 0x6c
 8003bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf2:	bf00      	nop
 8003bf4:	ffff0208 	.word	0xffff0208

08003bf8 <vsiprintf>:
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	4802      	ldr	r0, [pc, #8]	; (8003c08 <vsiprintf+0x10>)
 8003c00:	6800      	ldr	r0, [r0, #0]
 8003c02:	f7ff bfe3 	b.w	8003bcc <_vsiprintf_r>
 8003c06:	bf00      	nop
 8003c08:	20000014 	.word	0x20000014

08003c0c <__ssputs_r>:
 8003c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	688e      	ldr	r6, [r1, #8]
 8003c12:	429e      	cmp	r6, r3
 8003c14:	4682      	mov	sl, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	4690      	mov	r8, r2
 8003c1a:	4699      	mov	r9, r3
 8003c1c:	d837      	bhi.n	8003c8e <__ssputs_r+0x82>
 8003c1e:	898a      	ldrh	r2, [r1, #12]
 8003c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c24:	d031      	beq.n	8003c8a <__ssputs_r+0x7e>
 8003c26:	6825      	ldr	r5, [r4, #0]
 8003c28:	6909      	ldr	r1, [r1, #16]
 8003c2a:	1a6f      	subs	r7, r5, r1
 8003c2c:	6965      	ldr	r5, [r4, #20]
 8003c2e:	2302      	movs	r3, #2
 8003c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c38:	f109 0301 	add.w	r3, r9, #1
 8003c3c:	443b      	add	r3, r7
 8003c3e:	429d      	cmp	r5, r3
 8003c40:	bf38      	it	cc
 8003c42:	461d      	movcc	r5, r3
 8003c44:	0553      	lsls	r3, r2, #21
 8003c46:	d530      	bpl.n	8003caa <__ssputs_r+0x9e>
 8003c48:	4629      	mov	r1, r5
 8003c4a:	f000 fb2b 	bl	80042a4 <_malloc_r>
 8003c4e:	4606      	mov	r6, r0
 8003c50:	b950      	cbnz	r0, 8003c68 <__ssputs_r+0x5c>
 8003c52:	230c      	movs	r3, #12
 8003c54:	f8ca 3000 	str.w	r3, [sl]
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	81a3      	strh	r3, [r4, #12]
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c68:	463a      	mov	r2, r7
 8003c6a:	6921      	ldr	r1, [r4, #16]
 8003c6c:	f000 faa8 	bl	80041c0 <memcpy>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	6126      	str	r6, [r4, #16]
 8003c7e:	6165      	str	r5, [r4, #20]
 8003c80:	443e      	add	r6, r7
 8003c82:	1bed      	subs	r5, r5, r7
 8003c84:	6026      	str	r6, [r4, #0]
 8003c86:	60a5      	str	r5, [r4, #8]
 8003c88:	464e      	mov	r6, r9
 8003c8a:	454e      	cmp	r6, r9
 8003c8c:	d900      	bls.n	8003c90 <__ssputs_r+0x84>
 8003c8e:	464e      	mov	r6, r9
 8003c90:	4632      	mov	r2, r6
 8003c92:	4641      	mov	r1, r8
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	f000 fa9e 	bl	80041d6 <memmove>
 8003c9a:	68a3      	ldr	r3, [r4, #8]
 8003c9c:	1b9b      	subs	r3, r3, r6
 8003c9e:	60a3      	str	r3, [r4, #8]
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	441e      	add	r6, r3
 8003ca4:	6026      	str	r6, [r4, #0]
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e7dc      	b.n	8003c64 <__ssputs_r+0x58>
 8003caa:	462a      	mov	r2, r5
 8003cac:	f000 fb54 	bl	8004358 <_realloc_r>
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d1e2      	bne.n	8003c7c <__ssputs_r+0x70>
 8003cb6:	6921      	ldr	r1, [r4, #16]
 8003cb8:	4650      	mov	r0, sl
 8003cba:	f000 faa5 	bl	8004208 <_free_r>
 8003cbe:	e7c8      	b.n	8003c52 <__ssputs_r+0x46>

08003cc0 <_svfiprintf_r>:
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	898b      	ldrh	r3, [r1, #12]
 8003cc8:	061f      	lsls	r7, r3, #24
 8003cca:	b09d      	sub	sp, #116	; 0x74
 8003ccc:	4680      	mov	r8, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	d50f      	bpl.n	8003cf4 <_svfiprintf_r+0x34>
 8003cd4:	690b      	ldr	r3, [r1, #16]
 8003cd6:	b96b      	cbnz	r3, 8003cf4 <_svfiprintf_r+0x34>
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	f000 fae3 	bl	80042a4 <_malloc_r>
 8003cde:	6020      	str	r0, [r4, #0]
 8003ce0:	6120      	str	r0, [r4, #16]
 8003ce2:	b928      	cbnz	r0, 8003cf0 <_svfiprintf_r+0x30>
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	f8c8 3000 	str.w	r3, [r8]
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	e0c8      	b.n	8003e82 <_svfiprintf_r+0x1c2>
 8003cf0:	2340      	movs	r3, #64	; 0x40
 8003cf2:	6163      	str	r3, [r4, #20]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf8:	2320      	movs	r3, #32
 8003cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cfe:	2330      	movs	r3, #48	; 0x30
 8003d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d04:	9503      	str	r5, [sp, #12]
 8003d06:	f04f 0b01 	mov.w	fp, #1
 8003d0a:	4637      	mov	r7, r6
 8003d0c:	463d      	mov	r5, r7
 8003d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d12:	b10b      	cbz	r3, 8003d18 <_svfiprintf_r+0x58>
 8003d14:	2b25      	cmp	r3, #37	; 0x25
 8003d16:	d13e      	bne.n	8003d96 <_svfiprintf_r+0xd6>
 8003d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d1c:	d00b      	beq.n	8003d36 <_svfiprintf_r+0x76>
 8003d1e:	4653      	mov	r3, sl
 8003d20:	4632      	mov	r2, r6
 8003d22:	4621      	mov	r1, r4
 8003d24:	4640      	mov	r0, r8
 8003d26:	f7ff ff71 	bl	8003c0c <__ssputs_r>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	f000 80a4 	beq.w	8003e78 <_svfiprintf_r+0x1b8>
 8003d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d32:	4453      	add	r3, sl
 8003d34:	9309      	str	r3, [sp, #36]	; 0x24
 8003d36:	783b      	ldrb	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 809d 	beq.w	8003e78 <_svfiprintf_r+0x1b8>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d48:	9304      	str	r3, [sp, #16]
 8003d4a:	9307      	str	r3, [sp, #28]
 8003d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d50:	931a      	str	r3, [sp, #104]	; 0x68
 8003d52:	462f      	mov	r7, r5
 8003d54:	2205      	movs	r2, #5
 8003d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d5a:	4850      	ldr	r0, [pc, #320]	; (8003e9c <_svfiprintf_r+0x1dc>)
 8003d5c:	f7fc fa50 	bl	8000200 <memchr>
 8003d60:	9b04      	ldr	r3, [sp, #16]
 8003d62:	b9d0      	cbnz	r0, 8003d9a <_svfiprintf_r+0xda>
 8003d64:	06d9      	lsls	r1, r3, #27
 8003d66:	bf44      	itt	mi
 8003d68:	2220      	movmi	r2, #32
 8003d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d6e:	071a      	lsls	r2, r3, #28
 8003d70:	bf44      	itt	mi
 8003d72:	222b      	movmi	r2, #43	; 0x2b
 8003d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d78:	782a      	ldrb	r2, [r5, #0]
 8003d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8003d7c:	d015      	beq.n	8003daa <_svfiprintf_r+0xea>
 8003d7e:	9a07      	ldr	r2, [sp, #28]
 8003d80:	462f      	mov	r7, r5
 8003d82:	2000      	movs	r0, #0
 8003d84:	250a      	movs	r5, #10
 8003d86:	4639      	mov	r1, r7
 8003d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d8c:	3b30      	subs	r3, #48	; 0x30
 8003d8e:	2b09      	cmp	r3, #9
 8003d90:	d94d      	bls.n	8003e2e <_svfiprintf_r+0x16e>
 8003d92:	b1b8      	cbz	r0, 8003dc4 <_svfiprintf_r+0x104>
 8003d94:	e00f      	b.n	8003db6 <_svfiprintf_r+0xf6>
 8003d96:	462f      	mov	r7, r5
 8003d98:	e7b8      	b.n	8003d0c <_svfiprintf_r+0x4c>
 8003d9a:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <_svfiprintf_r+0x1dc>)
 8003d9c:	1a80      	subs	r0, r0, r2
 8003d9e:	fa0b f000 	lsl.w	r0, fp, r0
 8003da2:	4318      	orrs	r0, r3
 8003da4:	9004      	str	r0, [sp, #16]
 8003da6:	463d      	mov	r5, r7
 8003da8:	e7d3      	b.n	8003d52 <_svfiprintf_r+0x92>
 8003daa:	9a03      	ldr	r2, [sp, #12]
 8003dac:	1d11      	adds	r1, r2, #4
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	9103      	str	r1, [sp, #12]
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	db01      	blt.n	8003dba <_svfiprintf_r+0xfa>
 8003db6:	9207      	str	r2, [sp, #28]
 8003db8:	e004      	b.n	8003dc4 <_svfiprintf_r+0x104>
 8003dba:	4252      	negs	r2, r2
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	9207      	str	r2, [sp, #28]
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	783b      	ldrb	r3, [r7, #0]
 8003dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc8:	d10c      	bne.n	8003de4 <_svfiprintf_r+0x124>
 8003dca:	787b      	ldrb	r3, [r7, #1]
 8003dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dce:	d133      	bne.n	8003e38 <_svfiprintf_r+0x178>
 8003dd0:	9b03      	ldr	r3, [sp, #12]
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	9203      	str	r2, [sp, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfb8      	it	lt
 8003ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003de0:	3702      	adds	r7, #2
 8003de2:	9305      	str	r3, [sp, #20]
 8003de4:	4d2e      	ldr	r5, [pc, #184]	; (8003ea0 <_svfiprintf_r+0x1e0>)
 8003de6:	7839      	ldrb	r1, [r7, #0]
 8003de8:	2203      	movs	r2, #3
 8003dea:	4628      	mov	r0, r5
 8003dec:	f7fc fa08 	bl	8000200 <memchr>
 8003df0:	b138      	cbz	r0, 8003e02 <_svfiprintf_r+0x142>
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	1b40      	subs	r0, r0, r5
 8003df6:	fa03 f000 	lsl.w	r0, r3, r0
 8003dfa:	9b04      	ldr	r3, [sp, #16]
 8003dfc:	4303      	orrs	r3, r0
 8003dfe:	3701      	adds	r7, #1
 8003e00:	9304      	str	r3, [sp, #16]
 8003e02:	7839      	ldrb	r1, [r7, #0]
 8003e04:	4827      	ldr	r0, [pc, #156]	; (8003ea4 <_svfiprintf_r+0x1e4>)
 8003e06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e0a:	2206      	movs	r2, #6
 8003e0c:	1c7e      	adds	r6, r7, #1
 8003e0e:	f7fc f9f7 	bl	8000200 <memchr>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d038      	beq.n	8003e88 <_svfiprintf_r+0x1c8>
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <_svfiprintf_r+0x1e8>)
 8003e18:	bb13      	cbnz	r3, 8003e60 <_svfiprintf_r+0x1a0>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	3307      	adds	r3, #7
 8003e1e:	f023 0307 	bic.w	r3, r3, #7
 8003e22:	3308      	adds	r3, #8
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e28:	444b      	add	r3, r9
 8003e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2c:	e76d      	b.n	8003d0a <_svfiprintf_r+0x4a>
 8003e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8003e32:	2001      	movs	r0, #1
 8003e34:	460f      	mov	r7, r1
 8003e36:	e7a6      	b.n	8003d86 <_svfiprintf_r+0xc6>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	3701      	adds	r7, #1
 8003e3c:	9305      	str	r3, [sp, #20]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	250a      	movs	r5, #10
 8003e42:	4638      	mov	r0, r7
 8003e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e48:	3a30      	subs	r2, #48	; 0x30
 8003e4a:	2a09      	cmp	r2, #9
 8003e4c:	d903      	bls.n	8003e56 <_svfiprintf_r+0x196>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0c8      	beq.n	8003de4 <_svfiprintf_r+0x124>
 8003e52:	9105      	str	r1, [sp, #20]
 8003e54:	e7c6      	b.n	8003de4 <_svfiprintf_r+0x124>
 8003e56:	fb05 2101 	mla	r1, r5, r1, r2
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	e7f0      	b.n	8003e42 <_svfiprintf_r+0x182>
 8003e60:	ab03      	add	r3, sp, #12
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4622      	mov	r2, r4
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <_svfiprintf_r+0x1ec>)
 8003e68:	a904      	add	r1, sp, #16
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f3af 8000 	nop.w
 8003e70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e74:	4681      	mov	r9, r0
 8003e76:	d1d6      	bne.n	8003e26 <_svfiprintf_r+0x166>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	065b      	lsls	r3, r3, #25
 8003e7c:	f53f af35 	bmi.w	8003cea <_svfiprintf_r+0x2a>
 8003e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e82:	b01d      	add	sp, #116	; 0x74
 8003e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e88:	ab03      	add	r3, sp, #12
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4b07      	ldr	r3, [pc, #28]	; (8003eac <_svfiprintf_r+0x1ec>)
 8003e90:	a904      	add	r1, sp, #16
 8003e92:	4640      	mov	r0, r8
 8003e94:	f000 f882 	bl	8003f9c <_printf_i>
 8003e98:	e7ea      	b.n	8003e70 <_svfiprintf_r+0x1b0>
 8003e9a:	bf00      	nop
 8003e9c:	08004910 	.word	0x08004910
 8003ea0:	08004916 	.word	0x08004916
 8003ea4:	0800491a 	.word	0x0800491a
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	08003c0d 	.word	0x08003c0d

08003eb0 <_printf_common>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	4691      	mov	r9, r2
 8003eb6:	461f      	mov	r7, r3
 8003eb8:	688a      	ldr	r2, [r1, #8]
 8003eba:	690b      	ldr	r3, [r1, #16]
 8003ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bfb8      	it	lt
 8003ec4:	4613      	movlt	r3, r2
 8003ec6:	f8c9 3000 	str.w	r3, [r9]
 8003eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ece:	4606      	mov	r6, r0
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	b112      	cbz	r2, 8003eda <_printf_common+0x2a>
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	f8c9 3000 	str.w	r3, [r9]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	0699      	lsls	r1, r3, #26
 8003ede:	bf42      	ittt	mi
 8003ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ee4:	3302      	addmi	r3, #2
 8003ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8003eea:	6825      	ldr	r5, [r4, #0]
 8003eec:	f015 0506 	ands.w	r5, r5, #6
 8003ef0:	d107      	bne.n	8003f02 <_printf_common+0x52>
 8003ef2:	f104 0a19 	add.w	sl, r4, #25
 8003ef6:	68e3      	ldr	r3, [r4, #12]
 8003ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	42ab      	cmp	r3, r5
 8003f00:	dc28      	bgt.n	8003f54 <_printf_common+0xa4>
 8003f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	3300      	adds	r3, #0
 8003f0a:	bf18      	it	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	0692      	lsls	r2, r2, #26
 8003f10:	d42d      	bmi.n	8003f6e <_printf_common+0xbe>
 8003f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f16:	4639      	mov	r1, r7
 8003f18:	4630      	mov	r0, r6
 8003f1a:	47c0      	blx	r8
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d020      	beq.n	8003f62 <_printf_common+0xb2>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	68e5      	ldr	r5, [r4, #12]
 8003f24:	f8d9 2000 	ldr.w	r2, [r9]
 8003f28:	f003 0306 	and.w	r3, r3, #6
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	bf08      	it	eq
 8003f30:	1aad      	subeq	r5, r5, r2
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	6922      	ldr	r2, [r4, #16]
 8003f36:	bf0c      	ite	eq
 8003f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f3c:	2500      	movne	r5, #0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bfc4      	itt	gt
 8003f42:	1a9b      	subgt	r3, r3, r2
 8003f44:	18ed      	addgt	r5, r5, r3
 8003f46:	f04f 0900 	mov.w	r9, #0
 8003f4a:	341a      	adds	r4, #26
 8003f4c:	454d      	cmp	r5, r9
 8003f4e:	d11a      	bne.n	8003f86 <_printf_common+0xd6>
 8003f50:	2000      	movs	r0, #0
 8003f52:	e008      	b.n	8003f66 <_printf_common+0xb6>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4652      	mov	r2, sl
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	47c0      	blx	r8
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d103      	bne.n	8003f6a <_printf_common+0xba>
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295
 8003f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6a:	3501      	adds	r5, #1
 8003f6c:	e7c3      	b.n	8003ef6 <_printf_common+0x46>
 8003f6e:	18e1      	adds	r1, r4, r3
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	2030      	movs	r0, #48	; 0x30
 8003f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f78:	4422      	add	r2, r4
 8003f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f82:	3302      	adds	r3, #2
 8003f84:	e7c5      	b.n	8003f12 <_printf_common+0x62>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	47c0      	blx	r8
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0e6      	beq.n	8003f62 <_printf_common+0xb2>
 8003f94:	f109 0901 	add.w	r9, r9, #1
 8003f98:	e7d8      	b.n	8003f4c <_printf_common+0x9c>
	...

08003f9c <_printf_i>:
 8003f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	7e09      	ldrb	r1, [r1, #24]
 8003fa8:	b085      	sub	sp, #20
 8003faa:	296e      	cmp	r1, #110	; 0x6e
 8003fac:	4617      	mov	r7, r2
 8003fae:	4606      	mov	r6, r0
 8003fb0:	4698      	mov	r8, r3
 8003fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003fb4:	f000 80b3 	beq.w	800411e <_printf_i+0x182>
 8003fb8:	d822      	bhi.n	8004000 <_printf_i+0x64>
 8003fba:	2963      	cmp	r1, #99	; 0x63
 8003fbc:	d036      	beq.n	800402c <_printf_i+0x90>
 8003fbe:	d80a      	bhi.n	8003fd6 <_printf_i+0x3a>
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	f000 80b9 	beq.w	8004138 <_printf_i+0x19c>
 8003fc6:	2958      	cmp	r1, #88	; 0x58
 8003fc8:	f000 8083 	beq.w	80040d2 <_printf_i+0x136>
 8003fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003fd4:	e032      	b.n	800403c <_printf_i+0xa0>
 8003fd6:	2964      	cmp	r1, #100	; 0x64
 8003fd8:	d001      	beq.n	8003fde <_printf_i+0x42>
 8003fda:	2969      	cmp	r1, #105	; 0x69
 8003fdc:	d1f6      	bne.n	8003fcc <_printf_i+0x30>
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	0605      	lsls	r5, r0, #24
 8003fe4:	f103 0104 	add.w	r1, r3, #4
 8003fe8:	d52a      	bpl.n	8004040 <_printf_i+0xa4>
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6011      	str	r1, [r2, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da03      	bge.n	8003ffa <_printf_i+0x5e>
 8003ff2:	222d      	movs	r2, #45	; 0x2d
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ffa:	486f      	ldr	r0, [pc, #444]	; (80041b8 <_printf_i+0x21c>)
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	e039      	b.n	8004074 <_printf_i+0xd8>
 8004000:	2973      	cmp	r1, #115	; 0x73
 8004002:	f000 809d 	beq.w	8004140 <_printf_i+0x1a4>
 8004006:	d808      	bhi.n	800401a <_printf_i+0x7e>
 8004008:	296f      	cmp	r1, #111	; 0x6f
 800400a:	d020      	beq.n	800404e <_printf_i+0xb2>
 800400c:	2970      	cmp	r1, #112	; 0x70
 800400e:	d1dd      	bne.n	8003fcc <_printf_i+0x30>
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	e003      	b.n	8004022 <_printf_i+0x86>
 800401a:	2975      	cmp	r1, #117	; 0x75
 800401c:	d017      	beq.n	800404e <_printf_i+0xb2>
 800401e:	2978      	cmp	r1, #120	; 0x78
 8004020:	d1d4      	bne.n	8003fcc <_printf_i+0x30>
 8004022:	2378      	movs	r3, #120	; 0x78
 8004024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004028:	4864      	ldr	r0, [pc, #400]	; (80041bc <_printf_i+0x220>)
 800402a:	e055      	b.n	80040d8 <_printf_i+0x13c>
 800402c:	6813      	ldr	r3, [r2, #0]
 800402e:	1d19      	adds	r1, r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6011      	str	r1, [r2, #0]
 8004034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800403c:	2301      	movs	r3, #1
 800403e:	e08c      	b.n	800415a <_printf_i+0x1be>
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6011      	str	r1, [r2, #0]
 8004044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004048:	bf18      	it	ne
 800404a:	b21b      	sxthne	r3, r3
 800404c:	e7cf      	b.n	8003fee <_printf_i+0x52>
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	6825      	ldr	r5, [r4, #0]
 8004052:	1d18      	adds	r0, r3, #4
 8004054:	6010      	str	r0, [r2, #0]
 8004056:	0628      	lsls	r0, r5, #24
 8004058:	d501      	bpl.n	800405e <_printf_i+0xc2>
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	e002      	b.n	8004064 <_printf_i+0xc8>
 800405e:	0668      	lsls	r0, r5, #25
 8004060:	d5fb      	bpl.n	800405a <_printf_i+0xbe>
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	4854      	ldr	r0, [pc, #336]	; (80041b8 <_printf_i+0x21c>)
 8004066:	296f      	cmp	r1, #111	; 0x6f
 8004068:	bf14      	ite	ne
 800406a:	220a      	movne	r2, #10
 800406c:	2208      	moveq	r2, #8
 800406e:	2100      	movs	r1, #0
 8004070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004074:	6865      	ldr	r5, [r4, #4]
 8004076:	60a5      	str	r5, [r4, #8]
 8004078:	2d00      	cmp	r5, #0
 800407a:	f2c0 8095 	blt.w	80041a8 <_printf_i+0x20c>
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	f021 0104 	bic.w	r1, r1, #4
 8004084:	6021      	str	r1, [r4, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d13d      	bne.n	8004106 <_printf_i+0x16a>
 800408a:	2d00      	cmp	r5, #0
 800408c:	f040 808e 	bne.w	80041ac <_printf_i+0x210>
 8004090:	4665      	mov	r5, ip
 8004092:	2a08      	cmp	r2, #8
 8004094:	d10b      	bne.n	80040ae <_printf_i+0x112>
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	07db      	lsls	r3, r3, #31
 800409a:	d508      	bpl.n	80040ae <_printf_i+0x112>
 800409c:	6923      	ldr	r3, [r4, #16]
 800409e:	6862      	ldr	r2, [r4, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	bfde      	ittt	le
 80040a4:	2330      	movle	r3, #48	; 0x30
 80040a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040ae:	ebac 0305 	sub.w	r3, ip, r5
 80040b2:	6123      	str	r3, [r4, #16]
 80040b4:	f8cd 8000 	str.w	r8, [sp]
 80040b8:	463b      	mov	r3, r7
 80040ba:	aa03      	add	r2, sp, #12
 80040bc:	4621      	mov	r1, r4
 80040be:	4630      	mov	r0, r6
 80040c0:	f7ff fef6 	bl	8003eb0 <_printf_common>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d14d      	bne.n	8004164 <_printf_i+0x1c8>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b005      	add	sp, #20
 80040ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040d2:	4839      	ldr	r0, [pc, #228]	; (80041b8 <_printf_i+0x21c>)
 80040d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040d8:	6813      	ldr	r3, [r2, #0]
 80040da:	6821      	ldr	r1, [r4, #0]
 80040dc:	1d1d      	adds	r5, r3, #4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6015      	str	r5, [r2, #0]
 80040e2:	060a      	lsls	r2, r1, #24
 80040e4:	d50b      	bpl.n	80040fe <_printf_i+0x162>
 80040e6:	07ca      	lsls	r2, r1, #31
 80040e8:	bf44      	itt	mi
 80040ea:	f041 0120 	orrmi.w	r1, r1, #32
 80040ee:	6021      	strmi	r1, [r4, #0]
 80040f0:	b91b      	cbnz	r3, 80040fa <_printf_i+0x15e>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	f022 0220 	bic.w	r2, r2, #32
 80040f8:	6022      	str	r2, [r4, #0]
 80040fa:	2210      	movs	r2, #16
 80040fc:	e7b7      	b.n	800406e <_printf_i+0xd2>
 80040fe:	064d      	lsls	r5, r1, #25
 8004100:	bf48      	it	mi
 8004102:	b29b      	uxthmi	r3, r3
 8004104:	e7ef      	b.n	80040e6 <_printf_i+0x14a>
 8004106:	4665      	mov	r5, ip
 8004108:	fbb3 f1f2 	udiv	r1, r3, r2
 800410c:	fb02 3311 	mls	r3, r2, r1, r3
 8004110:	5cc3      	ldrb	r3, [r0, r3]
 8004112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004116:	460b      	mov	r3, r1
 8004118:	2900      	cmp	r1, #0
 800411a:	d1f5      	bne.n	8004108 <_printf_i+0x16c>
 800411c:	e7b9      	b.n	8004092 <_printf_i+0xf6>
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	6961      	ldr	r1, [r4, #20]
 8004124:	1d18      	adds	r0, r3, #4
 8004126:	6010      	str	r0, [r2, #0]
 8004128:	0628      	lsls	r0, r5, #24
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	d501      	bpl.n	8004132 <_printf_i+0x196>
 800412e:	6019      	str	r1, [r3, #0]
 8004130:	e002      	b.n	8004138 <_printf_i+0x19c>
 8004132:	066a      	lsls	r2, r5, #25
 8004134:	d5fb      	bpl.n	800412e <_printf_i+0x192>
 8004136:	8019      	strh	r1, [r3, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	4665      	mov	r5, ip
 800413e:	e7b9      	b.n	80040b4 <_printf_i+0x118>
 8004140:	6813      	ldr	r3, [r2, #0]
 8004142:	1d19      	adds	r1, r3, #4
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	681d      	ldr	r5, [r3, #0]
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	2100      	movs	r1, #0
 800414c:	4628      	mov	r0, r5
 800414e:	f7fc f857 	bl	8000200 <memchr>
 8004152:	b108      	cbz	r0, 8004158 <_printf_i+0x1bc>
 8004154:	1b40      	subs	r0, r0, r5
 8004156:	6060      	str	r0, [r4, #4]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004162:	e7a7      	b.n	80040b4 <_printf_i+0x118>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	462a      	mov	r2, r5
 8004168:	4639      	mov	r1, r7
 800416a:	4630      	mov	r0, r6
 800416c:	47c0      	blx	r8
 800416e:	3001      	adds	r0, #1
 8004170:	d0aa      	beq.n	80040c8 <_printf_i+0x12c>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	079b      	lsls	r3, r3, #30
 8004176:	d413      	bmi.n	80041a0 <_printf_i+0x204>
 8004178:	68e0      	ldr	r0, [r4, #12]
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	4298      	cmp	r0, r3
 800417e:	bfb8      	it	lt
 8004180:	4618      	movlt	r0, r3
 8004182:	e7a3      	b.n	80040cc <_printf_i+0x130>
 8004184:	2301      	movs	r3, #1
 8004186:	464a      	mov	r2, r9
 8004188:	4639      	mov	r1, r7
 800418a:	4630      	mov	r0, r6
 800418c:	47c0      	blx	r8
 800418e:	3001      	adds	r0, #1
 8004190:	d09a      	beq.n	80040c8 <_printf_i+0x12c>
 8004192:	3501      	adds	r5, #1
 8004194:	68e3      	ldr	r3, [r4, #12]
 8004196:	9a03      	ldr	r2, [sp, #12]
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	42ab      	cmp	r3, r5
 800419c:	dcf2      	bgt.n	8004184 <_printf_i+0x1e8>
 800419e:	e7eb      	b.n	8004178 <_printf_i+0x1dc>
 80041a0:	2500      	movs	r5, #0
 80041a2:	f104 0919 	add.w	r9, r4, #25
 80041a6:	e7f5      	b.n	8004194 <_printf_i+0x1f8>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ac      	bne.n	8004106 <_printf_i+0x16a>
 80041ac:	7803      	ldrb	r3, [r0, #0]
 80041ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b6:	e76c      	b.n	8004092 <_printf_i+0xf6>
 80041b8:	08004921 	.word	0x08004921
 80041bc:	08004932 	.word	0x08004932

080041c0 <memcpy>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	1e43      	subs	r3, r0, #1
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	d100      	bne.n	80041cc <memcpy+0xc>
 80041ca:	bd10      	pop	{r4, pc}
 80041cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d4:	e7f7      	b.n	80041c6 <memcpy+0x6>

080041d6 <memmove>:
 80041d6:	4288      	cmp	r0, r1
 80041d8:	b510      	push	{r4, lr}
 80041da:	eb01 0302 	add.w	r3, r1, r2
 80041de:	d807      	bhi.n	80041f0 <memmove+0x1a>
 80041e0:	1e42      	subs	r2, r0, #1
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d00a      	beq.n	80041fc <memmove+0x26>
 80041e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80041ee:	e7f8      	b.n	80041e2 <memmove+0xc>
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d9f5      	bls.n	80041e0 <memmove+0xa>
 80041f4:	1881      	adds	r1, r0, r2
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	42d3      	cmn	r3, r2
 80041fa:	d100      	bne.n	80041fe <memmove+0x28>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004202:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004206:	e7f7      	b.n	80041f8 <memmove+0x22>

08004208 <_free_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4605      	mov	r5, r0
 800420c:	2900      	cmp	r1, #0
 800420e:	d045      	beq.n	800429c <_free_r+0x94>
 8004210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004214:	1f0c      	subs	r4, r1, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	bfb8      	it	lt
 800421a:	18e4      	addlt	r4, r4, r3
 800421c:	f000 f8d2 	bl	80043c4 <__malloc_lock>
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <_free_r+0x98>)
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	4610      	mov	r0, r2
 8004226:	b933      	cbnz	r3, 8004236 <_free_r+0x2e>
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	6014      	str	r4, [r2, #0]
 800422c:	4628      	mov	r0, r5
 800422e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004232:	f000 b8c8 	b.w	80043c6 <__malloc_unlock>
 8004236:	42a3      	cmp	r3, r4
 8004238:	d90c      	bls.n	8004254 <_free_r+0x4c>
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	1862      	adds	r2, r4, r1
 800423e:	4293      	cmp	r3, r2
 8004240:	bf04      	itt	eq
 8004242:	681a      	ldreq	r2, [r3, #0]
 8004244:	685b      	ldreq	r3, [r3, #4]
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	bf04      	itt	eq
 800424a:	1852      	addeq	r2, r2, r1
 800424c:	6022      	streq	r2, [r4, #0]
 800424e:	6004      	str	r4, [r0, #0]
 8004250:	e7ec      	b.n	800422c <_free_r+0x24>
 8004252:	4613      	mov	r3, r2
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	b10a      	cbz	r2, 800425c <_free_r+0x54>
 8004258:	42a2      	cmp	r2, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x4a>
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	1858      	adds	r0, r3, r1
 8004260:	42a0      	cmp	r0, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x74>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	4401      	add	r1, r0
 8004268:	1858      	adds	r0, r3, r1
 800426a:	4282      	cmp	r2, r0
 800426c:	6019      	str	r1, [r3, #0]
 800426e:	d1dd      	bne.n	800422c <_free_r+0x24>
 8004270:	6810      	ldr	r0, [r2, #0]
 8004272:	6852      	ldr	r2, [r2, #4]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	4401      	add	r1, r0
 8004278:	6019      	str	r1, [r3, #0]
 800427a:	e7d7      	b.n	800422c <_free_r+0x24>
 800427c:	d902      	bls.n	8004284 <_free_r+0x7c>
 800427e:	230c      	movs	r3, #12
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	e7d3      	b.n	800422c <_free_r+0x24>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	1821      	adds	r1, r4, r0
 8004288:	428a      	cmp	r2, r1
 800428a:	bf04      	itt	eq
 800428c:	6811      	ldreq	r1, [r2, #0]
 800428e:	6852      	ldreq	r2, [r2, #4]
 8004290:	6062      	str	r2, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1809      	addeq	r1, r1, r0
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	605c      	str	r4, [r3, #4]
 800429a:	e7c7      	b.n	800422c <_free_r+0x24>
 800429c:	bd38      	pop	{r3, r4, r5, pc}
 800429e:	bf00      	nop
 80042a0:	20000098 	.word	0x20000098

080042a4 <_malloc_r>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	1ccd      	adds	r5, r1, #3
 80042a8:	f025 0503 	bic.w	r5, r5, #3
 80042ac:	3508      	adds	r5, #8
 80042ae:	2d0c      	cmp	r5, #12
 80042b0:	bf38      	it	cc
 80042b2:	250c      	movcc	r5, #12
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	4606      	mov	r6, r0
 80042b8:	db01      	blt.n	80042be <_malloc_r+0x1a>
 80042ba:	42a9      	cmp	r1, r5
 80042bc:	d903      	bls.n	80042c6 <_malloc_r+0x22>
 80042be:	230c      	movs	r3, #12
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	2000      	movs	r0, #0
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	f000 f87d 	bl	80043c4 <__malloc_lock>
 80042ca:	4a21      	ldr	r2, [pc, #132]	; (8004350 <_malloc_r+0xac>)
 80042cc:	6814      	ldr	r4, [r2, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	b991      	cbnz	r1, 80042f8 <_malloc_r+0x54>
 80042d2:	4c20      	ldr	r4, [pc, #128]	; (8004354 <_malloc_r+0xb0>)
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	b91b      	cbnz	r3, 80042e0 <_malloc_r+0x3c>
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f863 	bl	80043a4 <_sbrk_r>
 80042de:	6020      	str	r0, [r4, #0]
 80042e0:	4629      	mov	r1, r5
 80042e2:	4630      	mov	r0, r6
 80042e4:	f000 f85e 	bl	80043a4 <_sbrk_r>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d124      	bne.n	8004336 <_malloc_r+0x92>
 80042ec:	230c      	movs	r3, #12
 80042ee:	6033      	str	r3, [r6, #0]
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 f868 	bl	80043c6 <__malloc_unlock>
 80042f6:	e7e4      	b.n	80042c2 <_malloc_r+0x1e>
 80042f8:	680b      	ldr	r3, [r1, #0]
 80042fa:	1b5b      	subs	r3, r3, r5
 80042fc:	d418      	bmi.n	8004330 <_malloc_r+0x8c>
 80042fe:	2b0b      	cmp	r3, #11
 8004300:	d90f      	bls.n	8004322 <_malloc_r+0x7e>
 8004302:	600b      	str	r3, [r1, #0]
 8004304:	50cd      	str	r5, [r1, r3]
 8004306:	18cc      	adds	r4, r1, r3
 8004308:	4630      	mov	r0, r6
 800430a:	f000 f85c 	bl	80043c6 <__malloc_unlock>
 800430e:	f104 000b 	add.w	r0, r4, #11
 8004312:	1d23      	adds	r3, r4, #4
 8004314:	f020 0007 	bic.w	r0, r0, #7
 8004318:	1ac3      	subs	r3, r0, r3
 800431a:	d0d3      	beq.n	80042c4 <_malloc_r+0x20>
 800431c:	425a      	negs	r2, r3
 800431e:	50e2      	str	r2, [r4, r3]
 8004320:	e7d0      	b.n	80042c4 <_malloc_r+0x20>
 8004322:	428c      	cmp	r4, r1
 8004324:	684b      	ldr	r3, [r1, #4]
 8004326:	bf16      	itet	ne
 8004328:	6063      	strne	r3, [r4, #4]
 800432a:	6013      	streq	r3, [r2, #0]
 800432c:	460c      	movne	r4, r1
 800432e:	e7eb      	b.n	8004308 <_malloc_r+0x64>
 8004330:	460c      	mov	r4, r1
 8004332:	6849      	ldr	r1, [r1, #4]
 8004334:	e7cc      	b.n	80042d0 <_malloc_r+0x2c>
 8004336:	1cc4      	adds	r4, r0, #3
 8004338:	f024 0403 	bic.w	r4, r4, #3
 800433c:	42a0      	cmp	r0, r4
 800433e:	d005      	beq.n	800434c <_malloc_r+0xa8>
 8004340:	1a21      	subs	r1, r4, r0
 8004342:	4630      	mov	r0, r6
 8004344:	f000 f82e 	bl	80043a4 <_sbrk_r>
 8004348:	3001      	adds	r0, #1
 800434a:	d0cf      	beq.n	80042ec <_malloc_r+0x48>
 800434c:	6025      	str	r5, [r4, #0]
 800434e:	e7db      	b.n	8004308 <_malloc_r+0x64>
 8004350:	20000098 	.word	0x20000098
 8004354:	2000009c 	.word	0x2000009c

08004358 <_realloc_r>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	4607      	mov	r7, r0
 800435c:	4614      	mov	r4, r2
 800435e:	460e      	mov	r6, r1
 8004360:	b921      	cbnz	r1, 800436c <_realloc_r+0x14>
 8004362:	4611      	mov	r1, r2
 8004364:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004368:	f7ff bf9c 	b.w	80042a4 <_malloc_r>
 800436c:	b922      	cbnz	r2, 8004378 <_realloc_r+0x20>
 800436e:	f7ff ff4b 	bl	8004208 <_free_r>
 8004372:	4625      	mov	r5, r4
 8004374:	4628      	mov	r0, r5
 8004376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004378:	f000 f826 	bl	80043c8 <_malloc_usable_size_r>
 800437c:	42a0      	cmp	r0, r4
 800437e:	d20f      	bcs.n	80043a0 <_realloc_r+0x48>
 8004380:	4621      	mov	r1, r4
 8004382:	4638      	mov	r0, r7
 8004384:	f7ff ff8e 	bl	80042a4 <_malloc_r>
 8004388:	4605      	mov	r5, r0
 800438a:	2800      	cmp	r0, #0
 800438c:	d0f2      	beq.n	8004374 <_realloc_r+0x1c>
 800438e:	4631      	mov	r1, r6
 8004390:	4622      	mov	r2, r4
 8004392:	f7ff ff15 	bl	80041c0 <memcpy>
 8004396:	4631      	mov	r1, r6
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff ff35 	bl	8004208 <_free_r>
 800439e:	e7e9      	b.n	8004374 <_realloc_r+0x1c>
 80043a0:	4635      	mov	r5, r6
 80043a2:	e7e7      	b.n	8004374 <_realloc_r+0x1c>

080043a4 <_sbrk_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4c06      	ldr	r4, [pc, #24]	; (80043c0 <_sbrk_r+0x1c>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4605      	mov	r5, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	f7fd f984 	bl	80016bc <_sbrk>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_sbrk_r+0x1a>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	b103      	cbz	r3, 80043be <_sbrk_r+0x1a>
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	20000214 	.word	0x20000214

080043c4 <__malloc_lock>:
 80043c4:	4770      	bx	lr

080043c6 <__malloc_unlock>:
 80043c6:	4770      	bx	lr

080043c8 <_malloc_usable_size_r>:
 80043c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043cc:	1f18      	subs	r0, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfbc      	itt	lt
 80043d2:	580b      	ldrlt	r3, [r1, r0]
 80043d4:	18c0      	addlt	r0, r0, r3
 80043d6:	4770      	bx	lr

080043d8 <_init>:
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	bf00      	nop
 80043dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043de:	bc08      	pop	{r3}
 80043e0:	469e      	mov	lr, r3
 80043e2:	4770      	bx	lr

080043e4 <_fini>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr
