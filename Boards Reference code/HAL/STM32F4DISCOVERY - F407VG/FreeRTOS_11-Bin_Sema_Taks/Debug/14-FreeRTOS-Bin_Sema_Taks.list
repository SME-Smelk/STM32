
14-FreeRTOS-Bin_Sema_Taks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015770  20000074  08006ec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200157e4  08006ec0  000257e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000190bf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030a1  00000000  00000000  00039163  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003c208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  0003d310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002341f  00000000  00000000  0003e290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015afb  00000000  00000000  000616af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0546  00000000  00000000  000771aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001476f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048cc  00000000  00000000  0014776c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c18 	.word	0x08006c18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006c18 	.word	0x08006c18

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80001fe:	f100 0618 	add.w	r6, r0, #24
 8000202:	6930      	ldr	r0, [r6, #16]
 8000204:	68f7      	ldr	r7, [r6, #12]
 8000206:	6875      	ldr	r5, [r6, #4]
 8000208:	4287      	cmp	r7, r0
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
 800020c:	68b3      	ldr	r3, [r6, #8]
 800020e:	1bdc      	subs	r4, r3, r7
 8000210:	1e63      	subs	r3, r4, #1
 8000212:	4293      	cmp	r3, r2
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
 8000216:	197d      	adds	r5, r7, r5
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
 8000224:	3a01      	subs	r2, #1
 8000226:	d005      	beq.n	8000234 <_CSDone>
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
 8000230:	3a01      	subs	r2, #1
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
 8000234:	60f0      	str	r0, [r6, #12]
 8000236:	2001      	movs	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
 800023c:	18c0      	adds	r0, r0, r3
 800023e:	4290      	cmp	r0, r2
 8000240:	d317      	bcc.n	8000272 <_Case3>
 8000242:	1978      	adds	r0, r7, r5
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
 800024e:	3c01      	subs	r4, #1
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
 8000252:	1c14      	adds	r4, r2, #0
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
 800025e:	3a01      	subs	r2, #1
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
 8000262:	60f4      	str	r4, [r6, #12]
 8000264:	2001      	movs	r0, #1
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
 800026a:	1bc0      	subs	r0, r0, r7
 800026c:	3801      	subs	r0, #1
 800026e:	4290      	cmp	r0, r2
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
 8000272:	2000      	movs	r0, #0
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
 8000276:	4770      	bx	lr
 8000278:	20015738 	.word	0x20015738

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr
 800028c:	0000      	movs	r0, r0
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <USART2_UART_Init+0x4c>)
 8000668:	f001 fa5a 	bl	8001b20 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f965 	bl	8000940 <Error_Handler>
  }

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200156ec 	.word	0x200156ec
 8000680:	40004400 	.word	0x40004400

08000684 <UART2_write>:

void UART2_write(char data[]){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fdf5 	bl	800027c <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <UART2_write+0x28>)
 800069e:	f001 fa8c 	bl	8001bba <HAL_UART_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200156ec 	.word	0x200156ec

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <main+0xac>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a28      	ldr	r2, [pc, #160]	; (800075c <main+0xac>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c2:	f000 f9f7 	bl	8000ab4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80006c6:	f000 f85b 	bl	8000780 <SystemClock_Config>

	/* Configure the peripherals */
	USART2_UART_Init();
 80006ca:	f7ff ffb1 	bl	8000630 <USART2_UART_Init>

	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 80006ce:	f004 f9b9 	bl	8004a44 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80006d2:	f005 f887 	bl	80057e4 <SEGGER_SYSVIEW_Start>

    /* Before a semaphore is used it must be explicitly created.
     * In this example a binary semaphore is created . */
    vSemaphoreCreateBinary( xWork );
 80006d6:	2203      	movs	r2, #3
 80006d8:	2100      	movs	r1, #0
 80006da:	2001      	movs	r0, #1
 80006dc:	f002 f82c 	bl	8002738 <xQueueGenericCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <main+0xb0>)
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <main+0xb0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d006      	beq.n	80006fc <main+0x4c>
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <main+0xb0>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 f884 	bl	8002804 <xQueueGenericSend>

	/* The queue is created to hold a maximum of 1 Element. */
    xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	2001      	movs	r0, #1
 8000702:	f002 f819 	bl	8002738 <xQueueGenericCreate>
 8000706:	4602      	mov	r2, r0
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <main+0xb4>)
 800070a:	601a      	str	r2, [r3, #0]

    /* Check the semaphore and queue was created successfully. */
    if( (xWork != NULL) && (xWorkQueue != NULL) )
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <main+0xb0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d01e      	beq.n	8000752 <main+0xa2>
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <main+0xb4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01a      	beq.n	8000752 <main+0xa2>
    {

    	/* Start Message */
    	UART2_write("Demo of Binary semaphore usage between 2 Tasks \r\n");
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <main+0xb8>)
 800071e:	f7ff ffb1 	bl	8000684 <UART2_write>

		/* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
        xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 8000722:	2300      	movs	r3, #0
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	2303      	movs	r3, #3
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <main+0xbc>)
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0xc0>)
 8000734:	f002 fd13 	bl	800315e <xTaskCreate>

        /* Create a employee task with less priority than manager */
        xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 8000738:	2300      	movs	r3, #0
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	2301      	movs	r3, #1
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2300      	movs	r3, #0
 8000742:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000746:	490b      	ldr	r1, [pc, #44]	; (8000774 <main+0xc4>)
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <main+0xc8>)
 800074a:	f002 fd08 	bl	800315e <xTaskCreate>

        /* Start the scheduler so the created tasks start executing. */
        vTaskStartScheduler();
 800074e:	f002 fe95 	bl	800347c <vTaskStartScheduler>
    }

    UART2_write("Queue/Sema create failed.. \r\n");
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0xcc>)
 8000754:	f7ff ff96 	bl	8000684 <UART2_write>


	while (1);
 8000758:	e7fe      	b.n	8000758 <main+0xa8>
 800075a:	bf00      	nop
 800075c:	e0001000 	.word	0xe0001000
 8000760:	20015730 	.word	0x20015730
 8000764:	2001572c 	.word	0x2001572c
 8000768:	08006c30 	.word	0x08006c30
 800076c:	08006c64 	.word	0x08006c64
 8000770:	08000841 	.word	0x08000841
 8000774:	08006c6c 	.word	0x08006c6c
 8000778:	080008f5 	.word	0x080008f5
 800077c:	08006c78 	.word	0x08006c78

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fe3e 	bl	8006410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c4:	2308      	movs	r3, #8
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fc5c 	bl	8001098 <HAL_RCC_OscConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f8ab 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ea:	230f      	movs	r3, #15
 80007ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000800:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2105      	movs	r1, #5
 8000808:	4618      	mov	r0, r3
 800080a:	f000 feb5 	bl	8001578 <HAL_RCC_ClockConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000814:	f000 f894 	bl	8000940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000818:	2301      	movs	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800081c:	23c0      	movs	r3, #192	; 0xc0
 800081e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f898 	bl	800195c <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000832:	f000 f885 	bl	8000940 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	; 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <vManagerTask>:


void vManagerTask( void *pvParameters )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

	 unsigned int xWorkTicketId;
	 portBASE_TYPE xStatus;
	 uint8_t cont = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	75fb      	strb	r3, [r7, #23]
   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <vManagerTask+0x70>)
 800084e:	6818      	ldr	r0, [r3, #0]
 8000850:	2300      	movs	r3, #0
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	f001 ffd5 	bl	8002804 <xQueueGenericSend>
   for( ;; )
   {
       /* get a work ticket id(some random number) */
	   cont++;
 800085a:	7dfb      	ldrb	r3, [r7, #23]
 800085c:	3301      	adds	r3, #1
 800085e:	75fb      	strb	r3, [r7, #23]
	   xWorkTicketId = cont;
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	60fb      	str	r3, [r7, #12]
	   if(cont >= 255) cont=0;
 8000864:	7dfb      	ldrb	r3, [r7, #23]
 8000866:	2bff      	cmp	r3, #255	; 0xff
 8000868:	d101      	bne.n	800086e <vManagerTask+0x2e>
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]


		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <vManagerTask+0x74>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f107 010c 	add.w	r1, r7, #12
 8000876:	2300      	movs	r3, #0
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	f001 ffc2 	bl	8002804 <xQueueGenericSend>
 8000880:	6138      	str	r0, [r7, #16]

		if( xStatus != pdPASS )
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d003      	beq.n	8000890 <vManagerTask+0x50>
		{
		    UART2_write("Could not send to the queue.\r\n");
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <vManagerTask+0x78>)
 800088a:	f7ff fefb 	bl	8000684 <UART2_write>
 800088e:	e7e4      	b.n	800085a <vManagerTask+0x1a>
		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <vManagerTask+0x70>)
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f001 ffb3 	bl	8002804 <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <vManagerTask+0x7c>)
 80008a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	f3bf 8f4f 	dsb	sy
 80008aa:	f3bf 8f6f 	isb	sy
	   cont++;
 80008ae:	e7d4      	b.n	800085a <vManagerTask+0x1a>
 80008b0:	20015730 	.word	0x20015730
 80008b4:	2001572c 	.word	0x2001572c
 80008b8:	08006c98 	.word	0x08006c98
 80008bc:	e000ed04 	.word	0xe000ed04

080008c0 <EmployeeDoWork>:
   }
}
/*-----------------------------------------------------------*/

void EmployeeDoWork(unsigned char TicketId)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <EmployeeDoWork+0x2c>)
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <EmployeeDoWork+0x30>)
 80008d2:	f005 fda5 	bl	8006420 <siprintf>
	UART2_write(usr_msg);
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <EmployeeDoWork+0x30>)
 80008d8:	f7ff fed4 	bl	8000684 <UART2_write>
	vTaskDelay(TicketId);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fd94 	bl	800340c <vTaskDelay>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08006cb8 	.word	0x08006cb8
 80008f0:	20000090 	.word	0x20000090

080008f4 <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
   /* As per most tasks, this task is implemented within an infinite loop. */
   for( ;; )
   {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <vEmployeeTask+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f002 f984 	bl	8002c10 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <vEmployeeTask+0x44>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f107 010b 	add.w	r1, r7, #11
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 f880 	bl	8002a18 <xQueueReceive>
 8000918:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d104      	bne.n	800092a <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffcc 	bl	80008c0 <EmployeeDoWork>
 8000928:	e7e8      	b.n	80008fc <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			UART2_write("Employee task : Queue is empty , nothing to do.\r\n");
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <vEmployeeTask+0x48>)
 800092c:	f7ff feaa 	bl	8000684 <UART2_write>
		xSemaphoreTake( xWork, 0 );
 8000930:	e7e4      	b.n	80008fc <vEmployeeTask+0x8>
 8000932:	bf00      	nop
 8000934:	20015730 	.word	0x20015730
 8000938:	2001572c 	.word	0x2001572c
 800093c:	08006ce4 	.word	0x08006ce4

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f9d2 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	210f      	movs	r1, #15
 800095c:	f06f 0001 	mvn.w	r0, #1
 8000960:	f000 f9d7 	bl	8000d12 <HAL_NVIC_SetPriority>

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	230c      	movs	r3, #12
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x8c>)
 80009de:	f000 f9c1 	bl	8000d64 <HAL_GPIO_Init>

  }
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f899 	bl	8000b58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a26:	f003 fd4f 	bl	80044c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <_sbrk>:
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x50>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x16>
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <_sbrk+0x50>)
 8000a42:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <_sbrk+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <_sbrk+0x50>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <_sbrk+0x50>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4413      	add	r3, r2
 8000a54:	466a      	mov	r2, sp
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d907      	bls.n	8000a6a <_sbrk+0x3a>
 8000a5a:	f005 fc95 	bl	8006388 <__errno>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	230c      	movs	r3, #12
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	e006      	b.n	8000a78 <_sbrk+0x48>
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <_sbrk+0x50>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <_sbrk+0x50>)
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000018c 	.word	0x2000018c
 8000a84:	200157e8 	.word	0x200157e8

08000a88 <SystemInit>:
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SystemInit+0x28>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <SystemInit+0x28>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SystemInit+0x28>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_Init>:
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f90d 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>
 8000ae8:	f7ff ff31 	bl	800094e <HAL_MspInit>
 8000aec:	2300      	movs	r3, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_InitTick>:
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f917 	bl	8000d4a <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f8ed 	bl	8000d12 <HAL_NVIC_SetPriority>
 8000b38:	4a06      	ldr	r2, [pc, #24]	; (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
 8000b42:	2301      	movs	r3, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20015734 	.word	0x20015734

08000b80 <HAL_GetTick>:
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20015734 	.word	0x20015734

08000b98 <__NVIC_SetPriorityGrouping>:
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e16b      	b.n	8001058 <HAL_GPIO_Init+0x2f4>
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 815a 	bne.w	8001052 <HAL_GPIO_Init+0x2ee>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d00b      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b11      	cmp	r3, #17
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x5a>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0xbc>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0xfc>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b12      	cmp	r3, #18
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x144>
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80b4 	beq.w	8001052 <HAL_GPIO_Init+0x2ee>
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_GPIO_Init+0x308>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	; (800106c <HAL_GPIO_Init+0x308>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_GPIO_Init+0x308>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a5a      	ldr	r2, [pc, #360]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4013      	ands	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d02b      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x314>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d025      	beq.n	8000f86 <HAL_GPIO_Init+0x222>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x318>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d01f      	beq.n	8000f82 <HAL_GPIO_Init+0x21e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x31c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d019      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <HAL_GPIO_Init+0x320>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d013      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	; (8001088 <HAL_GPIO_Init+0x324>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d00d      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	; (800108c <HAL_GPIO_Init+0x328>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d007      	beq.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x32c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_GPIO_Init+0x20a>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00e      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f6e:	2308      	movs	r3, #8
 8000f70:	e00c      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00a      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f76:	2305      	movs	r3, #5
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x228>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	4934      	ldr	r1, [pc, #208]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000faa:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x26a>
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	4b2f      	ldr	r3, [pc, #188]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x294>
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	6053      	str	r3, [r2, #4]
 8000ffe:	4b25      	ldr	r3, [pc, #148]	; (8001094 <HAL_GPIO_Init+0x330>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x2be>
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_GPIO_Init+0x330>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <HAL_GPIO_Init+0x330>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2e8>
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_GPIO_Init+0x330>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f67f ae90 	bls.w	8000d80 <HAL_GPIO_Init+0x1c>
 8001060:	bf00      	nop
 8001062:	3724      	adds	r7, #36	; 0x24
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40023800 	.word	0x40023800
 8001070:	40013800 	.word	0x40013800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400
 800107c:	40020800 	.word	0x40020800
 8001080:	40020c00 	.word	0x40020c00
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40021800 	.word	0x40021800
 8001090:	40021c00 	.word	0x40021c00
 8001094:	40013c00 	.word	0x40013c00

08001098 <HAL_RCC_OscConfig>:
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e25b      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
 80010b6:	4ba3      	ldr	r3, [pc, #652]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
 80010c2:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
 80010ce:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
 80010dc:	4b99      	ldr	r3, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e236      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b91      	ldr	r3, [pc, #580]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a90      	ldr	r2, [pc, #576]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a8a      	ldr	r2, [pc, #552]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a87      	ldr	r2, [pc, #540]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b84      	ldr	r3, [pc, #528]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a83      	ldr	r2, [pc, #524]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a80      	ldr	r2, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
 8001150:	f7ff fd16 	bl	8000b80 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
 8001158:	f7ff fd12 	bl	8000b80 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
 8001166:	2303      	movs	r3, #3
 8001168:	e1fb      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
 8001178:	f7ff fd02 	bl	8000b80 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
 8001180:	f7ff fcfe 	bl	8000b80 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
 800118e:	2303      	movs	r3, #3
 8001190:	e1e7      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
 80011a0:	bf00      	nop
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
 80011ba:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1bb      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4952      	ldr	r1, [pc, #328]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
 8001208:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_OscConfig+0x2b0>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f7ff fcb7 	bl	8000b80 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
 8001216:	f7ff fcb3 	bl	8000b80 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
 8001224:	2303      	movs	r3, #3
 8001226:	e19c      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4940      	ldr	r1, [pc, #256]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x2b0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	f7ff fc96 	bl	8000b80 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
 8001258:	f7ff fc92 	bl	8000b80 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
 8001266:	2303      	movs	r3, #3
 8001268:	e17b      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d030      	beq.n	80012e4 <HAL_RCC_OscConfig+0x24c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_RCC_OscConfig+0x2b4>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	f7ff fc76 	bl	8000b80 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
 8001298:	f7ff fc72 	bl	8000b80 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
 80012a6:	2303      	movs	r3, #3
 80012a8:	e15b      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e015      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_RCC_OscConfig+0x2b4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	f7ff fc5f 	bl	8000b80 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x240>
 80012c6:	f7ff fc5b 	bl	8000b80 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x240>
 80012d4:	2303      	movs	r3, #3
 80012d6:	e144      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a0 	beq.w	8001432 <HAL_RCC_OscConfig+0x39a>
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_RCC_OscConfig+0x28a>
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d121      	bne.n	8001372 <HAL_RCC_OscConfig+0x2da>
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	f7ff fc21 	bl	8000b80 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]
 8001340:	e011      	b.n	8001366 <HAL_RCC_OscConfig+0x2ce>
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
 8001350:	40007000 	.word	0x40007000
 8001354:	f7ff fc14 	bl	8000b80 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2ce>
 8001362:	2303      	movs	r3, #3
 8001364:	e0fd      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x4d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x2bc>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x2f0>
 800137a:	4b7d      	ldr	r3, [pc, #500]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a7c      	ldr	r2, [pc, #496]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	e01c      	b.n	80013c2 <HAL_RCC_OscConfig+0x32a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
 8001390:	4b77      	ldr	r3, [pc, #476]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	4a76      	ldr	r2, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6713      	str	r3, [r2, #112]	; 0x70
 800139c:	4b74      	ldr	r3, [pc, #464]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a73      	ldr	r2, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0x32a>
 80013aa:	4b71      	ldr	r3, [pc, #452]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a70      	ldr	r2, [pc, #448]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	4b6e      	ldr	r3, [pc, #440]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <HAL_RCC_OscConfig+0x35e>
 80013ca:	f7ff fbd9 	bl	8000b80 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x350>
 80013d2:	f7ff fbd5 	bl	8000b80 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x350>
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0bc      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ee      	beq.n	80013d2 <HAL_RCC_OscConfig+0x33a>
 80013f4:	e014      	b.n	8001420 <HAL_RCC_OscConfig+0x388>
 80013f6:	f7ff fbc3 	bl	8000b80 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x37c>
 80013fe:	f7ff fbbf 	bl	8000b80 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x37c>
 8001410:	2303      	movs	r3, #3
 8001412:	e0a6      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ee      	bne.n	80013fe <HAL_RCC_OscConfig+0x366>
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <HAL_RCC_OscConfig+0x39a>
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 800142c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8092 	beq.w	8001560 <HAL_RCC_OscConfig+0x4c8>
 800143c:	4b4c      	ldr	r3, [pc, #304]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d05c      	beq.n	8001502 <HAL_RCC_OscConfig+0x46a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d141      	bne.n	80014d4 <HAL_RCC_OscConfig+0x43c>
 8001450:	4b48      	ldr	r3, [pc, #288]	; (8001574 <HAL_RCC_OscConfig+0x4dc>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f7ff fb93 	bl	8000b80 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x3d8>
 800145e:	f7ff fb8f 	bl	8000b80 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3d8>
 800146c:	2303      	movs	r3, #3
 800146e:	e078      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x3c6>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	3b01      	subs	r3, #1
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4933      	ldr	r1, [pc, #204]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <HAL_RCC_OscConfig+0x4dc>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f7ff fb68 	bl	8000b80 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x42e>
 80014b4:	f7ff fb64 	bl	8000b80 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x42e>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e04d      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x41c>
 80014d2:	e045      	b.n	8001560 <HAL_RCC_OscConfig+0x4c8>
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x4dc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f7ff fb51 	bl	8000b80 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x45c>
 80014e2:	f7ff fb4d 	bl	8000b80 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x45c>
 80014f0:	2303      	movs	r3, #3
 80014f2:	e036      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x44a>
 8001500:	e02e      	b.n	8001560 <HAL_RCC_OscConfig+0x4c8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x476>
 800150a:	2301      	movs	r3, #1
 800150c:	e029      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	429a      	cmp	r2, r3
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x4c4>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	429a      	cmp	r2, r3
 800152e:	d115      	bne.n	800155c <HAL_RCC_OscConfig+0x4c4>
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001536:	4013      	ands	r3, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800153c:	4293      	cmp	r3, r2
 800153e:	d10d      	bne.n	800155c <HAL_RCC_OscConfig+0x4c4>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	429a      	cmp	r2, r3
 800154c:	d106      	bne.n	800155c <HAL_RCC_OscConfig+0x4c4>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0x4c8>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x4ca>
 8001560:	2300      	movs	r3, #0
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000
 8001570:	40023800 	.word	0x40023800
 8001574:	42470060 	.word	0x42470060

08001578 <HAL_RCC_ClockConfig>:
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
 8001668:	f7ff fa8a 	bl	8000b80 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
 8001670:	f7ff fa86 	bl	8000b80 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
 80016fe:	f000 f821 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001702:	4601      	mov	r1, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	fa21 f303 	lsr.w	r3, r1, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f9ea 	bl	8000af8 <HAL_InitTick>
 8001724:	2300      	movs	r3, #0
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	08006ddc 	.word	0x08006ddc
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetSysClockFreq>:
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b04      	cmp	r3, #4
 8001764:	d007      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x32>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d008      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x38>
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 80b4 	bne.w	80018d8 <HAL_RCC_GetSysClockFreq+0x194>
 8001770:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	e0b3      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x19a>
 8001776:	4b5e      	ldr	r3, [pc, #376]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	e0b0      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x19a>
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d04a      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0xe4>
 8001792:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	f04f 0400 	mov.w	r4, #0
 800179c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	ea03 0501 	and.w	r5, r3, r1
 80017a8:	ea04 0602 	and.w	r6, r4, r2
 80017ac:	4629      	mov	r1, r5
 80017ae:	4632      	mov	r2, r6
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	0154      	lsls	r4, r2, #5
 80017ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017be:	014b      	lsls	r3, r1, #5
 80017c0:	4619      	mov	r1, r3
 80017c2:	4622      	mov	r2, r4
 80017c4:	1b49      	subs	r1, r1, r5
 80017c6:	eb62 0206 	sbc.w	r2, r2, r6
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	0194      	lsls	r4, r2, #6
 80017d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017d8:	018b      	lsls	r3, r1, #6
 80017da:	1a5b      	subs	r3, r3, r1
 80017dc:	eb64 0402 	sbc.w	r4, r4, r2
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	00e2      	lsls	r2, r4, #3
 80017ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ee:	00d9      	lsls	r1, r3, #3
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	195b      	adds	r3, r3, r5
 80017f6:	eb44 0406 	adc.w	r4, r4, r6
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	0262      	lsls	r2, r4, #9
 8001804:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001808:	0259      	lsls	r1, r3, #9
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	4618      	mov	r0, r3
 8001810:	4621      	mov	r1, r4
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f04f 0400 	mov.w	r4, #0
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	f7fe fd88 	bl	8000330 <__aeabi_uldivmod>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e049      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x178>
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	f04f 0400 	mov.w	r4, #0
 8001832:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	ea03 0501 	and.w	r5, r3, r1
 800183e:	ea04 0602 	and.w	r6, r4, r2
 8001842:	4629      	mov	r1, r5
 8001844:	4632      	mov	r2, r6
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	0154      	lsls	r4, r2, #5
 8001850:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001854:	014b      	lsls	r3, r1, #5
 8001856:	4619      	mov	r1, r3
 8001858:	4622      	mov	r2, r4
 800185a:	1b49      	subs	r1, r1, r5
 800185c:	eb62 0206 	sbc.w	r2, r2, r6
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	0194      	lsls	r4, r2, #6
 800186a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800186e:	018b      	lsls	r3, r1, #6
 8001870:	1a5b      	subs	r3, r3, r1
 8001872:	eb64 0402 	sbc.w	r4, r4, r2
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	00e2      	lsls	r2, r4, #3
 8001880:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001884:	00d9      	lsls	r1, r3, #3
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	195b      	adds	r3, r3, r5
 800188c:	eb44 0406 	adc.w	r4, r4, r6
 8001890:	f04f 0100 	mov.w	r1, #0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	02a2      	lsls	r2, r4, #10
 800189a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800189e:	0299      	lsls	r1, r3, #10
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	4621      	mov	r1, r4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f04f 0400 	mov.w	r4, #0
 80018ae:	461a      	mov	r2, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	f7fe fd3d 	bl	8000330 <__aeabi_uldivmod>
 80018b6:	4603      	mov	r3, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x19a>
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	bf00      	nop
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <HAL_RCC_GetHCLKFreq>:
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_RCC_GetHCLKFreq+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetPCLK1Freq>:
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
 8001910:	f7ff fff0 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001914:	4601      	mov	r1, r0
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0a9b      	lsrs	r3, r3, #10
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	fa21 f303 	lsr.w	r3, r1, r3
 8001928:	4618      	mov	r0, r3
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	08006dec 	.word	0x08006dec

08001934 <HAL_RCC_GetPCLK2Freq>:
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
 8001938:	f7ff ffdc 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 800193c:	4601      	mov	r1, r0
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	0b5b      	lsrs	r3, r3, #13
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	fa21 f303 	lsr.w	r3, r1, r3
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40023800 	.word	0x40023800
 8001958:	08006dec 	.word	0x08006dec

0800195c <HAL_RCCEx_PeriphCLKConfig>:
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d035      	beq.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8001984:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f7ff f8f9 	bl	8000b80 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]
 8001990:	e008      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001992:	f7ff f8f5 	bl	8000b80 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0b0      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80019a4:	4b5b      	ldr	r3, [pc, #364]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x36>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	019a      	lsls	r2, r3, #6
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	071b      	lsls	r3, r3, #28
 80019bc:	4955      	ldr	r1, [pc, #340]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80019c4:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f7ff f8d9 	bl	8000b80 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]
 80019d0:	e008      	b.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80019d2:	f7ff f8d5 	bl	8000b80 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e090      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8083 	beq.w	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b44      	ldr	r3, [pc, #272]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a43      	ldr	r2, [pc, #268]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	f7ff f8ab 	bl	8000b80 <HAL_GetTick>
 8001a2a:	6178      	str	r0, [r7, #20]
 8001a2c:	e008      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001a2e:	f7ff f8a7 	bl	8000b80 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e062      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a40:	4b35      	ldr	r3, [pc, #212]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8001a4c:	4b31      	ldr	r3, [pc, #196]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d02f      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d028      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	4b29      	ldr	r3, [pc, #164]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	4a24      	ldr	r2, [pc, #144]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d114      	bne.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001a92:	f7ff f875 	bl	8000b80 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001a9a:	f7ff f871 	bl	8000b80 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001aac:	2303      	movs	r3, #3
 8001aae:	e02a      	b.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0ee      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ade:	490d      	ldr	r1, [pc, #52]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e005      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001af0:	6093      	str	r3, [r2, #8]
 8001af2:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001af4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001afe:	4905      	ldr	r1, [pc, #20]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	670b      	str	r3, [r1, #112]	; 0x70
 8001b04:	2300      	movs	r3, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	42470068 	.word	0x42470068
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42470e40 	.word	0x42470e40

08001b20 <HAL_UART_Init>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_UART_Init+0x12>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e03f      	b.n	8001bb2 <HAL_UART_Init+0x92>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_UART_Init+0x2c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe ff0e 	bl	8000968 <HAL_UART_MspInit>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f90b 	bl	8001d80 <UART_SetConfig>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_UART_Transmit>:
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b088      	sub	sp, #32
 8001bbe:	af02      	add	r7, sp, #8
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	f040 8083 	bne.w	8001ce2 <HAL_UART_Transmit+0x128>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_UART_Transmit+0x2e>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_UART_Transmit+0x32>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e07b      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_UART_Transmit+0x40>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e074      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2221      	movs	r2, #33	; 0x21
 8001c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001c10:	f7fe ffb6 	bl	8000b80 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	88fa      	ldrh	r2, [r7, #6]
 8001c1a:	849a      	strh	r2, [r3, #36]	; 0x24
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	88fa      	ldrh	r2, [r7, #6]
 8001c20:	84da      	strh	r2, [r3, #38]	; 0x26
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001c2a:	e042      	b.n	8001cb2 <HAL_UART_Transmit+0xf8>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	84da      	strh	r2, [r3, #38]	; 0x26
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c42:	d122      	bne.n	8001c8a <HAL_UART_Transmit+0xd0>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f84c 	bl	8001cec <UART_WaitOnFlagUntilTimeout>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_Transmit+0xa4>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e042      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_UART_Transmit+0xc8>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	e017      	b.n	8001cb2 <HAL_UART_Transmit+0xf8>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3301      	adds	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	e013      	b.n	8001cb2 <HAL_UART_Transmit+0xf8>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2200      	movs	r2, #0
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f829 	bl	8001cec <UART_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_UART_Transmit+0xea>
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e01f      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1b7      	bne.n	8001c2c <HAL_UART_Transmit+0x72>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f810 	bl	8001cec <UART_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_Transmit+0x11c>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e006      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_UART_Transmit+0x12a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <UART_WaitOnFlagUntilTimeout>:
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	71fb      	strb	r3, [r7, #7]
 8001cfc:	e02c      	b.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d028      	beq.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d007      	beq.n	8001d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8001d0c:	f7fe ff38 	bl	8000b80 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d21d      	bcs.n	8001d58 <UART_WaitOnFlagUntilTimeout+0x6c>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001d54:	2303      	movs	r3, #3
 8001d56:	e00f      	b.n	8001d78 <UART_WaitOnFlagUntilTimeout+0x8c>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4013      	ands	r3, r2
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d0c3      	beq.n	8001cfe <UART_WaitOnFlagUntilTimeout+0x12>
 8001d76:	2300      	movs	r3, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <UART_SetConfig>:
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001dc2:	f023 030c 	bic.w	r3, r3, #12
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	60d3      	str	r3, [r2, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dee:	f040 818b 	bne.w	8002108 <UART_SetConfig+0x388>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4ac1      	ldr	r2, [pc, #772]	; (80020fc <UART_SetConfig+0x37c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d005      	beq.n	8001e08 <UART_SetConfig+0x88>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4abf      	ldr	r2, [pc, #764]	; (8002100 <UART_SetConfig+0x380>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	f040 80bd 	bne.w	8001f82 <UART_SetConfig+0x202>
 8001e08:	f7ff fd94 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8001e0c:	60b8      	str	r0, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	461d      	mov	r5, r3
 8001e12:	f04f 0600 	mov.w	r6, #0
 8001e16:	46a8      	mov	r8, r5
 8001e18:	46b1      	mov	r9, r6
 8001e1a:	eb18 0308 	adds.w	r3, r8, r8
 8001e1e:	eb49 0409 	adc.w	r4, r9, r9
 8001e22:	4698      	mov	r8, r3
 8001e24:	46a1      	mov	r9, r4
 8001e26:	eb18 0805 	adds.w	r8, r8, r5
 8001e2a:	eb49 0906 	adc.w	r9, r9, r6
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e42:	4688      	mov	r8, r1
 8001e44:	4691      	mov	r9, r2
 8001e46:	eb18 0005 	adds.w	r0, r8, r5
 8001e4a:	eb49 0106 	adc.w	r1, r9, r6
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	461d      	mov	r5, r3
 8001e54:	f04f 0600 	mov.w	r6, #0
 8001e58:	196b      	adds	r3, r5, r5
 8001e5a:	eb46 0406 	adc.w	r4, r6, r6
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4623      	mov	r3, r4
 8001e62:	f7fe fa65 	bl	8000330 <__aeabi_uldivmod>
 8001e66:	4603      	mov	r3, r0
 8001e68:	460c      	mov	r4, r1
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4ba5      	ldr	r3, [pc, #660]	; (8002104 <UART_SetConfig+0x384>)
 8001e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	461d      	mov	r5, r3
 8001e7c:	f04f 0600 	mov.w	r6, #0
 8001e80:	46a9      	mov	r9, r5
 8001e82:	46b2      	mov	sl, r6
 8001e84:	eb19 0309 	adds.w	r3, r9, r9
 8001e88:	eb4a 040a 	adc.w	r4, sl, sl
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	46a2      	mov	sl, r4
 8001e90:	eb19 0905 	adds.w	r9, r9, r5
 8001e94:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ea4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ea8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001eac:	4689      	mov	r9, r1
 8001eae:	4692      	mov	sl, r2
 8001eb0:	eb19 0005 	adds.w	r0, r9, r5
 8001eb4:	eb4a 0106 	adc.w	r1, sl, r6
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	f04f 0600 	mov.w	r6, #0
 8001ec2:	196b      	adds	r3, r5, r5
 8001ec4:	eb46 0406 	adc.w	r4, r6, r6
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4623      	mov	r3, r4
 8001ecc:	f7fe fa30 	bl	8000330 <__aeabi_uldivmod>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	460c      	mov	r4, r1
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <UART_SetConfig+0x384>)
 8001ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	2164      	movs	r1, #100	; 0x64
 8001ee0:	fb01 f303 	mul.w	r3, r1, r3
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	3332      	adds	r3, #50	; 0x32
 8001eea:	4a86      	ldr	r2, [pc, #536]	; (8002104 <UART_SetConfig+0x384>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ef8:	4498      	add	r8, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	461d      	mov	r5, r3
 8001efe:	f04f 0600 	mov.w	r6, #0
 8001f02:	46a9      	mov	r9, r5
 8001f04:	46b2      	mov	sl, r6
 8001f06:	eb19 0309 	adds.w	r3, r9, r9
 8001f0a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f0e:	4699      	mov	r9, r3
 8001f10:	46a2      	mov	sl, r4
 8001f12:	eb19 0905 	adds.w	r9, r9, r5
 8001f16:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f2e:	4689      	mov	r9, r1
 8001f30:	4692      	mov	sl, r2
 8001f32:	eb19 0005 	adds.w	r0, r9, r5
 8001f36:	eb4a 0106 	adc.w	r1, sl, r6
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	461d      	mov	r5, r3
 8001f40:	f04f 0600 	mov.w	r6, #0
 8001f44:	196b      	adds	r3, r5, r5
 8001f46:	eb46 0406 	adc.w	r4, r6, r6
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	f7fe f9ef 	bl	8000330 <__aeabi_uldivmod>
 8001f52:	4603      	mov	r3, r0
 8001f54:	460c      	mov	r4, r1
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <UART_SetConfig+0x384>)
 8001f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2164      	movs	r1, #100	; 0x64
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	3332      	adds	r3, #50	; 0x32
 8001f6c:	4a65      	ldr	r2, [pc, #404]	; (8002104 <UART_SetConfig+0x384>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	f003 0207 	and.w	r2, r3, #7
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4442      	add	r2, r8
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	e26f      	b.n	8002462 <UART_SetConfig+0x6e2>
 8001f82:	f7ff fcc3 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 8001f86:	60b8      	str	r0, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	f04f 0600 	mov.w	r6, #0
 8001f90:	46a8      	mov	r8, r5
 8001f92:	46b1      	mov	r9, r6
 8001f94:	eb18 0308 	adds.w	r3, r8, r8
 8001f98:	eb49 0409 	adc.w	r4, r9, r9
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	46a1      	mov	r9, r4
 8001fa0:	eb18 0805 	adds.w	r8, r8, r5
 8001fa4:	eb49 0906 	adc.w	r9, r9, r6
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fbc:	4688      	mov	r8, r1
 8001fbe:	4691      	mov	r9, r2
 8001fc0:	eb18 0005 	adds.w	r0, r8, r5
 8001fc4:	eb49 0106 	adc.w	r1, r9, r6
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	461d      	mov	r5, r3
 8001fce:	f04f 0600 	mov.w	r6, #0
 8001fd2:	196b      	adds	r3, r5, r5
 8001fd4:	eb46 0406 	adc.w	r4, r6, r6
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4623      	mov	r3, r4
 8001fdc:	f7fe f9a8 	bl	8000330 <__aeabi_uldivmod>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	460c      	mov	r4, r1
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <UART_SetConfig+0x384>)
 8001fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	f04f 0600 	mov.w	r6, #0
 8001ffa:	46a9      	mov	r9, r5
 8001ffc:	46b2      	mov	sl, r6
 8001ffe:	eb19 0309 	adds.w	r3, r9, r9
 8002002:	eb4a 040a 	adc.w	r4, sl, sl
 8002006:	4699      	mov	r9, r3
 8002008:	46a2      	mov	sl, r4
 800200a:	eb19 0905 	adds.w	r9, r9, r5
 800200e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002012:	f04f 0100 	mov.w	r1, #0
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800201e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002026:	4689      	mov	r9, r1
 8002028:	4692      	mov	sl, r2
 800202a:	eb19 0005 	adds.w	r0, r9, r5
 800202e:	eb4a 0106 	adc.w	r1, sl, r6
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	461d      	mov	r5, r3
 8002038:	f04f 0600 	mov.w	r6, #0
 800203c:	196b      	adds	r3, r5, r5
 800203e:	eb46 0406 	adc.w	r4, r6, r6
 8002042:	461a      	mov	r2, r3
 8002044:	4623      	mov	r3, r4
 8002046:	f7fe f973 	bl	8000330 <__aeabi_uldivmod>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	461a      	mov	r2, r3
 8002050:	4b2c      	ldr	r3, [pc, #176]	; (8002104 <UART_SetConfig+0x384>)
 8002052:	fba3 1302 	umull	r1, r3, r3, r2
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2164      	movs	r1, #100	; 0x64
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	3332      	adds	r3, #50	; 0x32
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <UART_SetConfig+0x384>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002072:	4498      	add	r8, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	461d      	mov	r5, r3
 8002078:	f04f 0600 	mov.w	r6, #0
 800207c:	46a9      	mov	r9, r5
 800207e:	46b2      	mov	sl, r6
 8002080:	eb19 0309 	adds.w	r3, r9, r9
 8002084:	eb4a 040a 	adc.w	r4, sl, sl
 8002088:	4699      	mov	r9, r3
 800208a:	46a2      	mov	sl, r4
 800208c:	eb19 0905 	adds.w	r9, r9, r5
 8002090:	eb4a 0a06 	adc.w	sl, sl, r6
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020a8:	4689      	mov	r9, r1
 80020aa:	4692      	mov	sl, r2
 80020ac:	eb19 0005 	adds.w	r0, r9, r5
 80020b0:	eb4a 0106 	adc.w	r1, sl, r6
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	461d      	mov	r5, r3
 80020ba:	f04f 0600 	mov.w	r6, #0
 80020be:	196b      	adds	r3, r5, r5
 80020c0:	eb46 0406 	adc.w	r4, r6, r6
 80020c4:	461a      	mov	r2, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	f7fe f932 	bl	8000330 <__aeabi_uldivmod>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <UART_SetConfig+0x384>)
 80020d4:	fba3 1302 	umull	r1, r3, r3, r2
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	2164      	movs	r1, #100	; 0x64
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	3332      	adds	r3, #50	; 0x32
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <UART_SetConfig+0x384>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	f003 0207 	and.w	r2, r3, #7
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4442      	add	r2, r8
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	e1b2      	b.n	8002462 <UART_SetConfig+0x6e2>
 80020fc:	40011000 	.word	0x40011000
 8002100:	40011400 	.word	0x40011400
 8002104:	51eb851f 	.word	0x51eb851f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4ad7      	ldr	r2, [pc, #860]	; (800246c <UART_SetConfig+0x6ec>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d005      	beq.n	800211e <UART_SetConfig+0x39e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4ad6      	ldr	r2, [pc, #856]	; (8002470 <UART_SetConfig+0x6f0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	f040 80d1 	bne.w	80022c0 <UART_SetConfig+0x540>
 800211e:	f7ff fc09 	bl	8001934 <HAL_RCC_GetPCLK2Freq>
 8002122:	60b8      	str	r0, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	469a      	mov	sl, r3
 8002128:	f04f 0b00 	mov.w	fp, #0
 800212c:	46d0      	mov	r8, sl
 800212e:	46d9      	mov	r9, fp
 8002130:	eb18 0308 	adds.w	r3, r8, r8
 8002134:	eb49 0409 	adc.w	r4, r9, r9
 8002138:	4698      	mov	r8, r3
 800213a:	46a1      	mov	r9, r4
 800213c:	eb18 080a 	adds.w	r8, r8, sl
 8002140:	eb49 090b 	adc.w	r9, r9, fp
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002150:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002154:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002158:	4688      	mov	r8, r1
 800215a:	4691      	mov	r9, r2
 800215c:	eb1a 0508 	adds.w	r5, sl, r8
 8002160:	eb4b 0609 	adc.w	r6, fp, r9
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	f04f 0400 	mov.w	r4, #0
 8002176:	0094      	lsls	r4, r2, #2
 8002178:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800217c:	008b      	lsls	r3, r1, #2
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	4628      	mov	r0, r5
 8002184:	4631      	mov	r1, r6
 8002186:	f7fe f8d3 	bl	8000330 <__aeabi_uldivmod>
 800218a:	4603      	mov	r3, r0
 800218c:	460c      	mov	r4, r1
 800218e:	461a      	mov	r2, r3
 8002190:	4bb8      	ldr	r3, [pc, #736]	; (8002474 <UART_SetConfig+0x6f4>)
 8002192:	fba3 2302 	umull	r2, r3, r3, r2
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	469b      	mov	fp, r3
 80021a0:	f04f 0c00 	mov.w	ip, #0
 80021a4:	46d9      	mov	r9, fp
 80021a6:	46e2      	mov	sl, ip
 80021a8:	eb19 0309 	adds.w	r3, r9, r9
 80021ac:	eb4a 040a 	adc.w	r4, sl, sl
 80021b0:	4699      	mov	r9, r3
 80021b2:	46a2      	mov	sl, r4
 80021b4:	eb19 090b 	adds.w	r9, r9, fp
 80021b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021d0:	4689      	mov	r9, r1
 80021d2:	4692      	mov	sl, r2
 80021d4:	eb1b 0509 	adds.w	r5, fp, r9
 80021d8:	eb4c 060a 	adc.w	r6, ip, sl
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	0094      	lsls	r4, r2, #2
 80021f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021f4:	008b      	lsls	r3, r1, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	4628      	mov	r0, r5
 80021fc:	4631      	mov	r1, r6
 80021fe:	f7fe f897 	bl	8000330 <__aeabi_uldivmod>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461a      	mov	r2, r3
 8002208:	4b9a      	ldr	r3, [pc, #616]	; (8002474 <UART_SetConfig+0x6f4>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2164      	movs	r1, #100	; 0x64
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a95      	ldr	r2, [pc, #596]	; (8002474 <UART_SetConfig+0x6f4>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002228:	4498      	add	r8, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	469b      	mov	fp, r3
 800222e:	f04f 0c00 	mov.w	ip, #0
 8002232:	46d9      	mov	r9, fp
 8002234:	46e2      	mov	sl, ip
 8002236:	eb19 0309 	adds.w	r3, r9, r9
 800223a:	eb4a 040a 	adc.w	r4, sl, sl
 800223e:	4699      	mov	r9, r3
 8002240:	46a2      	mov	sl, r4
 8002242:	eb19 090b 	adds.w	r9, r9, fp
 8002246:	eb4a 0a0c 	adc.w	sl, sl, ip
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002256:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800225a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800225e:	4689      	mov	r9, r1
 8002260:	4692      	mov	sl, r2
 8002262:	eb1b 0509 	adds.w	r5, fp, r9
 8002266:	eb4c 060a 	adc.w	r6, ip, sl
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4619      	mov	r1, r3
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	0094      	lsls	r4, r2, #2
 800227e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002282:	008b      	lsls	r3, r1, #2
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	4628      	mov	r0, r5
 800228a:	4631      	mov	r1, r6
 800228c:	f7fe f850 	bl	8000330 <__aeabi_uldivmod>
 8002290:	4603      	mov	r3, r0
 8002292:	460c      	mov	r4, r1
 8002294:	461a      	mov	r2, r3
 8002296:	4b77      	ldr	r3, [pc, #476]	; (8002474 <UART_SetConfig+0x6f4>)
 8002298:	fba3 1302 	umull	r1, r3, r3, r2
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	2164      	movs	r1, #100	; 0x64
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	3332      	adds	r3, #50	; 0x32
 80022aa:	4a72      	ldr	r2, [pc, #456]	; (8002474 <UART_SetConfig+0x6f4>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4442      	add	r2, r8
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	e0d0      	b.n	8002462 <UART_SetConfig+0x6e2>
 80022c0:	f7ff fb24 	bl	800190c <HAL_RCC_GetPCLK1Freq>
 80022c4:	60b8      	str	r0, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	469a      	mov	sl, r3
 80022ca:	f04f 0b00 	mov.w	fp, #0
 80022ce:	46d0      	mov	r8, sl
 80022d0:	46d9      	mov	r9, fp
 80022d2:	eb18 0308 	adds.w	r3, r8, r8
 80022d6:	eb49 0409 	adc.w	r4, r9, r9
 80022da:	4698      	mov	r8, r3
 80022dc:	46a1      	mov	r9, r4
 80022de:	eb18 080a 	adds.w	r8, r8, sl
 80022e2:	eb49 090b 	adc.w	r9, r9, fp
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022fa:	4688      	mov	r8, r1
 80022fc:	4691      	mov	r9, r2
 80022fe:	eb1a 0508 	adds.w	r5, sl, r8
 8002302:	eb4b 0609 	adc.w	r6, fp, r9
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f04f 0400 	mov.w	r4, #0
 8002318:	0094      	lsls	r4, r2, #2
 800231a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800231e:	008b      	lsls	r3, r1, #2
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	4628      	mov	r0, r5
 8002326:	4631      	mov	r1, r6
 8002328:	f7fe f802 	bl	8000330 <__aeabi_uldivmod>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	461a      	mov	r2, r3
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <UART_SetConfig+0x6f4>)
 8002334:	fba3 2302 	umull	r2, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	469b      	mov	fp, r3
 8002342:	f04f 0c00 	mov.w	ip, #0
 8002346:	46d9      	mov	r9, fp
 8002348:	46e2      	mov	sl, ip
 800234a:	eb19 0309 	adds.w	r3, r9, r9
 800234e:	eb4a 040a 	adc.w	r4, sl, sl
 8002352:	4699      	mov	r9, r3
 8002354:	46a2      	mov	sl, r4
 8002356:	eb19 090b 	adds.w	r9, r9, fp
 800235a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800236a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800236e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002372:	4689      	mov	r9, r1
 8002374:	4692      	mov	sl, r2
 8002376:	eb1b 0509 	adds.w	r5, fp, r9
 800237a:	eb4c 060a 	adc.w	r6, ip, sl
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f04f 0400 	mov.w	r4, #0
 8002390:	0094      	lsls	r4, r2, #2
 8002392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002396:	008b      	lsls	r3, r1, #2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	4628      	mov	r0, r5
 800239e:	4631      	mov	r1, r6
 80023a0:	f7fd ffc6 	bl	8000330 <__aeabi_uldivmod>
 80023a4:	4603      	mov	r3, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <UART_SetConfig+0x6f4>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	2164      	movs	r1, #100	; 0x64
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	3332      	adds	r3, #50	; 0x32
 80023be:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <UART_SetConfig+0x6f4>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ca:	4498      	add	r8, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	469b      	mov	fp, r3
 80023d0:	f04f 0c00 	mov.w	ip, #0
 80023d4:	46d9      	mov	r9, fp
 80023d6:	46e2      	mov	sl, ip
 80023d8:	eb19 0309 	adds.w	r3, r9, r9
 80023dc:	eb4a 040a 	adc.w	r4, sl, sl
 80023e0:	4699      	mov	r9, r3
 80023e2:	46a2      	mov	sl, r4
 80023e4:	eb19 090b 	adds.w	r9, r9, fp
 80023e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002400:	4689      	mov	r9, r1
 8002402:	4692      	mov	sl, r2
 8002404:	eb1b 0509 	adds.w	r5, fp, r9
 8002408:	eb4c 060a 	adc.w	r6, ip, sl
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4619      	mov	r1, r3
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f04f 0400 	mov.w	r4, #0
 800241e:	0094      	lsls	r4, r2, #2
 8002420:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002424:	008b      	lsls	r3, r1, #2
 8002426:	461a      	mov	r2, r3
 8002428:	4623      	mov	r3, r4
 800242a:	4628      	mov	r0, r5
 800242c:	4631      	mov	r1, r6
 800242e:	f7fd ff7f 	bl	8000330 <__aeabi_uldivmod>
 8002432:	4603      	mov	r3, r0
 8002434:	460c      	mov	r4, r1
 8002436:	461a      	mov	r2, r3
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <UART_SetConfig+0x6f4>)
 800243a:	fba3 1302 	umull	r1, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2164      	movs	r1, #100	; 0x64
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	3332      	adds	r3, #50	; 0x32
 800244c:	4a09      	ldr	r2, [pc, #36]	; (8002474 <UART_SetConfig+0x6f4>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 020f 	and.w	r2, r3, #15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4442      	add	r2, r8
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	e7ff      	b.n	8002462 <UART_SetConfig+0x6e2>
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800246c:	40011000 	.word	0x40011000
 8002470:	40011400 	.word	0x40011400
 8002474:	51eb851f 	.word	0x51eb851f

08002478 <Reset_Handler>:
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <LoopForever+0x2>)
 800247a:	4685      	mov	sp, r0
 800247c:	480d      	ldr	r0, [pc, #52]	; (80024b4 <LoopForever+0x6>)
 800247e:	490e      	ldr	r1, [pc, #56]	; (80024b8 <LoopForever+0xa>)
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <LoopForever+0xe>)
 8002482:	2300      	movs	r3, #0
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:
 8002486:	58d4      	ldr	r4, [r2, r3]
 8002488:	50c4      	str	r4, [r0, r3]
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:
 800248c:	18c4      	adds	r4, r0, r3
 800248e:	428c      	cmp	r4, r1
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <LoopForever+0x12>)
 8002494:	4c0b      	ldr	r4, [pc, #44]	; (80024c4 <LoopForever+0x16>)
 8002496:	2300      	movs	r3, #0
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:
 800249e:	42a2      	cmp	r2, r4
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>
 80024a2:	f7fe faf1 	bl	8000a88 <SystemInit>
 80024a6:	f003 ff75 	bl	8006394 <__libc_init_array>
 80024aa:	f7fe f901 	bl	80006b0 <main>

080024ae <LoopForever>:
 80024ae:	e7fe      	b.n	80024ae <LoopForever>
 80024b0:	20020000 	.word	0x20020000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	20000074 	.word	0x20000074
 80024bc:	08006e4c 	.word	0x08006e4c
 80024c0:	20000074 	.word	0x20000074
 80024c4:	200157e4 	.word	0x200157e4

080024c8 <ADC_IRQHandler>:
 80024c8:	e7fe      	b.n	80024c8 <ADC_IRQHandler>
	...

080024cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80024dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a06      	ldr	r2, [pc, #24]	; (80024fc <vApplicationGetIdleTaskMemory+0x30>)
 80024e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2282      	movs	r2, #130	; 0x82
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000190 	.word	0x20000190
 80024fc:	200001e8 	.word	0x200001e8

08002500 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f103 0208 	add.w	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f103 0208 	add.w	r2, r3, #8
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0208 	add.w	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d103      	bne.n	80025c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e00c      	b.n	80025dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3308      	adds	r3, #8
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	e002      	b.n	80025d0 <vListInsert+0x2e>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d2f6      	bcs.n	80025ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6852      	ldr	r2, [r2, #4]
 8002634:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d103      	bne.n	8002648 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	e7fe      	b.n	800268e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002690:	f001 fe8c 	bl	80043ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	441a      	add	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c0:	3b01      	subs	r3, #1
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	22ff      	movs	r2, #255	; 0xff
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	22ff      	movs	r2, #255	; 0xff
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d114      	bne.n	8002710 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3310      	adds	r3, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 f932 	bl	800395c <xTaskRemoveFromEventList>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <xQueueGenericReset+0xcc>)
 8002700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	e009      	b.n	8002724 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3310      	adds	r3, #16
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fef3 	bl	8002500 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3324      	adds	r3, #36	; 0x24
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff feee 	bl	8002500 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002724:	f001 fe70 	bl	8004408 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <xQueueGenericCreate+0x28>
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e7fe      	b.n	800275e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e004      	b.n	8002776 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3350      	adds	r3, #80	; 0x50
 800277a:	4618      	mov	r0, r3
 800277c:	f001 ff7e 	bl	800467c <pvPortMalloc>
 8002780:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00f      	beq.n	80027a8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3350      	adds	r3, #80	; 0x50
 800278c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002796:	79fa      	ldrb	r2, [r7, #7]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f805 	bl	80027b2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027a8:	69bb      	ldr	r3, [r7, #24]
	}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e002      	b.n	80027d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027e0:	2101      	movs	r1, #1
 80027e2:	69b8      	ldr	r0, [r7, #24]
 80027e4:	f7ff ff40 	bl	8002668 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	68f9      	ldr	r1, [r7, #12]
 80027f6:	2073      	movs	r0, #115	; 0x73
 80027f8:	f002 feec 	bl	80055d4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <xQueueGenericSend+0x30>
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	623b      	str	r3, [r7, #32]
 8002832:	e7fe      	b.n	8002832 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <xQueueGenericSend+0x3e>
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <xQueueGenericSend+0x42>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSend+0x44>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <xQueueGenericSend+0x5c>
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	e7fe      	b.n	800285e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d103      	bne.n	800286e <xQueueGenericSend+0x6a>
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <xQueueGenericSend+0x6e>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <xQueueGenericSend+0x70>
 8002872:	2300      	movs	r3, #0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <xQueueGenericSend+0x88>
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e7fe      	b.n	800288a <xQueueGenericSend+0x86>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800288c:	f001 fd8e 	bl	80043ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <xQueueGenericSend+0x9e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d136      	bne.n	8002910 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 fc25 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	460b      	mov	r3, r1
 80028b4:	4601      	mov	r1, r0
 80028b6:	205a      	movs	r0, #90	; 0x5a
 80028b8:	f002 ff02 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c2:	f000 fae3 	bl	8002e8c <prvCopyDataToQueue>
 80028c6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	3324      	adds	r3, #36	; 0x24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f841 	bl	800395c <xTaskRemoveFromEventList>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028e0:	4b4c      	ldr	r3, [pc, #304]	; (8002a14 <xQueueGenericSend+0x210>)
 80028e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	e00a      	b.n	8002908 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <xQueueGenericSend+0x210>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002908:	f001 fd7e 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 800290c:	2301      	movs	r3, #1
 800290e:	e07d      	b.n	8002a0c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d110      	bne.n	8002938 <xQueueGenericSend+0x134>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002916:	f001 fd77 	bl	8004408 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fbe9 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	460b      	mov	r3, r1
 800292c:	4601      	mov	r1, r0
 800292e:	205a      	movs	r0, #90	; 0x5a
 8002930:	f002 fec6 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002934:	2300      	movs	r3, #0
 8002936:	e069      	b.n	8002a0c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <xQueueGenericSend+0x148>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f870 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002948:	2301      	movs	r3, #1
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800294c:	f001 fd5c 	bl	8004408 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002950:	f000 fdf2 	bl	8003538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002954:	f001 fd2a 	bl	80043ac <vPortEnterCritical>
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800295e:	b25b      	sxtb	r3, r3
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x16a>
 8002966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <xQueueGenericSend+0x180>
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002984:	f001 fd40 	bl	8004408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002988:	1d3a      	adds	r2, r7, #4
 800298a:	f107 0310 	add.w	r3, r7, #16
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f001 f85f 	bl	8003a54 <xTaskCheckForTimeOut>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d124      	bne.n	80029e6 <xQueueGenericSend+0x1e2>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800299c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800299e:	f000 fb6d 	bl	800307c <prvIsQueueFull>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d018      	beq.n	80029da <xQueueGenericSend+0x1d6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	3310      	adds	r3, #16
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 ffaf 	bl	8003914 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b8:	f000 faf8 	bl	8002fac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029bc:	f000 fdca 	bl	8003554 <xTaskResumeAll>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f47f af62 	bne.w	800288c <xQueueGenericSend+0x88>
				{
					portYIELD_WITHIN_API();
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <xQueueGenericSend+0x210>)
 80029ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	e758      	b.n	800288c <xQueueGenericSend+0x88>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029dc:	f000 fae6 	bl	8002fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029e0:	f000 fdb8 	bl	8003554 <xTaskResumeAll>
 80029e4:	e752      	b.n	800288c <xQueueGenericSend+0x88>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e8:	f000 fae0 	bl	8002fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ec:	f000 fdb2 	bl	8003554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 fb7e 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	460b      	mov	r3, r1
 8002a02:	4601      	mov	r1, r0
 8002a04:	205a      	movs	r0, #90	; 0x5a
 8002a06:	f002 fe5b 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002a0a:	2300      	movs	r3, #0
		}
	}
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3730      	adds	r7, #48	; 0x30
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b08f      	sub	sp, #60	; 0x3c
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <xQueueReceive+0x2e>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	623b      	str	r3, [r7, #32]
 8002a44:	e7fe      	b.n	8002a44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <xQueueReceive+0x3c>
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <xQueueReceive+0x40>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <xQueueReceive+0x42>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <xQueueReceive+0x5a>
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e7fe      	b.n	8002a70 <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a72:	f001 fc9b 	bl	80043ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d031      	beq.n	8002ae6 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a86:	f000 fa6b 	bl	8002f60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f003 fb31 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002a92:	4604      	mov	r4, r0
 8002a94:	2000      	movs	r0, #0
 8002a96:	f003 fb2d 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	205c      	movs	r0, #92	; 0x5c
 8002aaa:	f002 fe09 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1e5a      	subs	r2, r3, #1
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00f      	beq.n	8002ade <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	3310      	adds	r3, #16
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 ff4a 	bl	800395c <xTaskRemoveFromEventList>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <xQueueReceive+0xc6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ace:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <xQueueReceive+0x1f4>)
 8002ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ade:	f001 fc93 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08e      	b.n	8002c04 <xQueueReceive+0x1ec>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d115      	bne.n	8002b18 <xQueueReceive+0x100>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aec:	f001 fc8c 	bl	8004408 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fafe 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002af8:	4604      	mov	r4, r0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f003 fafa 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002b00:	4601      	mov	r1, r0
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	2301      	movs	r3, #1
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	205c      	movs	r0, #92	; 0x5c
 8002b10:	f002 fdd6 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e075      	b.n	8002c04 <xQueueReceive+0x1ec>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <xQueueReceive+0x114>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 ff80 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b2c:	f001 fc6c 	bl	8004408 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b30:	f000 fd02 	bl	8003538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b34:	f001 fc3a 	bl	80043ac <vPortEnterCritical>
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d103      	bne.n	8002b4e <xQueueReceive+0x136>
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5a:	d103      	bne.n	8002b64 <xQueueReceive+0x14c>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b64:	f001 fc50 	bl	8004408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b68:	1d3a      	adds	r2, r7, #4
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 ff6f 	bl	8003a54 <xTaskCheckForTimeOut>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d124      	bne.n	8002bc6 <xQueueReceive+0x1ae>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7e:	f000 fa67 	bl	8003050 <prvIsQueueEmpty>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <xQueueReceive+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	3324      	adds	r3, #36	; 0x24
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 febf 	bl	8003914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b98:	f000 fa08 	bl	8002fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b9c:	f000 fcda 	bl	8003554 <xTaskResumeAll>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f af65 	bne.w	8002a72 <xQueueReceive+0x5a>
				{
					portYIELD_WITHIN_API();
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <xQueueReceive+0x1f4>)
 8002baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	e75b      	b.n	8002a72 <xQueueReceive+0x5a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bbc:	f000 f9f6 	bl	8002fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bc0:	f000 fcc8 	bl	8003554 <xTaskResumeAll>
 8002bc4:	e755      	b.n	8002a72 <xQueueReceive+0x5a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc8:	f000 f9f0 	bl	8002fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bcc:	f000 fcc2 	bl	8003554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd2:	f000 fa3d 	bl	8003050 <prvIsQueueEmpty>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f43f af4a 	beq.w	8002a72 <xQueueReceive+0x5a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fa87 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002be6:	4604      	mov	r4, r0
 8002be8:	2000      	movs	r0, #0
 8002bea:	f003 fa83 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002bee:	4601      	mov	r1, r0
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	205c      	movs	r0, #92	; 0x5c
 8002bfe:	f002 fd5f 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002c02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3734      	adds	r7, #52	; 0x34
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b08f      	sub	sp, #60	; 0x3c
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <xQueueSemaphoreTake+0x30>
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e7fe      	b.n	8002c3e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d009      	beq.n	8002c5c <xQueueSemaphoreTake+0x4c>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e7fe      	b.n	8002c5a <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c5c:	f001 fba6 	bl	80043ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d036      	beq.n	8002cda <xQueueSemaphoreTake+0xca>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fa40 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002c74:	4604      	mov	r4, r0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f003 fa3c 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	460a      	mov	r2, r1
 8002c88:	4621      	mov	r1, r4
 8002c8a:	205c      	movs	r0, #92	; 0x5c
 8002c8c:	f002 fd18 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002ca0:	f001 f9d4 	bl	800404c <pvTaskIncrementMutexHeldCount>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00f      	beq.n	8002cd2 <xQueueSemaphoreTake+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	3310      	adds	r3, #16
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fe50 	bl	800395c <xTaskRemoveFromEventList>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <xQueueSemaphoreTake+0xc2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <xQueueSemaphoreTake+0x248>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cd2:	f001 fb99 	bl	8004408 <vPortExitCritical>
				return pdPASS;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0ba      	b.n	8002e50 <xQueueSemaphoreTake+0x240>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d122      	bne.n	8002d26 <xQueueSemaphoreTake+0x116>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <xQueueSemaphoreTake+0xea>
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueSemaphoreTake+0xe8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002cfa:	f001 fb85 	bl	8004408 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 f9f7 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002d06:	4604      	mov	r4, r0
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f003 f9f3 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002d0e:	4601      	mov	r1, r0
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	460a      	mov	r2, r1
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	205c      	movs	r0, #92	; 0x5c
 8002d1e:	f002 fccf 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e094      	b.n	8002e50 <xQueueSemaphoreTake+0x240>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <xQueueSemaphoreTake+0x12a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fe79 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d3a:	f001 fb65 	bl	8004408 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d3e:	f000 fbfb 	bl	8003538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d42:	f001 fb33 	bl	80043ac <vPortEnterCritical>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d103      	bne.n	8002d5c <xQueueSemaphoreTake+0x14c>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d103      	bne.n	8002d72 <xQueueSemaphoreTake+0x162>
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d72:	f001 fb49 	bl	8004408 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d76:	463a      	mov	r2, r7
 8002d78:	f107 0308 	add.w	r3, r7, #8
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fe68 	bl	8003a54 <xTaskCheckForTimeOut>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d132      	bne.n	8002df0 <xQueueSemaphoreTake+0x1e0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d8c:	f000 f960 	bl	8003050 <prvIsQueueEmpty>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d026      	beq.n	8002de4 <xQueueSemaphoreTake+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <xQueueSemaphoreTake+0x1a2>
					{
						taskENTER_CRITICAL();
 8002d9e:	f001 fb05 	bl	80043ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ff98 	bl	8003cdc <xTaskPriorityInherit>
 8002dac:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8002dae:	f001 fb2b 	bl	8004408 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	3324      	adds	r3, #36	; 0x24
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fdaa 	bl	8003914 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dc2:	f000 f8f3 	bl	8002fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dc6:	f000 fbc5 	bl	8003554 <xTaskResumeAll>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f af45 	bne.w	8002c5c <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8002dd2:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <xQueueSemaphoreTake+0x248>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	e73b      	b.n	8002c5c <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002de6:	f000 f8e1 	bl	8002fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dea:	f000 fbb3 	bl	8003554 <xTaskResumeAll>
 8002dee:	e735      	b.n	8002c5c <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002df2:	f000 f8db 	bl	8002fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002df6:	f000 fbad 	bl	8003554 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dfc:	f000 f928 	bl	8003050 <prvIsQueueEmpty>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f43f af2a 	beq.w	8002c5c <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <xQueueSemaphoreTake+0x21a>
					{
						taskENTER_CRITICAL();
 8002e0e:	f001 facd 	bl	80043ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002e12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e14:	f000 f822 	bl	8002e5c <prvGetDisinheritPriorityAfterTimeout>
 8002e18:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	69f9      	ldr	r1, [r7, #28]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f86d 	bl	8003f00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002e26:	f001 faef 	bl	8004408 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 f961 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002e32:	4604      	mov	r4, r0
 8002e34:	2000      	movs	r0, #0
 8002e36:	f003 f95d 	bl	80060f4 <SEGGER_SYSVIEW_ShrinkId>
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	460a      	mov	r2, r1
 8002e46:	4621      	mov	r1, r4
 8002e48:	205c      	movs	r0, #92	; 0x5c
 8002e4a:	f002 fc39 	bl	80056c0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002e4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3734      	adds	r7, #52	; 0x34
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d006      	beq.n	8002e7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1c3 0305 	rsb	r3, r3, #5
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e001      	b.n	8002e7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d14d      	bne.n	8002f4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 ff9a 	bl	8003df0 <xTaskPriorityDisinherit>
 8002ebc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	e043      	b.n	8002f4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d119      	bne.n	8002f00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6898      	ldr	r0, [r3, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	f003 fa8f 	bl	80063fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	441a      	add	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d32b      	bcc.n	8002f4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	e026      	b.n	8002f4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68d8      	ldr	r0, [r3, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	f003 fa75 	bl	80063fa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	425b      	negs	r3, r3
 8002f1a:	441a      	add	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	425b      	negs	r3, r3
 8002f36:	441a      	add	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d105      	bne.n	8002f4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f56:	697b      	ldr	r3, [r7, #20]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d303      	bcc.n	8002f94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	f003 fa2b 	bl	80063fa <memcpy>
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fb4:	f001 f9fa 	bl	80043ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fc0:	e011      	b.n	8002fe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3324      	adds	r3, #36	; 0x24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fcc4 	bl	800395c <xTaskRemoveFromEventList>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002fda:	f000 fd9b 	bl	8003b14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	dce9      	bgt.n	8002fc2 <prvUnlockQueue+0x16>
 8002fee:	e000      	b.n	8002ff2 <prvUnlockQueue+0x46>
					break;
 8002ff0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	22ff      	movs	r2, #255	; 0xff
 8002ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ffa:	f001 fa05 	bl	8004408 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ffe:	f001 f9d5 	bl	80043ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003008:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800300a:	e011      	b.n	8003030 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3310      	adds	r3, #16
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fc9f 	bl	800395c <xTaskRemoveFromEventList>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003024:	f000 fd76 	bl	8003b14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	3b01      	subs	r3, #1
 800302c:	b2db      	uxtb	r3, r3
 800302e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003034:	2b00      	cmp	r3, #0
 8003036:	dce9      	bgt.n	800300c <prvUnlockQueue+0x60>
 8003038:	e000      	b.n	800303c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800303a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	22ff      	movs	r2, #255	; 0xff
 8003040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003044:	f001 f9e0 	bl	8004408 <vPortExitCritical>
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003058:	f001 f9a8 	bl	80043ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e001      	b.n	800306e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800306e:	f001 f9cb 	bl	8004408 <vPortExitCritical>

	return xReturn;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003084:	f001 f992 	bl	80043ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	429a      	cmp	r2, r3
 8003092:	d102      	bne.n	800309a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	e001      	b.n	800309e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800309e:	f001 f9b3 	bl	8004408 <vPortExitCritical>

	return xReturn;
 80030a2:	68fb      	ldr	r3, [r7, #12]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	; 0x38
 80030b0:	af04      	add	r7, sp, #16
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <xTaskCreateStatic+0x28>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	e7fe      	b.n	80030d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <xTaskCreateStatic+0x42>
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	e7fe      	b.n	80030ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030ee:	2358      	movs	r3, #88	; 0x58
 80030f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b58      	cmp	r3, #88	; 0x58
 80030f6:	d009      	beq.n	800310c <xTaskCreateStatic+0x60>
 80030f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	e7fe      	b.n	800310a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01e      	beq.n	8003150 <xTaskCreateStatic+0xa4>
 8003112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01b      	beq.n	8003150 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	2202      	movs	r2, #2
 8003126:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800312a:	2300      	movs	r3, #0
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	f107 0314 	add.w	r3, r7, #20
 8003136:	9301      	str	r3, [sp, #4]
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f850 	bl	80031e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800314a:	f000 f8d3 	bl	80032f4 <prvAddNewTaskToReadyList>
 800314e:	e001      	b.n	8003154 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003154:	697b      	ldr	r3, [r7, #20]
	}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800315e:	b580      	push	{r7, lr}
 8003160:	b08c      	sub	sp, #48	; 0x30
 8003162:	af04      	add	r7, sp, #16
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f001 fa82 	bl	800467c <pvPortMalloc>
 8003178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003180:	2058      	movs	r0, #88	; 0x58
 8003182:	f001 fa7b 	bl	800467c <pvPortMalloc>
 8003186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
 8003194:	e005      	b.n	80031a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f001 fb32 	bl	8004800 <vPortFree>
 800319c:	e001      	b.n	80031a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d017      	beq.n	80031d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9303      	str	r3, [sp, #12]
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f80e 	bl	80031e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031cc:	69f8      	ldr	r0, [r7, #28]
 80031ce:	f000 f891 	bl	80032f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031d2:	2301      	movs	r3, #1
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e002      	b.n	80031de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031de:	69bb      	ldr	r3, [r7, #24]
	}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	461a      	mov	r2, r3
 8003200:	21a5      	movs	r1, #165	; 0xa5
 8003202:	f003 f905 	bl	8006410 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003210:	3b01      	subs	r3, #1
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	f023 0307 	bic.w	r3, r3, #7
 800321e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <prvInitialiseNewTask+0x56>
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e7fe      	b.n	800323c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e012      	b.n	800326a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	7819      	ldrb	r1, [r3, #0]
 800324c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	3334      	adds	r3, #52	; 0x34
 8003254:	460a      	mov	r2, r1
 8003256:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b09      	cmp	r3, #9
 800326e:	d9e9      	bls.n	8003244 <prvInitialiseNewTask+0x5c>
 8003270:	e000      	b.n	8003274 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003272:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2b04      	cmp	r3, #4
 8003280:	d901      	bls.n	8003286 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003282:	2304      	movs	r3, #4
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003290:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	2200      	movs	r2, #0
 8003296:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	3304      	adds	r3, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f94f 	bl	8002540 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	3318      	adds	r3, #24
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f94a 	bl	8002540 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	f1c3 0205 	rsb	r2, r3, #5
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	69b8      	ldr	r0, [r7, #24]
 80032d6:	f000 ff45 	bl	8004164 <pxPortInitialiseStack>
 80032da:	4602      	mov	r2, r0
 80032dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ec:	bf00      	nop
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032fc:	f001 f856 	bl	80043ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <prvAddNewTaskToReadyList+0xfc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <prvAddNewTaskToReadyList+0xfc>)
 8003308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <prvAddNewTaskToReadyList+0x100>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003312:	4a38      	ldr	r2, [pc, #224]	; (80033f4 <prvAddNewTaskToReadyList+0x100>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <prvAddNewTaskToReadyList+0xfc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003320:	f000 fc1c 	bl	8003b5c <prvInitialiseTaskLists>
 8003324:	e00d      	b.n	8003342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <prvAddNewTaskToReadyList+0x104>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <prvAddNewTaskToReadyList+0x100>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	429a      	cmp	r2, r3
 800333a:	d802      	bhi.n	8003342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800333c:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <prvAddNewTaskToReadyList+0x100>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <prvAddNewTaskToReadyList+0x108>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <prvAddNewTaskToReadyList+0x108>)
 800334a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <prvAddNewTaskToReadyList+0x108>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <prvAddNewTaskToReadyList+0x94>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fd9d 	bl	8005e9c <SEGGER_SYSVIEW_OnTaskCreate>
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	461d      	mov	r5, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461c      	mov	r4, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	1ae3      	subs	r3, r4, r3
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	462b      	mov	r3, r5
 8003384:	f001 fbf8 	bl	8004b78 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4618      	mov	r0, r3
 800338c:	f002 fe0e 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStartReady>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <prvAddNewTaskToReadyList+0x10c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	4a18      	ldr	r2, [pc, #96]	; (8003400 <prvAddNewTaskToReadyList+0x10c>)
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <prvAddNewTaskToReadyList+0x110>)
 80033b0:	441a      	add	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f7ff f8ce 	bl	800255a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033be:	f001 f823 	bl	8004408 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <prvAddNewTaskToReadyList+0x104>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <prvAddNewTaskToReadyList+0x100>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d207      	bcs.n	80033e8 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <prvAddNewTaskToReadyList+0x114>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}
 80033f0:	200004c8 	.word	0x200004c8
 80033f4:	200003f0 	.word	0x200003f0
 80033f8:	200004d4 	.word	0x200004d4
 80033fc:	200004e4 	.word	0x200004e4
 8003400:	200004d0 	.word	0x200004d0
 8003404:	200003f4 	.word	0x200003f4
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01a      	beq.n	8003454 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <vTaskDelay+0x68>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <vTaskDelay+0x2e>
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	e7fe      	b.n	8003438 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800343a:	f000 f87d 	bl	8003538 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	2023      	movs	r0, #35	; 0x23
 8003442:	f002 f831 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003446:	2100      	movs	r1, #0
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fe13 	bl	8004074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800344e:	f000 f881 	bl	8003554 <xTaskResumeAll>
 8003452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <vTaskDelay+0x6c>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200004f0 	.word	0x200004f0
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800348a:	463a      	mov	r2, r7
 800348c:	1d39      	adds	r1, r7, #4
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f81a 	bl	80024cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003498:	6839      	ldr	r1, [r7, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	9202      	str	r2, [sp, #8]
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	460a      	mov	r2, r1
 80034aa:	491d      	ldr	r1, [pc, #116]	; (8003520 <vTaskStartScheduler+0xa4>)
 80034ac:	481d      	ldr	r0, [pc, #116]	; (8003524 <vTaskStartScheduler+0xa8>)
 80034ae:	f7ff fdfd 	bl	80030ac <xTaskCreateStatic>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <vTaskStartScheduler+0xac>)
 80034b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <vTaskStartScheduler+0xac>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034c0:	2301      	movs	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e001      	b.n	80034ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d115      	bne.n	80034fc <vTaskStartScheduler+0x80>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <vTaskStartScheduler+0xb0>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <vTaskStartScheduler+0xb4>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <vTaskStartScheduler+0xb8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034f6:	f000 febb 	bl	8004270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034fa:	e00d      	b.n	8003518 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003502:	d109      	bne.n	8003518 <vTaskStartScheduler+0x9c>
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e7fe      	b.n	8003516 <vTaskStartScheduler+0x9a>
}
 8003518:	bf00      	nop
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	08006d18 	.word	0x08006d18
 8003524:	08003b2d 	.word	0x08003b2d
 8003528:	200004ec 	.word	0x200004ec
 800352c:	200004e8 	.word	0x200004e8
 8003530:	200004d4 	.word	0x200004d4
 8003534:	200004cc 	.word	0x200004cc

08003538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <vTaskSuspendAll+0x18>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	4a03      	ldr	r2, [pc, #12]	; (8003550 <vTaskSuspendAll+0x18>)
 8003544:	6013      	str	r3, [r2, #0]
}
 8003546:	bf00      	nop
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	200004f0 	.word	0x200004f0

08003554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003562:	4b43      	ldr	r3, [pc, #268]	; (8003670 <xTaskResumeAll+0x11c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <xTaskResumeAll+0x2a>
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	e7fe      	b.n	800357c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800357e:	f000 ff15 	bl	80043ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <xTaskResumeAll+0x11c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	4a39      	ldr	r2, [pc, #228]	; (8003670 <xTaskResumeAll+0x11c>)
 800358a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800358c:	4b38      	ldr	r3, [pc, #224]	; (8003670 <xTaskResumeAll+0x11c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d165      	bne.n	8003660 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <xTaskResumeAll+0x120>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d061      	beq.n	8003660 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800359c:	e032      	b.n	8003604 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <xTaskResumeAll+0x124>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3318      	adds	r3, #24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f832 	bl	8002614 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff f82d 	bl	8002614 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fcf5 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStartReady>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	2201      	movs	r2, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <xTaskResumeAll+0x128>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <xTaskResumeAll+0x128>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <xTaskResumeAll+0x12c>)
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f7fe ffb5 	bl	800255a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <xTaskResumeAll+0x130>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <xTaskResumeAll+0x134>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <xTaskResumeAll+0x124>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1c8      	bne.n	800359e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003612:	f000 fb3d 	bl	8003c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <xTaskResumeAll+0x138>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003622:	f000 f849 	bl	80036b8 <xTaskIncrementTick>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800362c:	4b16      	ldr	r3, [pc, #88]	; (8003688 <xTaskResumeAll+0x134>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3b01      	subs	r3, #1
 8003636:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f1      	bne.n	8003622 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <xTaskResumeAll+0x138>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <xTaskResumeAll+0x134>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <xTaskResumeAll+0x13c>)
 8003652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003660:	f000 fed2 	bl	8004408 <vPortExitCritical>

	return xAlreadyYielded;
 8003664:	68bb      	ldr	r3, [r7, #8]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200004f0 	.word	0x200004f0
 8003674:	200004c8 	.word	0x200004c8
 8003678:	20000488 	.word	0x20000488
 800367c:	200004d0 	.word	0x200004d0
 8003680:	200003f4 	.word	0x200003f4
 8003684:	200003f0 	.word	0x200003f0
 8003688:	200004dc 	.word	0x200004dc
 800368c:	200004d8 	.word	0x200004d8
 8003690:	e000ed04 	.word	0xe000ed04

08003694 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800369a:	f000 ff6b 	bl	8004574 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <xTaskGetTickCountFromISR+0x20>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036a8:	683b      	ldr	r3, [r7, #0]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200004cc 	.word	0x200004cc

080036b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c2:	4b52      	ldr	r3, [pc, #328]	; (800380c <xTaskIncrementTick+0x154>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 8090 	bne.w	80037ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <xTaskIncrementTick+0x158>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036d4:	4a4e      	ldr	r2, [pc, #312]	; (8003810 <xTaskIncrementTick+0x158>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11f      	bne.n	8003720 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80036e0:	4b4c      	ldr	r3, [pc, #304]	; (8003814 <xTaskIncrementTick+0x15c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <xTaskIncrementTick+0x46>
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	e7fe      	b.n	80036fc <xTaskIncrementTick+0x44>
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <xTaskIncrementTick+0x15c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <xTaskIncrementTick+0x160>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a42      	ldr	r2, [pc, #264]	; (8003814 <xTaskIncrementTick+0x15c>)
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <xTaskIncrementTick+0x160>)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4b42      	ldr	r3, [pc, #264]	; (800381c <xTaskIncrementTick+0x164>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a40      	ldr	r2, [pc, #256]	; (800381c <xTaskIncrementTick+0x164>)
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	f000 fab8 	bl	8003c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003720:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <xTaskIncrementTick+0x168>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	429a      	cmp	r2, r3
 8003728:	d351      	bcc.n	80037ce <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800372a:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <xTaskIncrementTick+0x15c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <xTaskIncrementTick+0x80>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <xTaskIncrementTick+0x82>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <xTaskIncrementTick+0x168>)
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	601a      	str	r2, [r3, #0]
					break;
 8003746:	e042      	b.n	80037ce <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <xTaskIncrementTick+0x15c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	d203      	bcs.n	8003768 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003760:	4a2f      	ldr	r2, [pc, #188]	; (8003820 <xTaskIncrementTick+0x168>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6013      	str	r3, [r2, #0]
						break;
 8003766:	e032      	b.n	80037ce <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3304      	adds	r3, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ff51 	bl	8002614 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3318      	adds	r3, #24
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ff48 	bl	8002614 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fc10 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStartReady>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	2201      	movs	r2, #1
 8003792:	409a      	lsls	r2, r3
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <xTaskIncrementTick+0x16c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4313      	orrs	r3, r2
 800379a:	4a22      	ldr	r2, [pc, #136]	; (8003824 <xTaskIncrementTick+0x16c>)
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <xTaskIncrementTick+0x170>)
 80037ac:	441a      	add	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f7fe fed0 	bl	800255a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037be:	4b1b      	ldr	r3, [pc, #108]	; (800382c <xTaskIncrementTick+0x174>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d3b0      	bcc.n	800372a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80037c8:	2301      	movs	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037cc:	e7ad      	b.n	800372a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <xTaskIncrementTick+0x174>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4914      	ldr	r1, [pc, #80]	; (8003828 <xTaskIncrementTick+0x170>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d907      	bls.n	80037f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e004      	b.n	80037f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <xTaskIncrementTick+0x178>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	4a0f      	ldr	r2, [pc, #60]	; (8003830 <xTaskIncrementTick+0x178>)
 80037f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <xTaskIncrementTick+0x17c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 80037fe:	2301      	movs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003802:	697b      	ldr	r3, [r7, #20]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200004f0 	.word	0x200004f0
 8003810:	200004cc 	.word	0x200004cc
 8003814:	20000480 	.word	0x20000480
 8003818:	20000484 	.word	0x20000484
 800381c:	200004e0 	.word	0x200004e0
 8003820:	200004e8 	.word	0x200004e8
 8003824:	200004d0 	.word	0x200004d0
 8003828:	200003f4 	.word	0x200003f4
 800382c:	200003f0 	.word	0x200003f0
 8003830:	200004d8 	.word	0x200004d8
 8003834:	200004dc 	.word	0x200004dc

08003838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800383e:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <vTaskSwitchContext+0xc4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <vTaskSwitchContext+0xc8>)
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800384c:	e051      	b.n	80038f2 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <vTaskSwitchContext+0xc8>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <vTaskSwitchContext+0xcc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f1c3 031f 	rsb	r3, r3, #31
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	4927      	ldr	r1, [pc, #156]	; (8003908 <vTaskSwitchContext+0xd0>)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <vTaskSwitchContext+0x5a>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e7fe      	b.n	8003890 <vTaskSwitchContext+0x58>
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4a1a      	ldr	r2, [pc, #104]	; (8003908 <vTaskSwitchContext+0xd0>)
 800389e:	4413      	add	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	3308      	adds	r3, #8
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d104      	bne.n	80038c2 <vTaskSwitchContext+0x8a>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a10      	ldr	r2, [pc, #64]	; (800390c <vTaskSwitchContext+0xd4>)
 80038ca:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <vTaskSwitchContext+0xd4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3334      	adds	r3, #52	; 0x34
 80038d2:	2205      	movs	r2, #5
 80038d4:	490e      	ldr	r1, [pc, #56]	; (8003910 <vTaskSwitchContext+0xd8>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fd80 	bl	80063dc <memcmp>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <vTaskSwitchContext+0xb6>
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <vTaskSwitchContext+0xd4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 fb1c 	bl	8005f24 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038ec:	e001      	b.n	80038f2 <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 80038ee:	f002 fab9 	bl	8005e64 <SEGGER_SYSVIEW_OnIdle>
}
 80038f2:	bf00      	nop
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200004f0 	.word	0x200004f0
 8003900:	200004dc 	.word	0x200004dc
 8003904:	200004d0 	.word	0x200004d0
 8003908:	200003f4 	.word	0x200003f4
 800390c:	200003f0 	.word	0x200003f0
 8003910:	08006d18 	.word	0x08006d18

08003914 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <vTaskPlaceOnEventList+0x24>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	e7fe      	b.n	8003936 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003938:	4b07      	ldr	r3, [pc, #28]	; (8003958 <vTaskPlaceOnEventList+0x44>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3318      	adds	r3, #24
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fe fe2e 	bl	80025a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003946:	2101      	movs	r1, #1
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f000 fb93 	bl	8004074 <prvAddCurrentTaskToDelayedList>
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200003f0 	.word	0x200003f0

0800395c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <xTaskRemoveFromEventList+0x2a>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e7fe      	b.n	8003984 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	3318      	adds	r3, #24
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fe42 	bl	8002614 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <xTaskRemoveFromEventList+0xb4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d120      	bne.n	80039da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe fe39 	bl	8002614 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f002 fb01 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStartReady>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <xTaskRemoveFromEventList+0xb8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <xTaskRemoveFromEventList+0xb8>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <xTaskRemoveFromEventList+0xbc>)
 80039ca:	441a      	add	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7fe fdc1 	bl	800255a <vListInsertEnd>
 80039d8:	e005      	b.n	80039e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3318      	adds	r3, #24
 80039de:	4619      	mov	r1, r3
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <xTaskRemoveFromEventList+0xc0>)
 80039e2:	f7fe fdba 	bl	800255a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <xTaskRemoveFromEventList+0xc4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d905      	bls.n	8003a00 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039f8:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <xTaskRemoveFromEventList+0xc8>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e001      	b.n	8003a04 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200004f0 	.word	0x200004f0
 8003a14:	200004d0 	.word	0x200004d0
 8003a18:	200003f4 	.word	0x200003f4
 8003a1c:	20000488 	.word	0x20000488
 8003a20:	200003f0 	.word	0x200003f0
 8003a24:	200004dc 	.word	0x200004dc

08003a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <vTaskInternalSetTimeOutState+0x24>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <vTaskInternalSetTimeOutState+0x28>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	200004e0 	.word	0x200004e0
 8003a50:	200004cc 	.word	0x200004cc

08003a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <xTaskCheckForTimeOut+0x24>
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e7fe      	b.n	8003a76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <xTaskCheckForTimeOut+0x3e>
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e7fe      	b.n	8003a90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a92:	f000 fc8b 	bl	80043ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <xTaskCheckForTimeOut+0xb8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d102      	bne.n	8003ab6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e023      	b.n	8003afe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <xTaskCheckForTimeOut+0xbc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d007      	beq.n	8003ad2 <xTaskCheckForTimeOut+0x7e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d302      	bcc.n	8003ad2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e015      	b.n	8003afe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d20b      	bcs.n	8003af4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff9d 	bl	8003a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e004      	b.n	8003afe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f000 fc83 	bl	8004408 <vPortExitCritical>

	return xReturn;
 8003b02:	69fb      	ldr	r3, [r7, #28]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200004cc 	.word	0x200004cc
 8003b10:	200004e0 	.word	0x200004e0

08003b14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <vTaskMissedYield+0x14>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	200004dc 	.word	0x200004dc

08003b2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b34:	f000 f852 	bl	8003bdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <prvIdleTask+0x28>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d9f9      	bls.n	8003b34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <prvIdleTask+0x2c>)
 8003b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b50:	e7f0      	b.n	8003b34 <prvIdleTask+0x8>
 8003b52:	bf00      	nop
 8003b54:	200003f4 	.word	0x200003f4
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	e00c      	b.n	8003b82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <prvInitialiseTaskLists+0x60>)
 8003b74:	4413      	add	r3, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fcc2 	bl	8002500 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d9ef      	bls.n	8003b68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <prvInitialiseTaskLists+0x64>)
 8003b8a:	f7fe fcb9 	bl	8002500 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b8e:	480d      	ldr	r0, [pc, #52]	; (8003bc4 <prvInitialiseTaskLists+0x68>)
 8003b90:	f7fe fcb6 	bl	8002500 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b94:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <prvInitialiseTaskLists+0x6c>)
 8003b96:	f7fe fcb3 	bl	8002500 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b9a:	480c      	ldr	r0, [pc, #48]	; (8003bcc <prvInitialiseTaskLists+0x70>)
 8003b9c:	f7fe fcb0 	bl	8002500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <prvInitialiseTaskLists+0x74>)
 8003ba2:	f7fe fcad 	bl	8002500 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <prvInitialiseTaskLists+0x78>)
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <prvInitialiseTaskLists+0x64>)
 8003baa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvInitialiseTaskLists+0x7c>)
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <prvInitialiseTaskLists+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200003f4 	.word	0x200003f4
 8003bc0:	20000458 	.word	0x20000458
 8003bc4:	2000046c 	.word	0x2000046c
 8003bc8:	20000488 	.word	0x20000488
 8003bcc:	2000049c 	.word	0x2000049c
 8003bd0:	200004b4 	.word	0x200004b4
 8003bd4:	20000480 	.word	0x20000480
 8003bd8:	20000484 	.word	0x20000484

08003bdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be2:	e019      	b.n	8003c18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003be4:	f000 fbe2 	bl	80043ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvCheckTasksWaitingTermination+0x4c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe fd0d 	bl	8002614 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <prvCheckTasksWaitingTermination+0x50>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <prvCheckTasksWaitingTermination+0x50>)
 8003c02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <prvCheckTasksWaitingTermination+0x54>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <prvCheckTasksWaitingTermination+0x54>)
 8003c0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c0e:	f000 fbfb 	bl	8004408 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f80e 	bl	8003c34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <prvCheckTasksWaitingTermination+0x54>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e1      	bne.n	8003be4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000049c 	.word	0x2000049c
 8003c2c:	200004c8 	.word	0x200004c8
 8003c30:	200004b0 	.word	0x200004b0

08003c34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fdd8 	bl	8004800 <vPortFree>
				vPortFree( pxTCB );
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fdd5 	bl	8004800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c56:	e017      	b.n	8003c88 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d103      	bne.n	8003c6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fdcc 	bl	8004800 <vPortFree>
	}
 8003c68:	e00e      	b.n	8003c88 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d009      	beq.n	8003c88 <prvDeleteTCB+0x54>
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e7fe      	b.n	8003c86 <prvDeleteTCB+0x52>
	}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <prvResetNextTaskUnblockTime+0x44>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <prvResetNextTaskUnblockTime+0x14>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <prvResetNextTaskUnblockTime+0x16>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <prvResetNextTaskUnblockTime+0x48>)
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cb2:	e008      	b.n	8003cc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cb4:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <prvResetNextTaskUnblockTime+0x44>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <prvResetNextTaskUnblockTime+0x48>)
 8003cc4:	6013      	str	r3, [r2, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000480 	.word	0x20000480
 8003cd8:	200004e8 	.word	0x200004e8

08003cdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d073      	beq.n	8003dda <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <xTaskPriorityInherit+0x108>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d263      	bcs.n	8003dc8 <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db06      	blt.n	8003d16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <xTaskPriorityInherit+0x108>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	f1c3 0205 	rsb	r2, r3, #5
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6959      	ldr	r1, [r3, #20]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a30      	ldr	r2, [pc, #192]	; (8003de8 <xTaskPriorityInherit+0x10c>)
 8003d28:	4413      	add	r3, r2
 8003d2a:	4299      	cmp	r1, r3
 8003d2c:	d101      	bne.n	8003d32 <xTaskPriorityInherit+0x56>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xTaskPriorityInherit+0x58>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03a      	beq.n	8003dae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe fc69 	bl	8002614 <uxListRemove>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d115      	bne.n	8003d74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	4926      	ldr	r1, [pc, #152]	; (8003de8 <xTaskPriorityInherit+0x10c>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <xTaskPriorityInherit+0x98>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	2201      	movs	r2, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <xTaskPriorityInherit+0x110>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <xTaskPriorityInherit+0x110>)
 8003d72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <xTaskPriorityInherit+0x108>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	2201      	movs	r2, #1
 8003d84:	409a      	lsls	r2, r3
 8003d86:	4b19      	ldr	r3, [pc, #100]	; (8003dec <xTaskPriorityInherit+0x110>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <xTaskPriorityInherit+0x110>)
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <xTaskPriorityInherit+0x10c>)
 8003d9e:	441a      	add	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fbd7 	bl	800255a <vListInsertEnd>
 8003dac:	e004      	b.n	8003db8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <xTaskPriorityInherit+0x108>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	2049      	movs	r0, #73	; 0x49
 8003dbe:	f001 fb73 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e008      	b.n	8003dda <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dcc:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <xTaskPriorityInherit+0x108>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d201      	bcs.n	8003dda <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dda:	68fb      	ldr	r3, [r7, #12]
	}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200003f0 	.word	0x200003f0
 8003de8:	200003f4 	.word	0x200003f4
 8003dec:	200004d0 	.word	0x200004d0

08003df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d071      	beq.n	8003eea <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <xTaskPriorityDisinherit+0x104>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d009      	beq.n	8003e24 <xTaskPriorityDisinherit+0x34>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e7fe      	b.n	8003e22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <xTaskPriorityDisinherit+0x50>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	e7fe      	b.n	8003e3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d049      	beq.n	8003eea <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d145      	bne.n	8003eea <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fbd6 	bl	8002614 <uxListRemove>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4921      	ldr	r1, [pc, #132]	; (8003ef8 <xTaskPriorityDisinherit+0x108>)
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xTaskPriorityDisinherit+0xaa>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <xTaskPriorityDisinherit+0x10c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4013      	ands	r3, r2
 8003e96:	4a19      	ldr	r2, [pc, #100]	; (8003efc <xTaskPriorityDisinherit+0x10c>)
 8003e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	204a      	movs	r0, #74	; 0x4a
 8003ea0:	f001 fb02 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f1c3 0205 	rsb	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <xTaskPriorityDisinherit+0x10c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <xTaskPriorityDisinherit+0x10c>)
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <xTaskPriorityDisinherit+0x108>)
 8003ed8:	441a      	add	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7fe fb3a 	bl	800255a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003eea:	697b      	ldr	r3, [r7, #20]
	}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200003f0 	.word	0x200003f0
 8003ef8:	200003f4 	.word	0x200003f4
 8003efc:	200004d0 	.word	0x200004d0

08003f00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 808f 	beq.w	8004038 <vTaskPriorityDisinheritAfterTimeout+0x138>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e7fe      	b.n	8003f34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d902      	bls.n	8003f46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e002      	b.n	8003f4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d070      	beq.n	8004038 <vTaskPriorityDisinheritAfterTimeout+0x138>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d16b      	bne.n	8004038 <vTaskPriorityDisinheritAfterTimeout+0x138>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d109      	bne.n	8003f7e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	e7fe      	b.n	8003f7c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4619      	mov	r1, r3
 8003f82:	204a      	movs	r0, #74	; 0x4a
 8003f84:	f001 fa90 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db04      	blt.n	8003fa6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f1c3 0205 	rsb	r2, r3, #5
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	6959      	ldr	r1, [r3, #20]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003fb6:	4413      	add	r3, r2
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	d101      	bne.n	8003fc0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d038      	beq.n	8004038 <vTaskPriorityDisinheritAfterTimeout+0x138>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fb22 	bl	8002614 <uxListRemove>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d115      	bne.n	8004002 <vTaskPriorityDisinheritAfterTimeout+0x102>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	491a      	ldr	r1, [pc, #104]	; (8004044 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <vTaskPriorityDisinheritAfterTimeout+0x102>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	4b13      	ldr	r3, [pc, #76]	; (8004048 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004000:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4618      	mov	r0, r3
 8004006:	f001 ffd1 	bl	8005fac <SEGGER_SYSVIEW_OnTaskStartReady>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	2201      	movs	r2, #1
 8004010:	409a      	lsls	r2, r3
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4313      	orrs	r3, r2
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4a06      	ldr	r2, [pc, #24]	; (8004044 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 800402a:	441a      	add	r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f7fe fa91 	bl	800255a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004038:	bf00      	nop
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200003f0 	.word	0x200003f0
 8004044:	200003f4 	.word	0x200003f4
 8004048:	200004d0 	.word	0x200004d0

0800404c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <pvTaskIncrementMutexHeldCount+0x24>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <pvTaskIncrementMutexHeldCount+0x24>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800405e:	3201      	adds	r2, #1
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8004062:	4b03      	ldr	r3, [pc, #12]	; (8004070 <pvTaskIncrementMutexHeldCount+0x24>)
 8004064:	681b      	ldr	r3, [r3, #0]
	}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	200003f0 	.word	0x200003f0

08004074 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800407e:	4b32      	ldr	r3, [pc, #200]	; (8004148 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004084:	4b31      	ldr	r3, [pc, #196]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3304      	adds	r3, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fac2 	bl	8002614 <uxListRemove>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2201      	movs	r2, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43da      	mvns	r2, r3
 80040a4:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <prvAddCurrentTaskToDelayedList+0xdc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4013      	ands	r3, r2
 80040aa:	4a29      	ldr	r2, [pc, #164]	; (8004150 <prvAddCurrentTaskToDelayedList+0xdc>)
 80040ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d110      	bne.n	80040d8 <prvAddCurrentTaskToDelayedList+0x64>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80040bc:	4b23      	ldr	r3, [pc, #140]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	211b      	movs	r1, #27
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 ffb6 	bl	8006034 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4820      	ldr	r0, [pc, #128]	; (8004154 <prvAddCurrentTaskToDelayedList+0xe0>)
 80040d2:	f7fe fa42 	bl	800255a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80040d6:	e032      	b.n	800413e <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040e0:	4b1a      	ldr	r3, [pc, #104]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d20f      	bcs.n	8004110 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80040f0:	4b16      	ldr	r3, [pc, #88]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2104      	movs	r1, #4
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 ff9c 	bl	8006034 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040fc:	4b16      	ldr	r3, [pc, #88]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe4>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3304      	adds	r3, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f7fe fa4a 	bl	80025a2 <vListInsert>
}
 800410e:	e016      	b.n	800413e <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2104      	movs	r1, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f001 ff8c 	bl	8006034 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <prvAddCurrentTaskToDelayedList+0xe8>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	4619      	mov	r1, r3
 8004128:	4610      	mov	r0, r2
 800412a:	f7fe fa3a 	bl	80025a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <prvAddCurrentTaskToDelayedList+0xec>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d202      	bcs.n	800413e <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <prvAddCurrentTaskToDelayedList+0xec>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200004cc 	.word	0x200004cc
 800414c:	200003f0 	.word	0x200003f0
 8004150:	200004d0 	.word	0x200004d0
 8004154:	200004b4 	.word	0x200004b4
 8004158:	20000484 	.word	0x20000484
 800415c:	20000480 	.word	0x20000480
 8004160:	200004e8 	.word	0x200004e8

08004164 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3b04      	subs	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800417c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b04      	subs	r3, #4
 8004182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f023 0201 	bic.w	r2, r3, #1
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3b04      	subs	r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004194:	4a0c      	ldr	r2, [pc, #48]	; (80041c8 <pxPortInitialiseStack+0x64>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b14      	subs	r3, #20
 800419e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3b04      	subs	r3, #4
 80041aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f06f 0202 	mvn.w	r2, #2
 80041b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3b20      	subs	r3, #32
 80041b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	080041cd 	.word	0x080041cd

080041cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <prvTaskExitError+0x50>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d009      	beq.n	80041f4 <prvTaskExitError+0x28>
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e7fe      	b.n	80041f2 <prvTaskExitError+0x26>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004206:	bf00      	nop
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0fc      	beq.n	8004208 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	2000000c 	.word	0x2000000c

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	200003f0 	.word	0x200003f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800426a:	bf00      	nop
 800426c:	e000ed08 	.word	0xe000ed08

08004270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004276:	4b44      	ldr	r3, [pc, #272]	; (8004388 <xPortStartScheduler+0x118>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a44      	ldr	r2, [pc, #272]	; (800438c <xPortStartScheduler+0x11c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <xPortStartScheduler+0x24>
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e7fe      	b.n	8004292 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004294:	4b3c      	ldr	r3, [pc, #240]	; (8004388 <xPortStartScheduler+0x118>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <xPortStartScheduler+0x120>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d109      	bne.n	80042b2 <xPortStartScheduler+0x42>
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e7fe      	b.n	80042b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042b2:	4b38      	ldr	r3, [pc, #224]	; (8004394 <xPortStartScheduler+0x124>)
 80042b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4b30      	ldr	r3, [pc, #192]	; (8004398 <xPortStartScheduler+0x128>)
 80042d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <xPortStartScheduler+0x12c>)
 80042dc:	2207      	movs	r2, #7
 80042de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e0:	e009      	b.n	80042f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80042e2:	4b2e      	ldr	r3, [pc, #184]	; (800439c <xPortStartScheduler+0x12c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <xPortStartScheduler+0x12c>)
 80042ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d0ef      	beq.n	80042e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <xPortStartScheduler+0x12c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1c3 0307 	rsb	r3, r3, #7
 800430a:	2b04      	cmp	r3, #4
 800430c:	d009      	beq.n	8004322 <xPortStartScheduler+0xb2>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	e7fe      	b.n	8004320 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <xPortStartScheduler+0x12c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	4a1c      	ldr	r2, [pc, #112]	; (800439c <xPortStartScheduler+0x12c>)
 800432a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800432c:	4b1b      	ldr	r3, [pc, #108]	; (800439c <xPortStartScheduler+0x12c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004334:	4a19      	ldr	r2, [pc, #100]	; (800439c <xPortStartScheduler+0x12c>)
 8004336:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <xPortStartScheduler+0x130>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <xPortStartScheduler+0x130>)
 8004346:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800434a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <xPortStartScheduler+0x130>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <xPortStartScheduler+0x130>)
 8004352:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004356:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004358:	f000 f8de 	bl	8004518 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800435c:	4b11      	ldr	r3, [pc, #68]	; (80043a4 <xPortStartScheduler+0x134>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004362:	f000 f8fd 	bl	8004560 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <xPortStartScheduler+0x138>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <xPortStartScheduler+0x138>)
 800436c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004370:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004372:	f7ff ff69 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004376:	f7ff fa5f 	bl	8003838 <vTaskSwitchContext>
	prvTaskExitError();
 800437a:	f7ff ff27 	bl	80041cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed00 	.word	0xe000ed00
 800438c:	410fc271 	.word	0x410fc271
 8004390:	410fc270 	.word	0x410fc270
 8004394:	e000e400 	.word	0xe000e400
 8004398:	200004f4 	.word	0x200004f4
 800439c:	200004f8 	.word	0x200004f8
 80043a0:	e000ed20 	.word	0xe000ed20
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	e000ef34 	.word	0xe000ef34

080043ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <vPortEnterCritical+0x54>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <vPortEnterCritical+0x54>)
 80043cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043ce:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <vPortEnterCritical+0x54>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10e      	bne.n	80043f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <vPortEnterCritical+0x58>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d009      	beq.n	80043f4 <vPortEnterCritical+0x48>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	e7fe      	b.n	80043f2 <vPortEnterCritical+0x46>
	}
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	2000000c 	.word	0x2000000c
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <vPortExitCritical+0x4c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <vPortExitCritical+0x22>
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	607b      	str	r3, [r7, #4]
 8004428:	e7fe      	b.n	8004428 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <vPortExitCritical+0x4c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3b01      	subs	r3, #1
 8004430:	4a08      	ldr	r2, [pc, #32]	; (8004454 <vPortExitCritical+0x4c>)
 8004432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <vPortExitCritical+0x4c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <vPortExitCritical+0x3e>
 800443c:	2300      	movs	r3, #0
 800443e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	2000000c 	.word	0x2000000c
	...

08004460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004460:	f3ef 8009 	mrs	r0, PSP
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <pxCurrentTCBConst>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f01e 0f10 	tst.w	lr, #16
 8004470:	bf08      	it	eq
 8004472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004484:	f380 8811 	msr	BASEPRI, r0
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f7ff f9d2 	bl	8003838 <vTaskSwitchContext>
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f380 8811 	msr	BASEPRI, r0
 800449c:	bc09      	pop	{r0, r3}
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	6808      	ldr	r0, [r1, #0]
 80044a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a6:	f01e 0f10 	tst.w	lr, #16
 80044aa:	bf08      	it	eq
 80044ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044b0:	f380 8809 	msr	PSP, r0
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst>:
 80044c0:	200003f0 	.word	0x200003f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80044e0:	f001 fc46 	bl	8005d70 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044e4:	f7ff f8e8 	bl	80036b8 <xTaskIncrementTick>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80044ee:	f001 fc9d 	bl	8005e2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <xPortSysTickHandler+0x4c>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e001      	b.n	8004500 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80044fc:	f001 fc7a 	bl	8005df4 <SEGGER_SYSVIEW_RecordExitISR>
 8004500:	2300      	movs	r3, #0
 8004502:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <vPortSetupTimerInterrupt+0x34>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <vPortSetupTimerInterrupt+0x38>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vPortSetupTimerInterrupt+0x3c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <vPortSetupTimerInterrupt+0x40>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <vPortSetupTimerInterrupt+0x44>)
 8004536:	3b01      	subs	r3, #1
 8004538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <vPortSetupTimerInterrupt+0x34>)
 800453c:	2207      	movs	r2, #7
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e010 	.word	0xe000e010
 8004550:	e000e018 	.word	0xe000e018
 8004554:	20000000 	.word	0x20000000
 8004558:	10624dd3 	.word	0x10624dd3
 800455c:	e000e014 	.word	0xe000e014

08004560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004570 <vPortEnableVFP+0x10>
 8004564:	6801      	ldr	r1, [r0, #0]
 8004566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800456a:	6001      	str	r1, [r0, #0]
 800456c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800456e:	bf00      	nop
 8004570:	e000ed88 	.word	0xe000ed88

08004574 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 800457a:	f000 f839 	bl	80045f0 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d913      	bls.n	80045b2 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800458a:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <vPortValidateInterruptPriority+0x6c>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004594:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <vPortValidateInterruptPriority+0x70>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	7afa      	ldrb	r2, [r7, #11]
 800459a:	429a      	cmp	r2, r3
 800459c:	d209      	bcs.n	80045b2 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	e7fe      	b.n	80045b0 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <vPortValidateInterruptPriority+0x74>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <vPortValidateInterruptPriority+0x78>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d909      	bls.n	80045d6 <vPortValidateInterruptPriority+0x62>
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	e7fe      	b.n	80045d4 <vPortValidateInterruptPriority+0x60>
	}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	e000e3f0 	.word	0xe000e3f0
 80045e4:	200004f4 	.word	0x200004f4
 80045e8:	e000ed0c 	.word	0xe000ed0c
 80045ec:	200004f8 	.word	0x200004f8

080045f0 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045f6:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <vSetVarulMaxPRIGROUPValue+0x84>)
 80045f8:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 800460a:	2207      	movs	r2, #7
 800460c:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460e:	e009      	b.n	8004624 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004618:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d0ef      	beq.n	8004610 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1c3 0307 	rsb	r3, r3, #7
 8004638:	2b04      	cmp	r3, #4
 800463a:	d009      	beq.n	8004650 <vSetVarulMaxPRIGROUPValue+0x60>
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	e7fe      	b.n	800464e <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	4a08      	ldr	r2, [pc, #32]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004658:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004662:	4a05      	ldr	r2, [pc, #20]	; (8004678 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004664:	6013      	str	r3, [r2, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000e400 	.word	0xe000e400
 8004678:	200004f8 	.word	0x200004f8

0800467c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004688:	f7fe ff56 	bl	8003538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <pvPortMalloc+0x170>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004694:	f000 f90c 	bl	80048b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004698:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <pvPortMalloc+0x174>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 808c 	bne.w	80047be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01c      	beq.n	80046e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80046ac:	2208      	movs	r2, #8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d013      	beq.n	80046e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f023 0307 	bic.w	r3, r3, #7
 80046c4:	3308      	adds	r3, #8
 80046c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d009      	beq.n	80046e6 <pvPortMalloc+0x6a>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e7fe      	b.n	80046e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d068      	beq.n	80047be <pvPortMalloc+0x142>
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <pvPortMalloc+0x178>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d863      	bhi.n	80047be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046f6:	4b40      	ldr	r3, [pc, #256]	; (80047f8 <pvPortMalloc+0x17c>)
 80046f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <pvPortMalloc+0x17c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004700:	e004      	b.n	800470c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d903      	bls.n	800471e <pvPortMalloc+0xa2>
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f1      	bne.n	8004702 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <pvPortMalloc+0x170>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004724:	429a      	cmp	r2, r3
 8004726:	d04a      	beq.n	80047be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	4413      	add	r3, r2
 8004730:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	1ad2      	subs	r2, r2, r3
 8004742:	2308      	movs	r3, #8
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	429a      	cmp	r2, r3
 8004748:	d91e      	bls.n	8004788 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4413      	add	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <pvPortMalloc+0xf4>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e7fe      	b.n	800476e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004782:	69b8      	ldr	r0, [r7, #24]
 8004784:	f000 f8f6 	bl	8004974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <pvPortMalloc+0x178>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <pvPortMalloc+0x178>)
 8004794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004796:	4b17      	ldr	r3, [pc, #92]	; (80047f4 <pvPortMalloc+0x178>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <pvPortMalloc+0x180>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d203      	bcs.n	80047aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <pvPortMalloc+0x178>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <pvPortMalloc+0x180>)
 80047a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <pvPortMalloc+0x174>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047be:	f7fe fec9 	bl	8003554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <pvPortMalloc+0x164>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e7fe      	b.n	80047de <pvPortMalloc+0x162>
	return pvReturn;
 80047e0:	69fb      	ldr	r3, [r7, #28]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3728      	adds	r7, #40	; 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20013104 	.word	0x20013104
 80047f0:	20013110 	.word	0x20013110
 80047f4:	20013108 	.word	0x20013108
 80047f8:	200130fc 	.word	0x200130fc
 80047fc:	2001310c 	.word	0x2001310c

08004800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d046      	beq.n	80048a0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004812:	2308      	movs	r3, #8
 8004814:	425b      	negs	r3, r3
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4413      	add	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <vPortFree+0xa8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <vPortFree+0x42>
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e7fe      	b.n	8004840 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <vPortFree+0x5e>
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	e7fe      	b.n	800485c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <vPortFree+0xa8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d019      	beq.n	80048a0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d115      	bne.n	80048a0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <vPortFree+0xa8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	43db      	mvns	r3, r3
 800487e:	401a      	ands	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004884:	f7fe fe58 	bl	8003538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <vPortFree+0xac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4413      	add	r3, r2
 8004892:	4a06      	ldr	r2, [pc, #24]	; (80048ac <vPortFree+0xac>)
 8004894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004896:	6938      	ldr	r0, [r7, #16]
 8004898:	f000 f86c 	bl	8004974 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800489c:	f7fe fe5a 	bl	8003554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048a0:	bf00      	nop
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20013110 	.word	0x20013110
 80048ac:	20013108 	.word	0x20013108

080048b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048bc:	4b27      	ldr	r3, [pc, #156]	; (800495c <prvHeapInit+0xac>)
 80048be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00c      	beq.n	80048e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3307      	adds	r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0307 	bic.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <prvHeapInit+0xac>)
 80048e0:	4413      	add	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e8:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <prvHeapInit+0xb0>)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <prvHeapInit+0xb0>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	4413      	add	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048fc:	2208      	movs	r2, #8
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0307 	bic.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <prvHeapInit+0xb4>)
 8004910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <prvHeapInit+0xb4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <prvHeapInit+0xb4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	1ad2      	subs	r2, r2, r3
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvHeapInit+0xb4>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <prvHeapInit+0xb8>)
 800493e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a09      	ldr	r2, [pc, #36]	; (800496c <prvHeapInit+0xbc>)
 8004946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <prvHeapInit+0xc0>)
 800494a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	200004fc 	.word	0x200004fc
 8004960:	200130fc 	.word	0x200130fc
 8004964:	20013104 	.word	0x20013104
 8004968:	2001310c 	.word	0x2001310c
 800496c:	20013108 	.word	0x20013108
 8004970:	20013110 	.word	0x20013110

08004974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800497c:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <prvInsertBlockIntoFreeList+0xac>)
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e002      	b.n	8004988 <prvInsertBlockIntoFreeList+0x14>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	429a      	cmp	r2, r3
 8004990:	d8f7      	bhi.n	8004982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d108      	bne.n	80049b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d118      	bne.n	80049fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <prvInsertBlockIntoFreeList+0xb0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d00d      	beq.n	80049f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e008      	b.n	8004a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049f2:	4b0c      	ldr	r3, [pc, #48]	; (8004a24 <prvInsertBlockIntoFreeList+0xb0>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e003      	b.n	8004a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d002      	beq.n	8004a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	200130fc 	.word	0x200130fc
 8004a24:	20013104 	.word	0x20013104

08004a28 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a2c:	4803      	ldr	r0, [pc, #12]	; (8004a3c <_cbSendSystemDesc+0x14>)
 8004a2e:	f001 f94b 	bl	8005cc8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a32:	4803      	ldr	r0, [pc, #12]	; (8004a40 <_cbSendSystemDesc+0x18>)
 8004a34:	f001 f948 	bl	8005cc8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08006d20 	.word	0x08006d20
 8004a40:	08006d54 	.word	0x08006d54

08004a44 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a52:	4a06      	ldr	r2, [pc, #24]	; (8004a6c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a54:	f000 fcbc 	bl	80053d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a58:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004a5c:	f000 fcf6 	bl	800544c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a60:	bf00      	nop
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000000 	.word	0x20000000
 8004a68:	08004a29 	.word	0x08004a29
 8004a6c:	08006df4 	.word	0x08006df4

08004a70 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e034      	b.n	8004ae6 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a7c:	491e      	ldr	r1, [pc, #120]	; (8004af8 <_cbSendTaskList+0x88>)
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	491a      	ldr	r1, [pc, #104]	; (8004af8 <_cbSendTaskList+0x88>)
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	681c      	ldr	r4, [r3, #0]
 8004a9e:	4916      	ldr	r1, [pc, #88]	; (8004af8 <_cbSendTaskList+0x88>)
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3308      	adds	r3, #8
 8004aae:	681d      	ldr	r5, [r3, #0]
 8004ab0:	4911      	ldr	r1, [pc, #68]	; (8004af8 <_cbSendTaskList+0x88>)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	330c      	adds	r3, #12
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	490d      	ldr	r1, [pc, #52]	; (8004af8 <_cbSendTaskList+0x88>)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	3310      	adds	r3, #16
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	4633      	mov	r3, r6
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4621      	mov	r1, r4
 8004adc:	f000 f8b4 	bl	8004c48 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_cbSendTaskList+0x8c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3c5      	bcc.n	8004a7c <_cbSendTaskList+0xc>
  }
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af8:	20013114 	.word	0x20013114
 8004afc:	200131b4 	.word	0x200131b4

08004b00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b06:	f7fe fdc5 	bl	8003694 <xTaskGetTickCountFromISR>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f04f 0400 	mov.w	r4, #0
 8004b10:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b14:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004b18:	462b      	mov	r3, r5
 8004b1a:	4634      	mov	r4, r6
 8004b1c:	f04f 0100 	mov.w	r1, #0
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	0162      	lsls	r2, r4, #5
 8004b26:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004b2a:	0159      	lsls	r1, r3, #5
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4614      	mov	r4, r2
 8004b30:	1b5b      	subs	r3, r3, r5
 8004b32:	eb64 0406 	sbc.w	r4, r4, r6
 8004b36:	f04f 0100 	mov.w	r1, #0
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	00a2      	lsls	r2, r4, #2
 8004b40:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004b44:	0099      	lsls	r1, r3, #2
 8004b46:	460b      	mov	r3, r1
 8004b48:	4614      	mov	r4, r2
 8004b4a:	195b      	adds	r3, r3, r5
 8004b4c:	eb44 0406 	adc.w	r4, r4, r6
 8004b50:	f04f 0100 	mov.w	r1, #0
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	00e2      	lsls	r2, r4, #3
 8004b5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b5e:	00d9      	lsls	r1, r3, #3
 8004b60:	460b      	mov	r3, r1
 8004b62:	4614      	mov	r4, r2
 8004b64:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004b68:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	4621      	mov	r1, r4
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b78 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b86:	2205      	movs	r2, #5
 8004b88:	492b      	ldr	r1, [pc, #172]	; (8004c38 <SYSVIEW_AddTask+0xc0>)
 8004b8a:	68b8      	ldr	r0, [r7, #8]
 8004b8c:	f001 fc26 	bl	80063dc <memcmp>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04b      	beq.n	8004c2e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	d903      	bls.n	8004ba6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b9e:	4828      	ldr	r0, [pc, #160]	; (8004c40 <SYSVIEW_AddTask+0xc8>)
 8004ba0:	f001 fb96 	bl	80062d0 <SEGGER_SYSVIEW_Warn>
    return;
 8004ba4:	e044      	b.n	8004c30 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ba6:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4926      	ldr	r1, [pc, #152]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4921      	ldr	r1, [pc, #132]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3304      	adds	r3, #4
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	491b      	ldr	r1, [pc, #108]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3308      	adds	r3, #8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004be6:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4916      	ldr	r1, [pc, #88]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4910      	ldr	r1, [pc, #64]	; (8004c44 <SYSVIEW_AddTask+0xcc>)
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c12:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <SYSVIEW_AddTask+0xc4>)
 8004c1a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68b9      	ldr	r1, [r7, #8]
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 f80e 	bl	8004c48 <SYSVIEW_SendTaskInfo>
 8004c2c:	e000      	b.n	8004c30 <SYSVIEW_AddTask+0xb8>
    return;
 8004c2e:	bf00      	nop

}
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	08006d64 	.word	0x08006d64
 8004c3c:	200131b4 	.word	0x200131b4
 8004c40:	08006d6c 	.word	0x08006d6c
 8004c44:	20013114 	.word	0x20013114

08004c48 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	2214      	movs	r2, #20
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 fbd6 	bl	8006410 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 ff29 	bl	8005ad4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <_DoInit>:
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <_DoInit+0x8c>)
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	611a      	str	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	615a      	str	r2, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <_DoInit+0x90>)
 8004ca6:	619a      	str	r2, [r3, #24]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <_DoInit+0x94>)
 8004cac:	61da      	str	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cb4:	621a      	str	r2, [r3, #32]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <_DoInit+0x90>)
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <_DoInit+0x98>)
 8004cd2:	665a      	str	r2, [r3, #100]	; 0x64
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	669a      	str	r2, [r3, #104]	; 0x68
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	671a      	str	r2, [r3, #112]	; 0x70
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	675a      	str	r2, [r3, #116]	; 0x74
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3307      	adds	r3, #7
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	; (8004d28 <_DoInit+0x9c>)
 8004cf2:	6810      	ldr	r0, [r2, #0]
 8004cf4:	6018      	str	r0, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <_DoInit+0xa0>)
 8004cfa:	6810      	ldr	r0, [r2, #0]
 8004cfc:	6018      	str	r0, [r3, #0]
 8004cfe:	8891      	ldrh	r1, [r2, #4]
 8004d00:	7992      	ldrb	r2, [r2, #6]
 8004d02:	8099      	strh	r1, [r3, #4]
 8004d04:	719a      	strb	r2, [r3, #6]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	719a      	strb	r2, [r3, #6]
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	20015738 	.word	0x20015738
 8004d1c:	08006dbc 	.word	0x08006dbc
 8004d20:	200131b8 	.word	0x200131b8
 8004d24:	200135b8 	.word	0x200135b8
 8004d28:	08006dc8 	.word	0x08006dc8
 8004d2c:	08006dcc 	.word	0x08006dcc

08004d30 <SEGGER_RTT_ReadNoLock>:
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	4b3c      	ldr	r3, [pc, #240]	; (8004e30 <SEGGER_RTT_ReadNoLock+0x100>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <SEGGER_RTT_ReadNoLock+0x18>
 8004d44:	f7ff ffa2 	bl	8004c8c <_DoInit>
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	3360      	adds	r3, #96	; 0x60
 8004d54:	4a36      	ldr	r2, [pc, #216]	; (8004e30 <SEGGER_RTT_ReadNoLock+0x100>)
 8004d56:	4413      	add	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	617b      	str	r3, [r7, #20]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d92a      	bls.n	8004dcc <SEGGER_RTT_ReadNoLock+0x9c>
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bf28      	it	cs
 8004d88:	4613      	movcs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	4413      	add	r3, r2
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4619      	mov	r1, r3
 8004d98:	69f8      	ldr	r0, [r7, #28]
 8004d9a:	f001 fb2e 	bl	80063fa <memcpy>
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	6a3a      	ldr	r2, [r7, #32]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	6a3a      	ldr	r2, [r7, #32]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d101      	bne.n	8004dcc <SEGGER_RTT_ReadNoLock+0x9c>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf28      	it	cs
 8004ddc:	4613      	movcs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <SEGGER_RTT_ReadNoLock+0xe8>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	4413      	add	r3, r2
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4619      	mov	r1, r3
 8004df2:	69f8      	ldr	r0, [r7, #28]
 8004df4:	f001 fb01 	bl	80063fa <memcpy>
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	623b      	str	r3, [r7, #32]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <SEGGER_RTT_ReadNoLock+0xf4>
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	611a      	str	r2, [r3, #16]
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	4618      	mov	r0, r3
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20015738 	.word	0x20015738

08004e34 <SEGGER_RTT_ConfigUpBuffer>:
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4b30      	ldr	r3, [pc, #192]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004e4a:	f7ff ff1f 	bl	8004c8c <_DoInit>
 8004e4e:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d24c      	bcs.n	8004ef4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
 8004e5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e5e:	f04f 0120 	mov.w	r1, #32
 8004e62:	f381 8811 	msr	BASEPRI, r1
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d032      	beq.n	8004ed4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
 8004e6e:	4925      	ldr	r1, [pc, #148]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	4613      	mov	r3, r2
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	4920      	ldr	r1, [pc, #128]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	4613      	mov	r3, r2
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	3304      	adds	r3, #4
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	491a      	ldr	r1, [pc, #104]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3320      	adds	r3, #32
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	4915      	ldr	r1, [pc, #84]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	440b      	add	r3, r1
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	4910      	ldr	r1, [pc, #64]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3324      	adds	r3, #36	; 0x24
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	490b      	ldr	r1, [pc, #44]	; (8004f04 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	440b      	add	r3, r1
 8004ee2:	332c      	adds	r3, #44	; 0x2c
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e002      	b.n	8004efa <SEGGER_RTT_ConfigUpBuffer+0xc6>
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20015738 	.word	0x20015738

08004f08 <SEGGER_RTT_ConfigDownBuffer>:
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8004f1e:	f7ff feb5 	bl	8004c8c <_DoInit>
 8004f22:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d24b      	bcs.n	8004fc6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
 8004f2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f32:	f04f 0120 	mov.w	r1, #32
 8004f36:	f381 8811 	msr	BASEPRI, r1
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d031      	beq.n	8004fa6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
 8004f42:	4925      	ldr	r1, [pc, #148]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4613      	mov	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	4413      	add	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	440b      	add	r3, r1
 8004f50:	3360      	adds	r3, #96	; 0x60
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	4920      	ldr	r1, [pc, #128]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	3364      	adds	r3, #100	; 0x64
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	491b      	ldr	r1, [pc, #108]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	440b      	add	r3, r1
 8004f78:	3368      	adds	r3, #104	; 0x68
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	4916      	ldr	r1, [pc, #88]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3370      	adds	r3, #112	; 0x70
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	4911      	ldr	r1, [pc, #68]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	440b      	add	r3, r1
 8004fa0:	336c      	adds	r3, #108	; 0x6c
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	490c      	ldr	r1, [pc, #48]	; (8004fd8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3374      	adds	r3, #116	; 0x74
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e002      	b.n	8004fcc <SEGGER_RTT_ConfigDownBuffer+0xc4>
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20015738 	.word	0x20015738

08004fdc <_EncodeStr>:
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e002      	b.n	8004ff4 <_EncodeStr+0x18>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f6      	bne.n	8004fee <_EncodeStr+0x12>
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	d901      	bls.n	800500c <_EncodeStr+0x30>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2bfe      	cmp	r3, #254	; 0xfe
 8005010:	d806      	bhi.n	8005020 <_EncodeStr+0x44>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e011      	b.n	8005044 <_EncodeStr+0x68>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	60fa      	str	r2, [r7, #12]
 8005026:	22ff      	movs	r2, #255	; 0xff
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	60fa      	str	r2, [r7, #12]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	0a19      	lsrs	r1, r3, #8
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	60fa      	str	r2, [r7, #12]
 8005040:	b2ca      	uxtb	r2, r1
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e00a      	b.n	8005060 <_EncodeStr+0x84>
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	1c53      	adds	r3, r2, #1
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	60f9      	str	r1, [r7, #12]
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d3f0      	bcc.n	800504a <_EncodeStr+0x6e>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4618      	mov	r0, r3
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <_PreparePacket>:
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <_HandleIncomingPacket>:
 800508e:	b580      	push	{r7, lr}
 8005090:	b082      	sub	sp, #8
 8005092:	af00      	add	r7, sp, #0
 8005094:	1cfb      	adds	r3, r7, #3
 8005096:	2201      	movs	r2, #1
 8005098:	4619      	mov	r1, r3
 800509a:	2001      	movs	r0, #1
 800509c:	f7ff fe48 	bl	8004d30 <SEGGER_RTT_ReadNoLock>
 80050a0:	4603      	mov	r3, r0
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	dd44      	ble.n	8005134 <_HandleIncomingPacket+0xa6>
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d01a      	beq.n	80050e6 <_HandleIncomingPacket+0x58>
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	dc06      	bgt.n	80050c2 <_HandleIncomingPacket+0x34>
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d010      	beq.n	80050da <_HandleIncomingPacket+0x4c>
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	dc11      	bgt.n	80050e0 <_HandleIncomingPacket+0x52>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d009      	beq.n	80050d4 <_HandleIncomingPacket+0x46>
 80050c0:	e02d      	b.n	800511e <_HandleIncomingPacket+0x90>
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d015      	beq.n	80050f2 <_HandleIncomingPacket+0x64>
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	db10      	blt.n	80050ec <_HandleIncomingPacket+0x5e>
 80050ca:	2b07      	cmp	r3, #7
 80050cc:	d014      	beq.n	80050f8 <_HandleIncomingPacket+0x6a>
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d015      	beq.n	80050fe <_HandleIncomingPacket+0x70>
 80050d2:	e024      	b.n	800511e <_HandleIncomingPacket+0x90>
 80050d4:	f000 fb86 	bl	80057e4 <SEGGER_SYSVIEW_Start>
 80050d8:	e031      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050da:	f000 fc3b 	bl	8005954 <SEGGER_SYSVIEW_Stop>
 80050de:	e02e      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050e0:	f000 fe16 	bl	8005d10 <SEGGER_SYSVIEW_RecordSystime>
 80050e4:	e02b      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050e6:	f000 fddb 	bl	8005ca0 <SEGGER_SYSVIEW_SendTaskList>
 80050ea:	e028      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050ec:	f000 fc58 	bl	80059a0 <SEGGER_SYSVIEW_GetSysDesc>
 80050f0:	e025      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050f2:	f001 f8af 	bl	8006254 <SEGGER_SYSVIEW_SendNumModules>
 80050f6:	e022      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050f8:	f001 f88e 	bl	8006218 <SEGGER_SYSVIEW_SendModuleDescription>
 80050fc:	e01f      	b.n	800513e <_HandleIncomingPacket+0xb0>
 80050fe:	1cfb      	adds	r3, r7, #3
 8005100:	2201      	movs	r2, #1
 8005102:	4619      	mov	r1, r3
 8005104:	2001      	movs	r0, #1
 8005106:	f7ff fe13 	bl	8004d30 <SEGGER_RTT_ReadNoLock>
 800510a:	4603      	mov	r3, r0
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	dd11      	ble.n	8005138 <_HandleIncomingPacket+0xaa>
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fffe 	bl	8006118 <SEGGER_SYSVIEW_SendModule>
 800511c:	e00c      	b.n	8005138 <_HandleIncomingPacket+0xaa>
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	b25b      	sxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	da0a      	bge.n	800513c <_HandleIncomingPacket+0xae>
 8005126:	1cfb      	adds	r3, r7, #3
 8005128:	2201      	movs	r2, #1
 800512a:	4619      	mov	r1, r3
 800512c:	2001      	movs	r0, #1
 800512e:	f7ff fdff 	bl	8004d30 <SEGGER_RTT_ReadNoLock>
 8005132:	e003      	b.n	800513c <_HandleIncomingPacket+0xae>
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <_HandleIncomingPacket+0xb0>
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <_HandleIncomingPacket+0xb0>
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <_TrySendOverflowPacket>:
 8005148:	b580      	push	{r7, lr}
 800514a:	b08c      	sub	sp, #48	; 0x30
 800514c:	af00      	add	r7, sp, #0
 800514e:	2301      	movs	r3, #1
 8005150:	713b      	strb	r3, [r7, #4]
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515c:	4b30      	ldr	r3, [pc, #192]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
 8005162:	e00b      	b.n	800517c <_TrySendOverflowPacket+0x34>
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	b2da      	uxtb	r2, r3
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800516e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	2b7f      	cmp	r3, #127	; 0x7f
 8005180:	d8f0      	bhi.n	8005164 <_TrySendOverflowPacket+0x1c>
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <_TrySendOverflowPacket+0xdc>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e00b      	b.n	80051c4 <_TrySendOverflowPacket+0x7c>
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	6279      	str	r1, [r7, #36]	; 0x24
 80051b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b7f      	cmp	r3, #127	; 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <_TrySendOverflowPacket+0x64>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	627a      	str	r2, [r7, #36]	; 0x24
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	1d3b      	adds	r3, r7, #4
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	1d3b      	adds	r3, r7, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	2001      	movs	r0, #1
 80051e8:	f7fb f802 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051ec:	4603      	mov	r3, r0
 80051ee:	613b      	str	r3, [r7, #16]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <_TrySendOverflowPacket+0xc2>
 80051f6:	4a0a      	ldr	r2, [pc, #40]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	60d3      	str	r3, [r2, #12]
 80051fc:	4b08      	ldr	r3, [pc, #32]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	3b01      	subs	r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e004      	b.n	8005214 <_TrySendOverflowPacket+0xcc>
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <_TrySendOverflowPacket+0xd8>)
 8005212:	6153      	str	r3, [r2, #20]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4618      	mov	r0, r3
 8005218:	3730      	adds	r7, #48	; 0x30
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200155d0 	.word	0x200155d0
 8005224:	e0001004 	.word	0xe0001004

08005228 <_SendPacket>:
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	4b63      	ldr	r3, [pc, #396]	; (80053c4 <_SendPacket+0x19c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d010      	beq.n	800525e <_SendPacket+0x36>
 800523c:	4b61      	ldr	r3, [pc, #388]	; (80053c4 <_SendPacket+0x19c>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a1 	beq.w	8005388 <_SendPacket+0x160>
 8005246:	4b5f      	ldr	r3, [pc, #380]	; (80053c4 <_SendPacket+0x19c>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d109      	bne.n	8005262 <_SendPacket+0x3a>
 800524e:	f7ff ff7b 	bl	8005148 <_TrySendOverflowPacket>
 8005252:	4b5c      	ldr	r3, [pc, #368]	; (80053c4 <_SendPacket+0x19c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b01      	cmp	r3, #1
 8005258:	f040 8098 	bne.w	800538c <_SendPacket+0x164>
 800525c:	e001      	b.n	8005262 <_SendPacket+0x3a>
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <_SendPacket+0x3c>
 8005262:	bf00      	nop
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b1f      	cmp	r3, #31
 8005268:	d809      	bhi.n	800527e <_SendPacket+0x56>
 800526a:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <_SendPacket+0x19c>)
 800526c:	69da      	ldr	r2, [r3, #28]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fa22 f303 	lsr.w	r3, r2, r3
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 8089 	bne.w	8005390 <_SendPacket+0x168>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b17      	cmp	r3, #23
 8005282:	d807      	bhi.n	8005294 <_SendPacket+0x6c>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e03d      	b.n	8005310 <_SendPacket+0xe8>
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b7f      	cmp	r3, #127	; 0x7f
 80052a0:	d912      	bls.n	80052c8 <_SendPacket+0xa0>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	09da      	lsrs	r2, r3, #7
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	3a01      	subs	r2, #1
 80052ba:	60fa      	str	r2, [r7, #12]
 80052bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e006      	b.n	80052d6 <_SendPacket+0xae>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b7f      	cmp	r3, #127	; 0x7f
 80052da:	d912      	bls.n	8005302 <_SendPacket+0xda>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	09da      	lsrs	r2, r3, #7
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	3a01      	subs	r2, #1
 80052f4:	60fa      	str	r2, [r7, #12]
 80052f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	e006      	b.n	8005310 <_SendPacket+0xe8>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3b01      	subs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	4b2d      	ldr	r3, [pc, #180]	; (80053c8 <_SendPacket+0x1a0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	4b2b      	ldr	r3, [pc, #172]	; (80053c4 <_SendPacket+0x19c>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	e00b      	b.n	8005342 <_SendPacket+0x11a>
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	6279      	str	r1, [r7, #36]	; 0x24
 8005334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	09db      	lsrs	r3, r3, #7
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b7f      	cmp	r3, #127	; 0x7f
 8005346:	d8f0      	bhi.n	800532a <_SendPacket+0x102>
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	627a      	str	r2, [r7, #36]	; 0x24
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	60bb      	str	r3, [r7, #8]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	2001      	movs	r0, #1
 8005364:	f7fa ff44 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005368:	4603      	mov	r3, r0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <_SendPacket+0x152>
 8005372:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <_SendPacket+0x19c>)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	60d3      	str	r3, [r2, #12]
 8005378:	e00b      	b.n	8005392 <_SendPacket+0x16a>
 800537a:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <_SendPacket+0x19c>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	3301      	adds	r3, #1
 8005380:	b2da      	uxtb	r2, r3
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <_SendPacket+0x19c>)
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e004      	b.n	8005392 <_SendPacket+0x16a>
 8005388:	bf00      	nop
 800538a:	e002      	b.n	8005392 <_SendPacket+0x16a>
 800538c:	bf00      	nop
 800538e:	e000      	b.n	8005392 <_SendPacket+0x16a>
 8005390:	bf00      	nop
 8005392:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <_SendPacket+0x1a4>)
 8005394:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <_SendPacket+0x1a4>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	429a      	cmp	r2, r3
 80053a0:	d00b      	beq.n	80053ba <_SendPacket+0x192>
 80053a2:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <_SendPacket+0x19c>)
 80053a4:	789b      	ldrb	r3, [r3, #2]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <_SendPacket+0x192>
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <_SendPacket+0x19c>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	709a      	strb	r2, [r3, #2]
 80053b0:	f7ff fe6d 	bl	800508e <_HandleIncomingPacket>
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <_SendPacket+0x19c>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	709a      	strb	r2, [r3, #2]
 80053ba:	bf00      	nop
 80053bc:	3728      	adds	r7, #40	; 0x28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200155d0 	.word	0x200155d0
 80053c8:	e0001004 	.word	0xe0001004
 80053cc:	20015738 	.word	0x20015738

080053d0 <SEGGER_SYSVIEW_Init>:
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <SEGGER_SYSVIEW_Init+0x68>)
 80053e8:	4914      	ldr	r1, [pc, #80]	; (800543c <SEGGER_SYSVIEW_Init+0x6c>)
 80053ea:	2001      	movs	r0, #1
 80053ec:	f7ff fd22 	bl	8004e34 <SEGGER_RTT_ConfigUpBuffer>
 80053f0:	2300      	movs	r3, #0
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	2308      	movs	r3, #8
 80053f6:	4a12      	ldr	r2, [pc, #72]	; (8005440 <SEGGER_SYSVIEW_Init+0x70>)
 80053f8:	4910      	ldr	r1, [pc, #64]	; (800543c <SEGGER_SYSVIEW_Init+0x6c>)
 80053fa:	2001      	movs	r0, #1
 80053fc:	f7ff fd84 	bl	8004f08 <SEGGER_RTT_ConfigDownBuffer>
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 8005402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005406:	611a      	str	r2, [r3, #16]
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <SEGGER_SYSVIEW_Init+0x78>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 800540e:	60d3      	str	r3, [r2, #12]
 8005410:	4a0c      	ldr	r2, [pc, #48]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6213      	str	r3, [r2, #32]
 8005416:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6053      	str	r3, [r2, #4]
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6093      	str	r3, [r2, #8]
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6253      	str	r3, [r2, #36]	; 0x24
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <SEGGER_SYSVIEW_Init+0x74>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	200135c8 	.word	0x200135c8
 800543c:	08006dd4 	.word	0x08006dd4
 8005440:	200155c8 	.word	0x200155c8
 8005444:	200155d0 	.word	0x200155d0
 8005448:	e0001004 	.word	0xe0001004

0800544c <SEGGER_SYSVIEW_SetRAMBase>:
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	4a04      	ldr	r2, [pc, #16]	; (8005468 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6113      	str	r3, [r2, #16]
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	200155d0 	.word	0x200155d0

0800546c <SEGGER_SYSVIEW_RecordVoid>:
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	f3ef 8311 	mrs	r3, BASEPRI
 8005478:	f04f 0120 	mov.w	r1, #32
 800547c:	f381 8811 	msr	BASEPRI, r1
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	4808      	ldr	r0, [pc, #32]	; (80054a4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005484:	f7ff fdf7 	bl	8005076 <_PreparePacket>
 8005488:	60b8      	str	r0, [r7, #8]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68b8      	ldr	r0, [r7, #8]
 8005490:	f7ff feca 	bl	8005228 <_SendPacket>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20015600 	.word	0x20015600

080054a8 <SEGGER_SYSVIEW_RecordU32>:
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
 80054b2:	f3ef 8311 	mrs	r3, BASEPRI
 80054b6:	f04f 0120 	mov.w	r1, #32
 80054ba:	f381 8811 	msr	BASEPRI, r1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	4816      	ldr	r0, [pc, #88]	; (800551c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054c2:	f7ff fdd8 	bl	8005076 <_PreparePacket>
 80054c6:	6138      	str	r0, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	e00b      	b.n	80054ee <SEGGER_SYSVIEW_RecordU32+0x46>
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	1c59      	adds	r1, r3, #1
 80054de:	61f9      	str	r1, [r7, #28]
 80054e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	09db      	lsrs	r3, r3, #7
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b7f      	cmp	r3, #127	; 0x7f
 80054f2:	d8f0      	bhi.n	80054d6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	61fa      	str	r2, [r7, #28]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	6938      	ldr	r0, [r7, #16]
 800550a:	f7ff fe8d 	bl	8005228 <_SendPacket>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	bf00      	nop
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20015600 	.word	0x20015600

08005520 <SEGGER_SYSVIEW_RecordU32x2>:
 8005520:	b580      	push	{r7, lr}
 8005522:	b08c      	sub	sp, #48	; 0x30
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	f3ef 8311 	mrs	r3, BASEPRI
 8005530:	f04f 0120 	mov.w	r1, #32
 8005534:	f381 8811 	msr	BASEPRI, r1
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	4825      	ldr	r0, [pc, #148]	; (80055d0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800553c:	f7ff fd9b 	bl	8005076 <_PreparePacket>
 8005540:	61b8      	str	r0, [r7, #24]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	62bb      	str	r3, [r7, #40]	; 0x28
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	b2da      	uxtb	r2, r3
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	62f9      	str	r1, [r7, #44]	; 0x2c
 800555a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b7f      	cmp	r3, #127	; 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	e00b      	b.n	80055a0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	6279      	str	r1, [r7, #36]	; 0x24
 8005592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	09db      	lsrs	r3, r3, #7
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	2b7f      	cmp	r3, #127	; 0x7f
 80055a4:	d8f0      	bhi.n	8005588 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	627a      	str	r2, [r7, #36]	; 0x24
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69b8      	ldr	r0, [r7, #24]
 80055bc:	f7ff fe34 	bl	8005228 <_SendPacket>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	bf00      	nop
 80055c8:	3730      	adds	r7, #48	; 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20015600 	.word	0x20015600

080055d4 <SEGGER_SYSVIEW_RecordU32x3>:
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08e      	sub	sp, #56	; 0x38
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	f3ef 8311 	mrs	r3, BASEPRI
 80055e6:	f04f 0120 	mov.w	r1, #32
 80055ea:	f381 8811 	msr	BASEPRI, r1
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	4832      	ldr	r0, [pc, #200]	; (80056bc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80055f2:	f7ff fd40 	bl	8005076 <_PreparePacket>
 80055f6:	61b8      	str	r0, [r7, #24]
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
 8005604:	e00b      	b.n	800561e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	b2da      	uxtb	r2, r3
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	1c59      	adds	r1, r3, #1
 800560e:	6379      	str	r1, [r7, #52]	; 0x34
 8005610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	09db      	lsrs	r3, r3, #7
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b7f      	cmp	r3, #127	; 0x7f
 8005622:	d8f0      	bhi.n	8005606 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	637a      	str	r2, [r7, #52]	; 0x34
 800562a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	62bb      	str	r3, [r7, #40]	; 0x28
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	2b7f      	cmp	r3, #127	; 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	623b      	str	r3, [r7, #32]
 8005674:	e00b      	b.n	800568e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1c59      	adds	r1, r3, #1
 800567e:	6279      	str	r1, [r7, #36]	; 0x24
 8005680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	09db      	lsrs	r3, r3, #7
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2b7f      	cmp	r3, #127	; 0x7f
 8005692:	d8f0      	bhi.n	8005676 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	627a      	str	r2, [r7, #36]	; 0x24
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	6979      	ldr	r1, [r7, #20]
 80056a8:	69b8      	ldr	r0, [r7, #24]
 80056aa:	f7ff fdbd 	bl	8005228 <_SendPacket>
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	bf00      	nop
 80056b6:	3738      	adds	r7, #56	; 0x38
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20015600 	.word	0x20015600

080056c0 <SEGGER_SYSVIEW_RecordU32x4>:
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b090      	sub	sp, #64	; 0x40
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	603b      	str	r3, [r7, #0]
 80056ce:	f3ef 8311 	mrs	r3, BASEPRI
 80056d2:	f04f 0120 	mov.w	r1, #32
 80056d6:	f381 8811 	msr	BASEPRI, r1
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	4840      	ldr	r0, [pc, #256]	; (80057e0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80056de:	f7ff fcca 	bl	8005076 <_PreparePacket>
 80056e2:	61b8      	str	r0, [r7, #24]
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f0:	e00b      	b.n	800570a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
 8005728:	e00b      	b.n	8005742 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	b2da      	uxtb	r2, r3
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	6379      	str	r1, [r7, #52]	; 0x34
 8005734:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	09db      	lsrs	r3, r3, #7
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	2b7f      	cmp	r3, #127	; 0x7f
 8005746:	d8f0      	bhi.n	800572a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	637a      	str	r2, [r7, #52]	; 0x34
 800574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005760:	e00b      	b.n	800577a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	1c59      	adds	r1, r3, #1
 800576a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800576c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	09db      	lsrs	r3, r3, #7
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	2b7f      	cmp	r3, #127	; 0x7f
 800577e:	d8f0      	bhi.n	8005762 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	e00b      	b.n	80057b2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	1c59      	adds	r1, r3, #1
 80057a2:	6279      	str	r1, [r7, #36]	; 0x24
 80057a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	623b      	str	r3, [r7, #32]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	2b7f      	cmp	r3, #127	; 0x7f
 80057b6:	d8f0      	bhi.n	800579a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	627a      	str	r2, [r7, #36]	; 0x24
 80057be:	6a3a      	ldr	r2, [r7, #32]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	6979      	ldr	r1, [r7, #20]
 80057cc:	69b8      	ldr	r0, [r7, #24]
 80057ce:	f7ff fd2b 	bl	8005228 <_SendPacket>
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	bf00      	nop
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20015600 	.word	0x20015600

080057e4 <SEGGER_SYSVIEW_Start>:
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08c      	sub	sp, #48	; 0x30
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4b57      	ldr	r3, [pc, #348]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	f3ef 8311 	mrs	r3, BASEPRI
 80057f4:	f04f 0120 	mov.w	r1, #32
 80057f8:	f381 8811 	msr	BASEPRI, r1
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	220a      	movs	r2, #10
 8005800:	4952      	ldr	r1, [pc, #328]	; (800594c <SEGGER_SYSVIEW_Start+0x168>)
 8005802:	2001      	movs	r0, #1
 8005804:	f7fa fcf4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	200a      	movs	r0, #10
 8005810:	f7ff fe2c 	bl	800546c <SEGGER_SYSVIEW_RecordVoid>
 8005814:	f3ef 8311 	mrs	r3, BASEPRI
 8005818:	f04f 0120 	mov.w	r1, #32
 800581c:	f381 8811 	msr	BASEPRI, r1
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	484b      	ldr	r0, [pc, #300]	; (8005950 <SEGGER_SYSVIEW_Start+0x16c>)
 8005824:	f7ff fc27 	bl	8005076 <_PreparePacket>
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005832:	4b45      	ldr	r3, [pc, #276]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
 8005838:	e00b      	b.n	8005852 <SEGGER_SYSVIEW_Start+0x6e>
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	1c59      	adds	r1, r3, #1
 8005842:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	09db      	lsrs	r3, r3, #7
 8005850:	62bb      	str	r3, [r7, #40]	; 0x28
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	2b7f      	cmp	r3, #127	; 0x7f
 8005856:	d8f0      	bhi.n	800583a <SEGGER_SYSVIEW_Start+0x56>
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800585e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
 800586c:	4b36      	ldr	r3, [pc, #216]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	e00b      	b.n	800588c <SEGGER_SYSVIEW_Start+0xa8>
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1c59      	adds	r1, r3, #1
 800587c:	6279      	str	r1, [r7, #36]	; 0x24
 800587e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	09db      	lsrs	r3, r3, #7
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b7f      	cmp	r3, #127	; 0x7f
 8005890:	d8f0      	bhi.n	8005874 <SEGGER_SYSVIEW_Start+0x90>
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	627a      	str	r2, [r7, #36]	; 0x24
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e00b      	b.n	80058c6 <SEGGER_SYSVIEW_Start+0xe2>
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	1c59      	adds	r1, r3, #1
 80058b6:	61f9      	str	r1, [r7, #28]
 80058b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	09db      	lsrs	r3, r3, #7
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b7f      	cmp	r3, #127	; 0x7f
 80058ca:	d8f0      	bhi.n	80058ae <SEGGER_SYSVIEW_Start+0xca>
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	2302      	movs	r3, #2
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e00b      	b.n	80058fe <SEGGER_SYSVIEW_Start+0x11a>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	6179      	str	r1, [r7, #20]
 80058f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b7f      	cmp	r3, #127	; 0x7f
 8005902:	d8f0      	bhi.n	80058e6 <SEGGER_SYSVIEW_Start+0x102>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	617a      	str	r2, [r7, #20]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	2218      	movs	r2, #24
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff fc85 	bl	8005228 <_SendPacket>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <SEGGER_SYSVIEW_Start+0x14e>
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <SEGGER_SYSVIEW_Start+0x164>)
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	4798      	blx	r3
 8005932:	f000 f9ed 	bl	8005d10 <SEGGER_SYSVIEW_RecordSystime>
 8005936:	f000 f9b3 	bl	8005ca0 <SEGGER_SYSVIEW_SendTaskList>
 800593a:	f000 fc8b 	bl	8006254 <SEGGER_SYSVIEW_SendNumModules>
 800593e:	bf00      	nop
 8005940:	3730      	adds	r7, #48	; 0x30
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200155d0 	.word	0x200155d0
 800594c:	08006dfc 	.word	0x08006dfc
 8005950:	20015600 	.word	0x20015600

08005954 <SEGGER_SYSVIEW_Stop>:
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	f3ef 8311 	mrs	r3, BASEPRI
 800595e:	f04f 0120 	mov.w	r1, #32
 8005962:	f381 8811 	msr	BASEPRI, r1
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	480b      	ldr	r0, [pc, #44]	; (8005998 <SEGGER_SYSVIEW_Stop+0x44>)
 800596a:	f7ff fb84 	bl	8005076 <_PreparePacket>
 800596e:	6038      	str	r0, [r7, #0]
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <SEGGER_SYSVIEW_Stop+0x48>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <SEGGER_SYSVIEW_Stop+0x34>
 8005978:	220b      	movs	r2, #11
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6838      	ldr	r0, [r7, #0]
 800597e:	f7ff fc53 	bl	8005228 <_SendPacket>
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <SEGGER_SYSVIEW_Stop+0x48>)
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20015600 	.word	0x20015600
 800599c:	200155d0 	.word	0x200155d0

080059a0 <SEGGER_SYSVIEW_GetSysDesc>:
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	f3ef 8311 	mrs	r3, BASEPRI
 80059aa:	f04f 0120 	mov.w	r1, #32
 80059ae:	f381 8811 	msr	BASEPRI, r1
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	4845      	ldr	r0, [pc, #276]	; (8005acc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059b6:	f7ff fb5e 	bl	8005076 <_PreparePacket>
 80059ba:	60b8      	str	r0, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	607b      	str	r3, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c4:	4b42      	ldr	r3, [pc, #264]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ca:	e00b      	b.n	80059e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	09db      	lsrs	r3, r3, #7
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2b7f      	cmp	r3, #127	; 0x7f
 80059e8:	d8f0      	bhi.n	80059cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	e00b      	b.n	8005a1e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	09db      	lsrs	r3, r3, #7
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b7f      	cmp	r3, #127	; 0x7f
 8005a22:	d8f0      	bhi.n	8005a06 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	627a      	str	r2, [r7, #36]	; 0x24
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	607b      	str	r3, [r7, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e00b      	b.n	8005a58 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	61f9      	str	r1, [r7, #28]
 8005a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	09db      	lsrs	r3, r3, #7
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5c:	d8f0      	bhi.n	8005a40 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	61fa      	str	r2, [r7, #28]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	2302      	movs	r3, #2
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	e00b      	b.n	8005a90 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	6179      	str	r1, [r7, #20]
 8005a82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b7f      	cmp	r3, #127	; 0x7f
 8005a94:	d8f0      	bhi.n	8005a78 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	617a      	str	r2, [r7, #20]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	2218      	movs	r2, #24
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f7ff fbbc 	bl	8005228 <_SendPacket>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	4798      	blx	r3
 8005ac4:	bf00      	nop
 8005ac6:	3730      	adds	r7, #48	; 0x30
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20015600 	.word	0x20015600
 8005ad0:	200155d0 	.word	0x200155d0

08005ad4 <SEGGER_SYSVIEW_SendTaskInfo>:
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b092      	sub	sp, #72	; 0x48
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae0:	f04f 0120 	mov.w	r1, #32
 8005ae4:	f381 8811 	msr	BASEPRI, r1
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	486b      	ldr	r0, [pc, #428]	; (8005c98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005aec:	f7ff fac3 	bl	8005076 <_PreparePacket>
 8005af0:	6138      	str	r0, [r7, #16]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	647b      	str	r3, [r7, #68]	; 0x44
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4b67      	ldr	r3, [pc, #412]	; (8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	643b      	str	r3, [r7, #64]	; 0x40
 8005b08:	e00b      	b.n	8005b22 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8005b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	6479      	str	r1, [r7, #68]	; 0x44
 8005b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	09db      	lsrs	r3, r3, #7
 8005b20:	643b      	str	r3, [r7, #64]	; 0x40
 8005b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b24:	2b7f      	cmp	r3, #127	; 0x7f
 8005b26:	d8f0      	bhi.n	8005b0a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	647a      	str	r2, [r7, #68]	; 0x44
 8005b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	4619      	mov	r1, r3
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f7ff fa2e 	bl	8004fdc <_EncodeStr>
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	2209      	movs	r2, #9
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	6938      	ldr	r0, [r7, #16]
 8005b88:	f7ff fb4e 	bl	8005228 <_SendPacket>
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	637b      	str	r3, [r7, #52]	; 0x34
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	4b40      	ldr	r3, [pc, #256]	; (8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba2:	e00b      	b.n	8005bbc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	1c59      	adds	r1, r3, #1
 8005bac:	6379      	str	r1, [r7, #52]	; 0x34
 8005bae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	09db      	lsrs	r3, r3, #7
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc0:	d8f0      	bhi.n	8005ba4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	637a      	str	r2, [r7, #52]	; 0x34
 8005bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bdc:	e00b      	b.n	8005bf6 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005be8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	09db      	lsrs	r3, r3, #7
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bfa:	d8f0      	bhi.n	8005bde <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	e00b      	b.n	8005c30 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	1c59      	adds	r1, r3, #1
 8005c20:	6279      	str	r1, [r7, #36]	; 0x24
 8005c22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	09db      	lsrs	r3, r3, #7
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	2b7f      	cmp	r3, #127	; 0x7f
 8005c34:	d8f0      	bhi.n	8005c18 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	e00b      	b.n	8005c68 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	61f9      	str	r1, [r7, #28]
 8005c5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	09db      	lsrs	r3, r3, #7
 8005c66:	61bb      	str	r3, [r7, #24]
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6c:	d8f0      	bhi.n	8005c50 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	61fa      	str	r2, [r7, #28]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	2215      	movs	r2, #21
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f7ff fad0 	bl	8005228 <_SendPacket>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	bf00      	nop
 8005c90:	3748      	adds	r7, #72	; 0x48
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20015600 	.word	0x20015600
 8005c9c:	200155d0 	.word	0x200155d0

08005ca0 <SEGGER_SYSVIEW_SendTaskList>:
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005cb6:	4b03      	ldr	r3, [pc, #12]	; (8005cc4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4798      	blx	r3
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	200155d0 	.word	0x200155d0

08005cc8 <SEGGER_SYSVIEW_SendSysDesc>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	f04f 0120 	mov.w	r1, #32
 8005cd8:	f381 8811 	msr	BASEPRI, r1
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	480b      	ldr	r0, [pc, #44]	; (8005d0c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ce0:	f7ff f9c9 	bl	8005076 <_PreparePacket>
 8005ce4:	6138      	str	r0, [r7, #16]
 8005ce6:	2280      	movs	r2, #128	; 0x80
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6938      	ldr	r0, [r7, #16]
 8005cec:	f7ff f976 	bl	8004fdc <_EncodeStr>
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	220e      	movs	r2, #14
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	6938      	ldr	r0, [r7, #16]
 8005cf8:	f7ff fa96 	bl	8005228 <_SendPacket>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	bf00      	nop
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20015600 	.word	0x20015600

08005d10 <SEGGER_SYSVIEW_RecordSystime>:
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d019      	beq.n	8005d52 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005d1e:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d014      	beq.n	8005d52 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005d28:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4798      	blx	r3
 8005d30:	e9c7 0100 	strd	r0, r1, [r7]
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	0013      	movs	r3, r2
 8005d44:	2400      	movs	r4, #0
 8005d46:	461a      	mov	r2, r3
 8005d48:	4601      	mov	r1, r0
 8005d4a:	200d      	movs	r0, #13
 8005d4c:	f7ff fbe8 	bl	8005520 <SEGGER_SYSVIEW_RecordU32x2>
 8005d50:	e005      	b.n	8005d5e <SEGGER_SYSVIEW_RecordSystime+0x4e>
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4619      	mov	r1, r3
 8005d58:	200c      	movs	r0, #12
 8005d5a:	f7ff fba5 	bl	80054a8 <SEGGER_SYSVIEW_RecordU32>
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd90      	pop	{r4, r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200155d0 	.word	0x200155d0
 8005d6c:	e0001004 	.word	0xe0001004

08005d70 <SEGGER_SYSVIEW_RecordEnterISR>:
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	f3ef 8311 	mrs	r3, BASEPRI
 8005d7a:	f04f 0120 	mov.w	r1, #32
 8005d7e:	f381 8811 	msr	BASEPRI, r1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	4819      	ldr	r0, [pc, #100]	; (8005dec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d86:	f7ff f976 	bl	8005076 <_PreparePacket>
 8005d8a:	60b8      	str	r0, [r7, #8]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e00b      	b.n	8005dbc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6179      	str	r1, [r7, #20]
 8005dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	09db      	lsrs	r3, r3, #7
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc0:	d8f0      	bhi.n	8005da4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	617a      	str	r2, [r7, #20]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68b8      	ldr	r0, [r7, #8]
 8005dd8:	f7ff fa26 	bl	8005228 <_SendPacket>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20015600 	.word	0x20015600
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <SEGGER_SYSVIEW_RecordExitISR>:
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfe:	f04f 0120 	mov.w	r1, #32
 8005e02:	f381 8811 	msr	BASEPRI, r1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	4807      	ldr	r0, [pc, #28]	; (8005e28 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e0a:	f7ff f934 	bl	8005076 <_PreparePacket>
 8005e0e:	6038      	str	r0, [r7, #0]
 8005e10:	2203      	movs	r2, #3
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6838      	ldr	r0, [r7, #0]
 8005e16:	f7ff fa07 	bl	8005228 <_SendPacket>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20015600 	.word	0x20015600

08005e2c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	f04f 0120 	mov.w	r1, #32
 8005e3a:	f381 8811 	msr	BASEPRI, r1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	4807      	ldr	r0, [pc, #28]	; (8005e60 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e42:	f7ff f918 	bl	8005076 <_PreparePacket>
 8005e46:	6038      	str	r0, [r7, #0]
 8005e48:	2212      	movs	r2, #18
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff f9eb 	bl	8005228 <_SendPacket>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20015600 	.word	0x20015600

08005e64 <SEGGER_SYSVIEW_OnIdle>:
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6e:	f04f 0120 	mov.w	r1, #32
 8005e72:	f381 8811 	msr	BASEPRI, r1
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	4807      	ldr	r0, [pc, #28]	; (8005e98 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005e7a:	f7ff f8fc 	bl	8005076 <_PreparePacket>
 8005e7e:	6038      	str	r0, [r7, #0]
 8005e80:	2211      	movs	r2, #17
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f7ff f9cf 	bl	8005228 <_SendPacket>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20015600 	.word	0x20015600

08005e9c <SEGGER_SYSVIEW_OnTaskCreate>:
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea8:	f04f 0120 	mov.w	r1, #32
 8005eac:	f381 8811 	msr	BASEPRI, r1
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	481a      	ldr	r0, [pc, #104]	; (8005f1c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005eb4:	f7ff f8df 	bl	8005076 <_PreparePacket>
 8005eb8:	6138      	str	r0, [r7, #16]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	4b18      	ldr	r3, [pc, #96]	; (8005f20 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e00b      	b.n	8005eec <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	61f9      	str	r1, [r7, #28]
 8005ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	09db      	lsrs	r3, r3, #7
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef0:	d8f0      	bhi.n	8005ed4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	61fa      	str	r2, [r7, #28]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	2208      	movs	r2, #8
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	6938      	ldr	r0, [r7, #16]
 8005f08:	f7ff f98e 	bl	8005228 <_SendPacket>
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	bf00      	nop
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20015600 	.word	0x20015600
 8005f20:	200155d0 	.word	0x200155d0

08005f24 <SEGGER_SYSVIEW_OnTaskStartExec>:
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f30:	f04f 0120 	mov.w	r1, #32
 8005f34:	f381 8811 	msr	BASEPRI, r1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	481a      	ldr	r0, [pc, #104]	; (8005fa4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f3c:	f7ff f89b 	bl	8005076 <_PreparePacket>
 8005f40:	6138      	str	r0, [r7, #16]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	e00b      	b.n	8005f74 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	61f9      	str	r1, [r7, #28]
 8005f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	2b7f      	cmp	r3, #127	; 0x7f
 8005f78:	d8f0      	bhi.n	8005f5c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	61fa      	str	r2, [r7, #28]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	6938      	ldr	r0, [r7, #16]
 8005f90:	f7ff f94a 	bl	8005228 <_SendPacket>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	bf00      	nop
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20015600 	.word	0x20015600
 8005fa8:	200155d0 	.word	0x200155d0

08005fac <SEGGER_SYSVIEW_OnTaskStartReady>:
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb8:	f04f 0120 	mov.w	r1, #32
 8005fbc:	f381 8811 	msr	BASEPRI, r1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	481a      	ldr	r0, [pc, #104]	; (800602c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005fc4:	f7ff f857 	bl	8005076 <_PreparePacket>
 8005fc8:	6138      	str	r0, [r7, #16]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	089b      	lsrs	r3, r3, #2
 8005fd8:	607b      	str	r3, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e00b      	b.n	8005ffc <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	61f9      	str	r1, [r7, #28]
 8005fee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	09db      	lsrs	r3, r3, #7
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8006000:	d8f0      	bhi.n	8005fe4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	61fa      	str	r2, [r7, #28]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	2206      	movs	r2, #6
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	6938      	ldr	r0, [r7, #16]
 8006018:	f7ff f906 	bl	8005228 <_SendPacket>
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	bf00      	nop
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20015600 	.word	0x20015600
 8006030:	200155d0 	.word	0x200155d0

08006034 <SEGGER_SYSVIEW_OnTaskStopReady>:
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
 800603e:	f3ef 8311 	mrs	r3, BASEPRI
 8006042:	f04f 0120 	mov.w	r1, #32
 8006046:	f381 8811 	msr	BASEPRI, r1
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	4827      	ldr	r0, [pc, #156]	; (80060ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800604e:	f7ff f812 	bl	8005076 <_PreparePacket>
 8006052:	6138      	str	r0, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	4b25      	ldr	r3, [pc, #148]	; (80060f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	e00b      	b.n	8006086 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	6279      	str	r1, [r7, #36]	; 0x24
 8006078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	09db      	lsrs	r3, r3, #7
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	2b7f      	cmp	r3, #127	; 0x7f
 800608a:	d8f0      	bhi.n	800606e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	627a      	str	r2, [r7, #36]	; 0x24
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e00b      	b.n	80060be <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	1c59      	adds	r1, r3, #1
 80060ae:	61f9      	str	r1, [r7, #28]
 80060b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	61bb      	str	r3, [r7, #24]
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b7f      	cmp	r3, #127	; 0x7f
 80060c2:	d8f0      	bhi.n	80060a6 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	61fa      	str	r2, [r7, #28]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	2207      	movs	r2, #7
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	6938      	ldr	r0, [r7, #16]
 80060da:	f7ff f8a5 	bl	8005228 <_SendPacket>
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	bf00      	nop
 80060e6:	3728      	adds	r7, #40	; 0x28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20015600 	.word	0x20015600
 80060f0:	200155d0 	.word	0x200155d0

080060f4 <SEGGER_SYSVIEW_ShrinkId>:
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	089b      	lsrs	r3, r3, #2
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	200155d0 	.word	0x200155d0

08006118 <SEGGER_SYSVIEW_SendModule>:
 8006118:	b580      	push	{r7, lr}
 800611a:	b08c      	sub	sp, #48	; 0x30
 800611c:	af00      	add	r7, sp, #0
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d06d      	beq.n	8006206 <SEGGER_SYSVIEW_SendModule+0xee>
 800612a:	4b39      	ldr	r3, [pc, #228]	; (8006210 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006130:	2300      	movs	r3, #0
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
 8006134:	e008      	b.n	8006148 <SEGGER_SYSVIEW_SendModule+0x30>
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <SEGGER_SYSVIEW_SendModule+0x3a>
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	3301      	adds	r3, #1
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614c:	429a      	cmp	r2, r3
 800614e:	d3f2      	bcc.n	8006136 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006150:	e000      	b.n	8006154 <SEGGER_SYSVIEW_SendModule+0x3c>
 8006152:	bf00      	nop
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2b00      	cmp	r3, #0
 8006158:	d055      	beq.n	8006206 <SEGGER_SYSVIEW_SendModule+0xee>
 800615a:	f3ef 8311 	mrs	r3, BASEPRI
 800615e:	f04f 0120 	mov.w	r1, #32
 8006162:	f381 8811 	msr	BASEPRI, r1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	482a      	ldr	r0, [pc, #168]	; (8006214 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800616a:	f7fe ff84 	bl	8005076 <_PreparePacket>
 800616e:	6138      	str	r0, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	e00b      	b.n	8006196 <SEGGER_SYSVIEW_SendModule+0x7e>
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	1c59      	adds	r1, r3, #1
 8006186:	6279      	str	r1, [r7, #36]	; 0x24
 8006188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	09db      	lsrs	r3, r3, #7
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	2b7f      	cmp	r3, #127	; 0x7f
 800619a:	d8f0      	bhi.n	800617e <SEGGER_SYSVIEW_SendModule+0x66>
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	627a      	str	r2, [r7, #36]	; 0x24
 80061a2:	6a3a      	ldr	r2, [r7, #32]
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	61fb      	str	r3, [r7, #28]
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	61f9      	str	r1, [r7, #28]
 80061c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b7f      	cmp	r3, #127	; 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	61fa      	str	r2, [r7, #28]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	4619      	mov	r1, r3
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7fe fef4 	bl	8004fdc <_EncodeStr>
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	2216      	movs	r2, #22
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f7ff f814 	bl	8005228 <_SendPacket>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	bf00      	nop
 8006208:	3730      	adds	r7, #48	; 0x30
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	200155f8 	.word	0x200155f8
 8006214:	20015600 	.word	0x20015600

08006218 <SEGGER_SYSVIEW_SendModuleDescription>:
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4798      	blx	r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f2      	bne.n	800622c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	200155f8 	.word	0x200155f8

08006254 <SEGGER_SYSVIEW_SendNumModules>:
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	f3ef 8311 	mrs	r3, BASEPRI
 800625e:	f04f 0120 	mov.w	r1, #32
 8006262:	f381 8811 	msr	BASEPRI, r1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	4817      	ldr	r0, [pc, #92]	; (80062c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800626a:	f7fe ff04 	bl	8005076 <_PreparePacket>
 800626e:	60b8      	str	r0, [r7, #8]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	4b14      	ldr	r3, [pc, #80]	; (80062cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	e00b      	b.n	8006298 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	b2da      	uxtb	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	6179      	str	r1, [r7, #20]
 800628a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b7f      	cmp	r3, #127	; 0x7f
 800629c:	d8f0      	bhi.n	8006280 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	617a      	str	r2, [r7, #20]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	221b      	movs	r2, #27
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	f7fe ffb8 	bl	8005228 <_SendPacket>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20015600 	.word	0x20015600
 80062cc:	200155fc 	.word	0x200155fc

080062d0 <SEGGER_SYSVIEW_Warn>:
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	f3ef 8311 	mrs	r3, BASEPRI
 80062dc:	f04f 0120 	mov.w	r1, #32
 80062e0:	f381 8811 	msr	BASEPRI, r1
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	4827      	ldr	r0, [pc, #156]	; (8006384 <SEGGER_SYSVIEW_Warn+0xb4>)
 80062e8:	f7fe fec5 	bl	8005076 <_PreparePacket>
 80062ec:	6138      	str	r0, [r7, #16]
 80062ee:	2280      	movs	r2, #128	; 0x80
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f7fe fe72 	bl	8004fdc <_EncodeStr>
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	2301      	movs	r3, #1
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	e00b      	b.n	800631c <SEGGER_SYSVIEW_Warn+0x4c>
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	1c59      	adds	r1, r3, #1
 800630c:	6279      	str	r1, [r7, #36]	; 0x24
 800630e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	623b      	str	r3, [r7, #32]
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	2b7f      	cmp	r3, #127	; 0x7f
 8006320:	d8f0      	bhi.n	8006304 <SEGGER_SYSVIEW_Warn+0x34>
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	627a      	str	r2, [r7, #36]	; 0x24
 8006328:	6a3a      	ldr	r2, [r7, #32]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e00b      	b.n	8006354 <SEGGER_SYSVIEW_Warn+0x84>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	61f9      	str	r1, [r7, #28]
 8006346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	09db      	lsrs	r3, r3, #7
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b7f      	cmp	r3, #127	; 0x7f
 8006358:	d8f0      	bhi.n	800633c <SEGGER_SYSVIEW_Warn+0x6c>
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	61fa      	str	r2, [r7, #28]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	221a      	movs	r2, #26
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f7fe ff5a 	bl	8005228 <_SendPacket>
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	bf00      	nop
 800637c:	3728      	adds	r7, #40	; 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20015600 	.word	0x20015600

08006388 <__errno>:
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <__errno+0x8>)
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000010 	.word	0x20000010

08006394 <__libc_init_array>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4e0d      	ldr	r6, [pc, #52]	; (80063cc <__libc_init_array+0x38>)
 8006398:	4c0d      	ldr	r4, [pc, #52]	; (80063d0 <__libc_init_array+0x3c>)
 800639a:	1ba4      	subs	r4, r4, r6
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	2500      	movs	r5, #0
 80063a0:	42a5      	cmp	r5, r4
 80063a2:	d109      	bne.n	80063b8 <__libc_init_array+0x24>
 80063a4:	4e0b      	ldr	r6, [pc, #44]	; (80063d4 <__libc_init_array+0x40>)
 80063a6:	4c0c      	ldr	r4, [pc, #48]	; (80063d8 <__libc_init_array+0x44>)
 80063a8:	f000 fc36 	bl	8006c18 <_init>
 80063ac:	1ba4      	subs	r4, r4, r6
 80063ae:	10a4      	asrs	r4, r4, #2
 80063b0:	2500      	movs	r5, #0
 80063b2:	42a5      	cmp	r5, r4
 80063b4:	d105      	bne.n	80063c2 <__libc_init_array+0x2e>
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063bc:	4798      	blx	r3
 80063be:	3501      	adds	r5, #1
 80063c0:	e7ee      	b.n	80063a0 <__libc_init_array+0xc>
 80063c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063c6:	4798      	blx	r3
 80063c8:	3501      	adds	r5, #1
 80063ca:	e7f2      	b.n	80063b2 <__libc_init_array+0x1e>
 80063cc:	08006e44 	.word	0x08006e44
 80063d0:	08006e44 	.word	0x08006e44
 80063d4:	08006e44 	.word	0x08006e44
 80063d8:	08006e48 	.word	0x08006e48

080063dc <memcmp>:
 80063dc:	b530      	push	{r4, r5, lr}
 80063de:	2400      	movs	r4, #0
 80063e0:	42a2      	cmp	r2, r4
 80063e2:	d101      	bne.n	80063e8 <memcmp+0xc>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e007      	b.n	80063f8 <memcmp+0x1c>
 80063e8:	5d03      	ldrb	r3, [r0, r4]
 80063ea:	3401      	adds	r4, #1
 80063ec:	190d      	adds	r5, r1, r4
 80063ee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	d0f4      	beq.n	80063e0 <memcmp+0x4>
 80063f6:	1b58      	subs	r0, r3, r5
 80063f8:	bd30      	pop	{r4, r5, pc}

080063fa <memcpy>:
 80063fa:	b510      	push	{r4, lr}
 80063fc:	1e43      	subs	r3, r0, #1
 80063fe:	440a      	add	r2, r1
 8006400:	4291      	cmp	r1, r2
 8006402:	d100      	bne.n	8006406 <memcpy+0xc>
 8006404:	bd10      	pop	{r4, pc}
 8006406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800640a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800640e:	e7f7      	b.n	8006400 <memcpy+0x6>

08006410 <memset>:
 8006410:	4402      	add	r2, r0
 8006412:	4603      	mov	r3, r0
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <memset+0xa>
 8006418:	4770      	bx	lr
 800641a:	f803 1b01 	strb.w	r1, [r3], #1
 800641e:	e7f9      	b.n	8006414 <memset+0x4>

08006420 <siprintf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	b500      	push	{lr}
 8006424:	b09c      	sub	sp, #112	; 0x70
 8006426:	ab1d      	add	r3, sp, #116	; 0x74
 8006428:	9002      	str	r0, [sp, #8]
 800642a:	9006      	str	r0, [sp, #24]
 800642c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006430:	4809      	ldr	r0, [pc, #36]	; (8006458 <siprintf+0x38>)
 8006432:	9107      	str	r1, [sp, #28]
 8006434:	9104      	str	r1, [sp, #16]
 8006436:	4909      	ldr	r1, [pc, #36]	; (800645c <siprintf+0x3c>)
 8006438:	f853 2b04 	ldr.w	r2, [r3], #4
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	a902      	add	r1, sp, #8
 8006444:	f000 f866 	bl	8006514 <_svfiprintf_r>
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	b01c      	add	sp, #112	; 0x70
 8006450:	f85d eb04 	ldr.w	lr, [sp], #4
 8006454:	b003      	add	sp, #12
 8006456:	4770      	bx	lr
 8006458:	20000010 	.word	0x20000010
 800645c:	ffff0208 	.word	0xffff0208

08006460 <__ssputs_r>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	688e      	ldr	r6, [r1, #8]
 8006466:	429e      	cmp	r6, r3
 8006468:	4682      	mov	sl, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4690      	mov	r8, r2
 800646e:	4699      	mov	r9, r3
 8006470:	d837      	bhi.n	80064e2 <__ssputs_r+0x82>
 8006472:	898a      	ldrh	r2, [r1, #12]
 8006474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006478:	d031      	beq.n	80064de <__ssputs_r+0x7e>
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	6909      	ldr	r1, [r1, #16]
 800647e:	1a6f      	subs	r7, r5, r1
 8006480:	6965      	ldr	r5, [r4, #20]
 8006482:	2302      	movs	r3, #2
 8006484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006488:	fb95 f5f3 	sdiv	r5, r5, r3
 800648c:	f109 0301 	add.w	r3, r9, #1
 8006490:	443b      	add	r3, r7
 8006492:	429d      	cmp	r5, r3
 8006494:	bf38      	it	cc
 8006496:	461d      	movcc	r5, r3
 8006498:	0553      	lsls	r3, r2, #21
 800649a:	d530      	bpl.n	80064fe <__ssputs_r+0x9e>
 800649c:	4629      	mov	r1, r5
 800649e:	f000 fb21 	bl	8006ae4 <_malloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	b950      	cbnz	r0, 80064bc <__ssputs_r+0x5c>
 80064a6:	230c      	movs	r3, #12
 80064a8:	f8ca 3000 	str.w	r3, [sl]
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	463a      	mov	r2, r7
 80064be:	6921      	ldr	r1, [r4, #16]
 80064c0:	f7ff ff9b 	bl	80063fa <memcpy>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	6126      	str	r6, [r4, #16]
 80064d2:	6165      	str	r5, [r4, #20]
 80064d4:	443e      	add	r6, r7
 80064d6:	1bed      	subs	r5, r5, r7
 80064d8:	6026      	str	r6, [r4, #0]
 80064da:	60a5      	str	r5, [r4, #8]
 80064dc:	464e      	mov	r6, r9
 80064de:	454e      	cmp	r6, r9
 80064e0:	d900      	bls.n	80064e4 <__ssputs_r+0x84>
 80064e2:	464e      	mov	r6, r9
 80064e4:	4632      	mov	r2, r6
 80064e6:	4641      	mov	r1, r8
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	f000 fa93 	bl	8006a14 <memmove>
 80064ee:	68a3      	ldr	r3, [r4, #8]
 80064f0:	1b9b      	subs	r3, r3, r6
 80064f2:	60a3      	str	r3, [r4, #8]
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	441e      	add	r6, r3
 80064f8:	6026      	str	r6, [r4, #0]
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7dc      	b.n	80064b8 <__ssputs_r+0x58>
 80064fe:	462a      	mov	r2, r5
 8006500:	f000 fb4a 	bl	8006b98 <_realloc_r>
 8006504:	4606      	mov	r6, r0
 8006506:	2800      	cmp	r0, #0
 8006508:	d1e2      	bne.n	80064d0 <__ssputs_r+0x70>
 800650a:	6921      	ldr	r1, [r4, #16]
 800650c:	4650      	mov	r0, sl
 800650e:	f000 fa9b 	bl	8006a48 <_free_r>
 8006512:	e7c8      	b.n	80064a6 <__ssputs_r+0x46>

08006514 <_svfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	461d      	mov	r5, r3
 800651a:	898b      	ldrh	r3, [r1, #12]
 800651c:	061f      	lsls	r7, r3, #24
 800651e:	b09d      	sub	sp, #116	; 0x74
 8006520:	4680      	mov	r8, r0
 8006522:	460c      	mov	r4, r1
 8006524:	4616      	mov	r6, r2
 8006526:	d50f      	bpl.n	8006548 <_svfiprintf_r+0x34>
 8006528:	690b      	ldr	r3, [r1, #16]
 800652a:	b96b      	cbnz	r3, 8006548 <_svfiprintf_r+0x34>
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	f000 fad9 	bl	8006ae4 <_malloc_r>
 8006532:	6020      	str	r0, [r4, #0]
 8006534:	6120      	str	r0, [r4, #16]
 8006536:	b928      	cbnz	r0, 8006544 <_svfiprintf_r+0x30>
 8006538:	230c      	movs	r3, #12
 800653a:	f8c8 3000 	str.w	r3, [r8]
 800653e:	f04f 30ff 	mov.w	r0, #4294967295
 8006542:	e0c8      	b.n	80066d6 <_svfiprintf_r+0x1c2>
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	6163      	str	r3, [r4, #20]
 8006548:	2300      	movs	r3, #0
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	2320      	movs	r3, #32
 800654e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006552:	2330      	movs	r3, #48	; 0x30
 8006554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006558:	9503      	str	r5, [sp, #12]
 800655a:	f04f 0b01 	mov.w	fp, #1
 800655e:	4637      	mov	r7, r6
 8006560:	463d      	mov	r5, r7
 8006562:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006566:	b10b      	cbz	r3, 800656c <_svfiprintf_r+0x58>
 8006568:	2b25      	cmp	r3, #37	; 0x25
 800656a:	d13e      	bne.n	80065ea <_svfiprintf_r+0xd6>
 800656c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006570:	d00b      	beq.n	800658a <_svfiprintf_r+0x76>
 8006572:	4653      	mov	r3, sl
 8006574:	4632      	mov	r2, r6
 8006576:	4621      	mov	r1, r4
 8006578:	4640      	mov	r0, r8
 800657a:	f7ff ff71 	bl	8006460 <__ssputs_r>
 800657e:	3001      	adds	r0, #1
 8006580:	f000 80a4 	beq.w	80066cc <_svfiprintf_r+0x1b8>
 8006584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006586:	4453      	add	r3, sl
 8006588:	9309      	str	r3, [sp, #36]	; 0x24
 800658a:	783b      	ldrb	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 809d 	beq.w	80066cc <_svfiprintf_r+0x1b8>
 8006592:	2300      	movs	r3, #0
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659c:	9304      	str	r3, [sp, #16]
 800659e:	9307      	str	r3, [sp, #28]
 80065a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a4:	931a      	str	r3, [sp, #104]	; 0x68
 80065a6:	462f      	mov	r7, r5
 80065a8:	2205      	movs	r2, #5
 80065aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065ae:	4850      	ldr	r0, [pc, #320]	; (80066f0 <_svfiprintf_r+0x1dc>)
 80065b0:	f7f9 fe6e 	bl	8000290 <memchr>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	b9d0      	cbnz	r0, 80065ee <_svfiprintf_r+0xda>
 80065b8:	06d9      	lsls	r1, r3, #27
 80065ba:	bf44      	itt	mi
 80065bc:	2220      	movmi	r2, #32
 80065be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065c2:	071a      	lsls	r2, r3, #28
 80065c4:	bf44      	itt	mi
 80065c6:	222b      	movmi	r2, #43	; 0x2b
 80065c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065cc:	782a      	ldrb	r2, [r5, #0]
 80065ce:	2a2a      	cmp	r2, #42	; 0x2a
 80065d0:	d015      	beq.n	80065fe <_svfiprintf_r+0xea>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	462f      	mov	r7, r5
 80065d6:	2000      	movs	r0, #0
 80065d8:	250a      	movs	r5, #10
 80065da:	4639      	mov	r1, r7
 80065dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e0:	3b30      	subs	r3, #48	; 0x30
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	d94d      	bls.n	8006682 <_svfiprintf_r+0x16e>
 80065e6:	b1b8      	cbz	r0, 8006618 <_svfiprintf_r+0x104>
 80065e8:	e00f      	b.n	800660a <_svfiprintf_r+0xf6>
 80065ea:	462f      	mov	r7, r5
 80065ec:	e7b8      	b.n	8006560 <_svfiprintf_r+0x4c>
 80065ee:	4a40      	ldr	r2, [pc, #256]	; (80066f0 <_svfiprintf_r+0x1dc>)
 80065f0:	1a80      	subs	r0, r0, r2
 80065f2:	fa0b f000 	lsl.w	r0, fp, r0
 80065f6:	4318      	orrs	r0, r3
 80065f8:	9004      	str	r0, [sp, #16]
 80065fa:	463d      	mov	r5, r7
 80065fc:	e7d3      	b.n	80065a6 <_svfiprintf_r+0x92>
 80065fe:	9a03      	ldr	r2, [sp, #12]
 8006600:	1d11      	adds	r1, r2, #4
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	9103      	str	r1, [sp, #12]
 8006606:	2a00      	cmp	r2, #0
 8006608:	db01      	blt.n	800660e <_svfiprintf_r+0xfa>
 800660a:	9207      	str	r2, [sp, #28]
 800660c:	e004      	b.n	8006618 <_svfiprintf_r+0x104>
 800660e:	4252      	negs	r2, r2
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	9207      	str	r2, [sp, #28]
 8006616:	9304      	str	r3, [sp, #16]
 8006618:	783b      	ldrb	r3, [r7, #0]
 800661a:	2b2e      	cmp	r3, #46	; 0x2e
 800661c:	d10c      	bne.n	8006638 <_svfiprintf_r+0x124>
 800661e:	787b      	ldrb	r3, [r7, #1]
 8006620:	2b2a      	cmp	r3, #42	; 0x2a
 8006622:	d133      	bne.n	800668c <_svfiprintf_r+0x178>
 8006624:	9b03      	ldr	r3, [sp, #12]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	9203      	str	r2, [sp, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	bfb8      	it	lt
 8006630:	f04f 33ff 	movlt.w	r3, #4294967295
 8006634:	3702      	adds	r7, #2
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	4d2e      	ldr	r5, [pc, #184]	; (80066f4 <_svfiprintf_r+0x1e0>)
 800663a:	7839      	ldrb	r1, [r7, #0]
 800663c:	2203      	movs	r2, #3
 800663e:	4628      	mov	r0, r5
 8006640:	f7f9 fe26 	bl	8000290 <memchr>
 8006644:	b138      	cbz	r0, 8006656 <_svfiprintf_r+0x142>
 8006646:	2340      	movs	r3, #64	; 0x40
 8006648:	1b40      	subs	r0, r0, r5
 800664a:	fa03 f000 	lsl.w	r0, r3, r0
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	4303      	orrs	r3, r0
 8006652:	3701      	adds	r7, #1
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	7839      	ldrb	r1, [r7, #0]
 8006658:	4827      	ldr	r0, [pc, #156]	; (80066f8 <_svfiprintf_r+0x1e4>)
 800665a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800665e:	2206      	movs	r2, #6
 8006660:	1c7e      	adds	r6, r7, #1
 8006662:	f7f9 fe15 	bl	8000290 <memchr>
 8006666:	2800      	cmp	r0, #0
 8006668:	d038      	beq.n	80066dc <_svfiprintf_r+0x1c8>
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <_svfiprintf_r+0x1e8>)
 800666c:	bb13      	cbnz	r3, 80066b4 <_svfiprintf_r+0x1a0>
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	3307      	adds	r3, #7
 8006672:	f023 0307 	bic.w	r3, r3, #7
 8006676:	3308      	adds	r3, #8
 8006678:	9303      	str	r3, [sp, #12]
 800667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667c:	444b      	add	r3, r9
 800667e:	9309      	str	r3, [sp, #36]	; 0x24
 8006680:	e76d      	b.n	800655e <_svfiprintf_r+0x4a>
 8006682:	fb05 3202 	mla	r2, r5, r2, r3
 8006686:	2001      	movs	r0, #1
 8006688:	460f      	mov	r7, r1
 800668a:	e7a6      	b.n	80065da <_svfiprintf_r+0xc6>
 800668c:	2300      	movs	r3, #0
 800668e:	3701      	adds	r7, #1
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	4619      	mov	r1, r3
 8006694:	250a      	movs	r5, #10
 8006696:	4638      	mov	r0, r7
 8006698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800669c:	3a30      	subs	r2, #48	; 0x30
 800669e:	2a09      	cmp	r2, #9
 80066a0:	d903      	bls.n	80066aa <_svfiprintf_r+0x196>
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0c8      	beq.n	8006638 <_svfiprintf_r+0x124>
 80066a6:	9105      	str	r1, [sp, #20]
 80066a8:	e7c6      	b.n	8006638 <_svfiprintf_r+0x124>
 80066aa:	fb05 2101 	mla	r1, r5, r1, r2
 80066ae:	2301      	movs	r3, #1
 80066b0:	4607      	mov	r7, r0
 80066b2:	e7f0      	b.n	8006696 <_svfiprintf_r+0x182>
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	4622      	mov	r2, r4
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <_svfiprintf_r+0x1ec>)
 80066bc:	a904      	add	r1, sp, #16
 80066be:	4640      	mov	r0, r8
 80066c0:	f3af 8000 	nop.w
 80066c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80066c8:	4681      	mov	r9, r0
 80066ca:	d1d6      	bne.n	800667a <_svfiprintf_r+0x166>
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	065b      	lsls	r3, r3, #25
 80066d0:	f53f af35 	bmi.w	800653e <_svfiprintf_r+0x2a>
 80066d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d6:	b01d      	add	sp, #116	; 0x74
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	ab03      	add	r3, sp, #12
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	4622      	mov	r2, r4
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <_svfiprintf_r+0x1ec>)
 80066e4:	a904      	add	r1, sp, #16
 80066e6:	4640      	mov	r0, r8
 80066e8:	f000 f882 	bl	80067f0 <_printf_i>
 80066ec:	e7ea      	b.n	80066c4 <_svfiprintf_r+0x1b0>
 80066ee:	bf00      	nop
 80066f0:	08006e06 	.word	0x08006e06
 80066f4:	08006e0c 	.word	0x08006e0c
 80066f8:	08006e10 	.word	0x08006e10
 80066fc:	00000000 	.word	0x00000000
 8006700:	08006461 	.word	0x08006461

08006704 <_printf_common>:
 8006704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006708:	4691      	mov	r9, r2
 800670a:	461f      	mov	r7, r3
 800670c:	688a      	ldr	r2, [r1, #8]
 800670e:	690b      	ldr	r3, [r1, #16]
 8006710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006714:	4293      	cmp	r3, r2
 8006716:	bfb8      	it	lt
 8006718:	4613      	movlt	r3, r2
 800671a:	f8c9 3000 	str.w	r3, [r9]
 800671e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006722:	4606      	mov	r6, r0
 8006724:	460c      	mov	r4, r1
 8006726:	b112      	cbz	r2, 800672e <_printf_common+0x2a>
 8006728:	3301      	adds	r3, #1
 800672a:	f8c9 3000 	str.w	r3, [r9]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	bf42      	ittt	mi
 8006734:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006738:	3302      	addmi	r3, #2
 800673a:	f8c9 3000 	strmi.w	r3, [r9]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	f015 0506 	ands.w	r5, r5, #6
 8006744:	d107      	bne.n	8006756 <_printf_common+0x52>
 8006746:	f104 0a19 	add.w	sl, r4, #25
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	f8d9 2000 	ldr.w	r2, [r9]
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	42ab      	cmp	r3, r5
 8006754:	dc28      	bgt.n	80067a8 <_printf_common+0xa4>
 8006756:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	3300      	adds	r3, #0
 800675e:	bf18      	it	ne
 8006760:	2301      	movne	r3, #1
 8006762:	0692      	lsls	r2, r2, #26
 8006764:	d42d      	bmi.n	80067c2 <_printf_common+0xbe>
 8006766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800676a:	4639      	mov	r1, r7
 800676c:	4630      	mov	r0, r6
 800676e:	47c0      	blx	r8
 8006770:	3001      	adds	r0, #1
 8006772:	d020      	beq.n	80067b6 <_printf_common+0xb2>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	68e5      	ldr	r5, [r4, #12]
 8006778:	f8d9 2000 	ldr.w	r2, [r9]
 800677c:	f003 0306 	and.w	r3, r3, #6
 8006780:	2b04      	cmp	r3, #4
 8006782:	bf08      	it	eq
 8006784:	1aad      	subeq	r5, r5, r2
 8006786:	68a3      	ldr	r3, [r4, #8]
 8006788:	6922      	ldr	r2, [r4, #16]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	f04f 0900 	mov.w	r9, #0
 800679e:	341a      	adds	r4, #26
 80067a0:	454d      	cmp	r5, r9
 80067a2:	d11a      	bne.n	80067da <_printf_common+0xd6>
 80067a4:	2000      	movs	r0, #0
 80067a6:	e008      	b.n	80067ba <_printf_common+0xb6>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4652      	mov	r2, sl
 80067ac:	4639      	mov	r1, r7
 80067ae:	4630      	mov	r0, r6
 80067b0:	47c0      	blx	r8
 80067b2:	3001      	adds	r0, #1
 80067b4:	d103      	bne.n	80067be <_printf_common+0xba>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067be:	3501      	adds	r5, #1
 80067c0:	e7c3      	b.n	800674a <_printf_common+0x46>
 80067c2:	18e1      	adds	r1, r4, r3
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	2030      	movs	r0, #48	; 0x30
 80067c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067cc:	4422      	add	r2, r4
 80067ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d6:	3302      	adds	r3, #2
 80067d8:	e7c5      	b.n	8006766 <_printf_common+0x62>
 80067da:	2301      	movs	r3, #1
 80067dc:	4622      	mov	r2, r4
 80067de:	4639      	mov	r1, r7
 80067e0:	4630      	mov	r0, r6
 80067e2:	47c0      	blx	r8
 80067e4:	3001      	adds	r0, #1
 80067e6:	d0e6      	beq.n	80067b6 <_printf_common+0xb2>
 80067e8:	f109 0901 	add.w	r9, r9, #1
 80067ec:	e7d8      	b.n	80067a0 <_printf_common+0x9c>
	...

080067f0 <_printf_i>:
 80067f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067f8:	460c      	mov	r4, r1
 80067fa:	7e09      	ldrb	r1, [r1, #24]
 80067fc:	b085      	sub	sp, #20
 80067fe:	296e      	cmp	r1, #110	; 0x6e
 8006800:	4617      	mov	r7, r2
 8006802:	4606      	mov	r6, r0
 8006804:	4698      	mov	r8, r3
 8006806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006808:	f000 80b3 	beq.w	8006972 <_printf_i+0x182>
 800680c:	d822      	bhi.n	8006854 <_printf_i+0x64>
 800680e:	2963      	cmp	r1, #99	; 0x63
 8006810:	d036      	beq.n	8006880 <_printf_i+0x90>
 8006812:	d80a      	bhi.n	800682a <_printf_i+0x3a>
 8006814:	2900      	cmp	r1, #0
 8006816:	f000 80b9 	beq.w	800698c <_printf_i+0x19c>
 800681a:	2958      	cmp	r1, #88	; 0x58
 800681c:	f000 8083 	beq.w	8006926 <_printf_i+0x136>
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006828:	e032      	b.n	8006890 <_printf_i+0xa0>
 800682a:	2964      	cmp	r1, #100	; 0x64
 800682c:	d001      	beq.n	8006832 <_printf_i+0x42>
 800682e:	2969      	cmp	r1, #105	; 0x69
 8006830:	d1f6      	bne.n	8006820 <_printf_i+0x30>
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	6813      	ldr	r3, [r2, #0]
 8006836:	0605      	lsls	r5, r0, #24
 8006838:	f103 0104 	add.w	r1, r3, #4
 800683c:	d52a      	bpl.n	8006894 <_printf_i+0xa4>
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6011      	str	r1, [r2, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	da03      	bge.n	800684e <_printf_i+0x5e>
 8006846:	222d      	movs	r2, #45	; 0x2d
 8006848:	425b      	negs	r3, r3
 800684a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800684e:	486f      	ldr	r0, [pc, #444]	; (8006a0c <_printf_i+0x21c>)
 8006850:	220a      	movs	r2, #10
 8006852:	e039      	b.n	80068c8 <_printf_i+0xd8>
 8006854:	2973      	cmp	r1, #115	; 0x73
 8006856:	f000 809d 	beq.w	8006994 <_printf_i+0x1a4>
 800685a:	d808      	bhi.n	800686e <_printf_i+0x7e>
 800685c:	296f      	cmp	r1, #111	; 0x6f
 800685e:	d020      	beq.n	80068a2 <_printf_i+0xb2>
 8006860:	2970      	cmp	r1, #112	; 0x70
 8006862:	d1dd      	bne.n	8006820 <_printf_i+0x30>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	f043 0320 	orr.w	r3, r3, #32
 800686a:	6023      	str	r3, [r4, #0]
 800686c:	e003      	b.n	8006876 <_printf_i+0x86>
 800686e:	2975      	cmp	r1, #117	; 0x75
 8006870:	d017      	beq.n	80068a2 <_printf_i+0xb2>
 8006872:	2978      	cmp	r1, #120	; 0x78
 8006874:	d1d4      	bne.n	8006820 <_printf_i+0x30>
 8006876:	2378      	movs	r3, #120	; 0x78
 8006878:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800687c:	4864      	ldr	r0, [pc, #400]	; (8006a10 <_printf_i+0x220>)
 800687e:	e055      	b.n	800692c <_printf_i+0x13c>
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	1d19      	adds	r1, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6011      	str	r1, [r2, #0]
 8006888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800688c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006890:	2301      	movs	r3, #1
 8006892:	e08c      	b.n	80069ae <_printf_i+0x1be>
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6011      	str	r1, [r2, #0]
 8006898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689c:	bf18      	it	ne
 800689e:	b21b      	sxthne	r3, r3
 80068a0:	e7cf      	b.n	8006842 <_printf_i+0x52>
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	6825      	ldr	r5, [r4, #0]
 80068a6:	1d18      	adds	r0, r3, #4
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	0628      	lsls	r0, r5, #24
 80068ac:	d501      	bpl.n	80068b2 <_printf_i+0xc2>
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	e002      	b.n	80068b8 <_printf_i+0xc8>
 80068b2:	0668      	lsls	r0, r5, #25
 80068b4:	d5fb      	bpl.n	80068ae <_printf_i+0xbe>
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	4854      	ldr	r0, [pc, #336]	; (8006a0c <_printf_i+0x21c>)
 80068ba:	296f      	cmp	r1, #111	; 0x6f
 80068bc:	bf14      	ite	ne
 80068be:	220a      	movne	r2, #10
 80068c0:	2208      	moveq	r2, #8
 80068c2:	2100      	movs	r1, #0
 80068c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068c8:	6865      	ldr	r5, [r4, #4]
 80068ca:	60a5      	str	r5, [r4, #8]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	f2c0 8095 	blt.w	80069fc <_printf_i+0x20c>
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	f021 0104 	bic.w	r1, r1, #4
 80068d8:	6021      	str	r1, [r4, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d13d      	bne.n	800695a <_printf_i+0x16a>
 80068de:	2d00      	cmp	r5, #0
 80068e0:	f040 808e 	bne.w	8006a00 <_printf_i+0x210>
 80068e4:	4665      	mov	r5, ip
 80068e6:	2a08      	cmp	r2, #8
 80068e8:	d10b      	bne.n	8006902 <_printf_i+0x112>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d508      	bpl.n	8006902 <_printf_i+0x112>
 80068f0:	6923      	ldr	r3, [r4, #16]
 80068f2:	6862      	ldr	r2, [r4, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	bfde      	ittt	le
 80068f8:	2330      	movle	r3, #48	; 0x30
 80068fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006902:	ebac 0305 	sub.w	r3, ip, r5
 8006906:	6123      	str	r3, [r4, #16]
 8006908:	f8cd 8000 	str.w	r8, [sp]
 800690c:	463b      	mov	r3, r7
 800690e:	aa03      	add	r2, sp, #12
 8006910:	4621      	mov	r1, r4
 8006912:	4630      	mov	r0, r6
 8006914:	f7ff fef6 	bl	8006704 <_printf_common>
 8006918:	3001      	adds	r0, #1
 800691a:	d14d      	bne.n	80069b8 <_printf_i+0x1c8>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	b005      	add	sp, #20
 8006922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006926:	4839      	ldr	r0, [pc, #228]	; (8006a0c <_printf_i+0x21c>)
 8006928:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800692c:	6813      	ldr	r3, [r2, #0]
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	1d1d      	adds	r5, r3, #4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6015      	str	r5, [r2, #0]
 8006936:	060a      	lsls	r2, r1, #24
 8006938:	d50b      	bpl.n	8006952 <_printf_i+0x162>
 800693a:	07ca      	lsls	r2, r1, #31
 800693c:	bf44      	itt	mi
 800693e:	f041 0120 	orrmi.w	r1, r1, #32
 8006942:	6021      	strmi	r1, [r4, #0]
 8006944:	b91b      	cbnz	r3, 800694e <_printf_i+0x15e>
 8006946:	6822      	ldr	r2, [r4, #0]
 8006948:	f022 0220 	bic.w	r2, r2, #32
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	2210      	movs	r2, #16
 8006950:	e7b7      	b.n	80068c2 <_printf_i+0xd2>
 8006952:	064d      	lsls	r5, r1, #25
 8006954:	bf48      	it	mi
 8006956:	b29b      	uxthmi	r3, r3
 8006958:	e7ef      	b.n	800693a <_printf_i+0x14a>
 800695a:	4665      	mov	r5, ip
 800695c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006960:	fb02 3311 	mls	r3, r2, r1, r3
 8006964:	5cc3      	ldrb	r3, [r0, r3]
 8006966:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800696a:	460b      	mov	r3, r1
 800696c:	2900      	cmp	r1, #0
 800696e:	d1f5      	bne.n	800695c <_printf_i+0x16c>
 8006970:	e7b9      	b.n	80068e6 <_printf_i+0xf6>
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	6825      	ldr	r5, [r4, #0]
 8006976:	6961      	ldr	r1, [r4, #20]
 8006978:	1d18      	adds	r0, r3, #4
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	0628      	lsls	r0, r5, #24
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	d501      	bpl.n	8006986 <_printf_i+0x196>
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	e002      	b.n	800698c <_printf_i+0x19c>
 8006986:	066a      	lsls	r2, r5, #25
 8006988:	d5fb      	bpl.n	8006982 <_printf_i+0x192>
 800698a:	8019      	strh	r1, [r3, #0]
 800698c:	2300      	movs	r3, #0
 800698e:	6123      	str	r3, [r4, #16]
 8006990:	4665      	mov	r5, ip
 8006992:	e7b9      	b.n	8006908 <_printf_i+0x118>
 8006994:	6813      	ldr	r3, [r2, #0]
 8006996:	1d19      	adds	r1, r3, #4
 8006998:	6011      	str	r1, [r2, #0]
 800699a:	681d      	ldr	r5, [r3, #0]
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	2100      	movs	r1, #0
 80069a0:	4628      	mov	r0, r5
 80069a2:	f7f9 fc75 	bl	8000290 <memchr>
 80069a6:	b108      	cbz	r0, 80069ac <_printf_i+0x1bc>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	6060      	str	r0, [r4, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	6123      	str	r3, [r4, #16]
 80069b0:	2300      	movs	r3, #0
 80069b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b6:	e7a7      	b.n	8006908 <_printf_i+0x118>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4639      	mov	r1, r7
 80069be:	4630      	mov	r0, r6
 80069c0:	47c0      	blx	r8
 80069c2:	3001      	adds	r0, #1
 80069c4:	d0aa      	beq.n	800691c <_printf_i+0x12c>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	079b      	lsls	r3, r3, #30
 80069ca:	d413      	bmi.n	80069f4 <_printf_i+0x204>
 80069cc:	68e0      	ldr	r0, [r4, #12]
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	4298      	cmp	r0, r3
 80069d2:	bfb8      	it	lt
 80069d4:	4618      	movlt	r0, r3
 80069d6:	e7a3      	b.n	8006920 <_printf_i+0x130>
 80069d8:	2301      	movs	r3, #1
 80069da:	464a      	mov	r2, r9
 80069dc:	4639      	mov	r1, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	47c0      	blx	r8
 80069e2:	3001      	adds	r0, #1
 80069e4:	d09a      	beq.n	800691c <_printf_i+0x12c>
 80069e6:	3501      	adds	r5, #1
 80069e8:	68e3      	ldr	r3, [r4, #12]
 80069ea:	9a03      	ldr	r2, [sp, #12]
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	42ab      	cmp	r3, r5
 80069f0:	dcf2      	bgt.n	80069d8 <_printf_i+0x1e8>
 80069f2:	e7eb      	b.n	80069cc <_printf_i+0x1dc>
 80069f4:	2500      	movs	r5, #0
 80069f6:	f104 0919 	add.w	r9, r4, #25
 80069fa:	e7f5      	b.n	80069e8 <_printf_i+0x1f8>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1ac      	bne.n	800695a <_printf_i+0x16a>
 8006a00:	7803      	ldrb	r3, [r0, #0]
 8006a02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a0a:	e76c      	b.n	80068e6 <_printf_i+0xf6>
 8006a0c:	08006e17 	.word	0x08006e17
 8006a10:	08006e28 	.word	0x08006e28

08006a14 <memmove>:
 8006a14:	4288      	cmp	r0, r1
 8006a16:	b510      	push	{r4, lr}
 8006a18:	eb01 0302 	add.w	r3, r1, r2
 8006a1c:	d807      	bhi.n	8006a2e <memmove+0x1a>
 8006a1e:	1e42      	subs	r2, r0, #1
 8006a20:	4299      	cmp	r1, r3
 8006a22:	d00a      	beq.n	8006a3a <memmove+0x26>
 8006a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a28:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006a2c:	e7f8      	b.n	8006a20 <memmove+0xc>
 8006a2e:	4283      	cmp	r3, r0
 8006a30:	d9f5      	bls.n	8006a1e <memmove+0xa>
 8006a32:	1881      	adds	r1, r0, r2
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	42d3      	cmn	r3, r2
 8006a38:	d100      	bne.n	8006a3c <memmove+0x28>
 8006a3a:	bd10      	pop	{r4, pc}
 8006a3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006a44:	e7f7      	b.n	8006a36 <memmove+0x22>
	...

08006a48 <_free_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	d045      	beq.n	8006adc <_free_r+0x94>
 8006a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a54:	1f0c      	subs	r4, r1, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bfb8      	it	lt
 8006a5a:	18e4      	addlt	r4, r4, r3
 8006a5c:	f000 f8d2 	bl	8006c04 <__malloc_lock>
 8006a60:	4a1f      	ldr	r2, [pc, #124]	; (8006ae0 <_free_r+0x98>)
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	4610      	mov	r0, r2
 8006a66:	b933      	cbnz	r3, 8006a76 <_free_r+0x2e>
 8006a68:	6063      	str	r3, [r4, #4]
 8006a6a:	6014      	str	r4, [r2, #0]
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a72:	f000 b8c8 	b.w	8006c06 <__malloc_unlock>
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	d90c      	bls.n	8006a94 <_free_r+0x4c>
 8006a7a:	6821      	ldr	r1, [r4, #0]
 8006a7c:	1862      	adds	r2, r4, r1
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	bf04      	itt	eq
 8006a82:	681a      	ldreq	r2, [r3, #0]
 8006a84:	685b      	ldreq	r3, [r3, #4]
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	bf04      	itt	eq
 8006a8a:	1852      	addeq	r2, r2, r1
 8006a8c:	6022      	streq	r2, [r4, #0]
 8006a8e:	6004      	str	r4, [r0, #0]
 8006a90:	e7ec      	b.n	8006a6c <_free_r+0x24>
 8006a92:	4613      	mov	r3, r2
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	b10a      	cbz	r2, 8006a9c <_free_r+0x54>
 8006a98:	42a2      	cmp	r2, r4
 8006a9a:	d9fa      	bls.n	8006a92 <_free_r+0x4a>
 8006a9c:	6819      	ldr	r1, [r3, #0]
 8006a9e:	1858      	adds	r0, r3, r1
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d10b      	bne.n	8006abc <_free_r+0x74>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	4401      	add	r1, r0
 8006aa8:	1858      	adds	r0, r3, r1
 8006aaa:	4282      	cmp	r2, r0
 8006aac:	6019      	str	r1, [r3, #0]
 8006aae:	d1dd      	bne.n	8006a6c <_free_r+0x24>
 8006ab0:	6810      	ldr	r0, [r2, #0]
 8006ab2:	6852      	ldr	r2, [r2, #4]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	4401      	add	r1, r0
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	e7d7      	b.n	8006a6c <_free_r+0x24>
 8006abc:	d902      	bls.n	8006ac4 <_free_r+0x7c>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	e7d3      	b.n	8006a6c <_free_r+0x24>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	1821      	adds	r1, r4, r0
 8006ac8:	428a      	cmp	r2, r1
 8006aca:	bf04      	itt	eq
 8006acc:	6811      	ldreq	r1, [r2, #0]
 8006ace:	6852      	ldreq	r2, [r2, #4]
 8006ad0:	6062      	str	r2, [r4, #4]
 8006ad2:	bf04      	itt	eq
 8006ad4:	1809      	addeq	r1, r1, r0
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	605c      	str	r4, [r3, #4]
 8006ada:	e7c7      	b.n	8006a6c <_free_r+0x24>
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	200156e4 	.word	0x200156e4

08006ae4 <_malloc_r>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	1ccd      	adds	r5, r1, #3
 8006ae8:	f025 0503 	bic.w	r5, r5, #3
 8006aec:	3508      	adds	r5, #8
 8006aee:	2d0c      	cmp	r5, #12
 8006af0:	bf38      	it	cc
 8006af2:	250c      	movcc	r5, #12
 8006af4:	2d00      	cmp	r5, #0
 8006af6:	4606      	mov	r6, r0
 8006af8:	db01      	blt.n	8006afe <_malloc_r+0x1a>
 8006afa:	42a9      	cmp	r1, r5
 8006afc:	d903      	bls.n	8006b06 <_malloc_r+0x22>
 8006afe:	230c      	movs	r3, #12
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	2000      	movs	r0, #0
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	f000 f87d 	bl	8006c04 <__malloc_lock>
 8006b0a:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <_malloc_r+0xac>)
 8006b0c:	6814      	ldr	r4, [r2, #0]
 8006b0e:	4621      	mov	r1, r4
 8006b10:	b991      	cbnz	r1, 8006b38 <_malloc_r+0x54>
 8006b12:	4c20      	ldr	r4, [pc, #128]	; (8006b94 <_malloc_r+0xb0>)
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	b91b      	cbnz	r3, 8006b20 <_malloc_r+0x3c>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 f863 	bl	8006be4 <_sbrk_r>
 8006b1e:	6020      	str	r0, [r4, #0]
 8006b20:	4629      	mov	r1, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 f85e 	bl	8006be4 <_sbrk_r>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d124      	bne.n	8006b76 <_malloc_r+0x92>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	6033      	str	r3, [r6, #0]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f868 	bl	8006c06 <__malloc_unlock>
 8006b36:	e7e4      	b.n	8006b02 <_malloc_r+0x1e>
 8006b38:	680b      	ldr	r3, [r1, #0]
 8006b3a:	1b5b      	subs	r3, r3, r5
 8006b3c:	d418      	bmi.n	8006b70 <_malloc_r+0x8c>
 8006b3e:	2b0b      	cmp	r3, #11
 8006b40:	d90f      	bls.n	8006b62 <_malloc_r+0x7e>
 8006b42:	600b      	str	r3, [r1, #0]
 8006b44:	50cd      	str	r5, [r1, r3]
 8006b46:	18cc      	adds	r4, r1, r3
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f85c 	bl	8006c06 <__malloc_unlock>
 8006b4e:	f104 000b 	add.w	r0, r4, #11
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	f020 0007 	bic.w	r0, r0, #7
 8006b58:	1ac3      	subs	r3, r0, r3
 8006b5a:	d0d3      	beq.n	8006b04 <_malloc_r+0x20>
 8006b5c:	425a      	negs	r2, r3
 8006b5e:	50e2      	str	r2, [r4, r3]
 8006b60:	e7d0      	b.n	8006b04 <_malloc_r+0x20>
 8006b62:	428c      	cmp	r4, r1
 8006b64:	684b      	ldr	r3, [r1, #4]
 8006b66:	bf16      	itet	ne
 8006b68:	6063      	strne	r3, [r4, #4]
 8006b6a:	6013      	streq	r3, [r2, #0]
 8006b6c:	460c      	movne	r4, r1
 8006b6e:	e7eb      	b.n	8006b48 <_malloc_r+0x64>
 8006b70:	460c      	mov	r4, r1
 8006b72:	6849      	ldr	r1, [r1, #4]
 8006b74:	e7cc      	b.n	8006b10 <_malloc_r+0x2c>
 8006b76:	1cc4      	adds	r4, r0, #3
 8006b78:	f024 0403 	bic.w	r4, r4, #3
 8006b7c:	42a0      	cmp	r0, r4
 8006b7e:	d005      	beq.n	8006b8c <_malloc_r+0xa8>
 8006b80:	1a21      	subs	r1, r4, r0
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 f82e 	bl	8006be4 <_sbrk_r>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d0cf      	beq.n	8006b2c <_malloc_r+0x48>
 8006b8c:	6025      	str	r5, [r4, #0]
 8006b8e:	e7db      	b.n	8006b48 <_malloc_r+0x64>
 8006b90:	200156e4 	.word	0x200156e4
 8006b94:	200156e8 	.word	0x200156e8

08006b98 <_realloc_r>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	4607      	mov	r7, r0
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	460e      	mov	r6, r1
 8006ba0:	b921      	cbnz	r1, 8006bac <_realloc_r+0x14>
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ba8:	f7ff bf9c 	b.w	8006ae4 <_malloc_r>
 8006bac:	b922      	cbnz	r2, 8006bb8 <_realloc_r+0x20>
 8006bae:	f7ff ff4b 	bl	8006a48 <_free_r>
 8006bb2:	4625      	mov	r5, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb8:	f000 f826 	bl	8006c08 <_malloc_usable_size_r>
 8006bbc:	42a0      	cmp	r0, r4
 8006bbe:	d20f      	bcs.n	8006be0 <_realloc_r+0x48>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	f7ff ff8e 	bl	8006ae4 <_malloc_r>
 8006bc8:	4605      	mov	r5, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0f2      	beq.n	8006bb4 <_realloc_r+0x1c>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	f7ff fc12 	bl	80063fa <memcpy>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff ff35 	bl	8006a48 <_free_r>
 8006bde:	e7e9      	b.n	8006bb4 <_realloc_r+0x1c>
 8006be0:	4635      	mov	r5, r6
 8006be2:	e7e7      	b.n	8006bb4 <_realloc_r+0x1c>

08006be4 <_sbrk_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4c06      	ldr	r4, [pc, #24]	; (8006c00 <_sbrk_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4605      	mov	r5, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	f7f9 ff1e 	bl	8000a30 <_sbrk>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_sbrk_r+0x1a>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_sbrk_r+0x1a>
 8006bfc:	602b      	str	r3, [r5, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	200157e0 	.word	0x200157e0

08006c04 <__malloc_lock>:
 8006c04:	4770      	bx	lr

08006c06 <__malloc_unlock>:
 8006c06:	4770      	bx	lr

08006c08 <_malloc_usable_size_r>:
 8006c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0c:	1f18      	subs	r0, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfbc      	itt	lt
 8006c12:	580b      	ldrlt	r3, [r1, r0]
 8006c14:	18c0      	addlt	r0, r0, r3
 8006c16:	4770      	bx	lr

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
