
03-Bootloader-Button-JumpUserCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030d4  080030d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030dc  080030dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08003154  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003154  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ddf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ce  00000000  00000000  00028e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  0002a650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e0  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020474  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f05  00000000  00000000  0004b74c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c11ac  00000000  00000000  00054651  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001157fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  00115878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002f84 	.word	0x08002f84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08002f84 	.word	0x08002f84

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a4:	f000 fae6 	bl	8000b74 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005a8:	f000 f822 	bl	80005f0 <SystemClock_Config>

	/* Configure the peripherals */
    GPIO_Init();
 80005ac:	f000 f8fa 	bl	80007a4 <GPIO_Init>
    USART2_Init();
 80005b0:	f000 f87e 	bl	80006b0 <USART2_Init>
    USART3_Init();
 80005b4:	f000 f8a6 	bl	8000704 <USART3_Init>
    CRC_Init();
 80005b8:	f000 f950 	bl	800085c <CRC_Init>

	/* Start Code */

    /* Lets check whether button is pressed or not, if not pressed jump to user application */
    if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_SET )
 80005bc:	2101      	movs	r1, #1
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x44>)
 80005c0:	f000 fe1e 	bl	8001200 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d105      	bne.n	80005d6 <main+0x36>
    {
  	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x48>)
 80005cc:	f000 f8c4 	bl	8000758 <printmsg>

  	  //we should continue in bootloader mode
  	  bootloader_uart_read_data();
 80005d0:	f000 f958 	bl	8000884 <bootloader_uart_read_data>
 80005d4:	e004      	b.n	80005e0 <main+0x40>

    }
    else
    {
  	  printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0x4c>)
 80005d8:	f000 f8be 	bl	8000758 <printmsg>

  		//jump to user application
  		bootloader_jump_to_user_app();
 80005dc:	f000 f95a 	bl	8000894 <bootloader_jump_to_user_app>

    }
    while(1);
 80005e0:	e7fe      	b.n	80005e0 <main+0x40>
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000
 80005e8:	08002f9c 	.word	0x08002f9c
 80005ec:	08002fd4 	.word	0x08002fd4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f8b2 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB+ and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2308      	movs	r3, #8
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000638:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000642:	2307      	movs	r3, #7
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fe48 	bl	80012e0 <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000656:	f000 f949 	bl	80008ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2105      	movs	r1, #5
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f8a1 	bl	80017c0 <HAL_RCC_ClockConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000684:	f000 f932 	bl	80008ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800068c:	23c0      	movs	r3, #192	; 0xc0
 800068e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000690:	2302      	movs	r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fa84 	bl	8001ba4 <HAL_RCCEx_PeriphCLKConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006a2:	f000 f923 	bl	80008ec <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <USART2_Init>:

void USART2_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <USART2_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <USART2_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <USART2_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <USART2_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <USART2_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <USART2_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <USART2_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <USART2_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <USART2_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <USART2_Init+0x4c>)
 80006e8:	f001 fb3e 	bl	8001d68 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <USART2_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f8fb 	bl	80008ec <Error_Handler>
  }

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	40004400 	.word	0x40004400

08000704 <USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void USART3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <USART3_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <USART3_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <USART3_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <USART3_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <USART3_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <USART3_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <USART3_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <USART3_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <USART3_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <USART3_Init+0x4c>)
 800073c:	f001 fb14 	bl	8001d68 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <USART3_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8d1 	bl	80008ec <Error_Handler>
  }

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000098 	.word	0x20000098
 8000754:	40004800 	.word	0x40004800

08000758 <printmsg>:

/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 8000758:	b40f      	push	{r0, r1, r2, r3}
 800075a:	b580      	push	{r7, lr}
 800075c:	b096      	sub	sp, #88	; 0x58
 800075e:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f818 	bl	80027a4 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fd39 	bl	80001f0 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f107 0108 	add.w	r1, r7, #8
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <printmsg+0x48>)
 800078c:	f001 fb39 	bl	8001e02 <HAL_UART_Transmit>
	va_end(args);
#endif
 }
 8000790:	bf00      	nop
 8000792:	3758      	adds	r7, #88	; 0x58
 8000794:	46bd      	mov	sp, r7
 8000796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000098 	.word	0x20000098

080007a4 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <GPIO_Init+0xa8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <GPIO_Init+0xa8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <GPIO_Init+0xa8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <GPIO_Init+0xa8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1b      	ldr	r2, [pc, #108]	; (800084c <GPIO_Init+0xa8>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <GPIO_Init+0xa8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007f8:	4815      	ldr	r0, [pc, #84]	; (8000850 <GPIO_Init+0xac>)
 80007fa:	f000 fd19 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <GPIO_Init+0xb0>)
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <GPIO_Init+0xb4>)
 8000812:	f000 fb5b 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000816:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4808      	ldr	r0, [pc, #32]	; (8000850 <GPIO_Init+0xac>)
 8000830:	f000 fb4c 	bl	8000ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2006      	movs	r0, #6
 800083a:	f000 fae8 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800083e:	2006      	movs	r0, #6
 8000840:	f000 fb01 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020c00 	.word	0x40020c00
 8000854:	10210000 	.word	0x10210000
 8000858:	40020000 	.word	0x40020000

0800085c <CRC_Init>:

void CRC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <CRC_Init+0x20>)
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <CRC_Init+0x24>)
 8000864:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <CRC_Init+0x20>)
 8000868:	f000 fb14 	bl	8000e94 <HAL_CRC_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <CRC_Init+0x1a>
  {
    Error_Handler();
 8000872:	f000 f83b 	bl	80008ec <Error_Handler>
  }

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d8 	.word	0x200000d8
 8000880:	40023000 	.word	0x40023000

08000884 <bootloader_uart_read_data>:

void  bootloader_uart_read_data(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

		}

	}
*/
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <bootloader_jump_to_user_app>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <bootloader_jump_to_user_app+0x44>)
 800089c:	f7ff ff5c 	bl	8000758 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <bootloader_jump_to_user_app+0x48>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80008a6:	68f9      	ldr	r1, [r7, #12]
 80008a8:	480d      	ldr	r0, [pc, #52]	; (80008e0 <bootloader_jump_to_user_app+0x4c>)
 80008aa:	f7ff ff55 	bl	8000758 <printmsg>
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	f383 8808 	msr	MSP, r3
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4 */

    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <bootloader_jump_to_user_app+0x50>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <bootloader_jump_to_user_app+0x54>)
 80008c6:	f7ff ff47 	bl	8000758 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4798      	blx	r3

}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08003010 	.word	0x08003010
 80008dc:	08008000 	.word	0x08008000
 80008e0:	0800303c 	.word	0x0800303c
 80008e4:	08008004 	.word	0x08008004
 80008e8:	0800305c 	.word	0x0800305c

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */


}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	f06f 000b 	mvn.w	r0, #11
 8000906:	f000 fa82 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	f06f 000a 	mvn.w	r0, #10
 8000912:	f000 fa7c 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f06f 0009 	mvn.w	r0, #9
 800091e:	f000 fa76 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	f06f 0004 	mvn.w	r0, #4
 800092a:	f000 fa70 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	f06f 0003 	mvn.w	r0, #3
 8000936:	f000 fa6a 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fa64 	bl	8000e0e <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	f04f 30ff 	mov.w	r0, #4294967295
 800094e:	f000 fa5e 	bl	8000e0e <HAL_NVIC_SetPriority>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fa50 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>
	/* System interrupt init*/


}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <HAL_CRC_MspInit+0x3c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d10d      	bne.n	800098a <HAL_CRC_MspInit+0x2e>
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_CRC_MspInit+0x40>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <HAL_CRC_MspInit+0x40>)
 8000978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_CRC_MspInit+0x40>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023000 	.word	0x40023000
 800099c:	40023800 	.word	0x40023800

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a32      	ldr	r2, [pc, #200]	; (8000a88 <HAL_UART_MspInit+0xe8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12c      	bne.n	8000a1c <HAL_UART_MspInit+0x7c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a30      	ldr	r2, [pc, #192]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a29      	ldr	r2, [pc, #164]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <HAL_UART_MspInit+0xec>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	481e      	ldr	r0, [pc, #120]	; (8000a90 <HAL_UART_MspInit+0xf0>)
 8000a16:	f000 fa59 	bl	8000ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  }

}
 8000a1a:	e031      	b.n	8000a80 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <HAL_UART_MspInit+0xf4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d12c      	bne.n	8000a80 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_UART_MspInit+0xec>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_10;
 8000a5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a70:	2307      	movs	r3, #7
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <HAL_UART_MspInit+0xf8>)
 8000a7c:	f000 fa26 	bl	8000ecc <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40004800 	.word	0x40004800
 8000a98:	40020800 	.word	0x40020800

08000a9c <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0

	  HAL_IncTick();
 8000ac6:	f000 f8a7 	bl	8000c18 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 8000aca:	f000 f9d6 	bl	8000e7a <HAL_SYSTICK_IRQHandler>

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <EXTI0_IRQHandler>:
* @brief This function handles USART2 global interrupt.
*/


void EXTI0_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin(LD4_GPIO_Port,LD4_Pin);
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <EXTI0_IRQHandler+0x18>)
 8000ade:	f000 fbc0 	bl	8001262 <HAL_GPIO_TogglePin>

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fbd8 	bl	8001298 <HAL_GPIO_EXTI_IRQHandler>

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x50>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x16>
		heap_end = &end;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <_sbrk+0x50>)
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <_sbrk+0x54>)
 8000b04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <_sbrk+0x50>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <_sbrk+0x50>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4413      	add	r3, r2
 8000b14:	466a      	mov	r2, sp
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d907      	bls.n	8000b2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b1a:	f001 fdfb 	bl	8002714 <__errno>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	230c      	movs	r3, #12
 8000b22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	e006      	b.n	8000b38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <_sbrk+0x50>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <_sbrk+0x50>)
 8000b34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000008c 	.word	0x2000008c
 8000b44:	20000128 	.word	0x20000128

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemInit+0x24>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <SystemInit+0x24>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <SystemInit+0x24>)
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <SystemInit+0x28>)
 8000b60:	609a      	str	r2, [r3, #8]
#endif
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	08008000 	.word	0x08008000

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_Init+0x40>)
 8000b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_Init+0x40>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <HAL_Init+0x40>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f92b 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f808 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba8:	f7ff fea7 	bl	80008fa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023c00 	.word	0x40023c00

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x54>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x58>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f943 	bl	8000e62 <HAL_SYSTICK_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00e      	b.n	8000c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d80a      	bhi.n	8000c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f000 f90b 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf8:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <HAL_InitTick+0x5c>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000004 	.word	0x20000004

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000120 	.word	0x20000120

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000120 	.word	0x20000120

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e7e:	f000 f802 	bl	8000e86 <HAL_SYSTICK_Callback>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	795b      	ldrb	r3, [r3, #5]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff fd50 	bl	800095c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e16b      	b.n	80011c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 815a 	bne.w	80011ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00b      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0xfc>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b4 	beq.w	80011ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_Init+0x308>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_GPIO_Init+0x310>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4934      	ldr	r1, [pc, #208]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001136:	4a31      	ldr	r2, [pc, #196]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x330>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_GPIO_Init+0x330>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_GPIO_Init+0x330>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae90 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	3724      	adds	r7, #36	; 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	4013      	ands	r3, r2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	401a      	ands	r2, r3
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	429a      	cmp	r2, r3
 800127a:	d104      	bne.n	8001286 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	041a      	lsls	r2, r3, #16
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f806 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e25b      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d075      	beq.n	80013ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	4ba3      	ldr	r3, [pc, #652]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4ba0      	ldr	r3, [pc, #640]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b9d      	ldr	r3, [pc, #628]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001322:	d10b      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d157      	bne.n	80013e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e236      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x74>
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a90      	ldr	r2, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a8a      	ldr	r2, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a80      	ldr	r2, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc52 	bl	8000c40 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc4e 	bl	8000c40 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1fb      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xc0>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc3e 	bl	8000c40 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc3a 	bl	8000c40 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1e7      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe8>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1bb      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4952      	ldr	r1, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff fbf3 	bl	8000c40 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fbef 	bl	8000c40 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e19c      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4940      	ldr	r1, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbd2 	bl	8000c40 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbce 	bl	8000c40 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e17b      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d016      	beq.n	8001500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fbb2 	bl	8000c40 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fbae 	bl	8000c40 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e15b      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
 80014fe:	e015      	b.n	800152c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fb9b 	bl	8000c40 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff fb97 	bl	8000c40 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e144      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a0 	beq.w	800167a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d121      	bne.n	80015ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fb5d 	bl	8000c40 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x2ce>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
 8001598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff fb50 	bl	8000c40 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0fd      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x4d4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
 80015c2:	4b7d      	ldr	r3, [pc, #500]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a7c      	ldr	r2, [pc, #496]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b77      	ldr	r3, [pc, #476]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a76      	ldr	r2, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	4b74      	ldr	r3, [pc, #464]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a73      	ldr	r2, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015f2:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a70      	ldr	r2, [pc, #448]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a6d      	ldr	r2, [pc, #436]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff fb15 	bl	8000c40 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff fb11 	bl	8000c40 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e0bc      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x33a>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff faff 	bl	8000c40 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff fafb 	bl	8000c40 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0a6      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b52      	ldr	r3, [pc, #328]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a51      	ldr	r2, [pc, #324]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8092 	beq.w	80017a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d05c      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d141      	bne.n	800171c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCC_OscConfig+0x4dc>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff facf 	bl	8000c40 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff facb 	bl	8000c40 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e078      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	3b01      	subs	r3, #1
 80016de:	041b      	lsls	r3, r3, #16
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	4933      	ldr	r1, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_RCC_OscConfig+0x4dc>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff faa4 	bl	8000c40 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff faa0 	bl	8000c40 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04d      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x41c>
 800171a:	e045      	b.n	80017a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_RCC_OscConfig+0x4dc>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7ff fa8d 	bl	8000c40 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff fa89 	bl	8000c40 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e036      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x44a>
 8001748:	e02e      	b.n	80017a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e029      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001756:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <HAL_RCC_OscConfig+0x4d8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	429a      	cmp	r2, r3
 8001768:	d11c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d115      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40007000 	.word	0x40007000
 80017b8:	40023800 	.word	0x40023800
 80017bc:	42470060 	.word	0x42470060

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff f9c6 	bl	8000c40 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff f9c2 	bl	8000c40 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4601      	mov	r1, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	fa21 f303 	lsr.w	r3, r1, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f926 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	08003088 	.word	0x08003088
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d007      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x32>
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d008      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x38>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 80b4 	bne.w	8001b20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019ba:	60bb      	str	r3, [r7, #8]
       break;
 80019bc:	e0b3      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019c0:	60bb      	str	r3, [r7, #8]
      break;
 80019c2:	e0b0      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c4:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d04a      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019da:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	099b      	lsrs	r3, r3, #6
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	ea03 0501 	and.w	r5, r3, r1
 80019f0:	ea04 0602 	and.w	r6, r4, r2
 80019f4:	4629      	mov	r1, r5
 80019f6:	4632      	mov	r2, r6
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	0154      	lsls	r4, r2, #5
 8001a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a06:	014b      	lsls	r3, r1, #5
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4622      	mov	r2, r4
 8001a0c:	1b49      	subs	r1, r1, r5
 8001a0e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	f04f 0400 	mov.w	r4, #0
 8001a1a:	0194      	lsls	r4, r2, #6
 8001a1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a20:	018b      	lsls	r3, r1, #6
 8001a22:	1a5b      	subs	r3, r3, r1
 8001a24:	eb64 0402 	sbc.w	r4, r4, r2
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	00e2      	lsls	r2, r4, #3
 8001a32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a36:	00d9      	lsls	r1, r3, #3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	195b      	adds	r3, r3, r5
 8001a3e:	eb44 0406 	adc.w	r4, r4, r6
 8001a42:	f04f 0100 	mov.w	r1, #0
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	0262      	lsls	r2, r4, #9
 8001a4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a50:	0259      	lsls	r1, r3, #9
 8001a52:	460b      	mov	r3, r1
 8001a54:	4614      	mov	r4, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	4621      	mov	r1, r4
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f04f 0400 	mov.w	r4, #0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	f7fe fc1c 	bl	80002a0 <__aeabi_uldivmod>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e049      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	f04f 0400 	mov.w	r4, #0
 8001a7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	ea03 0501 	and.w	r5, r3, r1
 8001a86:	ea04 0602 	and.w	r6, r4, r2
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	4632      	mov	r2, r6
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	f04f 0400 	mov.w	r4, #0
 8001a96:	0154      	lsls	r4, r2, #5
 8001a98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a9c:	014b      	lsls	r3, r1, #5
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	1b49      	subs	r1, r1, r5
 8001aa4:	eb62 0206 	sbc.w	r2, r2, r6
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	f04f 0400 	mov.w	r4, #0
 8001ab0:	0194      	lsls	r4, r2, #6
 8001ab2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ab6:	018b      	lsls	r3, r1, #6
 8001ab8:	1a5b      	subs	r3, r3, r1
 8001aba:	eb64 0402 	sbc.w	r4, r4, r2
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001acc:	00d9      	lsls	r1, r3, #3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	195b      	adds	r3, r3, r5
 8001ad4:	eb44 0406 	adc.w	r4, r4, r6
 8001ad8:	f04f 0100 	mov.w	r1, #0
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	02a2      	lsls	r2, r4, #10
 8001ae2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ae6:	0299      	lsls	r1, r3, #10
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4614      	mov	r4, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	4621      	mov	r1, r4
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f04f 0400 	mov.w	r4, #0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4623      	mov	r3, r4
 8001afa:	f7fe fbd1 	bl	80002a0 <__aeabi_uldivmod>
 8001afe:	4603      	mov	r3, r0
 8001b00:	460c      	mov	r4, r1
 8001b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	60bb      	str	r3, [r7, #8]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b22:	60bb      	str	r3, [r7, #8]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	68bb      	ldr	r3, [r7, #8]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b40:	4b03      	ldr	r3, [pc, #12]	; (8001b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b58:	f7ff fff0 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b5c:	4601      	mov	r1, r0
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0a9b      	lsrs	r3, r3, #10
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4a03      	ldr	r2, [pc, #12]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08003098 	.word	0x08003098

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b80:	f7ff ffdc 	bl	8001b3c <HAL_RCC_GetHCLKFreq>
 8001b84:	4601      	mov	r1, r0
 8001b86:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b5b      	lsrs	r3, r3, #13
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08003098 	.word	0x08003098

08001ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d035      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bcc:	4b62      	ldr	r3, [pc, #392]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff f835 	bl	8000c40 <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bda:	f7ff f831 	bl	8000c40 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0b0      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bec:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	019a      	lsls	r2, r3, #6
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	071b      	lsls	r3, r3, #28
 8001c04:	4955      	ldr	r1, [pc, #340]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c0c:	4b52      	ldr	r3, [pc, #328]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c12:	f7ff f815 	bl	8000c40 <HAL_GetTick>
 8001c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c1a:	f7ff f811 	bl	8000c40 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e090      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8083 	beq.w	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6e:	f7fe ffe7 	bl	8000c40 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7fe ffe3 	bl	8000c40 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e062      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02f      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d028      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001cc8:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cce:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d114      	bne.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe ffb1 	bl	8000c40 <HAL_GetTick>
 8001cde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7fe ffad 	bl	8000c40 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e02a      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d10:	d10d      	bne.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d26:	490d      	ldr	r1, [pc, #52]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	e005      	b.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d38:	6093      	str	r3, [r2, #8]
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	4905      	ldr	r1, [pc, #20]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	42470068 	.word	0x42470068
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42470e40 	.word	0x42470e40

08001d68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e03f      	b.n	8001dfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fe06 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2224      	movs	r2, #36	; 0x24
 8001d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001daa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f90b 	bl	8001fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b088      	sub	sp, #32
 8001e06:	af02      	add	r7, sp, #8
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	f040 8083 	bne.w	8001f2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <HAL_UART_Transmit+0x2e>
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e07b      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Transmit+0x40>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e074      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2221      	movs	r2, #33	; 0x21
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e58:	f7fe fef2 	bl	8000c40 <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	88fa      	ldrh	r2, [r7, #6]
 8001e62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	88fa      	ldrh	r2, [r7, #6]
 8001e68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e72:	e042      	b.n	8001efa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8a:	d122      	bne.n	8001ed2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f84c 	bl	8001f34 <UART_WaitOnFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e042      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	e017      	b.n	8001efa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	e013      	b.n	8001efa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	; 0x80
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f829 	bl	8001f34 <UART_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e01f      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1b7      	bne.n	8001e74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2140      	movs	r1, #64	; 0x40
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f810 	bl	8001f34 <UART_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e006      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
  }
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f44:	e02c      	b.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d028      	beq.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f54:	f7fe fe74 	bl	8000c40 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d21d      	bcs.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e00f      	b.n	8001fc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	bf0c      	ite	eq
 8001fb0:	2301      	moveq	r3, #1
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d0c3      	beq.n	8001f46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800200a:	f023 030c 	bic.w	r3, r3, #12
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	430b      	orrs	r3, r1
 8002016:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002036:	f040 818b 	bne.w	8002350 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4ac1      	ldr	r2, [pc, #772]	; (8002344 <UART_SetConfig+0x37c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d005      	beq.n	8002050 <UART_SetConfig+0x88>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4abf      	ldr	r2, [pc, #764]	; (8002348 <UART_SetConfig+0x380>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f040 80bd 	bne.w	80021ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002050:	f7ff fd94 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8002054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	461d      	mov	r5, r3
 800205a:	f04f 0600 	mov.w	r6, #0
 800205e:	46a8      	mov	r8, r5
 8002060:	46b1      	mov	r9, r6
 8002062:	eb18 0308 	adds.w	r3, r8, r8
 8002066:	eb49 0409 	adc.w	r4, r9, r9
 800206a:	4698      	mov	r8, r3
 800206c:	46a1      	mov	r9, r4
 800206e:	eb18 0805 	adds.w	r8, r8, r5
 8002072:	eb49 0906 	adc.w	r9, r9, r6
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800208a:	4688      	mov	r8, r1
 800208c:	4691      	mov	r9, r2
 800208e:	eb18 0005 	adds.w	r0, r8, r5
 8002092:	eb49 0106 	adc.w	r1, r9, r6
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	461d      	mov	r5, r3
 800209c:	f04f 0600 	mov.w	r6, #0
 80020a0:	196b      	adds	r3, r5, r5
 80020a2:	eb46 0406 	adc.w	r4, r6, r6
 80020a6:	461a      	mov	r2, r3
 80020a8:	4623      	mov	r3, r4
 80020aa:	f7fe f8f9 	bl	80002a0 <__aeabi_uldivmod>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	461a      	mov	r2, r3
 80020b4:	4ba5      	ldr	r3, [pc, #660]	; (800234c <UART_SetConfig+0x384>)
 80020b6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	461d      	mov	r5, r3
 80020c4:	f04f 0600 	mov.w	r6, #0
 80020c8:	46a9      	mov	r9, r5
 80020ca:	46b2      	mov	sl, r6
 80020cc:	eb19 0309 	adds.w	r3, r9, r9
 80020d0:	eb4a 040a 	adc.w	r4, sl, sl
 80020d4:	4699      	mov	r9, r3
 80020d6:	46a2      	mov	sl, r4
 80020d8:	eb19 0905 	adds.w	r9, r9, r5
 80020dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f4:	4689      	mov	r9, r1
 80020f6:	4692      	mov	sl, r2
 80020f8:	eb19 0005 	adds.w	r0, r9, r5
 80020fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	461d      	mov	r5, r3
 8002106:	f04f 0600 	mov.w	r6, #0
 800210a:	196b      	adds	r3, r5, r5
 800210c:	eb46 0406 	adc.w	r4, r6, r6
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	f7fe f8c4 	bl	80002a0 <__aeabi_uldivmod>
 8002118:	4603      	mov	r3, r0
 800211a:	460c      	mov	r4, r1
 800211c:	461a      	mov	r2, r3
 800211e:	4b8b      	ldr	r3, [pc, #556]	; (800234c <UART_SetConfig+0x384>)
 8002120:	fba3 1302 	umull	r1, r3, r3, r2
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a86      	ldr	r2, [pc, #536]	; (800234c <UART_SetConfig+0x384>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002140:	4498      	add	r8, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	461d      	mov	r5, r3
 8002146:	f04f 0600 	mov.w	r6, #0
 800214a:	46a9      	mov	r9, r5
 800214c:	46b2      	mov	sl, r6
 800214e:	eb19 0309 	adds.w	r3, r9, r9
 8002152:	eb4a 040a 	adc.w	r4, sl, sl
 8002156:	4699      	mov	r9, r3
 8002158:	46a2      	mov	sl, r4
 800215a:	eb19 0905 	adds.w	r9, r9, r5
 800215e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002176:	4689      	mov	r9, r1
 8002178:	4692      	mov	sl, r2
 800217a:	eb19 0005 	adds.w	r0, r9, r5
 800217e:	eb4a 0106 	adc.w	r1, sl, r6
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	461d      	mov	r5, r3
 8002188:	f04f 0600 	mov.w	r6, #0
 800218c:	196b      	adds	r3, r5, r5
 800218e:	eb46 0406 	adc.w	r4, r6, r6
 8002192:	461a      	mov	r2, r3
 8002194:	4623      	mov	r3, r4
 8002196:	f7fe f883 	bl	80002a0 <__aeabi_uldivmod>
 800219a:	4603      	mov	r3, r0
 800219c:	460c      	mov	r4, r1
 800219e:	461a      	mov	r2, r3
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <UART_SetConfig+0x384>)
 80021a2:	fba3 1302 	umull	r1, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2164      	movs	r1, #100	; 0x64
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	3332      	adds	r3, #50	; 0x32
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <UART_SetConfig+0x384>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	095b      	lsrs	r3, r3, #5
 80021bc:	f003 0207 	and.w	r2, r3, #7
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4442      	add	r2, r8
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e26f      	b.n	80026aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ca:	f7ff fcc3 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 80021ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	461d      	mov	r5, r3
 80021d4:	f04f 0600 	mov.w	r6, #0
 80021d8:	46a8      	mov	r8, r5
 80021da:	46b1      	mov	r9, r6
 80021dc:	eb18 0308 	adds.w	r3, r8, r8
 80021e0:	eb49 0409 	adc.w	r4, r9, r9
 80021e4:	4698      	mov	r8, r3
 80021e6:	46a1      	mov	r9, r4
 80021e8:	eb18 0805 	adds.w	r8, r8, r5
 80021ec:	eb49 0906 	adc.w	r9, r9, r6
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002200:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002204:	4688      	mov	r8, r1
 8002206:	4691      	mov	r9, r2
 8002208:	eb18 0005 	adds.w	r0, r8, r5
 800220c:	eb49 0106 	adc.w	r1, r9, r6
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	461d      	mov	r5, r3
 8002216:	f04f 0600 	mov.w	r6, #0
 800221a:	196b      	adds	r3, r5, r5
 800221c:	eb46 0406 	adc.w	r4, r6, r6
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	f7fe f83c 	bl	80002a0 <__aeabi_uldivmod>
 8002228:	4603      	mov	r3, r0
 800222a:	460c      	mov	r4, r1
 800222c:	461a      	mov	r2, r3
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <UART_SetConfig+0x384>)
 8002230:	fba3 2302 	umull	r2, r3, r3, r2
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	461d      	mov	r5, r3
 800223e:	f04f 0600 	mov.w	r6, #0
 8002242:	46a9      	mov	r9, r5
 8002244:	46b2      	mov	sl, r6
 8002246:	eb19 0309 	adds.w	r3, r9, r9
 800224a:	eb4a 040a 	adc.w	r4, sl, sl
 800224e:	4699      	mov	r9, r3
 8002250:	46a2      	mov	sl, r4
 8002252:	eb19 0905 	adds.w	r9, r9, r5
 8002256:	eb4a 0a06 	adc.w	sl, sl, r6
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800226a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800226e:	4689      	mov	r9, r1
 8002270:	4692      	mov	sl, r2
 8002272:	eb19 0005 	adds.w	r0, r9, r5
 8002276:	eb4a 0106 	adc.w	r1, sl, r6
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	461d      	mov	r5, r3
 8002280:	f04f 0600 	mov.w	r6, #0
 8002284:	196b      	adds	r3, r5, r5
 8002286:	eb46 0406 	adc.w	r4, r6, r6
 800228a:	461a      	mov	r2, r3
 800228c:	4623      	mov	r3, r4
 800228e:	f7fe f807 	bl	80002a0 <__aeabi_uldivmod>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	461a      	mov	r2, r3
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <UART_SetConfig+0x384>)
 800229a:	fba3 1302 	umull	r1, r3, r3, r2
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2164      	movs	r1, #100	; 0x64
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	3332      	adds	r3, #50	; 0x32
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <UART_SetConfig+0x384>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022ba:	4498      	add	r8, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	461d      	mov	r5, r3
 80022c0:	f04f 0600 	mov.w	r6, #0
 80022c4:	46a9      	mov	r9, r5
 80022c6:	46b2      	mov	sl, r6
 80022c8:	eb19 0309 	adds.w	r3, r9, r9
 80022cc:	eb4a 040a 	adc.w	r4, sl, sl
 80022d0:	4699      	mov	r9, r3
 80022d2:	46a2      	mov	sl, r4
 80022d4:	eb19 0905 	adds.w	r9, r9, r5
 80022d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022f0:	4689      	mov	r9, r1
 80022f2:	4692      	mov	sl, r2
 80022f4:	eb19 0005 	adds.w	r0, r9, r5
 80022f8:	eb4a 0106 	adc.w	r1, sl, r6
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	461d      	mov	r5, r3
 8002302:	f04f 0600 	mov.w	r6, #0
 8002306:	196b      	adds	r3, r5, r5
 8002308:	eb46 0406 	adc.w	r4, r6, r6
 800230c:	461a      	mov	r2, r3
 800230e:	4623      	mov	r3, r4
 8002310:	f7fd ffc6 	bl	80002a0 <__aeabi_uldivmod>
 8002314:	4603      	mov	r3, r0
 8002316:	460c      	mov	r4, r1
 8002318:	461a      	mov	r2, r3
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <UART_SetConfig+0x384>)
 800231c:	fba3 1302 	umull	r1, r3, r3, r2
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	2164      	movs	r1, #100	; 0x64
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	3332      	adds	r3, #50	; 0x32
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <UART_SetConfig+0x384>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	095b      	lsrs	r3, r3, #5
 8002336:	f003 0207 	and.w	r2, r3, #7
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4442      	add	r2, r8
 8002340:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002342:	e1b2      	b.n	80026aa <UART_SetConfig+0x6e2>
 8002344:	40011000 	.word	0x40011000
 8002348:	40011400 	.word	0x40011400
 800234c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4ad7      	ldr	r2, [pc, #860]	; (80026b4 <UART_SetConfig+0x6ec>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d005      	beq.n	8002366 <UART_SetConfig+0x39e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4ad6      	ldr	r2, [pc, #856]	; (80026b8 <UART_SetConfig+0x6f0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	f040 80d1 	bne.w	8002508 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002366:	f7ff fc09 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 800236a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	469a      	mov	sl, r3
 8002370:	f04f 0b00 	mov.w	fp, #0
 8002374:	46d0      	mov	r8, sl
 8002376:	46d9      	mov	r9, fp
 8002378:	eb18 0308 	adds.w	r3, r8, r8
 800237c:	eb49 0409 	adc.w	r4, r9, r9
 8002380:	4698      	mov	r8, r3
 8002382:	46a1      	mov	r9, r4
 8002384:	eb18 080a 	adds.w	r8, r8, sl
 8002388:	eb49 090b 	adc.w	r9, r9, fp
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002398:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800239c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023a0:	4688      	mov	r8, r1
 80023a2:	4691      	mov	r9, r2
 80023a4:	eb1a 0508 	adds.w	r5, sl, r8
 80023a8:	eb4b 0609 	adc.w	r6, fp, r9
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f04f 0400 	mov.w	r4, #0
 80023be:	0094      	lsls	r4, r2, #2
 80023c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c4:	008b      	lsls	r3, r1, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	4628      	mov	r0, r5
 80023cc:	4631      	mov	r1, r6
 80023ce:	f7fd ff67 	bl	80002a0 <__aeabi_uldivmod>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	461a      	mov	r2, r3
 80023d8:	4bb8      	ldr	r3, [pc, #736]	; (80026bc <UART_SetConfig+0x6f4>)
 80023da:	fba3 2302 	umull	r2, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	469b      	mov	fp, r3
 80023e8:	f04f 0c00 	mov.w	ip, #0
 80023ec:	46d9      	mov	r9, fp
 80023ee:	46e2      	mov	sl, ip
 80023f0:	eb19 0309 	adds.w	r3, r9, r9
 80023f4:	eb4a 040a 	adc.w	r4, sl, sl
 80023f8:	4699      	mov	r9, r3
 80023fa:	46a2      	mov	sl, r4
 80023fc:	eb19 090b 	adds.w	r9, r9, fp
 8002400:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002418:	4689      	mov	r9, r1
 800241a:	4692      	mov	sl, r2
 800241c:	eb1b 0509 	adds.w	r5, fp, r9
 8002420:	eb4c 060a 	adc.w	r6, ip, sl
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	f04f 0400 	mov.w	r4, #0
 8002436:	0094      	lsls	r4, r2, #2
 8002438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800243c:	008b      	lsls	r3, r1, #2
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	4628      	mov	r0, r5
 8002444:	4631      	mov	r1, r6
 8002446:	f7fd ff2b 	bl	80002a0 <__aeabi_uldivmod>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	461a      	mov	r2, r3
 8002450:	4b9a      	ldr	r3, [pc, #616]	; (80026bc <UART_SetConfig+0x6f4>)
 8002452:	fba3 1302 	umull	r1, r3, r3, r2
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2164      	movs	r1, #100	; 0x64
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a95      	ldr	r2, [pc, #596]	; (80026bc <UART_SetConfig+0x6f4>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	4498      	add	r8, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	469b      	mov	fp, r3
 8002476:	f04f 0c00 	mov.w	ip, #0
 800247a:	46d9      	mov	r9, fp
 800247c:	46e2      	mov	sl, ip
 800247e:	eb19 0309 	adds.w	r3, r9, r9
 8002482:	eb4a 040a 	adc.w	r4, sl, sl
 8002486:	4699      	mov	r9, r3
 8002488:	46a2      	mov	sl, r4
 800248a:	eb19 090b 	adds.w	r9, r9, fp
 800248e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800249e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a6:	4689      	mov	r9, r1
 80024a8:	4692      	mov	sl, r2
 80024aa:	eb1b 0509 	adds.w	r5, fp, r9
 80024ae:	eb4c 060a 	adc.w	r6, ip, sl
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f04f 0400 	mov.w	r4, #0
 80024c4:	0094      	lsls	r4, r2, #2
 80024c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024ca:	008b      	lsls	r3, r1, #2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4623      	mov	r3, r4
 80024d0:	4628      	mov	r0, r5
 80024d2:	4631      	mov	r1, r6
 80024d4:	f7fd fee4 	bl	80002a0 <__aeabi_uldivmod>
 80024d8:	4603      	mov	r3, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	461a      	mov	r2, r3
 80024de:	4b77      	ldr	r3, [pc, #476]	; (80026bc <UART_SetConfig+0x6f4>)
 80024e0:	fba3 1302 	umull	r1, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	2164      	movs	r1, #100	; 0x64
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	3332      	adds	r3, #50	; 0x32
 80024f2:	4a72      	ldr	r2, [pc, #456]	; (80026bc <UART_SetConfig+0x6f4>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4442      	add	r2, r8
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	e0d0      	b.n	80026aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002508:	f7ff fb24 	bl	8001b54 <HAL_RCC_GetPCLK1Freq>
 800250c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	469a      	mov	sl, r3
 8002512:	f04f 0b00 	mov.w	fp, #0
 8002516:	46d0      	mov	r8, sl
 8002518:	46d9      	mov	r9, fp
 800251a:	eb18 0308 	adds.w	r3, r8, r8
 800251e:	eb49 0409 	adc.w	r4, r9, r9
 8002522:	4698      	mov	r8, r3
 8002524:	46a1      	mov	r9, r4
 8002526:	eb18 080a 	adds.w	r8, r8, sl
 800252a:	eb49 090b 	adc.w	r9, r9, fp
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800253a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800253e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002542:	4688      	mov	r8, r1
 8002544:	4691      	mov	r9, r2
 8002546:	eb1a 0508 	adds.w	r5, sl, r8
 800254a:	eb4b 0609 	adc.w	r6, fp, r9
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	0094      	lsls	r4, r2, #2
 8002562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002566:	008b      	lsls	r3, r1, #2
 8002568:	461a      	mov	r2, r3
 800256a:	4623      	mov	r3, r4
 800256c:	4628      	mov	r0, r5
 800256e:	4631      	mov	r1, r6
 8002570:	f7fd fe96 	bl	80002a0 <__aeabi_uldivmod>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	461a      	mov	r2, r3
 800257a:	4b50      	ldr	r3, [pc, #320]	; (80026bc <UART_SetConfig+0x6f4>)
 800257c:	fba3 2302 	umull	r2, r3, r3, r2
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	469b      	mov	fp, r3
 800258a:	f04f 0c00 	mov.w	ip, #0
 800258e:	46d9      	mov	r9, fp
 8002590:	46e2      	mov	sl, ip
 8002592:	eb19 0309 	adds.w	r3, r9, r9
 8002596:	eb4a 040a 	adc.w	r4, sl, sl
 800259a:	4699      	mov	r9, r3
 800259c:	46a2      	mov	sl, r4
 800259e:	eb19 090b 	adds.w	r9, r9, fp
 80025a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ba:	4689      	mov	r9, r1
 80025bc:	4692      	mov	sl, r2
 80025be:	eb1b 0509 	adds.w	r5, fp, r9
 80025c2:	eb4c 060a 	adc.w	r6, ip, sl
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4619      	mov	r1, r3
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f04f 0400 	mov.w	r4, #0
 80025d8:	0094      	lsls	r4, r2, #2
 80025da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025de:	008b      	lsls	r3, r1, #2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	4628      	mov	r0, r5
 80025e6:	4631      	mov	r1, r6
 80025e8:	f7fd fe5a 	bl	80002a0 <__aeabi_uldivmod>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b32      	ldr	r3, [pc, #200]	; (80026bc <UART_SetConfig+0x6f4>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	; 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <UART_SetConfig+0x6f4>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002612:	4498      	add	r8, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	469b      	mov	fp, r3
 8002618:	f04f 0c00 	mov.w	ip, #0
 800261c:	46d9      	mov	r9, fp
 800261e:	46e2      	mov	sl, ip
 8002620:	eb19 0309 	adds.w	r3, r9, r9
 8002624:	eb4a 040a 	adc.w	r4, sl, sl
 8002628:	4699      	mov	r9, r3
 800262a:	46a2      	mov	sl, r4
 800262c:	eb19 090b 	adds.w	r9, r9, fp
 8002630:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002640:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002644:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002648:	4689      	mov	r9, r1
 800264a:	4692      	mov	sl, r2
 800264c:	eb1b 0509 	adds.w	r5, fp, r9
 8002650:	eb4c 060a 	adc.w	r6, ip, sl
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4619      	mov	r1, r3
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f04f 0400 	mov.w	r4, #0
 8002666:	0094      	lsls	r4, r2, #2
 8002668:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800266c:	008b      	lsls	r3, r1, #2
 800266e:	461a      	mov	r2, r3
 8002670:	4623      	mov	r3, r4
 8002672:	4628      	mov	r0, r5
 8002674:	4631      	mov	r1, r6
 8002676:	f7fd fe13 	bl	80002a0 <__aeabi_uldivmod>
 800267a:	4603      	mov	r3, r0
 800267c:	460c      	mov	r4, r1
 800267e:	461a      	mov	r2, r3
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <UART_SetConfig+0x6f4>)
 8002682:	fba3 1302 	umull	r1, r3, r3, r2
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2164      	movs	r1, #100	; 0x64
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	3332      	adds	r3, #50	; 0x32
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <UART_SetConfig+0x6f4>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4442      	add	r2, r8
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	e7ff      	b.n	80026aa <UART_SetConfig+0x6e2>
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40011400 	.word	0x40011400
 80026bc:	51eb851f 	.word	0x51eb851f

080026c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490e      	ldr	r1, [pc, #56]	; (8002700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0b      	ldr	r2, [pc, #44]	; (8002708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0b      	ldr	r4, [pc, #44]	; (800270c <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026ea:	f7fe fa2d 	bl	8000b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026ee:	f000 f817 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026f2:	f7fd ff55 	bl	80005a0 <main>

080026f6 <LoopForever>:

LoopForever:
    b LoopForever
 80026f6:	e7fe      	b.n	80026f6 <LoopForever>
  ldr   r0, =_estack
 80026f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002704:	080030e4 	.word	0x080030e4
  ldr r2, =_sbss
 8002708:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800270c:	20000128 	.word	0x20000128

08002710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>
	...

08002714 <__errno>:
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <__errno+0x8>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000000c 	.word	0x2000000c

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4e0d      	ldr	r6, [pc, #52]	; (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002726:	1ba4      	subs	r4, r4, r6
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2500      	movs	r5, #0
 800272c:	42a5      	cmp	r5, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4e0b      	ldr	r6, [pc, #44]	; (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	; (8002764 <__libc_init_array+0x44>)
 8002734:	f000 fc26 	bl	8002f84 <_init>
 8002738:	1ba4      	subs	r4, r4, r6
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2500      	movs	r5, #0
 800273e:	42a5      	cmp	r5, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002748:	4798      	blx	r3
 800274a:	3501      	adds	r5, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002752:	4798      	blx	r3
 8002754:	3501      	adds	r5, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080030dc 	.word	0x080030dc
 800275c:	080030dc 	.word	0x080030dc
 8002760:	080030dc 	.word	0x080030dc
 8002764:	080030e0 	.word	0x080030e0

08002768 <memset>:
 8002768:	4402      	add	r2, r0
 800276a:	4603      	mov	r3, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_vsiprintf_r>:
 8002778:	b500      	push	{lr}
 800277a:	b09b      	sub	sp, #108	; 0x6c
 800277c:	9100      	str	r1, [sp, #0]
 800277e:	9104      	str	r1, [sp, #16]
 8002780:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002784:	9105      	str	r1, [sp, #20]
 8002786:	9102      	str	r1, [sp, #8]
 8002788:	4905      	ldr	r1, [pc, #20]	; (80027a0 <_vsiprintf_r+0x28>)
 800278a:	9103      	str	r1, [sp, #12]
 800278c:	4669      	mov	r1, sp
 800278e:	f000 f86d 	bl	800286c <_svfiprintf_r>
 8002792:	9b00      	ldr	r3, [sp, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	b01b      	add	sp, #108	; 0x6c
 800279a:	f85d fb04 	ldr.w	pc, [sp], #4
 800279e:	bf00      	nop
 80027a0:	ffff0208 	.word	0xffff0208

080027a4 <vsiprintf>:
 80027a4:	4613      	mov	r3, r2
 80027a6:	460a      	mov	r2, r1
 80027a8:	4601      	mov	r1, r0
 80027aa:	4802      	ldr	r0, [pc, #8]	; (80027b4 <vsiprintf+0x10>)
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f7ff bfe3 	b.w	8002778 <_vsiprintf_r>
 80027b2:	bf00      	nop
 80027b4:	2000000c 	.word	0x2000000c

080027b8 <__ssputs_r>:
 80027b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027bc:	688e      	ldr	r6, [r1, #8]
 80027be:	429e      	cmp	r6, r3
 80027c0:	4682      	mov	sl, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	4690      	mov	r8, r2
 80027c6:	4699      	mov	r9, r3
 80027c8:	d837      	bhi.n	800283a <__ssputs_r+0x82>
 80027ca:	898a      	ldrh	r2, [r1, #12]
 80027cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027d0:	d031      	beq.n	8002836 <__ssputs_r+0x7e>
 80027d2:	6825      	ldr	r5, [r4, #0]
 80027d4:	6909      	ldr	r1, [r1, #16]
 80027d6:	1a6f      	subs	r7, r5, r1
 80027d8:	6965      	ldr	r5, [r4, #20]
 80027da:	2302      	movs	r3, #2
 80027dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80027e4:	f109 0301 	add.w	r3, r9, #1
 80027e8:	443b      	add	r3, r7
 80027ea:	429d      	cmp	r5, r3
 80027ec:	bf38      	it	cc
 80027ee:	461d      	movcc	r5, r3
 80027f0:	0553      	lsls	r3, r2, #21
 80027f2:	d530      	bpl.n	8002856 <__ssputs_r+0x9e>
 80027f4:	4629      	mov	r1, r5
 80027f6:	f000 fb2b 	bl	8002e50 <_malloc_r>
 80027fa:	4606      	mov	r6, r0
 80027fc:	b950      	cbnz	r0, 8002814 <__ssputs_r+0x5c>
 80027fe:	230c      	movs	r3, #12
 8002800:	f8ca 3000 	str.w	r3, [sl]
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800280a:	81a3      	strh	r3, [r4, #12]
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002814:	463a      	mov	r2, r7
 8002816:	6921      	ldr	r1, [r4, #16]
 8002818:	f000 faa8 	bl	8002d6c <memcpy>
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	6126      	str	r6, [r4, #16]
 800282a:	6165      	str	r5, [r4, #20]
 800282c:	443e      	add	r6, r7
 800282e:	1bed      	subs	r5, r5, r7
 8002830:	6026      	str	r6, [r4, #0]
 8002832:	60a5      	str	r5, [r4, #8]
 8002834:	464e      	mov	r6, r9
 8002836:	454e      	cmp	r6, r9
 8002838:	d900      	bls.n	800283c <__ssputs_r+0x84>
 800283a:	464e      	mov	r6, r9
 800283c:	4632      	mov	r2, r6
 800283e:	4641      	mov	r1, r8
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	f000 fa9e 	bl	8002d82 <memmove>
 8002846:	68a3      	ldr	r3, [r4, #8]
 8002848:	1b9b      	subs	r3, r3, r6
 800284a:	60a3      	str	r3, [r4, #8]
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	441e      	add	r6, r3
 8002850:	6026      	str	r6, [r4, #0]
 8002852:	2000      	movs	r0, #0
 8002854:	e7dc      	b.n	8002810 <__ssputs_r+0x58>
 8002856:	462a      	mov	r2, r5
 8002858:	f000 fb54 	bl	8002f04 <_realloc_r>
 800285c:	4606      	mov	r6, r0
 800285e:	2800      	cmp	r0, #0
 8002860:	d1e2      	bne.n	8002828 <__ssputs_r+0x70>
 8002862:	6921      	ldr	r1, [r4, #16]
 8002864:	4650      	mov	r0, sl
 8002866:	f000 faa5 	bl	8002db4 <_free_r>
 800286a:	e7c8      	b.n	80027fe <__ssputs_r+0x46>

0800286c <_svfiprintf_r>:
 800286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002870:	461d      	mov	r5, r3
 8002872:	898b      	ldrh	r3, [r1, #12]
 8002874:	061f      	lsls	r7, r3, #24
 8002876:	b09d      	sub	sp, #116	; 0x74
 8002878:	4680      	mov	r8, r0
 800287a:	460c      	mov	r4, r1
 800287c:	4616      	mov	r6, r2
 800287e:	d50f      	bpl.n	80028a0 <_svfiprintf_r+0x34>
 8002880:	690b      	ldr	r3, [r1, #16]
 8002882:	b96b      	cbnz	r3, 80028a0 <_svfiprintf_r+0x34>
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	f000 fae3 	bl	8002e50 <_malloc_r>
 800288a:	6020      	str	r0, [r4, #0]
 800288c:	6120      	str	r0, [r4, #16]
 800288e:	b928      	cbnz	r0, 800289c <_svfiprintf_r+0x30>
 8002890:	230c      	movs	r3, #12
 8002892:	f8c8 3000 	str.w	r3, [r8]
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	e0c8      	b.n	8002a2e <_svfiprintf_r+0x1c2>
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	6163      	str	r3, [r4, #20]
 80028a0:	2300      	movs	r3, #0
 80028a2:	9309      	str	r3, [sp, #36]	; 0x24
 80028a4:	2320      	movs	r3, #32
 80028a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028aa:	2330      	movs	r3, #48	; 0x30
 80028ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	f04f 0b01 	mov.w	fp, #1
 80028b6:	4637      	mov	r7, r6
 80028b8:	463d      	mov	r5, r7
 80028ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028be:	b10b      	cbz	r3, 80028c4 <_svfiprintf_r+0x58>
 80028c0:	2b25      	cmp	r3, #37	; 0x25
 80028c2:	d13e      	bne.n	8002942 <_svfiprintf_r+0xd6>
 80028c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80028c8:	d00b      	beq.n	80028e2 <_svfiprintf_r+0x76>
 80028ca:	4653      	mov	r3, sl
 80028cc:	4632      	mov	r2, r6
 80028ce:	4621      	mov	r1, r4
 80028d0:	4640      	mov	r0, r8
 80028d2:	f7ff ff71 	bl	80027b8 <__ssputs_r>
 80028d6:	3001      	adds	r0, #1
 80028d8:	f000 80a4 	beq.w	8002a24 <_svfiprintf_r+0x1b8>
 80028dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028de:	4453      	add	r3, sl
 80028e0:	9309      	str	r3, [sp, #36]	; 0x24
 80028e2:	783b      	ldrb	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 809d 	beq.w	8002a24 <_svfiprintf_r+0x1b8>
 80028ea:	2300      	movs	r3, #0
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028f4:	9304      	str	r3, [sp, #16]
 80028f6:	9307      	str	r3, [sp, #28]
 80028f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028fc:	931a      	str	r3, [sp, #104]	; 0x68
 80028fe:	462f      	mov	r7, r5
 8002900:	2205      	movs	r2, #5
 8002902:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002906:	4850      	ldr	r0, [pc, #320]	; (8002a48 <_svfiprintf_r+0x1dc>)
 8002908:	f7fd fc7a 	bl	8000200 <memchr>
 800290c:	9b04      	ldr	r3, [sp, #16]
 800290e:	b9d0      	cbnz	r0, 8002946 <_svfiprintf_r+0xda>
 8002910:	06d9      	lsls	r1, r3, #27
 8002912:	bf44      	itt	mi
 8002914:	2220      	movmi	r2, #32
 8002916:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800291a:	071a      	lsls	r2, r3, #28
 800291c:	bf44      	itt	mi
 800291e:	222b      	movmi	r2, #43	; 0x2b
 8002920:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002924:	782a      	ldrb	r2, [r5, #0]
 8002926:	2a2a      	cmp	r2, #42	; 0x2a
 8002928:	d015      	beq.n	8002956 <_svfiprintf_r+0xea>
 800292a:	9a07      	ldr	r2, [sp, #28]
 800292c:	462f      	mov	r7, r5
 800292e:	2000      	movs	r0, #0
 8002930:	250a      	movs	r5, #10
 8002932:	4639      	mov	r1, r7
 8002934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002938:	3b30      	subs	r3, #48	; 0x30
 800293a:	2b09      	cmp	r3, #9
 800293c:	d94d      	bls.n	80029da <_svfiprintf_r+0x16e>
 800293e:	b1b8      	cbz	r0, 8002970 <_svfiprintf_r+0x104>
 8002940:	e00f      	b.n	8002962 <_svfiprintf_r+0xf6>
 8002942:	462f      	mov	r7, r5
 8002944:	e7b8      	b.n	80028b8 <_svfiprintf_r+0x4c>
 8002946:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <_svfiprintf_r+0x1dc>)
 8002948:	1a80      	subs	r0, r0, r2
 800294a:	fa0b f000 	lsl.w	r0, fp, r0
 800294e:	4318      	orrs	r0, r3
 8002950:	9004      	str	r0, [sp, #16]
 8002952:	463d      	mov	r5, r7
 8002954:	e7d3      	b.n	80028fe <_svfiprintf_r+0x92>
 8002956:	9a03      	ldr	r2, [sp, #12]
 8002958:	1d11      	adds	r1, r2, #4
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	9103      	str	r1, [sp, #12]
 800295e:	2a00      	cmp	r2, #0
 8002960:	db01      	blt.n	8002966 <_svfiprintf_r+0xfa>
 8002962:	9207      	str	r2, [sp, #28]
 8002964:	e004      	b.n	8002970 <_svfiprintf_r+0x104>
 8002966:	4252      	negs	r2, r2
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	9207      	str	r2, [sp, #28]
 800296e:	9304      	str	r3, [sp, #16]
 8002970:	783b      	ldrb	r3, [r7, #0]
 8002972:	2b2e      	cmp	r3, #46	; 0x2e
 8002974:	d10c      	bne.n	8002990 <_svfiprintf_r+0x124>
 8002976:	787b      	ldrb	r3, [r7, #1]
 8002978:	2b2a      	cmp	r3, #42	; 0x2a
 800297a:	d133      	bne.n	80029e4 <_svfiprintf_r+0x178>
 800297c:	9b03      	ldr	r3, [sp, #12]
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	9203      	str	r2, [sp, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	bfb8      	it	lt
 8002988:	f04f 33ff 	movlt.w	r3, #4294967295
 800298c:	3702      	adds	r7, #2
 800298e:	9305      	str	r3, [sp, #20]
 8002990:	4d2e      	ldr	r5, [pc, #184]	; (8002a4c <_svfiprintf_r+0x1e0>)
 8002992:	7839      	ldrb	r1, [r7, #0]
 8002994:	2203      	movs	r2, #3
 8002996:	4628      	mov	r0, r5
 8002998:	f7fd fc32 	bl	8000200 <memchr>
 800299c:	b138      	cbz	r0, 80029ae <_svfiprintf_r+0x142>
 800299e:	2340      	movs	r3, #64	; 0x40
 80029a0:	1b40      	subs	r0, r0, r5
 80029a2:	fa03 f000 	lsl.w	r0, r3, r0
 80029a6:	9b04      	ldr	r3, [sp, #16]
 80029a8:	4303      	orrs	r3, r0
 80029aa:	3701      	adds	r7, #1
 80029ac:	9304      	str	r3, [sp, #16]
 80029ae:	7839      	ldrb	r1, [r7, #0]
 80029b0:	4827      	ldr	r0, [pc, #156]	; (8002a50 <_svfiprintf_r+0x1e4>)
 80029b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029b6:	2206      	movs	r2, #6
 80029b8:	1c7e      	adds	r6, r7, #1
 80029ba:	f7fd fc21 	bl	8000200 <memchr>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d038      	beq.n	8002a34 <_svfiprintf_r+0x1c8>
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <_svfiprintf_r+0x1e8>)
 80029c4:	bb13      	cbnz	r3, 8002a0c <_svfiprintf_r+0x1a0>
 80029c6:	9b03      	ldr	r3, [sp, #12]
 80029c8:	3307      	adds	r3, #7
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	3308      	adds	r3, #8
 80029d0:	9303      	str	r3, [sp, #12]
 80029d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d4:	444b      	add	r3, r9
 80029d6:	9309      	str	r3, [sp, #36]	; 0x24
 80029d8:	e76d      	b.n	80028b6 <_svfiprintf_r+0x4a>
 80029da:	fb05 3202 	mla	r2, r5, r2, r3
 80029de:	2001      	movs	r0, #1
 80029e0:	460f      	mov	r7, r1
 80029e2:	e7a6      	b.n	8002932 <_svfiprintf_r+0xc6>
 80029e4:	2300      	movs	r3, #0
 80029e6:	3701      	adds	r7, #1
 80029e8:	9305      	str	r3, [sp, #20]
 80029ea:	4619      	mov	r1, r3
 80029ec:	250a      	movs	r5, #10
 80029ee:	4638      	mov	r0, r7
 80029f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029f4:	3a30      	subs	r2, #48	; 0x30
 80029f6:	2a09      	cmp	r2, #9
 80029f8:	d903      	bls.n	8002a02 <_svfiprintf_r+0x196>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0c8      	beq.n	8002990 <_svfiprintf_r+0x124>
 80029fe:	9105      	str	r1, [sp, #20]
 8002a00:	e7c6      	b.n	8002990 <_svfiprintf_r+0x124>
 8002a02:	fb05 2101 	mla	r1, r5, r1, r2
 8002a06:	2301      	movs	r3, #1
 8002a08:	4607      	mov	r7, r0
 8002a0a:	e7f0      	b.n	80029ee <_svfiprintf_r+0x182>
 8002a0c:	ab03      	add	r3, sp, #12
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	4622      	mov	r2, r4
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <_svfiprintf_r+0x1ec>)
 8002a14:	a904      	add	r1, sp, #16
 8002a16:	4640      	mov	r0, r8
 8002a18:	f3af 8000 	nop.w
 8002a1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a20:	4681      	mov	r9, r0
 8002a22:	d1d6      	bne.n	80029d2 <_svfiprintf_r+0x166>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	065b      	lsls	r3, r3, #25
 8002a28:	f53f af35 	bmi.w	8002896 <_svfiprintf_r+0x2a>
 8002a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a2e:	b01d      	add	sp, #116	; 0x74
 8002a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a34:	ab03      	add	r3, sp, #12
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <_svfiprintf_r+0x1ec>)
 8002a3c:	a904      	add	r1, sp, #16
 8002a3e:	4640      	mov	r0, r8
 8002a40:	f000 f882 	bl	8002b48 <_printf_i>
 8002a44:	e7ea      	b.n	8002a1c <_svfiprintf_r+0x1b0>
 8002a46:	bf00      	nop
 8002a48:	080030a0 	.word	0x080030a0
 8002a4c:	080030a6 	.word	0x080030a6
 8002a50:	080030aa 	.word	0x080030aa
 8002a54:	00000000 	.word	0x00000000
 8002a58:	080027b9 	.word	0x080027b9

08002a5c <_printf_common>:
 8002a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a60:	4691      	mov	r9, r2
 8002a62:	461f      	mov	r7, r3
 8002a64:	688a      	ldr	r2, [r1, #8]
 8002a66:	690b      	ldr	r3, [r1, #16]
 8002a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	bfb8      	it	lt
 8002a70:	4613      	movlt	r3, r2
 8002a72:	f8c9 3000 	str.w	r3, [r9]
 8002a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a7a:	4606      	mov	r6, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	b112      	cbz	r2, 8002a86 <_printf_common+0x2a>
 8002a80:	3301      	adds	r3, #1
 8002a82:	f8c9 3000 	str.w	r3, [r9]
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	0699      	lsls	r1, r3, #26
 8002a8a:	bf42      	ittt	mi
 8002a8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a90:	3302      	addmi	r3, #2
 8002a92:	f8c9 3000 	strmi.w	r3, [r9]
 8002a96:	6825      	ldr	r5, [r4, #0]
 8002a98:	f015 0506 	ands.w	r5, r5, #6
 8002a9c:	d107      	bne.n	8002aae <_printf_common+0x52>
 8002a9e:	f104 0a19 	add.w	sl, r4, #25
 8002aa2:	68e3      	ldr	r3, [r4, #12]
 8002aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	42ab      	cmp	r3, r5
 8002aac:	dc28      	bgt.n	8002b00 <_printf_common+0xa4>
 8002aae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	3300      	adds	r3, #0
 8002ab6:	bf18      	it	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	0692      	lsls	r2, r2, #26
 8002abc:	d42d      	bmi.n	8002b1a <_printf_common+0xbe>
 8002abe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	47c0      	blx	r8
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d020      	beq.n	8002b0e <_printf_common+0xb2>
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	68e5      	ldr	r5, [r4, #12]
 8002ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ad4:	f003 0306 	and.w	r3, r3, #6
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	bf08      	it	eq
 8002adc:	1aad      	subeq	r5, r5, r2
 8002ade:	68a3      	ldr	r3, [r4, #8]
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	bf0c      	ite	eq
 8002ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ae8:	2500      	movne	r5, #0
 8002aea:	4293      	cmp	r3, r2
 8002aec:	bfc4      	itt	gt
 8002aee:	1a9b      	subgt	r3, r3, r2
 8002af0:	18ed      	addgt	r5, r5, r3
 8002af2:	f04f 0900 	mov.w	r9, #0
 8002af6:	341a      	adds	r4, #26
 8002af8:	454d      	cmp	r5, r9
 8002afa:	d11a      	bne.n	8002b32 <_printf_common+0xd6>
 8002afc:	2000      	movs	r0, #0
 8002afe:	e008      	b.n	8002b12 <_printf_common+0xb6>
 8002b00:	2301      	movs	r3, #1
 8002b02:	4652      	mov	r2, sl
 8002b04:	4639      	mov	r1, r7
 8002b06:	4630      	mov	r0, r6
 8002b08:	47c0      	blx	r8
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d103      	bne.n	8002b16 <_printf_common+0xba>
 8002b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b16:	3501      	adds	r5, #1
 8002b18:	e7c3      	b.n	8002aa2 <_printf_common+0x46>
 8002b1a:	18e1      	adds	r1, r4, r3
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	2030      	movs	r0, #48	; 0x30
 8002b20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b24:	4422      	add	r2, r4
 8002b26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b2e:	3302      	adds	r3, #2
 8002b30:	e7c5      	b.n	8002abe <_printf_common+0x62>
 8002b32:	2301      	movs	r3, #1
 8002b34:	4622      	mov	r2, r4
 8002b36:	4639      	mov	r1, r7
 8002b38:	4630      	mov	r0, r6
 8002b3a:	47c0      	blx	r8
 8002b3c:	3001      	adds	r0, #1
 8002b3e:	d0e6      	beq.n	8002b0e <_printf_common+0xb2>
 8002b40:	f109 0901 	add.w	r9, r9, #1
 8002b44:	e7d8      	b.n	8002af8 <_printf_common+0x9c>
	...

08002b48 <_printf_i>:
 8002b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b50:	460c      	mov	r4, r1
 8002b52:	7e09      	ldrb	r1, [r1, #24]
 8002b54:	b085      	sub	sp, #20
 8002b56:	296e      	cmp	r1, #110	; 0x6e
 8002b58:	4617      	mov	r7, r2
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b60:	f000 80b3 	beq.w	8002cca <_printf_i+0x182>
 8002b64:	d822      	bhi.n	8002bac <_printf_i+0x64>
 8002b66:	2963      	cmp	r1, #99	; 0x63
 8002b68:	d036      	beq.n	8002bd8 <_printf_i+0x90>
 8002b6a:	d80a      	bhi.n	8002b82 <_printf_i+0x3a>
 8002b6c:	2900      	cmp	r1, #0
 8002b6e:	f000 80b9 	beq.w	8002ce4 <_printf_i+0x19c>
 8002b72:	2958      	cmp	r1, #88	; 0x58
 8002b74:	f000 8083 	beq.w	8002c7e <_printf_i+0x136>
 8002b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b80:	e032      	b.n	8002be8 <_printf_i+0xa0>
 8002b82:	2964      	cmp	r1, #100	; 0x64
 8002b84:	d001      	beq.n	8002b8a <_printf_i+0x42>
 8002b86:	2969      	cmp	r1, #105	; 0x69
 8002b88:	d1f6      	bne.n	8002b78 <_printf_i+0x30>
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	6813      	ldr	r3, [r2, #0]
 8002b8e:	0605      	lsls	r5, r0, #24
 8002b90:	f103 0104 	add.w	r1, r3, #4
 8002b94:	d52a      	bpl.n	8002bec <_printf_i+0xa4>
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6011      	str	r1, [r2, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da03      	bge.n	8002ba6 <_printf_i+0x5e>
 8002b9e:	222d      	movs	r2, #45	; 0x2d
 8002ba0:	425b      	negs	r3, r3
 8002ba2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ba6:	486f      	ldr	r0, [pc, #444]	; (8002d64 <_printf_i+0x21c>)
 8002ba8:	220a      	movs	r2, #10
 8002baa:	e039      	b.n	8002c20 <_printf_i+0xd8>
 8002bac:	2973      	cmp	r1, #115	; 0x73
 8002bae:	f000 809d 	beq.w	8002cec <_printf_i+0x1a4>
 8002bb2:	d808      	bhi.n	8002bc6 <_printf_i+0x7e>
 8002bb4:	296f      	cmp	r1, #111	; 0x6f
 8002bb6:	d020      	beq.n	8002bfa <_printf_i+0xb2>
 8002bb8:	2970      	cmp	r1, #112	; 0x70
 8002bba:	d1dd      	bne.n	8002b78 <_printf_i+0x30>
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	f043 0320 	orr.w	r3, r3, #32
 8002bc2:	6023      	str	r3, [r4, #0]
 8002bc4:	e003      	b.n	8002bce <_printf_i+0x86>
 8002bc6:	2975      	cmp	r1, #117	; 0x75
 8002bc8:	d017      	beq.n	8002bfa <_printf_i+0xb2>
 8002bca:	2978      	cmp	r1, #120	; 0x78
 8002bcc:	d1d4      	bne.n	8002b78 <_printf_i+0x30>
 8002bce:	2378      	movs	r3, #120	; 0x78
 8002bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bd4:	4864      	ldr	r0, [pc, #400]	; (8002d68 <_printf_i+0x220>)
 8002bd6:	e055      	b.n	8002c84 <_printf_i+0x13c>
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	1d19      	adds	r1, r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6011      	str	r1, [r2, #0]
 8002be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002be8:	2301      	movs	r3, #1
 8002bea:	e08c      	b.n	8002d06 <_printf_i+0x1be>
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6011      	str	r1, [r2, #0]
 8002bf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bf4:	bf18      	it	ne
 8002bf6:	b21b      	sxthne	r3, r3
 8002bf8:	e7cf      	b.n	8002b9a <_printf_i+0x52>
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	6825      	ldr	r5, [r4, #0]
 8002bfe:	1d18      	adds	r0, r3, #4
 8002c00:	6010      	str	r0, [r2, #0]
 8002c02:	0628      	lsls	r0, r5, #24
 8002c04:	d501      	bpl.n	8002c0a <_printf_i+0xc2>
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	e002      	b.n	8002c10 <_printf_i+0xc8>
 8002c0a:	0668      	lsls	r0, r5, #25
 8002c0c:	d5fb      	bpl.n	8002c06 <_printf_i+0xbe>
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	4854      	ldr	r0, [pc, #336]	; (8002d64 <_printf_i+0x21c>)
 8002c12:	296f      	cmp	r1, #111	; 0x6f
 8002c14:	bf14      	ite	ne
 8002c16:	220a      	movne	r2, #10
 8002c18:	2208      	moveq	r2, #8
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c20:	6865      	ldr	r5, [r4, #4]
 8002c22:	60a5      	str	r5, [r4, #8]
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	f2c0 8095 	blt.w	8002d54 <_printf_i+0x20c>
 8002c2a:	6821      	ldr	r1, [r4, #0]
 8002c2c:	f021 0104 	bic.w	r1, r1, #4
 8002c30:	6021      	str	r1, [r4, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13d      	bne.n	8002cb2 <_printf_i+0x16a>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	f040 808e 	bne.w	8002d58 <_printf_i+0x210>
 8002c3c:	4665      	mov	r5, ip
 8002c3e:	2a08      	cmp	r2, #8
 8002c40:	d10b      	bne.n	8002c5a <_printf_i+0x112>
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	07db      	lsls	r3, r3, #31
 8002c46:	d508      	bpl.n	8002c5a <_printf_i+0x112>
 8002c48:	6923      	ldr	r3, [r4, #16]
 8002c4a:	6862      	ldr	r2, [r4, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	bfde      	ittt	le
 8002c50:	2330      	movle	r3, #48	; 0x30
 8002c52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c5a:	ebac 0305 	sub.w	r3, ip, r5
 8002c5e:	6123      	str	r3, [r4, #16]
 8002c60:	f8cd 8000 	str.w	r8, [sp]
 8002c64:	463b      	mov	r3, r7
 8002c66:	aa03      	add	r2, sp, #12
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f7ff fef6 	bl	8002a5c <_printf_common>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d14d      	bne.n	8002d10 <_printf_i+0x1c8>
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	b005      	add	sp, #20
 8002c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c7e:	4839      	ldr	r0, [pc, #228]	; (8002d64 <_printf_i+0x21c>)
 8002c80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002c84:	6813      	ldr	r3, [r2, #0]
 8002c86:	6821      	ldr	r1, [r4, #0]
 8002c88:	1d1d      	adds	r5, r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6015      	str	r5, [r2, #0]
 8002c8e:	060a      	lsls	r2, r1, #24
 8002c90:	d50b      	bpl.n	8002caa <_printf_i+0x162>
 8002c92:	07ca      	lsls	r2, r1, #31
 8002c94:	bf44      	itt	mi
 8002c96:	f041 0120 	orrmi.w	r1, r1, #32
 8002c9a:	6021      	strmi	r1, [r4, #0]
 8002c9c:	b91b      	cbnz	r3, 8002ca6 <_printf_i+0x15e>
 8002c9e:	6822      	ldr	r2, [r4, #0]
 8002ca0:	f022 0220 	bic.w	r2, r2, #32
 8002ca4:	6022      	str	r2, [r4, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	e7b7      	b.n	8002c1a <_printf_i+0xd2>
 8002caa:	064d      	lsls	r5, r1, #25
 8002cac:	bf48      	it	mi
 8002cae:	b29b      	uxthmi	r3, r3
 8002cb0:	e7ef      	b.n	8002c92 <_printf_i+0x14a>
 8002cb2:	4665      	mov	r5, ip
 8002cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cb8:	fb02 3311 	mls	r3, r2, r1, r3
 8002cbc:	5cc3      	ldrb	r3, [r0, r3]
 8002cbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	d1f5      	bne.n	8002cb4 <_printf_i+0x16c>
 8002cc8:	e7b9      	b.n	8002c3e <_printf_i+0xf6>
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	6825      	ldr	r5, [r4, #0]
 8002cce:	6961      	ldr	r1, [r4, #20]
 8002cd0:	1d18      	adds	r0, r3, #4
 8002cd2:	6010      	str	r0, [r2, #0]
 8002cd4:	0628      	lsls	r0, r5, #24
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	d501      	bpl.n	8002cde <_printf_i+0x196>
 8002cda:	6019      	str	r1, [r3, #0]
 8002cdc:	e002      	b.n	8002ce4 <_printf_i+0x19c>
 8002cde:	066a      	lsls	r2, r5, #25
 8002ce0:	d5fb      	bpl.n	8002cda <_printf_i+0x192>
 8002ce2:	8019      	strh	r1, [r3, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	4665      	mov	r5, ip
 8002cea:	e7b9      	b.n	8002c60 <_printf_i+0x118>
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	1d19      	adds	r1, r3, #4
 8002cf0:	6011      	str	r1, [r2, #0]
 8002cf2:	681d      	ldr	r5, [r3, #0]
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7fd fa81 	bl	8000200 <memchr>
 8002cfe:	b108      	cbz	r0, 8002d04 <_printf_i+0x1bc>
 8002d00:	1b40      	subs	r0, r0, r5
 8002d02:	6060      	str	r0, [r4, #4]
 8002d04:	6863      	ldr	r3, [r4, #4]
 8002d06:	6123      	str	r3, [r4, #16]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d0e:	e7a7      	b.n	8002c60 <_printf_i+0x118>
 8002d10:	6923      	ldr	r3, [r4, #16]
 8002d12:	462a      	mov	r2, r5
 8002d14:	4639      	mov	r1, r7
 8002d16:	4630      	mov	r0, r6
 8002d18:	47c0      	blx	r8
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	d0aa      	beq.n	8002c74 <_printf_i+0x12c>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	079b      	lsls	r3, r3, #30
 8002d22:	d413      	bmi.n	8002d4c <_printf_i+0x204>
 8002d24:	68e0      	ldr	r0, [r4, #12]
 8002d26:	9b03      	ldr	r3, [sp, #12]
 8002d28:	4298      	cmp	r0, r3
 8002d2a:	bfb8      	it	lt
 8002d2c:	4618      	movlt	r0, r3
 8002d2e:	e7a3      	b.n	8002c78 <_printf_i+0x130>
 8002d30:	2301      	movs	r3, #1
 8002d32:	464a      	mov	r2, r9
 8002d34:	4639      	mov	r1, r7
 8002d36:	4630      	mov	r0, r6
 8002d38:	47c0      	blx	r8
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	d09a      	beq.n	8002c74 <_printf_i+0x12c>
 8002d3e:	3501      	adds	r5, #1
 8002d40:	68e3      	ldr	r3, [r4, #12]
 8002d42:	9a03      	ldr	r2, [sp, #12]
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	42ab      	cmp	r3, r5
 8002d48:	dcf2      	bgt.n	8002d30 <_printf_i+0x1e8>
 8002d4a:	e7eb      	b.n	8002d24 <_printf_i+0x1dc>
 8002d4c:	2500      	movs	r5, #0
 8002d4e:	f104 0919 	add.w	r9, r4, #25
 8002d52:	e7f5      	b.n	8002d40 <_printf_i+0x1f8>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1ac      	bne.n	8002cb2 <_printf_i+0x16a>
 8002d58:	7803      	ldrb	r3, [r0, #0]
 8002d5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d62:	e76c      	b.n	8002c3e <_printf_i+0xf6>
 8002d64:	080030b1 	.word	0x080030b1
 8002d68:	080030c2 	.word	0x080030c2

08002d6c <memcpy>:
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	1e43      	subs	r3, r0, #1
 8002d70:	440a      	add	r2, r1
 8002d72:	4291      	cmp	r1, r2
 8002d74:	d100      	bne.n	8002d78 <memcpy+0xc>
 8002d76:	bd10      	pop	{r4, pc}
 8002d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d80:	e7f7      	b.n	8002d72 <memcpy+0x6>

08002d82 <memmove>:
 8002d82:	4288      	cmp	r0, r1
 8002d84:	b510      	push	{r4, lr}
 8002d86:	eb01 0302 	add.w	r3, r1, r2
 8002d8a:	d807      	bhi.n	8002d9c <memmove+0x1a>
 8002d8c:	1e42      	subs	r2, r0, #1
 8002d8e:	4299      	cmp	r1, r3
 8002d90:	d00a      	beq.n	8002da8 <memmove+0x26>
 8002d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d9a:	e7f8      	b.n	8002d8e <memmove+0xc>
 8002d9c:	4283      	cmp	r3, r0
 8002d9e:	d9f5      	bls.n	8002d8c <memmove+0xa>
 8002da0:	1881      	adds	r1, r0, r2
 8002da2:	1ad2      	subs	r2, r2, r3
 8002da4:	42d3      	cmn	r3, r2
 8002da6:	d100      	bne.n	8002daa <memmove+0x28>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002db2:	e7f7      	b.n	8002da4 <memmove+0x22>

08002db4 <_free_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4605      	mov	r5, r0
 8002db8:	2900      	cmp	r1, #0
 8002dba:	d045      	beq.n	8002e48 <_free_r+0x94>
 8002dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc0:	1f0c      	subs	r4, r1, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfb8      	it	lt
 8002dc6:	18e4      	addlt	r4, r4, r3
 8002dc8:	f000 f8d2 	bl	8002f70 <__malloc_lock>
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <_free_r+0x98>)
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	b933      	cbnz	r3, 8002de2 <_free_r+0x2e>
 8002dd4:	6063      	str	r3, [r4, #4]
 8002dd6:	6014      	str	r4, [r2, #0]
 8002dd8:	4628      	mov	r0, r5
 8002dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dde:	f000 b8c8 	b.w	8002f72 <__malloc_unlock>
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	d90c      	bls.n	8002e00 <_free_r+0x4c>
 8002de6:	6821      	ldr	r1, [r4, #0]
 8002de8:	1862      	adds	r2, r4, r1
 8002dea:	4293      	cmp	r3, r2
 8002dec:	bf04      	itt	eq
 8002dee:	681a      	ldreq	r2, [r3, #0]
 8002df0:	685b      	ldreq	r3, [r3, #4]
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	bf04      	itt	eq
 8002df6:	1852      	addeq	r2, r2, r1
 8002df8:	6022      	streq	r2, [r4, #0]
 8002dfa:	6004      	str	r4, [r0, #0]
 8002dfc:	e7ec      	b.n	8002dd8 <_free_r+0x24>
 8002dfe:	4613      	mov	r3, r2
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	b10a      	cbz	r2, 8002e08 <_free_r+0x54>
 8002e04:	42a2      	cmp	r2, r4
 8002e06:	d9fa      	bls.n	8002dfe <_free_r+0x4a>
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	1858      	adds	r0, r3, r1
 8002e0c:	42a0      	cmp	r0, r4
 8002e0e:	d10b      	bne.n	8002e28 <_free_r+0x74>
 8002e10:	6820      	ldr	r0, [r4, #0]
 8002e12:	4401      	add	r1, r0
 8002e14:	1858      	adds	r0, r3, r1
 8002e16:	4282      	cmp	r2, r0
 8002e18:	6019      	str	r1, [r3, #0]
 8002e1a:	d1dd      	bne.n	8002dd8 <_free_r+0x24>
 8002e1c:	6810      	ldr	r0, [r2, #0]
 8002e1e:	6852      	ldr	r2, [r2, #4]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	4401      	add	r1, r0
 8002e24:	6019      	str	r1, [r3, #0]
 8002e26:	e7d7      	b.n	8002dd8 <_free_r+0x24>
 8002e28:	d902      	bls.n	8002e30 <_free_r+0x7c>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	602b      	str	r3, [r5, #0]
 8002e2e:	e7d3      	b.n	8002dd8 <_free_r+0x24>
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	1821      	adds	r1, r4, r0
 8002e34:	428a      	cmp	r2, r1
 8002e36:	bf04      	itt	eq
 8002e38:	6811      	ldreq	r1, [r2, #0]
 8002e3a:	6852      	ldreq	r2, [r2, #4]
 8002e3c:	6062      	str	r2, [r4, #4]
 8002e3e:	bf04      	itt	eq
 8002e40:	1809      	addeq	r1, r1, r0
 8002e42:	6021      	streq	r1, [r4, #0]
 8002e44:	605c      	str	r4, [r3, #4]
 8002e46:	e7c7      	b.n	8002dd8 <_free_r+0x24>
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000090 	.word	0x20000090

08002e50 <_malloc_r>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	1ccd      	adds	r5, r1, #3
 8002e54:	f025 0503 	bic.w	r5, r5, #3
 8002e58:	3508      	adds	r5, #8
 8002e5a:	2d0c      	cmp	r5, #12
 8002e5c:	bf38      	it	cc
 8002e5e:	250c      	movcc	r5, #12
 8002e60:	2d00      	cmp	r5, #0
 8002e62:	4606      	mov	r6, r0
 8002e64:	db01      	blt.n	8002e6a <_malloc_r+0x1a>
 8002e66:	42a9      	cmp	r1, r5
 8002e68:	d903      	bls.n	8002e72 <_malloc_r+0x22>
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	6033      	str	r3, [r6, #0]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	f000 f87d 	bl	8002f70 <__malloc_lock>
 8002e76:	4a21      	ldr	r2, [pc, #132]	; (8002efc <_malloc_r+0xac>)
 8002e78:	6814      	ldr	r4, [r2, #0]
 8002e7a:	4621      	mov	r1, r4
 8002e7c:	b991      	cbnz	r1, 8002ea4 <_malloc_r+0x54>
 8002e7e:	4c20      	ldr	r4, [pc, #128]	; (8002f00 <_malloc_r+0xb0>)
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	b91b      	cbnz	r3, 8002e8c <_malloc_r+0x3c>
 8002e84:	4630      	mov	r0, r6
 8002e86:	f000 f863 	bl	8002f50 <_sbrk_r>
 8002e8a:	6020      	str	r0, [r4, #0]
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4630      	mov	r0, r6
 8002e90:	f000 f85e 	bl	8002f50 <_sbrk_r>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d124      	bne.n	8002ee2 <_malloc_r+0x92>
 8002e98:	230c      	movs	r3, #12
 8002e9a:	6033      	str	r3, [r6, #0]
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	f000 f868 	bl	8002f72 <__malloc_unlock>
 8002ea2:	e7e4      	b.n	8002e6e <_malloc_r+0x1e>
 8002ea4:	680b      	ldr	r3, [r1, #0]
 8002ea6:	1b5b      	subs	r3, r3, r5
 8002ea8:	d418      	bmi.n	8002edc <_malloc_r+0x8c>
 8002eaa:	2b0b      	cmp	r3, #11
 8002eac:	d90f      	bls.n	8002ece <_malloc_r+0x7e>
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	50cd      	str	r5, [r1, r3]
 8002eb2:	18cc      	adds	r4, r1, r3
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f85c 	bl	8002f72 <__malloc_unlock>
 8002eba:	f104 000b 	add.w	r0, r4, #11
 8002ebe:	1d23      	adds	r3, r4, #4
 8002ec0:	f020 0007 	bic.w	r0, r0, #7
 8002ec4:	1ac3      	subs	r3, r0, r3
 8002ec6:	d0d3      	beq.n	8002e70 <_malloc_r+0x20>
 8002ec8:	425a      	negs	r2, r3
 8002eca:	50e2      	str	r2, [r4, r3]
 8002ecc:	e7d0      	b.n	8002e70 <_malloc_r+0x20>
 8002ece:	428c      	cmp	r4, r1
 8002ed0:	684b      	ldr	r3, [r1, #4]
 8002ed2:	bf16      	itet	ne
 8002ed4:	6063      	strne	r3, [r4, #4]
 8002ed6:	6013      	streq	r3, [r2, #0]
 8002ed8:	460c      	movne	r4, r1
 8002eda:	e7eb      	b.n	8002eb4 <_malloc_r+0x64>
 8002edc:	460c      	mov	r4, r1
 8002ede:	6849      	ldr	r1, [r1, #4]
 8002ee0:	e7cc      	b.n	8002e7c <_malloc_r+0x2c>
 8002ee2:	1cc4      	adds	r4, r0, #3
 8002ee4:	f024 0403 	bic.w	r4, r4, #3
 8002ee8:	42a0      	cmp	r0, r4
 8002eea:	d005      	beq.n	8002ef8 <_malloc_r+0xa8>
 8002eec:	1a21      	subs	r1, r4, r0
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f000 f82e 	bl	8002f50 <_sbrk_r>
 8002ef4:	3001      	adds	r0, #1
 8002ef6:	d0cf      	beq.n	8002e98 <_malloc_r+0x48>
 8002ef8:	6025      	str	r5, [r4, #0]
 8002efa:	e7db      	b.n	8002eb4 <_malloc_r+0x64>
 8002efc:	20000090 	.word	0x20000090
 8002f00:	20000094 	.word	0x20000094

08002f04 <_realloc_r>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	4607      	mov	r7, r0
 8002f08:	4614      	mov	r4, r2
 8002f0a:	460e      	mov	r6, r1
 8002f0c:	b921      	cbnz	r1, 8002f18 <_realloc_r+0x14>
 8002f0e:	4611      	mov	r1, r2
 8002f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f14:	f7ff bf9c 	b.w	8002e50 <_malloc_r>
 8002f18:	b922      	cbnz	r2, 8002f24 <_realloc_r+0x20>
 8002f1a:	f7ff ff4b 	bl	8002db4 <_free_r>
 8002f1e:	4625      	mov	r5, r4
 8002f20:	4628      	mov	r0, r5
 8002f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f24:	f000 f826 	bl	8002f74 <_malloc_usable_size_r>
 8002f28:	42a0      	cmp	r0, r4
 8002f2a:	d20f      	bcs.n	8002f4c <_realloc_r+0x48>
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7ff ff8e 	bl	8002e50 <_malloc_r>
 8002f34:	4605      	mov	r5, r0
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d0f2      	beq.n	8002f20 <_realloc_r+0x1c>
 8002f3a:	4631      	mov	r1, r6
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	f7ff ff15 	bl	8002d6c <memcpy>
 8002f42:	4631      	mov	r1, r6
 8002f44:	4638      	mov	r0, r7
 8002f46:	f7ff ff35 	bl	8002db4 <_free_r>
 8002f4a:	e7e9      	b.n	8002f20 <_realloc_r+0x1c>
 8002f4c:	4635      	mov	r5, r6
 8002f4e:	e7e7      	b.n	8002f20 <_realloc_r+0x1c>

08002f50 <_sbrk_r>:
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	4c06      	ldr	r4, [pc, #24]	; (8002f6c <_sbrk_r+0x1c>)
 8002f54:	2300      	movs	r3, #0
 8002f56:	4605      	mov	r5, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	6023      	str	r3, [r4, #0]
 8002f5c:	f7fd fdc8 	bl	8000af0 <_sbrk>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d102      	bne.n	8002f6a <_sbrk_r+0x1a>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	b103      	cbz	r3, 8002f6a <_sbrk_r+0x1a>
 8002f68:	602b      	str	r3, [r5, #0]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000124 	.word	0x20000124

08002f70 <__malloc_lock>:
 8002f70:	4770      	bx	lr

08002f72 <__malloc_unlock>:
 8002f72:	4770      	bx	lr

08002f74 <_malloc_usable_size_r>:
 8002f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f78:	1f18      	subs	r0, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfbc      	itt	lt
 8002f7e:	580b      	ldrlt	r3, [r1, r0]
 8002f80:	18c0      	addlt	r0, r0, r3
 8002f82:	4770      	bx	lr

08002f84 <_init>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr

08002f90 <_fini>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr
