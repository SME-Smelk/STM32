
10-FreeRTOS-DinamicPriorityInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e94  08005e94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e9c  08005e9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000156dc  20000074  08005f18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015750  08005f18  00025750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174ff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dc4  00000000  00000000  000375a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  0003a368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  0003b358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ffb  00000000  00000000  0003c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014ab8  00000000  00000000  0005f1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfe53  00000000  00000000  00073c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143ad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ec  00000000  00000000  00143b54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005cd0 	.word	0x08005cd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005cd0 	.word	0x08005cd0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	200156a4 	.word	0x200156a4

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr
 800028c:	0000      	movs	r0, r0
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <USART2_UART_Init+0x4c>)
 8000668:	f001 fb7c 	bl	8001d64 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 fa07 	bl	8000a84 <Error_Handler>
  }

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200155fc 	.word	0x200155fc
 8000680:	40004400 	.word	0x40004400

08000684 <UART2_write>:

void UART2_write(char data[]){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fdf5 	bl	800027c <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <UART2_write+0x28>)
 800069e:	f001 fbae 	bl	8001dfe <HAL_UART_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200155fc 	.word	0x200155fc

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <main+0x64>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <main+0x64>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c2:	f000 faa1 	bl	8000c08 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80006c6:	f000 f835 	bl	8000734 <SystemClock_Config>

	/* Configure the peripherals */
	GPIO_Init();
 80006ca:	f000 f893 	bl	80007f4 <GPIO_Init>
	USART2_UART_Init();
 80006ce:	f7ff ffaf 	bl	8000630 <USART2_UART_Init>

	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 80006d2:	f003 fb0b 	bl	8003cec <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80006d6:	f004 f941 	bl	800495c <SEGGER_SYSVIEW_Start>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(vtask1_Handler,"TASK-1",500,NULL,2,&xTaskHandler1);
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0x68>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <main+0x6c>)
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <main+0x70>)
 80006ec:	f002 f910 	bl	8002910 <xTaskCreate>
	//tarea 2
	xTaskCreate(vtask2_Handler,"TASK-2",500,NULL,3,&xTaskHandler2);
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <main+0x74>)
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	2303      	movs	r3, #3
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006fe:	490a      	ldr	r1, [pc, #40]	; (8000728 <main+0x78>)
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x7c>)
 8000702:	f002 f905 	bl	8002910 <xTaskCreate>

	/* Start Message */
	//HAL_UART_Transmit(&huart2,(uint8_t*) "FreeRTOS Init\n", sizeof("FreeRTOS Init\n"), HAL_MAX_DELAY);
	UART2_write("FreeRTOS Init\n");
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <main+0x80>)
 8000708:	f7ff ffbc 	bl	8000684 <UART2_write>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 800070c:	f002 fb36 	bl	8002d7c <vTaskStartScheduler>

	while (1);
 8000710:	e7fe      	b.n	8000710 <main+0x60>
 8000712:	bf00      	nop
 8000714:	e0001000 	.word	0xe0001000
 8000718:	20000094 	.word	0x20000094
 800071c:	08005ce8 	.word	0x08005ce8
 8000720:	080008b1 	.word	0x080008b1
 8000724:	20000098 	.word	0x20000098
 8000728:	08005cf0 	.word	0x08005cf0
 800072c:	08000969 	.word	0x08000969
 8000730:	08005cf8 	.word	0x08005cf8

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b096      	sub	sp, #88	; 0x58
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fec0 	bl	80054c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800077c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000786:	2307      	movs	r3, #7
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fda4 	bl	80012dc <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800079a:	f000 f973 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fffd 	bl	80017bc <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 f95c 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007cc:	2301      	movs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007d0:	23c0      	movs	r3, #192	; 0xc0
 80007d2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f9e0 	bl	8001ba0 <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007e6:	f000 f94d 	bl	8000a84 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3758      	adds	r7, #88	; 0x58
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <GPIO_Init>:

void GPIO_Init(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <GPIO_Init+0xac>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <GPIO_Init+0xac>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <GPIO_Init+0xac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <GPIO_Init+0xac>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <GPIO_Init+0xac>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <GPIO_Init+0xac>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4816      	ldr	r0, [pc, #88]	; (80008a4 <GPIO_Init+0xb0>)
 800084a:	f000 fcfb 	bl	8001244 <HAL_GPIO_WritePin>

/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = LED_GREEN_PIN;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <GPIO_Init+0xb0>)
 8000868:	f000 fb52 	bl	8000f10 <HAL_GPIO_Init>

/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = BUTTON_PIN;
 800086c:	2301      	movs	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <GPIO_Init+0xb4>)
 8000872:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	480a      	ldr	r0, [pc, #40]	; (80008ac <GPIO_Init+0xb8>)
 8000884:	f000 fb44 	bl	8000f10 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2006      	movs	r0, #6
 800088e:	f000 fb08 	bl	8000ea2 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fb21 	bl	8000eda <HAL_NVIC_EnableIRQ>

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	10210000 	.word	0x10210000
 80008ac:	40020000 	.word	0x40020000

080008b0 <vtask1_Handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void vtask1_Handler(void *params){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

	UBaseType_t p1,p2;

	//Imprimo ejecucion tarea 1
	UART2_write("Tarea1 ejecutandose...\n");
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <vtask1_Handler+0x98>)
 80008ba:	f7ff fee3 	bl	8000684 <UART2_write>
	//Imprimo el valor actual de prioridad tarea 1
	sprintf(msg,"Tarea 1. Prioridad: %ld\n",uxTaskPriorityGet(xTaskHandler1));
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <vtask1_Handler+0x9c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f97c 	bl	8002bc0 <uxTaskPriorityGet>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	4920      	ldr	r1, [pc, #128]	; (8000950 <vtask1_Handler+0xa0>)
 80008ce:	4821      	ldr	r0, [pc, #132]	; (8000954 <vtask1_Handler+0xa4>)
 80008d0:	f004 fe02 	bl	80054d8 <siprintf>
	UART2_write(msg);
 80008d4:	481f      	ldr	r0, [pc, #124]	; (8000954 <vtask1_Handler+0xa4>)
 80008d6:	f7ff fed5 	bl	8000684 <UART2_write>
	//Imprimo el valor actual de prioridad tarea 2
	sprintf(msg,"Tarea 2. Prioridad: %ld\n",uxTaskPriorityGet(xTaskHandler2));
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <vtask1_Handler+0xa8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f96e 	bl	8002bc0 <uxTaskPriorityGet>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	491c      	ldr	r1, [pc, #112]	; (800095c <vtask1_Handler+0xac>)
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <vtask1_Handler+0xa4>)
 80008ec:	f004 fdf4 	bl	80054d8 <siprintf>
	UART2_write(msg);
 80008f0:	4818      	ldr	r0, [pc, #96]	; (8000954 <vtask1_Handler+0xa4>)
 80008f2:	f7ff fec7 	bl	8000684 <UART2_write>

	while(1){
		if(switch_prio){
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <vtask1_Handler+0xb0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d01b      	beq.n	8000936 <vtask1_Handler+0x86>
			//Adquiero prioridad de las dos tareas
			p1=uxTaskPriorityGet(xTaskHandler1);
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <vtask1_Handler+0x9c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f002 f95c 	bl	8002bc0 <uxTaskPriorityGet>
 8000908:	60f8      	str	r0, [r7, #12]
			p2=uxTaskPriorityGet(xTaskHandler2);
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <vtask1_Handler+0xa8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f002 f956 	bl	8002bc0 <uxTaskPriorityGet>
 8000914:	60b8      	str	r0, [r7, #8]
			//Cambio las prioridades de forma inversa
			vTaskPrioritySet(xTaskHandler1, p2);
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <vtask1_Handler+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	4618      	mov	r0, r3
 800091e:	f002 f969 	bl	8002bf4 <vTaskPrioritySet>
			vTaskPrioritySet(xTaskHandler2, p1);
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <vtask1_Handler+0xa8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68f9      	ldr	r1, [r7, #12]
 8000928:	4618      	mov	r0, r3
 800092a:	f002 f963 	bl	8002bf4 <vTaskPrioritySet>

			switch_prio=FALSE;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <vtask1_Handler+0xb0>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e7df      	b.n	80008f6 <vtask1_Handler+0x46>
		}else{
			HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <vtask1_Handler+0xb4>)
 800093c:	f000 fc9b 	bl	8001276 <HAL_GPIO_TogglePin>
			rtos_delay(200);
 8000940:	20c8      	movs	r0, #200	; 0xc8
 8000942:	f000 f87f 	bl	8000a44 <rtos_delay>
		if(switch_prio){
 8000946:	e7d6      	b.n	80008f6 <vtask1_Handler+0x46>
 8000948:	08005d08 	.word	0x08005d08
 800094c:	20000094 	.word	0x20000094
 8000950:	08005d20 	.word	0x08005d20
 8000954:	2001563c 	.word	0x2001563c
 8000958:	20000098 	.word	0x20000098
 800095c:	08005d3c 	.word	0x08005d3c
 8000960:	20000090 	.word	0x20000090
 8000964:	40020c00 	.word	0x40020c00

08000968 <vtask2_Handler>:

/**
  * @brief  Function of task2.
  * @retval None
  */
void vtask2_Handler(void *params){
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

	UBaseType_t p1,p2;

	//Imprimo ejecucion tarea 1
	UART2_write("Tarea2 ejecutandose...\n");
 8000970:	4824      	ldr	r0, [pc, #144]	; (8000a04 <vtask2_Handler+0x9c>)
 8000972:	f7ff fe87 	bl	8000684 <UART2_write>
	//Imprimo el valor actual de prioridad tarea 1
	sprintf(msg,"Tarea 1. Prioridad: %ld\n",uxTaskPriorityGet(xTaskHandler1));
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <vtask2_Handler+0xa0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f002 f920 	bl	8002bc0 <uxTaskPriorityGet>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4921      	ldr	r1, [pc, #132]	; (8000a0c <vtask2_Handler+0xa4>)
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <vtask2_Handler+0xa8>)
 8000988:	f004 fda6 	bl	80054d8 <siprintf>
	UART2_write(msg);
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <vtask2_Handler+0xa8>)
 800098e:	f7ff fe79 	bl	8000684 <UART2_write>
	//Imprimo el valor actual de prioridad tarea 2
	sprintf(msg,"Tarea 2. Prioridad: %ld\n",uxTaskPriorityGet(xTaskHandler2));
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <vtask2_Handler+0xac>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f912 	bl	8002bc0 <uxTaskPriorityGet>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	491d      	ldr	r1, [pc, #116]	; (8000a18 <vtask2_Handler+0xb0>)
 80009a2:	481b      	ldr	r0, [pc, #108]	; (8000a10 <vtask2_Handler+0xa8>)
 80009a4:	f004 fd98 	bl	80054d8 <siprintf>
	UART2_write(msg);
 80009a8:	4819      	ldr	r0, [pc, #100]	; (8000a10 <vtask2_Handler+0xa8>)
 80009aa:	f7ff fe6b 	bl	8000684 <UART2_write>

	while(1){
		if(switch_prio){
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <vtask2_Handler+0xb4>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d01b      	beq.n	80009ee <vtask2_Handler+0x86>
			//Adquiero prioridad de las dos tareas
			p1=uxTaskPriorityGet(xTaskHandler1);
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <vtask2_Handler+0xa0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 f900 	bl	8002bc0 <uxTaskPriorityGet>
 80009c0:	60f8      	str	r0, [r7, #12]
			p2=uxTaskPriorityGet(xTaskHandler2);
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <vtask2_Handler+0xac>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f8fa 	bl	8002bc0 <uxTaskPriorityGet>
 80009cc:	60b8      	str	r0, [r7, #8]
			//Cambio las prioridades de forma inversa
			vTaskPrioritySet(xTaskHandler1, p2);
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <vtask2_Handler+0xa0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 f90d 	bl	8002bf4 <vTaskPrioritySet>
			vTaskPrioritySet(xTaskHandler2, p1);
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <vtask2_Handler+0xac>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68f9      	ldr	r1, [r7, #12]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f907 	bl	8002bf4 <vTaskPrioritySet>

			switch_prio=FALSE;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <vtask2_Handler+0xb4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e7df      	b.n	80009ae <vtask2_Handler+0x46>
		}else{
			HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <vtask2_Handler+0xb8>)
 80009f4:	f000 fc3f 	bl	8001276 <HAL_GPIO_TogglePin>
			rtos_delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 f822 	bl	8000a44 <rtos_delay>
		if(switch_prio){
 8000a00:	e7d5      	b.n	80009ae <vtask2_Handler+0x46>
 8000a02:	bf00      	nop
 8000a04:	08005d58 	.word	0x08005d58
 8000a08:	20000094 	.word	0x20000094
 8000a0c:	08005d20 	.word	0x08005d20
 8000a10:	2001563c 	.word	0x2001563c
 8000a14:	20000098 	.word	0x20000098
 8000a18:	08005d3c 	.word	0x08005d3c
 8000a1c:	20000090 	.word	0x20000090
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	switch_prio=TRUE;
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
	  traceISR_EXIT();
 8000a34:	f004 fa9a 	bl	8004f6c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000090 	.word	0x20000090

08000a44 <rtos_delay>:




void rtos_delay(uint32_t delay_in_ms){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	//Current tick
	uint32_t current_tick_count = xTaskGetTickCount();
 8000a4c:	f002 faa2 	bl	8002f94 <xTaskGetTickCount>
 8000a50:	60f8      	str	r0, [r7, #12]

	//MiliSeconds to Ticks
	uint32_t delay_in_ticks= (delay_in_ms * configTICK_RATE_HZ) / 1000;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <rtos_delay+0x3c>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	099b      	lsrs	r3, r3, #6
 8000a64:	60bb      	str	r3, [r7, #8]

	//delay
	while(xTaskGetTickCount()< (current_tick_count + delay_in_ticks) );
 8000a66:	bf00      	nop
 8000a68:	f002 fa94 	bl	8002f94 <xTaskGetTickCount>
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4413      	add	r3, r2
 8000a74:	4299      	cmp	r1, r3
 8000a76:	d3f7      	bcc.n	8000a68 <rtos_delay+0x24>

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	10624dd3 	.word	0x10624dd3

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* User can add his own implementation to report the HAL error return state */

}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f9f8 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f06f 0001 	mvn.w	r0, #1
 8000aa4:	f000 f9fd 	bl	8000ea2 <HAL_NVIC_SetPriority>

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12b      	bne.n	8000b26 <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b06:	230c      	movs	r3, #12
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0x8c>)
 8000b22:	f000 f9f5 	bl	8000f10 <HAL_GPIO_Init>

  }
}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	; 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 f8a1 	bl	8000cac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b6a:	f002 fdfd 	bl	8003768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <EXTI0_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  traceISR_ENTER();
 8000b76:	f004 f9b7 	bl	8004ee8 <SEGGER_SYSVIEW_RecordEnterISR>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PIN);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 fb96 	bl	80012ac <HAL_GPIO_EXTI_IRQHandler>

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x50>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x16>
		heap_end = &end;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <_sbrk+0x50>)
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <_sbrk+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <_sbrk+0x50>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <_sbrk+0x50>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	466a      	mov	r2, sp
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d907      	bls.n	8000bbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000bae:	f004 fc47 	bl	8005440 <__errno>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	e006      	b.n	8000bcc <_sbrk+0x48>
	}

	heap_end += incr;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <_sbrk+0x50>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <_sbrk+0x50>)
 8000bc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000009c 	.word	0x2000009c
 8000bd8:	20015750 	.word	0x20015750

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <SystemInit+0x28>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <SystemInit+0x28>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <SystemInit+0x28>)
 8000bf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f92b 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff ff29 	bl	8000a92 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f943 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f90b 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	200156a0 	.word	0x200156a0

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200156a0 	.word	0x200156a0

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e16b      	b.n	8001204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 815a 	bne.w	80011fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d00b      	beq.n	8000f6a <HAL_GPIO_Init+0x5a>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5e:	2b11      	cmp	r3, #17
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0xfc>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b12      	cmp	r3, #18
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5f      	ldr	r3, [pc, #380]	; (8001218 <HAL_GPIO_Init+0x308>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5e      	ldr	r2, [pc, #376]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d02b      	beq.n	8001136 <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a50      	ldr	r2, [pc, #320]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d025      	beq.n	8001132 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01f      	beq.n	800112e <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	; (800122c <HAL_GPIO_Init+0x31c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4d      	ldr	r2, [pc, #308]	; (8001230 <HAL_GPIO_Init+0x320>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4c      	ldr	r2, [pc, #304]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4b      	ldr	r2, [pc, #300]	; (8001238 <HAL_GPIO_Init+0x328>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4a      	ldr	r2, [pc, #296]	; (800123c <HAL_GPIO_Init+0x32c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x20a>
 8001116:	2307      	movs	r3, #7
 8001118:	e00e      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111a:	2308      	movs	r3, #8
 800111c:	e00c      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800111e:	2306      	movs	r3, #6
 8001120:	e00a      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001122:	2305      	movs	r3, #5
 8001124:	e008      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001126:	2304      	movs	r3, #4
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112a:	2303      	movs	r3, #3
 800112c:	e004      	b.n	8001138 <HAL_GPIO_Init+0x228>
 800112e:	2302      	movs	r3, #2
 8001130:	e002      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x228>
 8001136:	2300      	movs	r3, #0
 8001138:	69fa      	ldr	r2, [r7, #28]
 800113a:	f002 0203 	and.w	r2, r2, #3
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	4093      	lsls	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001148:	4934      	ldr	r1, [pc, #208]	; (800121c <HAL_GPIO_Init+0x30c>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117a:	4a31      	ldr	r2, [pc, #196]	; (8001240 <HAL_GPIO_Init+0x330>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x330>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_GPIO_Init+0x330>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3301      	adds	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	f67f ae90 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800120c:	bf00      	nop
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	40020000 	.word	0x40020000
 8001224:	40020400 	.word	0x40020400
 8001228:	40020800 	.word	0x40020800
 800122c:	40020c00 	.word	0x40020c00
 8001230:	40021000 	.word	0x40021000
 8001234:	40021400 	.word	0x40021400
 8001238:	40021800 	.word	0x40021800
 800123c:	40021c00 	.word	0x40021c00
 8001240:	40013c00 	.word	0x40013c00

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	401a      	ands	r2, r3
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	429a      	cmp	r2, r3
 800128e:	d104      	bne.n	800129a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	041a      	lsls	r2, r3, #16
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fbaa 	bl	8000a24 <HAL_GPIO_EXTI_Callback>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e25b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d075      	beq.n	80013e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fa:	4ba3      	ldr	r3, [pc, #652]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
 8001302:	2b04      	cmp	r3, #4
 8001304:	d00c      	beq.n	8001320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4ba0      	ldr	r3, [pc, #640]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	2b08      	cmp	r3, #8
 8001310:	d112      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b9d      	ldr	r3, [pc, #628]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800131e:	d10b      	bne.n	8001338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001320:	4b99      	ldr	r3, [pc, #612]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d05b      	beq.n	80013e4 <HAL_RCC_OscConfig+0x108>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d157      	bne.n	80013e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e236      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x74>
 8001342:	4b91      	ldr	r3, [pc, #580]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a90      	ldr	r2, [pc, #576]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e01d      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001358:	d10c      	bne.n	8001374 <HAL_RCC_OscConfig+0x98>
 800135a:	4b8b      	ldr	r3, [pc, #556]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a8a      	ldr	r2, [pc, #552]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b88      	ldr	r3, [pc, #544]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a87      	ldr	r2, [pc, #540]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e00b      	b.n	800138c <HAL_RCC_OscConfig+0xb0>
 8001374:	4b84      	ldr	r3, [pc, #528]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a83      	ldr	r2, [pc, #524]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b81      	ldr	r3, [pc, #516]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a80      	ldr	r2, [pc, #512]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc9e 	bl	8000cd4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc9a 	bl	8000cd4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1fb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	4b76      	ldr	r3, [pc, #472]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0xc0>
 80013ba:	e014      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc8a 	bl	8000cd4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fc86 	bl	8000cd4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1e7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	4b6c      	ldr	r3, [pc, #432]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0xe8>
 80013e2:	e000      	b.n	80013e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d063      	beq.n	80014ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b62      	ldr	r3, [pc, #392]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b5f      	ldr	r3, [pc, #380]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b5c      	ldr	r3, [pc, #368]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e1bb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4952      	ldr	r1, [pc, #328]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e03a      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <HAL_RCC_OscConfig+0x2b0>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001452:	f7ff fc3f 	bl	8000cd4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc3b 	bl	8000cd4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e19c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4940      	ldr	r1, [pc, #256]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_OscConfig+0x2b0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc1e 	bl	8000cd4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fc1a 	bl	8000cd4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e17b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d030      	beq.n	8001528 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d016      	beq.n	80014fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ce:	4b30      	ldr	r3, [pc, #192]	; (8001590 <HAL_RCC_OscConfig+0x2b4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbfe 	bl	8000cd4 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fbfa 	bl	8000cd4 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e15b      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x200>
 80014fa:	e015      	b.n	8001528 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_OscConfig+0x2b4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fbe7 	bl	8000cd4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff fbe3 	bl	8000cd4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e144      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a0 	beq.w	8001676 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d121      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fba9 	bl	8000cd4 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e011      	b.n	80015aa <HAL_RCC_OscConfig+0x2ce>
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	42470000 	.word	0x42470000
 8001590:	42470e80 	.word	0x42470e80
 8001594:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fb9c 	bl	8000cd4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0fd      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b81      	ldr	r3, [pc, #516]	; (80017b0 <HAL_RCC_OscConfig+0x4d4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x2f0>
 80015be:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a7c      	ldr	r2, [pc, #496]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x32a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x312>
 80015d4:	4b77      	ldr	r3, [pc, #476]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a76      	ldr	r2, [pc, #472]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a73      	ldr	r2, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x32a>
 80015ee:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a70      	ldr	r2, [pc, #448]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a6d      	ldr	r2, [pc, #436]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb61 	bl	8000cd4 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb5d 	bl	8000cd4 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0bc      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x33a>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fb4b 	bl	8000cd4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fb47 	bl	8000cd4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0a6      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a51      	ldr	r2, [pc, #324]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8092 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d05c      	beq.n	8001746 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d141      	bne.n	8001718 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb1b 	bl	8000cd4 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb17 	bl	8000cd4 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e078      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	019b      	lsls	r3, r3, #6
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	085b      	lsrs	r3, r3, #1
 80016d8:	3b01      	subs	r3, #1
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	061b      	lsls	r3, r3, #24
 80016e4:	4933      	ldr	r1, [pc, #204]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff faf0 	bl	8000cd4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff faec 	bl	8000cd4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e04d      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x41c>
 8001716:	e045      	b.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x4dc>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fad9 	bl	8000cd4 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fad5 	bl	8000cd4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e036      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x44a>
 8001744:	e02e      	b.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e029      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x4d8>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	429a      	cmp	r2, r3
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d115      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177a:	4013      	ands	r3, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001780:	4293      	cmp	r3, r2
 8001782:	d10d      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d106      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	42470060 	.word	0x42470060

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa12 	bl	8000cd4 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa0e 	bl	8000cd4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 030f 	and.w	r3, r3, #15
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	fa21 f303 	lsr.w	r3, r1, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	; (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f972 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08005e34 	.word	0x08005e34
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	2300      	movs	r3, #0
 8001998:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d007      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x32>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d008      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x38>
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80b4 	bne.w	8001b1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019b6:	60bb      	str	r3, [r7, #8]
       break;
 80019b8:	e0b3      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e0b0      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b58      	ldr	r3, [pc, #352]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04a      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	f04f 0400 	mov.w	r4, #0
 80019e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	ea03 0501 	and.w	r5, r3, r1
 80019ec:	ea04 0602 	and.w	r6, r4, r2
 80019f0:	4629      	mov	r1, r5
 80019f2:	4632      	mov	r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0154      	lsls	r4, r2, #5
 80019fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a02:	014b      	lsls	r3, r1, #5
 8001a04:	4619      	mov	r1, r3
 8001a06:	4622      	mov	r2, r4
 8001a08:	1b49      	subs	r1, r1, r5
 8001a0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	0194      	lsls	r4, r2, #6
 8001a18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a1c:	018b      	lsls	r3, r1, #6
 8001a1e:	1a5b      	subs	r3, r3, r1
 8001a20:	eb64 0402 	sbc.w	r4, r4, r2
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	00e2      	lsls	r2, r4, #3
 8001a2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a32:	00d9      	lsls	r1, r3, #3
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	195b      	adds	r3, r3, r5
 8001a3a:	eb44 0406 	adc.w	r4, r4, r6
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	0262      	lsls	r2, r4, #9
 8001a48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4614      	mov	r4, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	4621      	mov	r1, r4
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f04f 0400 	mov.w	r4, #0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7fe fc66 	bl	8000330 <__aeabi_uldivmod>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e049      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	f04f 0400 	mov.w	r4, #0
 8001a76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	ea04 0602 	and.w	r6, r4, r2
 8001a86:	4629      	mov	r1, r5
 8001a88:	4632      	mov	r2, r6
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	0154      	lsls	r4, r2, #5
 8001a94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a98:	014b      	lsls	r3, r1, #5
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	1b49      	subs	r1, r1, r5
 8001aa0:	eb62 0206 	sbc.w	r2, r2, r6
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	0194      	lsls	r4, r2, #6
 8001aae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	1a5b      	subs	r3, r3, r1
 8001ab6:	eb64 0402 	sbc.w	r4, r4, r2
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	00e2      	lsls	r2, r4, #3
 8001ac4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	195b      	adds	r3, r3, r5
 8001ad0:	eb44 0406 	adc.w	r4, r4, r6
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	02a2      	lsls	r2, r4, #10
 8001ade:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ae2:	0299      	lsls	r1, r3, #10
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f04f 0400 	mov.w	r4, #0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	f7fe fc1b 	bl	8000330 <__aeabi_uldivmod>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	60bb      	str	r3, [r7, #8]
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b1e:	60bb      	str	r3, [r7, #8]
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	68bb      	ldr	r3, [r7, #8]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a9b      	lsrs	r3, r3, #10
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4a03      	ldr	r2, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08005e44 	.word	0x08005e44

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff ffdc 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4a03      	ldr	r2, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08005e44 	.word	0x08005e44

08001ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d035      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bce:	f7ff f881 	bl	8000cd4 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bd6:	f7ff f87d 	bl	8000cd4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0b0      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001be8:	4b5b      	ldr	r3, [pc, #364]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	019a      	lsls	r2, r3, #6
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	071b      	lsls	r3, r3, #28
 8001c00:	4955      	ldr	r1, [pc, #340]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff f861 	bl	8000cd4 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c16:	f7ff f85d 	bl	8000cd4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e090      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 8083 	beq.w	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b44      	ldr	r3, [pc, #272]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a43      	ldr	r2, [pc, #268]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b41      	ldr	r3, [pc, #260]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a3e      	ldr	r2, [pc, #248]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f833 	bl	8000cd4 <HAL_GetTick>
 8001c6e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7ff f82f 	bl	8000cd4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e062      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c84:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c98:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d02f      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d028      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d114      	bne.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7fe fffd 	bl	8000cd4 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe fff9 	bl	8000cd4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e02a      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d22:	490d      	ldr	r1, [pc, #52]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
 8001d28:	e005      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d34:	6093      	str	r3, [r2, #8]
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	4905      	ldr	r1, [pc, #20]	; (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	42470068 	.word	0x42470068
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42470e40 	.word	0x42470e40

08001d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e03f      	b.n	8001df6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fe8e 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2224      	movs	r2, #36	; 0x24
 8001d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f90b 	bl	8001fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b088      	sub	sp, #32
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f040 8083 	bne.w	8001f26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_UART_Transmit+0x2e>
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e07b      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_UART_Transmit+0x40>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e074      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2221      	movs	r2, #33	; 0x21
 8001e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e54:	f7fe ff3e 	bl	8000cd4 <HAL_GetTick>
 8001e58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	88fa      	ldrh	r2, [r7, #6]
 8001e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	88fa      	ldrh	r2, [r7, #6]
 8001e64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e6e:	e042      	b.n	8001ef6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	d122      	bne.n	8001ece <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f84c 	bl	8001f30 <UART_WaitOnFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e042      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eb4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d103      	bne.n	8001ec6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	e017      	b.n	8001ef6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	e013      	b.n	8001ef6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f829 	bl	8001f30 <UART_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e01f      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1b7      	bne.n	8001e70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2200      	movs	r2, #0
 8001f08:	2140      	movs	r1, #64	; 0x40
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f810 	bl	8001f30 <UART_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e006      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
  }
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f40:	e02c      	b.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d028      	beq.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f50:	f7fe fec0 	bl	8000cd4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d21d      	bcs.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e00f      	b.n	8001fbc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d0c3      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002006:	f023 030c 	bic.w	r3, r3, #12
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	430b      	orrs	r3, r1
 8002012:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002032:	f040 818b 	bne.w	800234c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4ac1      	ldr	r2, [pc, #772]	; (8002340 <UART_SetConfig+0x37c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d005      	beq.n	800204c <UART_SetConfig+0x88>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4abf      	ldr	r2, [pc, #764]	; (8002344 <UART_SetConfig+0x380>)
 8002046:	4293      	cmp	r3, r2
 8002048:	f040 80bd 	bne.w	80021c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800204c:	f7ff fd94 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002050:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	461d      	mov	r5, r3
 8002056:	f04f 0600 	mov.w	r6, #0
 800205a:	46a8      	mov	r8, r5
 800205c:	46b1      	mov	r9, r6
 800205e:	eb18 0308 	adds.w	r3, r8, r8
 8002062:	eb49 0409 	adc.w	r4, r9, r9
 8002066:	4698      	mov	r8, r3
 8002068:	46a1      	mov	r9, r4
 800206a:	eb18 0805 	adds.w	r8, r8, r5
 800206e:	eb49 0906 	adc.w	r9, r9, r6
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800207e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002082:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002086:	4688      	mov	r8, r1
 8002088:	4691      	mov	r9, r2
 800208a:	eb18 0005 	adds.w	r0, r8, r5
 800208e:	eb49 0106 	adc.w	r1, r9, r6
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	461d      	mov	r5, r3
 8002098:	f04f 0600 	mov.w	r6, #0
 800209c:	196b      	adds	r3, r5, r5
 800209e:	eb46 0406 	adc.w	r4, r6, r6
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	f7fe f943 	bl	8000330 <__aeabi_uldivmod>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4ba5      	ldr	r3, [pc, #660]	; (8002348 <UART_SetConfig+0x384>)
 80020b2:	fba3 2302 	umull	r2, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	461d      	mov	r5, r3
 80020c0:	f04f 0600 	mov.w	r6, #0
 80020c4:	46a9      	mov	r9, r5
 80020c6:	46b2      	mov	sl, r6
 80020c8:	eb19 0309 	adds.w	r3, r9, r9
 80020cc:	eb4a 040a 	adc.w	r4, sl, sl
 80020d0:	4699      	mov	r9, r3
 80020d2:	46a2      	mov	sl, r4
 80020d4:	eb19 0905 	adds.w	r9, r9, r5
 80020d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f0:	4689      	mov	r9, r1
 80020f2:	4692      	mov	sl, r2
 80020f4:	eb19 0005 	adds.w	r0, r9, r5
 80020f8:	eb4a 0106 	adc.w	r1, sl, r6
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	461d      	mov	r5, r3
 8002102:	f04f 0600 	mov.w	r6, #0
 8002106:	196b      	adds	r3, r5, r5
 8002108:	eb46 0406 	adc.w	r4, r6, r6
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	f7fe f90e 	bl	8000330 <__aeabi_uldivmod>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	461a      	mov	r2, r3
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <UART_SetConfig+0x384>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	2164      	movs	r1, #100	; 0x64
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	3332      	adds	r3, #50	; 0x32
 800212e:	4a86      	ldr	r2, [pc, #536]	; (8002348 <UART_SetConfig+0x384>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800213c:	4498      	add	r8, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	461d      	mov	r5, r3
 8002142:	f04f 0600 	mov.w	r6, #0
 8002146:	46a9      	mov	r9, r5
 8002148:	46b2      	mov	sl, r6
 800214a:	eb19 0309 	adds.w	r3, r9, r9
 800214e:	eb4a 040a 	adc.w	r4, sl, sl
 8002152:	4699      	mov	r9, r3
 8002154:	46a2      	mov	sl, r4
 8002156:	eb19 0905 	adds.w	r9, r9, r5
 800215a:	eb4a 0a06 	adc.w	sl, sl, r6
 800215e:	f04f 0100 	mov.w	r1, #0
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800216a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800216e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002172:	4689      	mov	r9, r1
 8002174:	4692      	mov	sl, r2
 8002176:	eb19 0005 	adds.w	r0, r9, r5
 800217a:	eb4a 0106 	adc.w	r1, sl, r6
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	461d      	mov	r5, r3
 8002184:	f04f 0600 	mov.w	r6, #0
 8002188:	196b      	adds	r3, r5, r5
 800218a:	eb46 0406 	adc.w	r4, r6, r6
 800218e:	461a      	mov	r2, r3
 8002190:	4623      	mov	r3, r4
 8002192:	f7fe f8cd 	bl	8000330 <__aeabi_uldivmod>
 8002196:	4603      	mov	r3, r0
 8002198:	460c      	mov	r4, r1
 800219a:	461a      	mov	r2, r3
 800219c:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <UART_SetConfig+0x384>)
 800219e:	fba3 1302 	umull	r1, r3, r3, r2
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2164      	movs	r1, #100	; 0x64
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	3332      	adds	r3, #50	; 0x32
 80021b0:	4a65      	ldr	r2, [pc, #404]	; (8002348 <UART_SetConfig+0x384>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	f003 0207 	and.w	r2, r3, #7
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4442      	add	r2, r8
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e26f      	b.n	80026a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021c6:	f7ff fcc3 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 80021ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	461d      	mov	r5, r3
 80021d0:	f04f 0600 	mov.w	r6, #0
 80021d4:	46a8      	mov	r8, r5
 80021d6:	46b1      	mov	r9, r6
 80021d8:	eb18 0308 	adds.w	r3, r8, r8
 80021dc:	eb49 0409 	adc.w	r4, r9, r9
 80021e0:	4698      	mov	r8, r3
 80021e2:	46a1      	mov	r9, r4
 80021e4:	eb18 0805 	adds.w	r8, r8, r5
 80021e8:	eb49 0906 	adc.w	r9, r9, r6
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002200:	4688      	mov	r8, r1
 8002202:	4691      	mov	r9, r2
 8002204:	eb18 0005 	adds.w	r0, r8, r5
 8002208:	eb49 0106 	adc.w	r1, r9, r6
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	461d      	mov	r5, r3
 8002212:	f04f 0600 	mov.w	r6, #0
 8002216:	196b      	adds	r3, r5, r5
 8002218:	eb46 0406 	adc.w	r4, r6, r6
 800221c:	461a      	mov	r2, r3
 800221e:	4623      	mov	r3, r4
 8002220:	f7fe f886 	bl	8000330 <__aeabi_uldivmod>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	461a      	mov	r2, r3
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <UART_SetConfig+0x384>)
 800222c:	fba3 2302 	umull	r2, r3, r3, r2
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	461d      	mov	r5, r3
 800223a:	f04f 0600 	mov.w	r6, #0
 800223e:	46a9      	mov	r9, r5
 8002240:	46b2      	mov	sl, r6
 8002242:	eb19 0309 	adds.w	r3, r9, r9
 8002246:	eb4a 040a 	adc.w	r4, sl, sl
 800224a:	4699      	mov	r9, r3
 800224c:	46a2      	mov	sl, r4
 800224e:	eb19 0905 	adds.w	r9, r9, r5
 8002252:	eb4a 0a06 	adc.w	sl, sl, r6
 8002256:	f04f 0100 	mov.w	r1, #0
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800226a:	4689      	mov	r9, r1
 800226c:	4692      	mov	sl, r2
 800226e:	eb19 0005 	adds.w	r0, r9, r5
 8002272:	eb4a 0106 	adc.w	r1, sl, r6
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	461d      	mov	r5, r3
 800227c:	f04f 0600 	mov.w	r6, #0
 8002280:	196b      	adds	r3, r5, r5
 8002282:	eb46 0406 	adc.w	r4, r6, r6
 8002286:	461a      	mov	r2, r3
 8002288:	4623      	mov	r3, r4
 800228a:	f7fe f851 	bl	8000330 <__aeabi_uldivmod>
 800228e:	4603      	mov	r3, r0
 8002290:	460c      	mov	r4, r1
 8002292:	461a      	mov	r2, r3
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <UART_SetConfig+0x384>)
 8002296:	fba3 1302 	umull	r1, r3, r3, r2
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2164      	movs	r1, #100	; 0x64
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <UART_SetConfig+0x384>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022b6:	4498      	add	r8, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	461d      	mov	r5, r3
 80022bc:	f04f 0600 	mov.w	r6, #0
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46b2      	mov	sl, r6
 80022c4:	eb19 0309 	adds.w	r3, r9, r9
 80022c8:	eb4a 040a 	adc.w	r4, sl, sl
 80022cc:	4699      	mov	r9, r3
 80022ce:	46a2      	mov	sl, r4
 80022d0:	eb19 0905 	adds.w	r9, r9, r5
 80022d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ec:	4689      	mov	r9, r1
 80022ee:	4692      	mov	sl, r2
 80022f0:	eb19 0005 	adds.w	r0, r9, r5
 80022f4:	eb4a 0106 	adc.w	r1, sl, r6
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	461d      	mov	r5, r3
 80022fe:	f04f 0600 	mov.w	r6, #0
 8002302:	196b      	adds	r3, r5, r5
 8002304:	eb46 0406 	adc.w	r4, r6, r6
 8002308:	461a      	mov	r2, r3
 800230a:	4623      	mov	r3, r4
 800230c:	f7fe f810 	bl	8000330 <__aeabi_uldivmod>
 8002310:	4603      	mov	r3, r0
 8002312:	460c      	mov	r4, r1
 8002314:	461a      	mov	r2, r3
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <UART_SetConfig+0x384>)
 8002318:	fba3 1302 	umull	r1, r3, r3, r2
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	2164      	movs	r1, #100	; 0x64
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	3332      	adds	r3, #50	; 0x32
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <UART_SetConfig+0x384>)
 800232c:	fba2 2303 	umull	r2, r3, r2, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	f003 0207 	and.w	r2, r3, #7
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4442      	add	r2, r8
 800233c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800233e:	e1b2      	b.n	80026a6 <UART_SetConfig+0x6e2>
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4ad7      	ldr	r2, [pc, #860]	; (80026b0 <UART_SetConfig+0x6ec>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d005      	beq.n	8002362 <UART_SetConfig+0x39e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4ad6      	ldr	r2, [pc, #856]	; (80026b4 <UART_SetConfig+0x6f0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	f040 80d1 	bne.w	8002504 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002362:	f7ff fc09 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 8002366:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	469a      	mov	sl, r3
 800236c:	f04f 0b00 	mov.w	fp, #0
 8002370:	46d0      	mov	r8, sl
 8002372:	46d9      	mov	r9, fp
 8002374:	eb18 0308 	adds.w	r3, r8, r8
 8002378:	eb49 0409 	adc.w	r4, r9, r9
 800237c:	4698      	mov	r8, r3
 800237e:	46a1      	mov	r9, r4
 8002380:	eb18 080a 	adds.w	r8, r8, sl
 8002384:	eb49 090b 	adc.w	r9, r9, fp
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002394:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002398:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800239c:	4688      	mov	r8, r1
 800239e:	4691      	mov	r9, r2
 80023a0:	eb1a 0508 	adds.w	r5, sl, r8
 80023a4:	eb4b 0609 	adc.w	r6, fp, r9
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	0094      	lsls	r4, r2, #2
 80023bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c0:	008b      	lsls	r3, r1, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	4623      	mov	r3, r4
 80023c6:	4628      	mov	r0, r5
 80023c8:	4631      	mov	r1, r6
 80023ca:	f7fd ffb1 	bl	8000330 <__aeabi_uldivmod>
 80023ce:	4603      	mov	r3, r0
 80023d0:	460c      	mov	r4, r1
 80023d2:	461a      	mov	r2, r3
 80023d4:	4bb8      	ldr	r3, [pc, #736]	; (80026b8 <UART_SetConfig+0x6f4>)
 80023d6:	fba3 2302 	umull	r2, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	469b      	mov	fp, r3
 80023e4:	f04f 0c00 	mov.w	ip, #0
 80023e8:	46d9      	mov	r9, fp
 80023ea:	46e2      	mov	sl, ip
 80023ec:	eb19 0309 	adds.w	r3, r9, r9
 80023f0:	eb4a 040a 	adc.w	r4, sl, sl
 80023f4:	4699      	mov	r9, r3
 80023f6:	46a2      	mov	sl, r4
 80023f8:	eb19 090b 	adds.w	r9, r9, fp
 80023fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800240c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002410:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002414:	4689      	mov	r9, r1
 8002416:	4692      	mov	sl, r2
 8002418:	eb1b 0509 	adds.w	r5, fp, r9
 800241c:	eb4c 060a 	adc.w	r6, ip, sl
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	0094      	lsls	r4, r2, #2
 8002434:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002438:	008b      	lsls	r3, r1, #2
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	4628      	mov	r0, r5
 8002440:	4631      	mov	r1, r6
 8002442:	f7fd ff75 	bl	8000330 <__aeabi_uldivmod>
 8002446:	4603      	mov	r3, r0
 8002448:	460c      	mov	r4, r1
 800244a:	461a      	mov	r2, r3
 800244c:	4b9a      	ldr	r3, [pc, #616]	; (80026b8 <UART_SetConfig+0x6f4>)
 800244e:	fba3 1302 	umull	r1, r3, r3, r2
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	2164      	movs	r1, #100	; 0x64
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	3332      	adds	r3, #50	; 0x32
 8002460:	4a95      	ldr	r2, [pc, #596]	; (80026b8 <UART_SetConfig+0x6f4>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800246c:	4498      	add	r8, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	469b      	mov	fp, r3
 8002472:	f04f 0c00 	mov.w	ip, #0
 8002476:	46d9      	mov	r9, fp
 8002478:	46e2      	mov	sl, ip
 800247a:	eb19 0309 	adds.w	r3, r9, r9
 800247e:	eb4a 040a 	adc.w	r4, sl, sl
 8002482:	4699      	mov	r9, r3
 8002484:	46a2      	mov	sl, r4
 8002486:	eb19 090b 	adds.w	r9, r9, fp
 800248a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800249a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800249e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a2:	4689      	mov	r9, r1
 80024a4:	4692      	mov	sl, r2
 80024a6:	eb1b 0509 	adds.w	r5, fp, r9
 80024aa:	eb4c 060a 	adc.w	r6, ip, sl
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4619      	mov	r1, r3
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f04f 0400 	mov.w	r4, #0
 80024c0:	0094      	lsls	r4, r2, #2
 80024c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024c6:	008b      	lsls	r3, r1, #2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	4628      	mov	r0, r5
 80024ce:	4631      	mov	r1, r6
 80024d0:	f7fd ff2e 	bl	8000330 <__aeabi_uldivmod>
 80024d4:	4603      	mov	r3, r0
 80024d6:	460c      	mov	r4, r1
 80024d8:	461a      	mov	r2, r3
 80024da:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <UART_SetConfig+0x6f4>)
 80024dc:	fba3 1302 	umull	r1, r3, r3, r2
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	2164      	movs	r1, #100	; 0x64
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	3332      	adds	r3, #50	; 0x32
 80024ee:	4a72      	ldr	r2, [pc, #456]	; (80026b8 <UART_SetConfig+0x6f4>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	f003 020f 	and.w	r2, r3, #15
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4442      	add	r2, r8
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	e0d0      	b.n	80026a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002504:	f7ff fb24 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002508:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	469a      	mov	sl, r3
 800250e:	f04f 0b00 	mov.w	fp, #0
 8002512:	46d0      	mov	r8, sl
 8002514:	46d9      	mov	r9, fp
 8002516:	eb18 0308 	adds.w	r3, r8, r8
 800251a:	eb49 0409 	adc.w	r4, r9, r9
 800251e:	4698      	mov	r8, r3
 8002520:	46a1      	mov	r9, r4
 8002522:	eb18 080a 	adds.w	r8, r8, sl
 8002526:	eb49 090b 	adc.w	r9, r9, fp
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002536:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800253a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800253e:	4688      	mov	r8, r1
 8002540:	4691      	mov	r9, r2
 8002542:	eb1a 0508 	adds.w	r5, sl, r8
 8002546:	eb4b 0609 	adc.w	r6, fp, r9
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4619      	mov	r1, r3
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	f04f 0400 	mov.w	r4, #0
 800255c:	0094      	lsls	r4, r2, #2
 800255e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002562:	008b      	lsls	r3, r1, #2
 8002564:	461a      	mov	r2, r3
 8002566:	4623      	mov	r3, r4
 8002568:	4628      	mov	r0, r5
 800256a:	4631      	mov	r1, r6
 800256c:	f7fd fee0 	bl	8000330 <__aeabi_uldivmod>
 8002570:	4603      	mov	r3, r0
 8002572:	460c      	mov	r4, r1
 8002574:	461a      	mov	r2, r3
 8002576:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <UART_SetConfig+0x6f4>)
 8002578:	fba3 2302 	umull	r2, r3, r3, r2
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	469b      	mov	fp, r3
 8002586:	f04f 0c00 	mov.w	ip, #0
 800258a:	46d9      	mov	r9, fp
 800258c:	46e2      	mov	sl, ip
 800258e:	eb19 0309 	adds.w	r3, r9, r9
 8002592:	eb4a 040a 	adc.w	r4, sl, sl
 8002596:	4699      	mov	r9, r3
 8002598:	46a2      	mov	sl, r4
 800259a:	eb19 090b 	adds.w	r9, r9, fp
 800259e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025b6:	4689      	mov	r9, r1
 80025b8:	4692      	mov	sl, r2
 80025ba:	eb1b 0509 	adds.w	r5, fp, r9
 80025be:	eb4c 060a 	adc.w	r6, ip, sl
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	0094      	lsls	r4, r2, #2
 80025d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025da:	008b      	lsls	r3, r1, #2
 80025dc:	461a      	mov	r2, r3
 80025de:	4623      	mov	r3, r4
 80025e0:	4628      	mov	r0, r5
 80025e2:	4631      	mov	r1, r6
 80025e4:	f7fd fea4 	bl	8000330 <__aeabi_uldivmod>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <UART_SetConfig+0x6f4>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	3332      	adds	r3, #50	; 0x32
 8002602:	4a2d      	ldr	r2, [pc, #180]	; (80026b8 <UART_SetConfig+0x6f4>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260e:	4498      	add	r8, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	469b      	mov	fp, r3
 8002614:	f04f 0c00 	mov.w	ip, #0
 8002618:	46d9      	mov	r9, fp
 800261a:	46e2      	mov	sl, ip
 800261c:	eb19 0309 	adds.w	r3, r9, r9
 8002620:	eb4a 040a 	adc.w	r4, sl, sl
 8002624:	4699      	mov	r9, r3
 8002626:	46a2      	mov	sl, r4
 8002628:	eb19 090b 	adds.w	r9, r9, fp
 800262c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002630:	f04f 0100 	mov.w	r1, #0
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800263c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002640:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002644:	4689      	mov	r9, r1
 8002646:	4692      	mov	sl, r2
 8002648:	eb1b 0509 	adds.w	r5, fp, r9
 800264c:	eb4c 060a 	adc.w	r6, ip, sl
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	f04f 0400 	mov.w	r4, #0
 8002662:	0094      	lsls	r4, r2, #2
 8002664:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002668:	008b      	lsls	r3, r1, #2
 800266a:	461a      	mov	r2, r3
 800266c:	4623      	mov	r3, r4
 800266e:	4628      	mov	r0, r5
 8002670:	4631      	mov	r1, r6
 8002672:	f7fd fe5d 	bl	8000330 <__aeabi_uldivmod>
 8002676:	4603      	mov	r3, r0
 8002678:	460c      	mov	r4, r1
 800267a:	461a      	mov	r2, r3
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <UART_SetConfig+0x6f4>)
 800267e:	fba3 1302 	umull	r1, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2164      	movs	r1, #100	; 0x64
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	3332      	adds	r3, #50	; 0x32
 8002690:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <UART_SetConfig+0x6f4>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	f003 020f 	and.w	r2, r3, #15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4442      	add	r2, r8
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	e7ff      	b.n	80026a6 <UART_SetConfig+0x6e2>
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026b0:	40011000 	.word	0x40011000
 80026b4:	40011400 	.word	0x40011400
 80026b8:	51eb851f 	.word	0x51eb851f

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0b      	ldr	r4, [pc, #44]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026e6:	f7fe fa79 	bl	8000bdc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026ea:	f002 feaf 	bl	800544c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ee:	f7fd ffdf 	bl	80006b0 <main>

080026f2 <LoopForever>:

LoopForever:
    b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   r0, =_estack
 80026f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002700:	08005ea4 	.word	0x08005ea4
  ldr r2, =_sbss
 8002704:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002708:	20015750 	.word	0x20015750

0800270c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC_IRQHandler>

0800270e <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <vApplicationStackOverflowHook>:

/**
  Dummy implementation of the callback function vApplicationStackOverflowHook().
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  (void)xTask;
  (void)pcTaskName;
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <vApplicationGetIdleTaskMemory+0x2c>)
 8002744:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <vApplicationGetIdleTaskMemory+0x30>)
 800274a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2282      	movs	r2, #130	; 0x82
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200000a0 	.word	0x200000a0
 8002764:	200000f8 	.word	0x200000f8

08002768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0208 	add.w	r2, r3, #8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f04f 32ff 	mov.w	r2, #4294967295
 8002780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f103 0208 	add.w	r2, r3, #8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0208 	add.w	r2, r3, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6892      	ldr	r2, [r2, #8]
 8002820:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6852      	ldr	r2, [r2, #4]
 800282a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d103      	bne.n	800283e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1e5a      	subs	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800285e:	b580      	push	{r7, lr}
 8002860:	b08e      	sub	sp, #56	; 0x38
 8002862:	af04      	add	r7, sp, #16
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	e7fe      	b.n	8002884 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <xTaskCreateStatic+0x42>
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e7fe      	b.n	800289e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028a0:	2358      	movs	r3, #88	; 0x58
 80028a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b58      	cmp	r3, #88	; 0x58
 80028a8:	d009      	beq.n	80028be <xTaskCreateStatic+0x60>
 80028aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e7fe      	b.n	80028bc <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01e      	beq.n	8002902 <xTaskCreateStatic+0xa4>
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01b      	beq.n	8002902 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80028dc:	2300      	movs	r3, #0
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f850 	bl	800299a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028fc:	f000 f8d4 	bl	8002aa8 <prvAddNewTaskToReadyList>
 8002900:	e001      	b.n	8002906 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002906:	697b      	ldr	r3, [r7, #20]
	}
 8002908:	4618      	mov	r0, r3
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af04      	add	r7, sp, #16
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	4613      	mov	r3, r2
 800291e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fff9 	bl	800391c <pvPortMalloc>
 800292a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002932:	2058      	movs	r0, #88	; 0x58
 8002934:	f000 fff2 	bl	800391c <pvPortMalloc>
 8002938:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
 8002946:	e005      	b.n	8002954 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002948:	6978      	ldr	r0, [r7, #20]
 800294a:	f001 f8ad 	bl	8003aa8 <vPortFree>
 800294e:	e001      	b.n	8002954 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d017      	beq.n	800298a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	2300      	movs	r3, #0
 8002966:	9303      	str	r3, [sp, #12]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f80e 	bl	800299a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800297e:	69f8      	ldr	r0, [r7, #28]
 8002980:	f000 f892 	bl	8002aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002984:	2301      	movs	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	e002      	b.n	8002990 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002990:	69bb      	ldr	r3, [r7, #24]
	}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	461a      	mov	r2, r3
 80029b2:	21a5      	movs	r1, #165	; 0xa5
 80029b4:	f002 fd88 	bl	80054c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029c2:	3b01      	subs	r3, #1
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f023 0307 	bic.w	r3, r3, #7
 80029d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <prvInitialiseNewTask+0x56>
 80029dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e0:	f383 8811 	msr	BASEPRI, r3
 80029e4:	f3bf 8f6f 	isb	sy
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e7fe      	b.n	80029ee <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e012      	b.n	8002a1c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	7819      	ldrb	r1, [r3, #0]
 80029fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	3334      	adds	r3, #52	; 0x34
 8002a06:	460a      	mov	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	d9e9      	bls.n	80029f6 <prvInitialiseNewTask+0x5c>
 8002a22:	e000      	b.n	8002a26 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002a24:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d901      	bls.n	8002a38 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a34:	2304      	movs	r3, #4
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a42:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	2200      	movs	r2, #0
 8002a48:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff feaa 	bl	80027a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	3318      	adds	r3, #24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fea5 	bl	80027a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	f1c3 0205 	rsb	r2, r3, #5
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a76:	2200      	movs	r2, #0
 8002a78:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	69b8      	ldr	r0, [r7, #24]
 8002a88:	f000 fcbc 	bl	8003404 <pxPortInitialiseStack>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ab0:	f000 fdcc 	bl	800364c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	; (8002ba4 <prvAddNewTaskToReadyList+0xfc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <prvAddNewTaskToReadyList+0xfc>)
 8002abc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002abe:	4b3a      	ldr	r3, [pc, #232]	; (8002ba8 <prvAddNewTaskToReadyList+0x100>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ac6:	4a38      	ldr	r2, [pc, #224]	; (8002ba8 <prvAddNewTaskToReadyList+0x100>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002acc:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <prvAddNewTaskToReadyList+0xfc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d110      	bne.n	8002af6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ad4:	f000 fbd6 	bl	8003284 <prvInitialiseTaskLists>
 8002ad8:	e00d      	b.n	8002af6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <prvAddNewTaskToReadyList+0x104>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <prvAddNewTaskToReadyList+0x100>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d802      	bhi.n	8002af6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002af0:	4a2d      	ldr	r2, [pc, #180]	; (8002ba8 <prvAddNewTaskToReadyList+0x100>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <prvAddNewTaskToReadyList+0x108>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <prvAddNewTaskToReadyList+0x108>)
 8002afe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <prvAddNewTaskToReadyList+0x108>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <prvAddNewTaskToReadyList+0x94>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fa7f 	bl	8005014 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	461d      	mov	r5, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	1ae3      	subs	r3, r4, r3
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	462b      	mov	r3, r5
 8002b38:	f001 f972 	bl	8003e20 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 faf0 	bl	8005124 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	2201      	movs	r2, #1
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <prvAddNewTaskToReadyList+0x10c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <prvAddNewTaskToReadyList+0x10c>)
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <prvAddNewTaskToReadyList+0x110>)
 8002b64:	441a      	add	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	f7ff fe28 	bl	80027c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b72:	f000 fd99 	bl	80036a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <prvAddNewTaskToReadyList+0x104>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00e      	beq.n	8002b9c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <prvAddNewTaskToReadyList+0x100>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d207      	bcs.n	8002b9c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <prvAddNewTaskToReadyList+0x114>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	200003d8 	.word	0x200003d8
 8002ba8:	20000300 	.word	0x20000300
 8002bac:	200003e4 	.word	0x200003e4
 8002bb0:	200003f4 	.word	0x200003f4
 8002bb4:	200003e0 	.word	0x200003e0
 8002bb8:	20000304 	.word	0x20000304
 8002bbc:	e000ed04 	.word	0xe000ed04

08002bc0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002bc8:	f000 fd40 	bl	800364c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <uxTaskPriorityGet+0x18>
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <uxTaskPriorityGet+0x30>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e000      	b.n	8002bda <uxTaskPriorityGet+0x1a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002be2:	f000 fd61 	bl	80036a8 <vPortExitCritical>

		return uxReturn;
 8002be6:	68bb      	ldr	r3, [r7, #8]
	}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000300 	.word	0x20000300

08002bf4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d909      	bls.n	8002c1c <vTaskPrioritySet+0x28>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e7fe      	b.n	8002c1a <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d901      	bls.n	8002c26 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c22:	2304      	movs	r3, #4
 8002c24:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002c26:	f000 fd11 	bl	800364c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <vTaskPrioritySet+0x42>
 8002c30:	4b4e      	ldr	r3, [pc, #312]	; (8002d6c <vTaskPrioritySet+0x178>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	e000      	b.n	8002c38 <vTaskPrioritySet+0x44>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fab5 	bl	80051ac <SEGGER_SYSVIEW_ShrinkId>
 8002c42:	4603      	mov	r3, r0
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	4619      	mov	r1, r3
 8002c48:	2028      	movs	r0, #40	; 0x28
 8002c4a:	f001 fe2d 	bl	80048a8 <SEGGER_SYSVIEW_RecordU32x2>
 8002c4e:	69b8      	ldr	r0, [r7, #24]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	f001 f944 	bl	8003ef0 <SYSVIEW_UpdateTask>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d074      	beq.n	8002d60 <vTaskPrioritySet+0x16c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d90d      	bls.n	8002c9a <vTaskPrioritySet+0xa6>
				{
					if( pxTCB != pxCurrentTCB )
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <vTaskPrioritySet+0x178>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d00f      	beq.n	8002ca8 <vTaskPrioritySet+0xb4>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <vTaskPrioritySet+0x178>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d309      	bcc.n	8002ca8 <vTaskPrioritySet+0xb4>
						{
							xYieldRequired = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	e006      	b.n	8002ca8 <vTaskPrioritySet+0xb4>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002c9a:	4b34      	ldr	r3, [pc, #208]	; (8002d6c <vTaskPrioritySet+0x178>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d101      	bne.n	8002ca8 <vTaskPrioritySet+0xb4>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d102      	bne.n	8002cc0 <vTaskPrioritySet+0xcc>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db04      	blt.n	8002cd8 <vTaskPrioritySet+0xe4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1c3 0205 	rsb	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6959      	ldr	r1, [r3, #20]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <vTaskPrioritySet+0x17c>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	4299      	cmp	r1, r3
 8002cec:	d101      	bne.n	8002cf2 <vTaskPrioritySet+0xfe>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <vTaskPrioritySet+0x100>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d028      	beq.n	8002d4a <vTaskPrioritySet+0x156>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fd84 	bl	800280a <uxListRemove>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <vTaskPrioritySet+0x128>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002d08:	2201      	movs	r2, #1
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43da      	mvns	r2, r3
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <vTaskPrioritySet+0x180>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4013      	ands	r3, r2
 8002d18:	4a16      	ldr	r2, [pc, #88]	; (8002d74 <vTaskPrioritySet+0x180>)
 8002d1a:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvReaddTaskToReadyList( pxTCB );
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <vTaskPrioritySet+0x180>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <vTaskPrioritySet+0x180>)
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <vTaskPrioritySet+0x17c>)
 8002d3c:	441a      	add	r2, r3
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f7ff fd3c 	bl	80027c2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <vTaskPrioritySet+0x16c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <vTaskPrioritySet+0x184>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002d60:	f000 fca2 	bl	80036a8 <vPortExitCritical>
	}
 8002d64:	bf00      	nop
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000300 	.word	0x20000300
 8002d70:	20000304 	.word	0x20000304
 8002d74:	200003e0 	.word	0x200003e0
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d8a:	463a      	mov	r2, r7
 8002d8c:	1d39      	adds	r1, r7, #4
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fcce 	bl	8002734 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	9202      	str	r2, [sp, #8]
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	2300      	movs	r3, #0
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	2300      	movs	r3, #0
 8002da8:	460a      	mov	r2, r1
 8002daa:	491d      	ldr	r1, [pc, #116]	; (8002e20 <vTaskStartScheduler+0xa4>)
 8002dac:	481d      	ldr	r0, [pc, #116]	; (8002e24 <vTaskStartScheduler+0xa8>)
 8002dae:	f7ff fd56 	bl	800285e <xTaskCreateStatic>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <vTaskStartScheduler+0xac>)
 8002db6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <vTaskStartScheduler+0xac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e001      	b.n	8002dca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d115      	bne.n	8002dfc <vTaskStartScheduler+0x80>
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002de2:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <vTaskStartScheduler+0xb0>)
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dea:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <vTaskStartScheduler+0xb4>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <vTaskStartScheduler+0xb8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002df6:	f000 fb8b 	bl	8003510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dfa:	e00d      	b.n	8002e18 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e02:	d109      	bne.n	8002e18 <vTaskStartScheduler+0x9c>
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e7fe      	b.n	8002e16 <vTaskStartScheduler+0x9a>
}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	08005d70 	.word	0x08005d70
 8002e24:	08003255 	.word	0x08003255
 8002e28:	200003fc 	.word	0x200003fc
 8002e2c:	200003f8 	.word	0x200003f8
 8002e30:	200003e4 	.word	0x200003e4
 8002e34:	200003dc 	.word	0x200003dc

08002e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <vTaskSuspendAll+0x18>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <vTaskSuspendAll+0x18>)
 8002e44:	6013      	str	r3, [r2, #0]
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	20000400 	.word	0x20000400

08002e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e62:	4b43      	ldr	r3, [pc, #268]	; (8002f70 <xTaskResumeAll+0x11c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <xTaskResumeAll+0x2a>
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	e7fe      	b.n	8002e7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e7e:	f000 fbe5 	bl	800364c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <xTaskResumeAll+0x11c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	4a39      	ldr	r2, [pc, #228]	; (8002f70 <xTaskResumeAll+0x11c>)
 8002e8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e8c:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <xTaskResumeAll+0x11c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d165      	bne.n	8002f60 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <xTaskResumeAll+0x120>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d061      	beq.n	8002f60 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e9c:	e032      	b.n	8002f04 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <xTaskResumeAll+0x124>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fcad 	bl	800280a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fca8 	bl	800280a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 f931 	bl	8005124 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <xTaskResumeAll+0x128>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <xTaskResumeAll+0x128>)
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <xTaskResumeAll+0x12c>)
 8002ee2:	441a      	add	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff fc69 	bl	80027c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <xTaskResumeAll+0x130>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <xTaskResumeAll+0x134>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <xTaskResumeAll+0x124>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1c8      	bne.n	8002e9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f12:	f000 fa51 	bl	80033b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <xTaskResumeAll+0x138>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f22:	f000 f859 	bl	8002fd8 <xTaskIncrementTick>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <xTaskResumeAll+0x134>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f1      	bne.n	8002f22 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <xTaskResumeAll+0x138>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <xTaskResumeAll+0x134>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <xTaskResumeAll+0x13c>)
 8002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f60:	f000 fba2 	bl	80036a8 <vPortExitCritical>

	return xAlreadyYielded;
 8002f64:	68bb      	ldr	r3, [r7, #8]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000400 	.word	0x20000400
 8002f74:	200003d8 	.word	0x200003d8
 8002f78:	20000398 	.word	0x20000398
 8002f7c:	200003e0 	.word	0x200003e0
 8002f80:	20000304 	.word	0x20000304
 8002f84:	20000300 	.word	0x20000300
 8002f88:	200003ec 	.word	0x200003ec
 8002f8c:	200003e8 	.word	0x200003e8
 8002f90:	e000ed04 	.word	0xe000ed04

08002f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <xTaskGetTickCount+0x1c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	200003dc 	.word	0x200003dc

08002fb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fba:	f000 fc2b 	bl	8003814 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <xTaskGetTickCountFromISR+0x20>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fc8:	683b      	ldr	r3, [r7, #0]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200003dc 	.word	0x200003dc

08002fd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe2:	4b52      	ldr	r3, [pc, #328]	; (800312c <xTaskIncrementTick+0x154>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 8090 	bne.w	800310c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fec:	4b50      	ldr	r3, [pc, #320]	; (8003130 <xTaskIncrementTick+0x158>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ff4:	4a4e      	ldr	r2, [pc, #312]	; (8003130 <xTaskIncrementTick+0x158>)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11f      	bne.n	8003040 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <xTaskIncrementTick+0x15c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <xTaskIncrementTick+0x46>
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	e7fe      	b.n	800301c <xTaskIncrementTick+0x44>
 800301e:	4b45      	ldr	r3, [pc, #276]	; (8003134 <xTaskIncrementTick+0x15c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	4b44      	ldr	r3, [pc, #272]	; (8003138 <xTaskIncrementTick+0x160>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a42      	ldr	r2, [pc, #264]	; (8003134 <xTaskIncrementTick+0x15c>)
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4a42      	ldr	r2, [pc, #264]	; (8003138 <xTaskIncrementTick+0x160>)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	4b42      	ldr	r3, [pc, #264]	; (800313c <xTaskIncrementTick+0x164>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	4a40      	ldr	r2, [pc, #256]	; (800313c <xTaskIncrementTick+0x164>)
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	f000 f9bc 	bl	80033b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <xTaskIncrementTick+0x168>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	429a      	cmp	r2, r3
 8003048:	d351      	bcc.n	80030ee <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800304a:	4b3a      	ldr	r3, [pc, #232]	; (8003134 <xTaskIncrementTick+0x15c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <xTaskIncrementTick+0x80>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <xTaskIncrementTick+0x82>
 8003058:	2300      	movs	r3, #0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305e:	4b38      	ldr	r3, [pc, #224]	; (8003140 <xTaskIncrementTick+0x168>)
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	601a      	str	r2, [r3, #0]
					break;
 8003066:	e042      	b.n	80030ee <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <xTaskIncrementTick+0x15c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	d203      	bcs.n	8003088 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003080:	4a2f      	ldr	r2, [pc, #188]	; (8003140 <xTaskIncrementTick+0x168>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6013      	str	r3, [r2, #0]
						break;
 8003086:	e032      	b.n	80030ee <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	3304      	adds	r3, #4
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fbbc 	bl	800280a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3318      	adds	r3, #24
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fbb3 	bl	800280a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 f83c 	bl	8005124 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2201      	movs	r2, #1
 80030b2:	409a      	lsls	r2, r3
 80030b4:	4b23      	ldr	r3, [pc, #140]	; (8003144 <xTaskIncrementTick+0x16c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <xTaskIncrementTick+0x16c>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a1f      	ldr	r2, [pc, #124]	; (8003148 <xTaskIncrementTick+0x170>)
 80030cc:	441a      	add	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3304      	adds	r3, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4610      	mov	r0, r2
 80030d6:	f7ff fb74 	bl	80027c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	4b1b      	ldr	r3, [pc, #108]	; (800314c <xTaskIncrementTick+0x174>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d3b0      	bcc.n	800304a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80030e8:	2301      	movs	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ec:	e7ad      	b.n	800304a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <xTaskIncrementTick+0x174>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4914      	ldr	r1, [pc, #80]	; (8003148 <xTaskIncrementTick+0x170>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d907      	bls.n	8003116 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003106:	2301      	movs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e004      	b.n	8003116 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <xTaskIncrementTick+0x178>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <xTaskIncrementTick+0x178>)
 8003114:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <xTaskIncrementTick+0x17c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800311e:	2301      	movs	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003122:	697b      	ldr	r3, [r7, #20]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000400 	.word	0x20000400
 8003130:	200003dc 	.word	0x200003dc
 8003134:	20000390 	.word	0x20000390
 8003138:	20000394 	.word	0x20000394
 800313c:	200003f0 	.word	0x200003f0
 8003140:	200003f8 	.word	0x200003f8
 8003144:	200003e0 	.word	0x200003e0
 8003148:	20000304 	.word	0x20000304
 800314c:	20000300 	.word	0x20000300
 8003150:	200003e8 	.word	0x200003e8
 8003154:	200003ec 	.word	0x200003ec

08003158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800315e:	4b37      	ldr	r3, [pc, #220]	; (800323c <vTaskSwitchContext+0xe4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <vTaskSwitchContext+0xe8>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800316c:	e062      	b.n	8003234 <vTaskSwitchContext+0xdc>
		xYieldPending = pdFALSE;
 800316e:	4b34      	ldr	r3, [pc, #208]	; (8003240 <vTaskSwitchContext+0xe8>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <vTaskSwitchContext+0xec>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b32      	ldr	r3, [pc, #200]	; (8003244 <vTaskSwitchContext+0xec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	429a      	cmp	r2, r3
 8003182:	d808      	bhi.n	8003196 <vTaskSwitchContext+0x3e>
 8003184:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <vTaskSwitchContext+0xec>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b2e      	ldr	r3, [pc, #184]	; (8003244 <vTaskSwitchContext+0xec>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	3334      	adds	r3, #52	; 0x34
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f7ff fac3 	bl	800271c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <vTaskSwitchContext+0xf0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031a4:	7afb      	ldrb	r3, [r7, #11]
 80031a6:	f1c3 031f 	rsb	r3, r3, #31
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	4927      	ldr	r1, [pc, #156]	; (800324c <vTaskSwitchContext+0xf4>)
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <vTaskSwitchContext+0x7c>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e7fe      	b.n	80031d2 <vTaskSwitchContext+0x7a>
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <vTaskSwitchContext+0xf4>)
 80031e0:	4413      	add	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3308      	adds	r3, #8
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d104      	bne.n	8003204 <vTaskSwitchContext+0xac>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <vTaskSwitchContext+0xec>)
 800320c:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <vTaskSwitchContext+0xec>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3334      	adds	r3, #52	; 0x34
 8003214:	2205      	movs	r2, #5
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <vTaskSwitchContext+0xf8>)
 8003218:	4618      	mov	r0, r3
 800321a:	f002 f93b 	bl	8005494 <memcmp>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <vTaskSwitchContext+0xd8>
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <vTaskSwitchContext+0xec>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f001 ff37 	bl	800509c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800322e:	e001      	b.n	8003234 <vTaskSwitchContext+0xdc>
		traceTASK_SWITCHED_IN();
 8003230:	f001 fed4 	bl	8004fdc <SEGGER_SYSVIEW_OnIdle>
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000400 	.word	0x20000400
 8003240:	200003ec 	.word	0x200003ec
 8003244:	20000300 	.word	0x20000300
 8003248:	200003e0 	.word	0x200003e0
 800324c:	20000304 	.word	0x20000304
 8003250:	08005d70 	.word	0x08005d70

08003254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800325c:	f000 f852 	bl	8003304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <prvIdleTask+0x28>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d9f9      	bls.n	800325c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <prvIdleTask+0x2c>)
 800326a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003278:	e7f0      	b.n	800325c <prvIdleTask+0x8>
 800327a:	bf00      	nop
 800327c:	20000304 	.word	0x20000304
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e00c      	b.n	80032aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <prvInitialiseTaskLists+0x60>)
 800329c:	4413      	add	r3, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff fa62 	bl	8002768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3301      	adds	r3, #1
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d9ef      	bls.n	8003290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <prvInitialiseTaskLists+0x64>)
 80032b2:	f7ff fa59 	bl	8002768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <prvInitialiseTaskLists+0x68>)
 80032b8:	f7ff fa56 	bl	8002768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032bc:	480c      	ldr	r0, [pc, #48]	; (80032f0 <prvInitialiseTaskLists+0x6c>)
 80032be:	f7ff fa53 	bl	8002768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032c2:	480c      	ldr	r0, [pc, #48]	; (80032f4 <prvInitialiseTaskLists+0x70>)
 80032c4:	f7ff fa50 	bl	8002768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032c8:	480b      	ldr	r0, [pc, #44]	; (80032f8 <prvInitialiseTaskLists+0x74>)
 80032ca:	f7ff fa4d 	bl	8002768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <prvInitialiseTaskLists+0x78>)
 80032d0:	4a05      	ldr	r2, [pc, #20]	; (80032e8 <prvInitialiseTaskLists+0x64>)
 80032d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <prvInitialiseTaskLists+0x7c>)
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <prvInitialiseTaskLists+0x68>)
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000304 	.word	0x20000304
 80032e8:	20000368 	.word	0x20000368
 80032ec:	2000037c 	.word	0x2000037c
 80032f0:	20000398 	.word	0x20000398
 80032f4:	200003ac 	.word	0x200003ac
 80032f8:	200003c4 	.word	0x200003c4
 80032fc:	20000390 	.word	0x20000390
 8003300:	20000394 	.word	0x20000394

08003304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800330a:	e019      	b.n	8003340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800330c:	f000 f99e 	bl	800364c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <prvCheckTasksWaitingTermination+0x4c>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fa74 	bl	800280a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <prvCheckTasksWaitingTermination+0x50>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3b01      	subs	r3, #1
 8003328:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <prvCheckTasksWaitingTermination+0x50>)
 800332a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <prvCheckTasksWaitingTermination+0x54>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3b01      	subs	r3, #1
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <prvCheckTasksWaitingTermination+0x54>)
 8003334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003336:	f000 f9b7 	bl	80036a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f80e 	bl	800335c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <prvCheckTasksWaitingTermination+0x54>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1e1      	bne.n	800330c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200003ac 	.word	0x200003ac
 8003354:	200003d8 	.word	0x200003d8
 8003358:	200003c0 	.word	0x200003c0

0800335c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb98 	bl	8003aa8 <vPortFree>
				vPortFree( pxTCB );
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb95 	bl	8003aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800337e:	e017      	b.n	80033b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003386:	2b01      	cmp	r3, #1
 8003388:	d103      	bne.n	8003392 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fb8c 	bl	8003aa8 <vPortFree>
	}
 8003390:	e00e      	b.n	80033b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003398:	2b02      	cmp	r3, #2
 800339a:	d009      	beq.n	80033b0 <prvDeleteTCB+0x54>
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e7fe      	b.n	80033ae <prvDeleteTCB+0x52>
	}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <prvResetNextTaskUnblockTime+0x44>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <prvResetNextTaskUnblockTime+0x14>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <prvResetNextTaskUnblockTime+0x16>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <prvResetNextTaskUnblockTime+0x48>)
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033da:	e008      	b.n	80033ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <prvResetNextTaskUnblockTime+0x44>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <prvResetNextTaskUnblockTime+0x48>)
 80033ec:	6013      	str	r3, [r2, #0]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000390 	.word	0x20000390
 8003400:	200003f8 	.word	0x200003f8

08003404 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b04      	subs	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800341c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b04      	subs	r3, #4
 8003422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3b04      	subs	r3, #4
 8003432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <pxPortInitialiseStack+0x64>)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b14      	subs	r3, #20
 800343e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b04      	subs	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f06f 0202 	mvn.w	r2, #2
 8003452:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3b20      	subs	r3, #32
 8003458:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	0800346d 	.word	0x0800346d

0800346c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <prvTaskExitError+0x50>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d009      	beq.n	8003494 <prvTaskExitError+0x28>
 8003480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003484:	f383 8811 	msr	BASEPRI, r3
 8003488:	f3bf 8f6f 	isb	sy
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e7fe      	b.n	8003492 <prvTaskExitError+0x26>
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034a6:	bf00      	nop
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0fc      	beq.n	80034a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <pxCurrentTCBConst2>)
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	6808      	ldr	r0, [r1, #0]
 80034c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ca:	f380 8809 	msr	PSP, r0
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f380 8811 	msr	BASEPRI, r0
 80034da:	4770      	bx	lr
 80034dc:	f3af 8000 	nop.w

080034e0 <pxCurrentTCBConst2>:
 80034e0:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034e4:	bf00      	nop
 80034e6:	bf00      	nop

080034e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <prvPortStartFirstTask+0x24>)
 80034ea:	6800      	ldr	r0, [r0, #0]
 80034ec:	6800      	ldr	r0, [r0, #0]
 80034ee:	f380 8808 	msr	MSP, r0
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8814 	msr	CONTROL, r0
 80034fa:	b662      	cpsie	i
 80034fc:	b661      	cpsie	f
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	df00      	svc	0
 8003508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800350a:	bf00      	nop
 800350c:	e000ed08 	.word	0xe000ed08

08003510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <xPortStartScheduler+0x118>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a44      	ldr	r2, [pc, #272]	; (800362c <xPortStartScheduler+0x11c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <xPortStartScheduler+0x24>
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	e7fe      	b.n	8003532 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003534:	4b3c      	ldr	r3, [pc, #240]	; (8003628 <xPortStartScheduler+0x118>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a3d      	ldr	r2, [pc, #244]	; (8003630 <xPortStartScheduler+0x120>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d109      	bne.n	8003552 <xPortStartScheduler+0x42>
 800353e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e7fe      	b.n	8003550 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <xPortStartScheduler+0x124>)
 8003554:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <xPortStartScheduler+0x128>)
 8003578:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <xPortStartScheduler+0x12c>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003580:	e009      	b.n	8003596 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003582:	4b2e      	ldr	r3, [pc, #184]	; (800363c <xPortStartScheduler+0x12c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <xPortStartScheduler+0x12c>)
 800358a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	2b80      	cmp	r3, #128	; 0x80
 80035a0:	d0ef      	beq.n	8003582 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <xPortStartScheduler+0x12c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1c3 0307 	rsb	r3, r3, #7
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d009      	beq.n	80035c2 <xPortStartScheduler+0xb2>
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	e7fe      	b.n	80035c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <xPortStartScheduler+0x12c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	4a1c      	ldr	r2, [pc, #112]	; (800363c <xPortStartScheduler+0x12c>)
 80035ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <xPortStartScheduler+0x12c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <xPortStartScheduler+0x12c>)
 80035d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <xPortStartScheduler+0x130>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	; (8003640 <xPortStartScheduler+0x130>)
 80035e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <xPortStartScheduler+0x130>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <xPortStartScheduler+0x130>)
 80035f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80035f8:	f000 f8de 	bl	80037b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <xPortStartScheduler+0x134>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003602:	f000 f8fd 	bl	8003800 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <xPortStartScheduler+0x138>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <xPortStartScheduler+0x138>)
 800360c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003610:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003612:	f7ff ff69 	bl	80034e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003616:	f7ff fd9f 	bl	8003158 <vTaskSwitchContext>
	prvTaskExitError();
 800361a:	f7ff ff27 	bl	800346c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	e000ed00 	.word	0xe000ed00
 800362c:	410fc271 	.word	0x410fc271
 8003630:	410fc270 	.word	0x410fc270
 8003634:	e000e400 	.word	0xe000e400
 8003638:	20000404 	.word	0x20000404
 800363c:	20000408 	.word	0x20000408
 8003640:	e000ed20 	.word	0xe000ed20
 8003644:	2000000c 	.word	0x2000000c
 8003648:	e000ef34 	.word	0xe000ef34

0800364c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <vPortEnterCritical+0x54>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a0d      	ldr	r2, [pc, #52]	; (80036a0 <vPortEnterCritical+0x54>)
 800366c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <vPortEnterCritical+0x54>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10e      	bne.n	8003694 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vPortEnterCritical+0x58>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <vPortEnterCritical+0x48>
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	e7fe      	b.n	8003692 <vPortEnterCritical+0x46>
	}
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	2000000c 	.word	0x2000000c
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <vPortExitCritical+0x4c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <vPortExitCritical+0x22>
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	e7fe      	b.n	80036c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <vPortExitCritical+0x4c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <vPortExitCritical+0x4c>)
 80036d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <vPortExitCritical+0x4c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <vPortExitCritical+0x3e>
 80036dc:	2300      	movs	r3, #0
 80036de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000000c 	.word	0x2000000c
	...

08003700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003700:	f3ef 8009 	mrs	r0, PSP
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <pxCurrentTCBConst>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	f01e 0f10 	tst.w	lr, #16
 8003710:	bf08      	it	eq
 8003712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371a:	6010      	str	r0, [r2, #0]
 800371c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003724:	f380 8811 	msr	BASEPRI, r0
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f7ff fd12 	bl	8003158 <vTaskSwitchContext>
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f380 8811 	msr	BASEPRI, r0
 800373c:	bc09      	pop	{r0, r3}
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	6808      	ldr	r0, [r1, #0]
 8003742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003746:	f01e 0f10 	tst.w	lr, #16
 800374a:	bf08      	it	eq
 800374c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003750:	f380 8809 	msr	PSP, r0
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w

08003760 <pxCurrentTCBConst>:
 8003760:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop

08003768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8003780:	f001 fbb2 	bl	8004ee8 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003784:	f7ff fc28 	bl	8002fd8 <xTaskIncrementTick>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800378e:	f001 fc09 	bl	8004fa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <xPortSysTickHandler+0x4c>)
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e001      	b.n	80037a0 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800379c:	f001 fbe6 	bl	8004f6c <SEGGER_SYSVIEW_RecordExitISR>
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <vPortSetupTimerInterrupt+0x34>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <vPortSetupTimerInterrupt+0x38>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <vPortSetupTimerInterrupt+0x3c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <vPortSetupTimerInterrupt+0x40>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	4a09      	ldr	r2, [pc, #36]	; (80037fc <vPortSetupTimerInterrupt+0x44>)
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <vPortSetupTimerInterrupt+0x34>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010
 80037f0:	e000e018 	.word	0xe000e018
 80037f4:	20000000 	.word	0x20000000
 80037f8:	10624dd3 	.word	0x10624dd3
 80037fc:	e000e014 	.word	0xe000e014

08003800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003810 <vPortEnableVFP+0x10>
 8003804:	6801      	ldr	r1, [r0, #0]
 8003806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800380a:	6001      	str	r1, [r0, #0]
 800380c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800380e:	bf00      	nop
 8003810:	e000ed88 	.word	0xe000ed88

08003814 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 800381a:	f000 f839 	bl	8003890 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800381e:	f3ef 8305 	mrs	r3, IPSR
 8003822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	d913      	bls.n	8003852 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800382a:	4a15      	ldr	r2, [pc, #84]	; (8003880 <vPortValidateInterruptPriority+0x6c>)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <vPortValidateInterruptPriority+0x70>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	7afa      	ldrb	r2, [r7, #11]
 800383a:	429a      	cmp	r2, r3
 800383c:	d209      	bcs.n	8003852 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e7fe      	b.n	8003850 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <vPortValidateInterruptPriority+0x74>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <vPortValidateInterruptPriority+0x78>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d909      	bls.n	8003876 <vPortValidateInterruptPriority+0x62>
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	e7fe      	b.n	8003874 <vPortValidateInterruptPriority+0x60>
	}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000e3f0 	.word	0xe000e3f0
 8003884:	20000404 	.word	0x20000404
 8003888:	e000ed0c 	.word	0xe000ed0c
 800388c:	20000408 	.word	0x20000408

08003890 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003896:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <vSetVarulMaxPRIGROUPValue+0x84>)
 8003898:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038aa:	2207      	movs	r2, #7
 80038ac:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ae:	e009      	b.n	80038c4 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	4a18      	ldr	r2, [pc, #96]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038b8:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d0ef      	beq.n	80038b0 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038d0:	4b11      	ldr	r3, [pc, #68]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1c3 0307 	rsb	r3, r3, #7
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d009      	beq.n	80038f0 <vSetVarulMaxPRIGROUPValue+0x60>
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	e7fe      	b.n	80038ee <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038f8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003902:	4a05      	ldr	r2, [pc, #20]	; (8003918 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000e400 	.word	0xe000e400
 8003918:	20000408 	.word	0x20000408

0800391c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	; 0x28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003928:	f7ff fa86 	bl	8002e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <pvPortMalloc+0x178>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003934:	f000 f910 	bl	8003b58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003938:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <pvPortMalloc+0x17c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 808c 	bne.w	8003a5e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01c      	beq.n	8003986 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800394c:	2208      	movs	r2, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	2b00      	cmp	r3, #0
 800395c:	d013      	beq.n	8003986 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	3308      	adds	r3, #8
 8003966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <pvPortMalloc+0x6a>
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e7fe      	b.n	8003984 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d068      	beq.n	8003a5e <pvPortMalloc+0x142>
 800398c:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <pvPortMalloc+0x180>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d863      	bhi.n	8003a5e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003996:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <pvPortMalloc+0x184>)
 8003998:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800399a:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <pvPortMalloc+0x184>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039a0:	e004      	b.n	80039ac <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d903      	bls.n	80039be <pvPortMalloc+0xa2>
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f1      	bne.n	80039a2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039be:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <pvPortMalloc+0x178>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d04a      	beq.n	8003a5e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4413      	add	r3, r2
 80039d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	1ad2      	subs	r2, r2, r3
 80039e2:	2308      	movs	r3, #8
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d91e      	bls.n	8003a28 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <pvPortMalloc+0xf4>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e7fe      	b.n	8003a0e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a22:	69b8      	ldr	r0, [r7, #24]
 8003a24:	f000 f8fa 	bl	8003c1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <pvPortMalloc+0x180>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <pvPortMalloc+0x180>)
 8003a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <pvPortMalloc+0x180>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <pvPortMalloc+0x188>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d203      	bcs.n	8003a4a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <pvPortMalloc+0x180>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <pvPortMalloc+0x188>)
 8003a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <pvPortMalloc+0x17c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a5e:	f7ff f9f9 	bl	8002e54 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003a68:	f7fe fe51 	bl	800270e <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <pvPortMalloc+0x16e>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e7fe      	b.n	8003a88 <pvPortMalloc+0x16c>
	return pvReturn;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20013014 	.word	0x20013014
 8003a98:	20013020 	.word	0x20013020
 8003a9c:	20013018 	.word	0x20013018
 8003aa0:	2001300c 	.word	0x2001300c
 8003aa4:	2001301c 	.word	0x2001301c

08003aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d046      	beq.n	8003b48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003aba:	2308      	movs	r3, #8
 8003abc:	425b      	negs	r3, r3
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <vPortFree+0xa8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <vPortFree+0x42>
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e7fe      	b.n	8003ae8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <vPortFree+0x5e>
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	e7fe      	b.n	8003b04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <vPortFree+0xa8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d019      	beq.n	8003b48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d115      	bne.n	8003b48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <vPortFree+0xa8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b2c:	f7ff f984 	bl	8002e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <vPortFree+0xac>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4413      	add	r3, r2
 8003b3a:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <vPortFree+0xac>)
 8003b3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b3e:	6938      	ldr	r0, [r7, #16]
 8003b40:	f000 f86c 	bl	8003c1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b44:	f7ff f986 	bl	8002e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20013020 	.word	0x20013020
 8003b54:	20013018 	.word	0x20013018

08003b58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b5e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003b62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <prvHeapInit+0xac>)
 8003b66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3307      	adds	r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <prvHeapInit+0xac>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <prvHeapInit+0xb0>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <prvHeapInit+0xb0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <prvHeapInit+0xb4>)
 8003bb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <prvHeapInit+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <prvHeapInit+0xb4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <prvHeapInit+0xb4>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <prvHeapInit+0xb8>)
 8003be6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <prvHeapInit+0xbc>)
 8003bee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <prvHeapInit+0xc0>)
 8003bf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bf6:	601a      	str	r2, [r3, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	2000040c 	.word	0x2000040c
 8003c08:	2001300c 	.word	0x2001300c
 8003c0c:	20013014 	.word	0x20013014
 8003c10:	2001301c 	.word	0x2001301c
 8003c14:	20013018 	.word	0x20013018
 8003c18:	20013020 	.word	0x20013020

08003c1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <prvInsertBlockIntoFreeList+0xac>)
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e002      	b.n	8003c30 <prvInsertBlockIntoFreeList+0x14>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d8f7      	bhi.n	8003c2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d108      	bne.n	8003c5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	441a      	add	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d118      	bne.n	8003ca4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <prvInsertBlockIntoFreeList+0xb0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d00d      	beq.n	8003c9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e008      	b.n	8003cac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <prvInsertBlockIntoFreeList+0xb0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e003      	b.n	8003cac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d002      	beq.n	8003cba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	2001300c 	.word	0x2001300c
 8003ccc:	20013014 	.word	0x20013014

08003cd0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003cd4:	4803      	ldr	r0, [pc, #12]	; (8003ce4 <_cbSendSystemDesc+0x14>)
 8003cd6:	f001 f8b3 	bl	8004e40 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003cda:	4803      	ldr	r0, [pc, #12]	; (8003ce8 <_cbSendSystemDesc+0x18>)
 8003cdc:	f001 f8b0 	bl	8004e40 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08005d78 	.word	0x08005d78
 8003ce8:	08005dac 	.word	0x08005dac

08003cec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <SEGGER_SYSVIEW_Conf+0x20>)
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <SEGGER_SYSVIEW_Conf+0x24>)
 8003cfa:	4a06      	ldr	r2, [pc, #24]	; (8003d14 <SEGGER_SYSVIEW_Conf+0x28>)
 8003cfc:	f000 fd2c 	bl	8004758 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003d00:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003d04:	f000 fd66 	bl	80047d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	08003cd1 	.word	0x08003cd1
 8003d14:	08005e4c 	.word	0x08005e4c

08003d18 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e034      	b.n	8003d8e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003d24:	491e      	ldr	r1, [pc, #120]	; (8003da0 <_cbSendTaskList+0x88>)
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	491a      	ldr	r1, [pc, #104]	; (8003da0 <_cbSendTaskList+0x88>)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3304      	adds	r3, #4
 8003d44:	681c      	ldr	r4, [r3, #0]
 8003d46:	4916      	ldr	r1, [pc, #88]	; (8003da0 <_cbSendTaskList+0x88>)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3308      	adds	r3, #8
 8003d56:	681d      	ldr	r5, [r3, #0]
 8003d58:	4911      	ldr	r1, [pc, #68]	; (8003da0 <_cbSendTaskList+0x88>)
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	330c      	adds	r3, #12
 8003d68:	681e      	ldr	r6, [r3, #0]
 8003d6a:	490d      	ldr	r1, [pc, #52]	; (8003da0 <_cbSendTaskList+0x88>)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3310      	adds	r3, #16
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4633      	mov	r3, r6
 8003d80:	462a      	mov	r2, r5
 8003d82:	4621      	mov	r1, r4
 8003d84:	f000 f924 	bl	8003fd0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <_cbSendTaskList+0x8c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d3c5      	bcc.n	8003d24 <_cbSendTaskList+0xc>
  }
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da0:	20013024 	.word	0x20013024
 8003da4:	200130c4 	.word	0x200130c4

08003da8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003dae:	f7ff f901 	bl	8002fb4 <xTaskGetTickCountFromISR>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f04f 0400 	mov.w	r4, #0
 8003db8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003dbc:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003dc0:	462b      	mov	r3, r5
 8003dc2:	4634      	mov	r4, r6
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	0162      	lsls	r2, r4, #5
 8003dce:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003dd2:	0159      	lsls	r1, r3, #5
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	1b5b      	subs	r3, r3, r5
 8003dda:	eb64 0406 	sbc.w	r4, r4, r6
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	00a2      	lsls	r2, r4, #2
 8003de8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003dec:	0099      	lsls	r1, r3, #2
 8003dee:	460b      	mov	r3, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	195b      	adds	r3, r3, r5
 8003df4:	eb44 0406 	adc.w	r4, r4, r6
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	00e2      	lsls	r2, r4, #3
 8003e02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e06:	00d9      	lsls	r1, r3, #3
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003e10:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	4621      	mov	r1, r4
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e20 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e2e:	2205      	movs	r2, #5
 8003e30:	492b      	ldr	r1, [pc, #172]	; (8003ee0 <SYSVIEW_AddTask+0xc0>)
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f001 fb2e 	bl	8005494 <memcmp>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04b      	beq.n	8003ed6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e3e:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b07      	cmp	r3, #7
 8003e44:	d903      	bls.n	8003e4e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e46:	4828      	ldr	r0, [pc, #160]	; (8003ee8 <SYSVIEW_AddTask+0xc8>)
 8003e48:	f001 fa9e 	bl	8005388 <SEGGER_SYSVIEW_Warn>
    return;
 8003e4c:	e044      	b.n	8003ed8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e4e:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4926      	ldr	r1, [pc, #152]	; (8003eec <SYSVIEW_AddTask+0xcc>)
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4921      	ldr	r1, [pc, #132]	; (8003eec <SYSVIEW_AddTask+0xcc>)
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3304      	adds	r3, #4
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003e78:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	491b      	ldr	r1, [pc, #108]	; (8003eec <SYSVIEW_AddTask+0xcc>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3308      	adds	r3, #8
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4916      	ldr	r1, [pc, #88]	; (8003eec <SYSVIEW_AddTask+0xcc>)
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4910      	ldr	r1, [pc, #64]	; (8003eec <SYSVIEW_AddTask+0xcc>)
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3310      	adds	r3, #16
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <SYSVIEW_AddTask+0xc4>)
 8003ec2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f87e 	bl	8003fd0 <SYSVIEW_SendTaskInfo>
 8003ed4:	e000      	b.n	8003ed8 <SYSVIEW_AddTask+0xb8>
    return;
 8003ed6:	bf00      	nop

}
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	08005dbc 	.word	0x08005dbc
 8003ee4:	200130c4 	.word	0x200130c4
 8003ee8:	08005dc4 	.word	0x08005dc4
 8003eec:	20013024 	.word	0x20013024

08003ef0 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003efe:	2205      	movs	r2, #5
 8003f00:	4930      	ldr	r1, [pc, #192]	; (8003fc4 <SYSVIEW_UpdateTask+0xd4>)
 8003f02:	68b8      	ldr	r0, [r7, #8]
 8003f04:	f001 fac6 	bl	8005494 <memcmp>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d056      	beq.n	8003fbc <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e00d      	b.n	8003f30 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003f14:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <SYSVIEW_UpdateTask+0xd8>)
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d008      	beq.n	8003f3c <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <SYSVIEW_UpdateTask+0xdc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3ec      	bcc.n	8003f14 <SYSVIEW_UpdateTask+0x24>
 8003f3a:	e000      	b.n	8003f3e <SYSVIEW_UpdateTask+0x4e>
      break;
 8003f3c:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003f3e:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <SYSVIEW_UpdateTask+0xdc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d230      	bcs.n	8003faa <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003f48:	491f      	ldr	r1, [pc, #124]	; (8003fc8 <SYSVIEW_UpdateTask+0xd8>)
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3304      	adds	r3, #4
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003f5c:	491a      	ldr	r1, [pc, #104]	; (8003fc8 <SYSVIEW_UpdateTask+0xd8>)
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003f70:	4915      	ldr	r1, [pc, #84]	; (8003fc8 <SYSVIEW_UpdateTask+0xd8>)
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	330c      	adds	r3, #12
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003f84:	4910      	ldr	r1, [pc, #64]	; (8003fc8 <SYSVIEW_UpdateTask+0xd8>)
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3310      	adds	r3, #16
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 f814 	bl	8003fd0 <SYSVIEW_SendTaskInfo>
 8003fa8:	e009      	b.n	8003fbe <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff33 	bl	8003e20 <SYSVIEW_AddTask>
 8003fba:	e000      	b.n	8003fbe <SYSVIEW_UpdateTask+0xce>
    return;
 8003fbc:	bf00      	nop
  }
}
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08005dbc 	.word	0x08005dbc
 8003fc8:	20013024 	.word	0x20013024
 8003fcc:	200130c4 	.word	0x200130c4

08003fd0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	2214      	movs	r2, #20
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fa6e 	bl	80054c8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fe21 	bl	8004c4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800400a:	bf00      	nop
 800400c:	3728      	adds	r7, #40	; 0x28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <_DoInit+0x8c>)
 800401c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2203      	movs	r2, #3
 8004022:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2203      	movs	r2, #3
 8004028:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <_DoInit+0x90>)
 800402e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <_DoInit+0x94>)
 8004034:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800403c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <_DoInit+0x90>)
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <_DoInit+0x98>)
 800405a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2210      	movs	r2, #16
 8004060:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3307      	adds	r3, #7
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <_DoInit+0x9c>)
 800407a:	6810      	ldr	r0, [r2, #0]
 800407c:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <_DoInit+0xa0>)
 8004082:	6810      	ldr	r0, [r2, #0]
 8004084:	6018      	str	r0, [r3, #0]
 8004086:	8891      	ldrh	r1, [r2, #4]
 8004088:	7992      	ldrb	r2, [r2, #6]
 800408a:	8099      	strh	r1, [r3, #4]
 800408c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	719a      	strb	r2, [r3, #6]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	200156a4 	.word	0x200156a4
 80040a4:	08005e14 	.word	0x08005e14
 80040a8:	200130c8 	.word	0x200130c8
 80040ac:	200134c8 	.word	0x200134c8
 80040b0:	08005e20 	.word	0x08005e20
 80040b4:	08005e24 	.word	0x08005e24

080040b8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08a      	sub	sp, #40	; 0x28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <SEGGER_RTT_ReadNoLock+0x100>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <SEGGER_RTT_ReadNoLock+0x18>
 80040cc:	f7ff ffa2 	bl	8004014 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	3360      	adds	r3, #96	; 0x60
 80040dc:	4a36      	ldr	r2, [pc, #216]	; (80041b8 <SEGGER_RTT_ReadNoLock+0x100>)
 80040de:	4413      	add	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80040f6:	6a3a      	ldr	r2, [r7, #32]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d92a      	bls.n	8004154 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4293      	cmp	r3, r2
 800410e:	bf28      	it	cs
 8004110:	4613      	movcs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	4413      	add	r3, r2
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4619      	mov	r1, r3
 8004120:	69f8      	ldr	r0, [r7, #28]
 8004122:	f001 f9c6 	bl	80054b2 <memcpy>
    NumBytesRead += NumBytesRem;
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	429a      	cmp	r2, r3
 800414e:	d101      	bne.n	8004154 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8004150:	2300      	movs	r3, #0
 8004152:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4293      	cmp	r3, r2
 8004162:	bf28      	it	cs
 8004164:	4613      	movcs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	4413      	add	r3, r2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4619      	mov	r1, r3
 800417a:	69f8      	ldr	r0, [r7, #28]
 800417c:	f001 f999 	bl	80054b2 <memcpy>
    NumBytesRead += NumBytesRem;
 8004180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200156a4 	.word	0x200156a4

080041bc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80041ca:	4b30      	ldr	r3, [pc, #192]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80041d2:	f7ff ff1f 	bl	8004014 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4293      	cmp	r3, r2
 80041e0:	d24c      	bcs.n	800427c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80041e2:	f3ef 8311 	mrs	r3, BASEPRI
 80041e6:	f04f 0120 	mov.w	r1, #32
 80041ea:	f381 8811 	msr	BASEPRI, r1
 80041ee:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d032      	beq.n	800425c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80041f6:	4925      	ldr	r1, [pc, #148]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	440b      	add	r3, r1
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800420a:	4920      	ldr	r1, [pc, #128]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	3304      	adds	r3, #4
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004220:	491a      	ldr	r1, [pc, #104]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	3320      	adds	r3, #32
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004234:	4915      	ldr	r1, [pc, #84]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	3328      	adds	r3, #40	; 0x28
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004248:	4910      	ldr	r1, [pc, #64]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	3324      	adds	r3, #36	; 0x24
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800425c:	490b      	ldr	r1, [pc, #44]	; (800428c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	332c      	adds	r3, #44	; 0x2c
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e002      	b.n	8004282 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200156a4 	.word	0x200156a4

08004290 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800429e:	4b30      	ldr	r3, [pc, #192]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80042a6:	f7ff feb5 	bl	8004014 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80042aa:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d24b      	bcs.n	800434e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80042b6:	f3ef 8311 	mrs	r3, BASEPRI
 80042ba:	f04f 0120 	mov.w	r1, #32
 80042be:	f381 8811 	msr	BASEPRI, r1
 80042c2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d031      	beq.n	800432e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80042ca:	4925      	ldr	r1, [pc, #148]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3360      	adds	r3, #96	; 0x60
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80042de:	4920      	ldr	r1, [pc, #128]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	3364      	adds	r3, #100	; 0x64
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80042f2:	491b      	ldr	r1, [pc, #108]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	3368      	adds	r3, #104	; 0x68
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8004306:	4916      	ldr	r1, [pc, #88]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	3370      	adds	r3, #112	; 0x70
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800431a:	4911      	ldr	r1, [pc, #68]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	336c      	adds	r3, #108	; 0x6c
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800432e:	490c      	ldr	r1, [pc, #48]	; (8004360 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	440b      	add	r3, r1
 800433c:	3374      	adds	r3, #116	; 0x74
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e002      	b.n	8004354 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800434e:	f04f 33ff 	mov.w	r3, #4294967295
 8004352:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004354:	697b      	ldr	r3, [r7, #20]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200156a4 	.word	0x200156a4

08004364 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004374:	e002      	b.n	800437c <_EncodeStr+0x18>
    Len++;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3301      	adds	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f6      	bne.n	8004376 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d901      	bls.n	8004394 <_EncodeStr+0x30>
    Len = Limit;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2bfe      	cmp	r3, #254	; 0xfe
 8004398:	d806      	bhi.n	80043a8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60fa      	str	r2, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e011      	b.n	80043cc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	60fa      	str	r2, [r7, #12]
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	60fa      	str	r2, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	0a19      	lsrs	r1, r3, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	60fa      	str	r2, [r7, #12]
 80043c8:	b2ca      	uxtb	r2, r1
 80043ca:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043d0:	e00a      	b.n	80043e8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	1c53      	adds	r3, r2, #1
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	60f9      	str	r1, [r7, #12]
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	701a      	strb	r2, [r3, #0]
    n++;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	3301      	adds	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3f0      	bcc.n	80043d2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800441c:	1cfb      	adds	r3, r7, #3
 800441e:	2201      	movs	r2, #1
 8004420:	4619      	mov	r1, r3
 8004422:	2001      	movs	r0, #1
 8004424:	f7ff fe48 	bl	80040b8 <SEGGER_RTT_ReadNoLock>
 8004428:	4603      	mov	r3, r0
 800442a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	dd44      	ble.n	80044bc <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d01a      	beq.n	800446e <_HandleIncomingPacket+0x58>
 8004438:	2b04      	cmp	r3, #4
 800443a:	dc06      	bgt.n	800444a <_HandleIncomingPacket+0x34>
 800443c:	2b02      	cmp	r3, #2
 800443e:	d010      	beq.n	8004462 <_HandleIncomingPacket+0x4c>
 8004440:	2b02      	cmp	r3, #2
 8004442:	dc11      	bgt.n	8004468 <_HandleIncomingPacket+0x52>
 8004444:	2b01      	cmp	r3, #1
 8004446:	d009      	beq.n	800445c <_HandleIncomingPacket+0x46>
 8004448:	e02d      	b.n	80044a6 <_HandleIncomingPacket+0x90>
 800444a:	2b06      	cmp	r3, #6
 800444c:	d015      	beq.n	800447a <_HandleIncomingPacket+0x64>
 800444e:	2b06      	cmp	r3, #6
 8004450:	db10      	blt.n	8004474 <_HandleIncomingPacket+0x5e>
 8004452:	2b07      	cmp	r3, #7
 8004454:	d014      	beq.n	8004480 <_HandleIncomingPacket+0x6a>
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d015      	beq.n	8004486 <_HandleIncomingPacket+0x70>
 800445a:	e024      	b.n	80044a6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800445c:	f000 fa7e 	bl	800495c <SEGGER_SYSVIEW_Start>
      break;
 8004460:	e031      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004462:	f000 fb33 	bl	8004acc <SEGGER_SYSVIEW_Stop>
      break;
 8004466:	e02e      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004468:	f000 fd0e 	bl	8004e88 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800446c:	e02b      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800446e:	f000 fcd3 	bl	8004e18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004472:	e028      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004474:	f000 fb50 	bl	8004b18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004478:	e025      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800447a:	f000 ff47 	bl	800530c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800447e:	e022      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004480:	f000 ff26 	bl	80052d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004484:	e01f      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004486:	1cfb      	adds	r3, r7, #3
 8004488:	2201      	movs	r2, #1
 800448a:	4619      	mov	r1, r3
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fe13 	bl	80040b8 <SEGGER_RTT_ReadNoLock>
 8004492:	4603      	mov	r3, r0
 8004494:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dd11      	ble.n	80044c0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fe96 	bl	80051d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044a4:	e00c      	b.n	80044c0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da0a      	bge.n	80044c4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044ae:	1cfb      	adds	r3, r7, #3
 80044b0:	2201      	movs	r2, #1
 80044b2:	4619      	mov	r1, r3
 80044b4:	2001      	movs	r0, #1
 80044b6:	f7ff fdff 	bl	80040b8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044ba:	e003      	b.n	80044c4 <_HandleIncomingPacket+0xae>
    }
  }
 80044bc:	bf00      	nop
 80044be:	e002      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
      break;
 80044c0:	bf00      	nop
 80044c2:	e000      	b.n	80044c6 <_HandleIncomingPacket+0xb0>
      break;
 80044c4:	bf00      	nop
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08c      	sub	sp, #48	; 0x30
 80044d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044d6:	2301      	movs	r3, #1
 80044d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	3301      	adds	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e4:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	e00b      	b.n	8004504 <_TrySendOverflowPacket+0x34>
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80044f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	09db      	lsrs	r3, r3, #7
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	2b7f      	cmp	r3, #127	; 0x7f
 8004508:	d8f0      	bhi.n	80044ec <_TrySendOverflowPacket+0x1c>
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800451a:	4b24      	ldr	r3, [pc, #144]	; (80045ac <_TrySendOverflowPacket+0xdc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	623b      	str	r3, [r7, #32]
 8004532:	e00b      	b.n	800454c <_TrySendOverflowPacket+0x7c>
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	6279      	str	r1, [r7, #36]	; 0x24
 800453e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	09db      	lsrs	r3, r3, #7
 800454a:	623b      	str	r3, [r7, #32]
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b7f      	cmp	r3, #127	; 0x7f
 8004550:	d8f0      	bhi.n	8004534 <_TrySendOverflowPacket+0x64>
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	627a      	str	r2, [r7, #36]	; 0x24
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	1d3b      	adds	r3, r7, #4
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	461a      	mov	r2, r3
 800456a:	1d3b      	adds	r3, r7, #4
 800456c:	4619      	mov	r1, r3
 800456e:	2001      	movs	r0, #1
 8004570:	f7fb fe3e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004574:	4603      	mov	r3, r0
 8004576:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004584:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e004      	b.n	800459c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	3301      	adds	r3, #1
 8004598:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <_TrySendOverflowPacket+0xd8>)
 800459a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800459c:	693b      	ldr	r3, [r7, #16]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3730      	adds	r7, #48	; 0x30
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200154e0 	.word	0x200154e0
 80045ac:	e0001004 	.word	0xe0001004

080045b0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045bc:	4b63      	ldr	r3, [pc, #396]	; (800474c <_SendPacket+0x19c>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d010      	beq.n	80045e6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045c4:	4b61      	ldr	r3, [pc, #388]	; (800474c <_SendPacket+0x19c>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a1 	beq.w	8004710 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045ce:	4b5f      	ldr	r3, [pc, #380]	; (800474c <_SendPacket+0x19c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d109      	bne.n	80045ea <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045d6:	f7ff ff7b 	bl	80044d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80045da:	4b5c      	ldr	r3, [pc, #368]	; (800474c <_SendPacket+0x19c>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f040 8098 	bne.w	8004714 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80045e4:	e001      	b.n	80045ea <_SendPacket+0x3a>
    goto Send;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <_SendPacket+0x3c>
Send:
 80045ea:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b1f      	cmp	r3, #31
 80045f0:	d809      	bhi.n	8004606 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <_SendPacket+0x19c>)
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fa22 f303 	lsr.w	r3, r2, r3
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8089 	bne.w	8004718 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b17      	cmp	r3, #23
 800460a:	d807      	bhi.n	800461c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e03d      	b.n	8004698 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d912      	bls.n	8004650 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	09da      	lsrs	r2, r3, #7
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3b01      	subs	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	3a01      	subs	r2, #1
 8004642:	60fa      	str	r2, [r7, #12]
 8004644:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004648:	b2da      	uxtb	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e006      	b.n	800465e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b7f      	cmp	r3, #127	; 0x7f
 8004662:	d912      	bls.n	800468a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	09da      	lsrs	r2, r3, #7
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b01      	subs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	3a01      	subs	r2, #1
 800467c:	60fa      	str	r2, [r7, #12]
 800467e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004682:	b2da      	uxtb	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	e006      	b.n	8004698 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3b01      	subs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004698:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <_SendPacket+0x1a0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800469e:	4b2b      	ldr	r3, [pc, #172]	; (800474c <_SendPacket+0x19c>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	623b      	str	r3, [r7, #32]
 80046b0:	e00b      	b.n	80046ca <_SendPacket+0x11a>
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	6279      	str	r1, [r7, #36]	; 0x24
 80046bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	09db      	lsrs	r3, r3, #7
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2b7f      	cmp	r3, #127	; 0x7f
 80046ce:	d8f0      	bhi.n	80046b2 <_SendPacket+0x102>
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	627a      	str	r2, [r7, #36]	; 0x24
 80046d6:	6a3a      	ldr	r2, [r7, #32]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	2001      	movs	r0, #1
 80046ec:	f7fb fd80 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80046f0:	4603      	mov	r3, r0
 80046f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80046fa:	4a14      	ldr	r2, [pc, #80]	; (800474c <_SendPacket+0x19c>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	60d3      	str	r3, [r2, #12]
 8004700:	e00b      	b.n	800471a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <_SendPacket+0x19c>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <_SendPacket+0x19c>)
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	e004      	b.n	800471a <_SendPacket+0x16a>
    goto SendDone;
 8004710:	bf00      	nop
 8004712:	e002      	b.n	800471a <_SendPacket+0x16a>
      goto SendDone;
 8004714:	bf00      	nop
 8004716:	e000      	b.n	800471a <_SendPacket+0x16a>
      goto SendDone;
 8004718:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <_SendPacket+0x1a4>)
 800471c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <_SendPacket+0x1a4>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	429a      	cmp	r2, r3
 8004728:	d00b      	beq.n	8004742 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <_SendPacket+0x19c>)
 800472c:	789b      	ldrb	r3, [r3, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <_SendPacket+0x19c>)
 8004734:	2201      	movs	r2, #1
 8004736:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004738:	f7ff fe6d 	bl	8004416 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <_SendPacket+0x19c>)
 800473e:	2200      	movs	r2, #0
 8004740:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004742:	bf00      	nop
 8004744:	3728      	adds	r7, #40	; 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200154e0 	.word	0x200154e0
 8004750:	e0001004 	.word	0xe0001004
 8004754:	200156a4 	.word	0x200156a4

08004758 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004766:	2300      	movs	r3, #0
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800476e:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <SEGGER_SYSVIEW_Init+0x68>)
 8004770:	4914      	ldr	r1, [pc, #80]	; (80047c4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004772:	2001      	movs	r0, #1
 8004774:	f7ff fd22 	bl	80041bc <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004778:	2300      	movs	r3, #0
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2308      	movs	r3, #8
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <SEGGER_SYSVIEW_Init+0x70>)
 8004780:	4910      	ldr	r1, [pc, #64]	; (80047c4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004782:	2001      	movs	r0, #1
 8004784:	f7ff fd84 	bl	8004290 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <SEGGER_SYSVIEW_Init+0x78>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 8004796:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004798:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80047aa:	4a08      	ldr	r2, [pc, #32]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <SEGGER_SYSVIEW_Init+0x74>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	200134d8 	.word	0x200134d8
 80047c4:	08005e2c 	.word	0x08005e2c
 80047c8:	200154d8 	.word	0x200154d8
 80047cc:	200154e0 	.word	0x200154e0
 80047d0:	e0001004 	.word	0xe0001004

080047d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6113      	str	r3, [r2, #16]
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	200154e0 	.word	0x200154e0

080047f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004800:	f04f 0120 	mov.w	r1, #32
 8004804:	f381 8811 	msr	BASEPRI, r1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	4808      	ldr	r0, [pc, #32]	; (800482c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800480c:	f7ff fdf7 	bl	80043fe <_PreparePacket>
 8004810:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f7ff feca 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f383 8811 	msr	BASEPRI, r3
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20015510 	.word	0x20015510

08004830 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800483a:	f3ef 8311 	mrs	r3, BASEPRI
 800483e:	f04f 0120 	mov.w	r1, #32
 8004842:	f381 8811 	msr	BASEPRI, r1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	4816      	ldr	r0, [pc, #88]	; (80048a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800484a:	f7ff fdd8 	bl	80043fe <_PreparePacket>
 800484e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e00b      	b.n	8004876 <SEGGER_SYSVIEW_RecordU32+0x46>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	61f9      	str	r1, [r7, #28]
 8004868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	09db      	lsrs	r3, r3, #7
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d8f0      	bhi.n	800485e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	61fa      	str	r2, [r7, #28]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6938      	ldr	r0, [r7, #16]
 8004892:	f7ff fe8d 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f383 8811 	msr	BASEPRI, r3
}
 800489c:	bf00      	nop
 800489e:	3720      	adds	r7, #32
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20015510 	.word	0x20015510

080048a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08c      	sub	sp, #48	; 0x30
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80048b4:	f3ef 8311 	mrs	r3, BASEPRI
 80048b8:	f04f 0120 	mov.w	r1, #32
 80048bc:	f381 8811 	msr	BASEPRI, r1
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	4825      	ldr	r0, [pc, #148]	; (8004958 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048c4:	f7ff fd9b 	bl	80043fe <_PreparePacket>
 80048c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d6:	e00b      	b.n	80048f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	1c59      	adds	r1, r3, #1
 80048e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	09db      	lsrs	r3, r3, #7
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	2b7f      	cmp	r3, #127	; 0x7f
 80048f4:	d8f0      	bhi.n	80048d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	623b      	str	r3, [r7, #32]
 800490e:	e00b      	b.n	8004928 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	1c59      	adds	r1, r3, #1
 8004918:	6279      	str	r1, [r7, #36]	; 0x24
 800491a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	09db      	lsrs	r3, r3, #7
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b7f      	cmp	r3, #127	; 0x7f
 800492c:	d8f0      	bhi.n	8004910 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	627a      	str	r2, [r7, #36]	; 0x24
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69b8      	ldr	r0, [r7, #24]
 8004944:	f7ff fe34 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20015510 	.word	0x20015510

0800495c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004962:	4b57      	ldr	r3, [pc, #348]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004968:	f3ef 8311 	mrs	r3, BASEPRI
 800496c:	f04f 0120 	mov.w	r1, #32
 8004970:	f381 8811 	msr	BASEPRI, r1
 8004974:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004976:	220a      	movs	r2, #10
 8004978:	4952      	ldr	r1, [pc, #328]	; (8004ac4 <SEGGER_SYSVIEW_Start+0x168>)
 800497a:	2001      	movs	r0, #1
 800497c:	f7fb fc38 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004986:	200a      	movs	r0, #10
 8004988:	f7ff ff34 	bl	80047f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800498c:	f3ef 8311 	mrs	r3, BASEPRI
 8004990:	f04f 0120 	mov.w	r1, #32
 8004994:	f381 8811 	msr	BASEPRI, r1
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	484b      	ldr	r0, [pc, #300]	; (8004ac8 <SEGGER_SYSVIEW_Start+0x16c>)
 800499c:	f7ff fd2f 	bl	80043fe <_PreparePacket>
 80049a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049aa:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b0:	e00b      	b.n	80049ca <SEGGER_SYSVIEW_Start+0x6e>
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	09db      	lsrs	r3, r3, #7
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	2b7f      	cmp	r3, #127	; 0x7f
 80049ce:	d8f0      	bhi.n	80049b2 <SEGGER_SYSVIEW_Start+0x56>
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	623b      	str	r3, [r7, #32]
 80049ea:	e00b      	b.n	8004a04 <SEGGER_SYSVIEW_Start+0xa8>
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	6279      	str	r1, [r7, #36]	; 0x24
 80049f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	2b7f      	cmp	r3, #127	; 0x7f
 8004a08:	d8f0      	bhi.n	80049ec <SEGGER_SYSVIEW_Start+0x90>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e00b      	b.n	8004a3e <SEGGER_SYSVIEW_Start+0xe2>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	61f9      	str	r1, [r7, #28]
 8004a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	09db      	lsrs	r3, r3, #7
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b7f      	cmp	r3, #127	; 0x7f
 8004a42:	d8f0      	bhi.n	8004a26 <SEGGER_SYSVIEW_Start+0xca>
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	61fa      	str	r2, [r7, #28]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	2302      	movs	r3, #2
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	e00b      	b.n	8004a76 <SEGGER_SYSVIEW_Start+0x11a>
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1c59      	adds	r1, r3, #1
 8004a66:	6179      	str	r1, [r7, #20]
 8004a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	09db      	lsrs	r3, r3, #7
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b7f      	cmp	r3, #127	; 0x7f
 8004a7a:	d8f0      	bhi.n	8004a5e <SEGGER_SYSVIEW_Start+0x102>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	617a      	str	r2, [r7, #20]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a8c:	2218      	movs	r2, #24
 8004a8e:	6839      	ldr	r1, [r7, #0]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fd8d 	bl	80045b0 <_SendPacket>
      RECORD_END();
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a9c:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <SEGGER_SYSVIEW_Start+0x164>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004aaa:	f000 f9ed 	bl	8004e88 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004aae:	f000 f9b3 	bl	8004e18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004ab2:	f000 fc2b 	bl	800530c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004ab6:	bf00      	nop
 8004ab8:	3730      	adds	r7, #48	; 0x30
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	200154e0 	.word	0x200154e0
 8004ac4:	08005e54 	.word	0x08005e54
 8004ac8:	20015510 	.word	0x20015510

08004acc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad6:	f04f 0120 	mov.w	r1, #32
 8004ada:	f381 8811 	msr	BASEPRI, r1
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	480b      	ldr	r0, [pc, #44]	; (8004b10 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ae2:	f7ff fc8c 	bl	80043fe <_PreparePacket>
 8004ae6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004af0:	220b      	movs	r2, #11
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6838      	ldr	r0, [r7, #0]
 8004af6:	f7ff fd5b 	bl	80045b0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f383 8811 	msr	BASEPRI, r3
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20015510 	.word	0x20015510
 8004b14:	200154e0 	.word	0x200154e0

08004b18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	; 0x30
 8004b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b22:	f04f 0120 	mov.w	r1, #32
 8004b26:	f381 8811 	msr	BASEPRI, r1
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	4845      	ldr	r0, [pc, #276]	; (8004c44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b2e:	f7ff fc66 	bl	80043fe <_PreparePacket>
 8004b32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	4b42      	ldr	r3, [pc, #264]	; (8004c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	e00b      	b.n	8004b5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	09db      	lsrs	r3, r3, #7
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b60:	d8f0      	bhi.n	8004b44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
 8004b76:	4b34      	ldr	r3, [pc, #208]	; (8004c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	e00b      	b.n	8004b96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	1c59      	adds	r1, r3, #1
 8004b86:	6279      	str	r1, [r7, #36]	; 0x24
 8004b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	09db      	lsrs	r3, r3, #7
 8004b94:	623b      	str	r3, [r7, #32]
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9a:	d8f0      	bhi.n	8004b7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ba2:	6a3a      	ldr	r2, [r7, #32]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e00b      	b.n	8004bd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	61f9      	str	r1, [r7, #28]
 8004bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	09db      	lsrs	r3, r3, #7
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd4:	d8f0      	bhi.n	8004bb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	61fa      	str	r2, [r7, #28]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	2302      	movs	r3, #2
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	e00b      	b.n	8004c08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1c59      	adds	r1, r3, #1
 8004bf8:	6179      	str	r1, [r7, #20]
 8004bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	09db      	lsrs	r3, r3, #7
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0c:	d8f0      	bhi.n	8004bf0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	617a      	str	r2, [r7, #20]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c1e:	2218      	movs	r2, #24
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f7ff fcc4 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c36:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	4798      	blx	r3
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3730      	adds	r7, #48	; 0x30
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20015510 	.word	0x20015510
 8004c48:	200154e0 	.word	0x200154e0

08004c4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b092      	sub	sp, #72	; 0x48
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c54:	f3ef 8311 	mrs	r3, BASEPRI
 8004c58:	f04f 0120 	mov.w	r1, #32
 8004c5c:	f381 8811 	msr	BASEPRI, r1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	486b      	ldr	r0, [pc, #428]	; (8004e10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c64:	f7ff fbcb 	bl	80043fe <_PreparePacket>
 8004c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b67      	ldr	r3, [pc, #412]	; (8004e14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c80:	e00b      	b.n	8004c9a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	6479      	str	r1, [r7, #68]	; 0x44
 8004c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
 8004c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c96:	09db      	lsrs	r3, r3, #7
 8004c98:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9e:	d8f0      	bhi.n	8004c82 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	647a      	str	r2, [r7, #68]	; 0x44
 8004ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fb36 	bl	8004364 <_EncodeStr>
 8004cf8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004cfa:	2209      	movs	r2, #9
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	6938      	ldr	r0, [r7, #16]
 8004d00:	f7ff fc56 	bl	80045b0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4b40      	ldr	r3, [pc, #256]	; (8004e14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	633b      	str	r3, [r7, #48]	; 0x30
 8004d1a:	e00b      	b.n	8004d34 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	6379      	str	r1, [r7, #52]	; 0x34
 8004d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	2b7f      	cmp	r3, #127	; 0x7f
 8004d38:	d8f0      	bhi.n	8004d1c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	637a      	str	r2, [r7, #52]	; 0x34
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d54:	e00b      	b.n	8004d6e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	2b7f      	cmp	r3, #127	; 0x7f
 8004d72:	d8f0      	bhi.n	8004d56 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	e00b      	b.n	8004da8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	6279      	str	r1, [r7, #36]	; 0x24
 8004d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	09db      	lsrs	r3, r3, #7
 8004da6:	623b      	str	r3, [r7, #32]
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d8f0      	bhi.n	8004d90 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	627a      	str	r2, [r7, #36]	; 0x24
 8004db4:	6a3a      	ldr	r2, [r7, #32]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	e00b      	b.n	8004de0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	61f9      	str	r1, [r7, #28]
 8004dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b7f      	cmp	r3, #127	; 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004df6:	2215      	movs	r2, #21
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	6938      	ldr	r0, [r7, #16]
 8004dfc:	f7ff fbd8 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f383 8811 	msr	BASEPRI, r3
}
 8004e06:	bf00      	nop
 8004e08:	3748      	adds	r7, #72	; 0x48
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20015510 	.word	0x20015510
 8004e14:	200154e0 	.word	0x200154e0

08004e18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e1c:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e2e:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4798      	blx	r3
  }
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200154e0 	.word	0x200154e0

08004e40 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e48:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4c:	f04f 0120 	mov.w	r1, #32
 8004e50:	f381 8811 	msr	BASEPRI, r1
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	480b      	ldr	r0, [pc, #44]	; (8004e84 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e58:	f7ff fad1 	bl	80043fe <_PreparePacket>
 8004e5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e5e:	2280      	movs	r2, #128	; 0x80
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f7ff fa7e 	bl	8004364 <_EncodeStr>
 8004e68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e6a:	220e      	movs	r2, #14
 8004e6c:	68f9      	ldr	r1, [r7, #12]
 8004e6e:	6938      	ldr	r0, [r7, #16]
 8004e70:	f7ff fb9e 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f383 8811 	msr	BASEPRI, r3
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20015510 	.word	0x20015510

08004e88 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e8e:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d019      	beq.n	8004eca <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d014      	beq.n	8004eca <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4798      	blx	r3
 8004ea8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004eac:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004eae:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	0013      	movs	r3, r2
 8004ebc:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	200d      	movs	r0, #13
 8004ec4:	f7ff fcf0 	bl	80048a8 <SEGGER_SYSVIEW_RecordU32x2>
 8004ec8:	e005      	b.n	8004ed6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	200c      	movs	r0, #12
 8004ed2:	f7ff fcad 	bl	8004830 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200154e0 	.word	0x200154e0
 8004ee4:	e0001004 	.word	0xe0001004

08004ee8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004eee:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef2:	f04f 0120 	mov.w	r1, #32
 8004ef6:	f381 8811 	msr	BASEPRI, r1
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	4819      	ldr	r0, [pc, #100]	; (8004f64 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004efe:	f7ff fa7e 	bl	80043fe <_PreparePacket>
 8004f02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f10:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e00b      	b.n	8004f34 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	1c59      	adds	r1, r3, #1
 8004f24:	6179      	str	r1, [r7, #20]
 8004f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	09db      	lsrs	r3, r3, #7
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b7f      	cmp	r3, #127	; 0x7f
 8004f38:	d8f0      	bhi.n	8004f1c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	617a      	str	r2, [r7, #20]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	68b8      	ldr	r0, [r7, #8]
 8004f50:	f7ff fb2e 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f383 8811 	msr	BASEPRI, r3
}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20015510 	.word	0x20015510
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f72:	f3ef 8311 	mrs	r3, BASEPRI
 8004f76:	f04f 0120 	mov.w	r1, #32
 8004f7a:	f381 8811 	msr	BASEPRI, r1
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	4807      	ldr	r0, [pc, #28]	; (8004fa0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f82:	f7ff fa3c 	bl	80043fe <_PreparePacket>
 8004f86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f88:	2203      	movs	r2, #3
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6838      	ldr	r0, [r7, #0]
 8004f8e:	f7ff fb0f 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f383 8811 	msr	BASEPRI, r3
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20015510 	.word	0x20015510

08004fa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004faa:	f3ef 8311 	mrs	r3, BASEPRI
 8004fae:	f04f 0120 	mov.w	r1, #32
 8004fb2:	f381 8811 	msr	BASEPRI, r1
 8004fb6:	607b      	str	r3, [r7, #4]
 8004fb8:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004fba:	f7ff fa20 	bl	80043fe <_PreparePacket>
 8004fbe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004fc0:	2212      	movs	r2, #18
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6838      	ldr	r0, [r7, #0]
 8004fc6:	f7ff faf3 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f383 8811 	msr	BASEPRI, r3
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20015510 	.word	0x20015510

08004fdc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe6:	f04f 0120 	mov.w	r1, #32
 8004fea:	f381 8811 	msr	BASEPRI, r1
 8004fee:	607b      	str	r3, [r7, #4]
 8004ff0:	4807      	ldr	r0, [pc, #28]	; (8005010 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004ff2:	f7ff fa04 	bl	80043fe <_PreparePacket>
 8004ff6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004ff8:	2211      	movs	r2, #17
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6838      	ldr	r0, [r7, #0]
 8004ffe:	f7ff fad7 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f383 8811 	msr	BASEPRI, r3
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20015510 	.word	0x20015510

08005014 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800501c:	f3ef 8311 	mrs	r3, BASEPRI
 8005020:	f04f 0120 	mov.w	r1, #32
 8005024:	f381 8811 	msr	BASEPRI, r1
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	481a      	ldr	r0, [pc, #104]	; (8005094 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800502c:	f7ff f9e7 	bl	80043fe <_PreparePacket>
 8005030:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005036:	4b18      	ldr	r3, [pc, #96]	; (8005098 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e00b      	b.n	8005064 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1c59      	adds	r1, r3, #1
 8005054:	61f9      	str	r1, [r7, #28]
 8005056:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	09db      	lsrs	r3, r3, #7
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b7f      	cmp	r3, #127	; 0x7f
 8005068:	d8f0      	bhi.n	800504c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	61fa      	str	r2, [r7, #28]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800507a:	2208      	movs	r2, #8
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f7ff fa96 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f383 8811 	msr	BASEPRI, r3
}
 800508a:	bf00      	nop
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20015510 	.word	0x20015510
 8005098:	200154e0 	.word	0x200154e0

0800509c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050a4:	f3ef 8311 	mrs	r3, BASEPRI
 80050a8:	f04f 0120 	mov.w	r1, #32
 80050ac:	f381 8811 	msr	BASEPRI, r1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	481a      	ldr	r0, [pc, #104]	; (800511c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80050b4:	f7ff f9a3 	bl	80043fe <_PreparePacket>
 80050b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	089b      	lsrs	r3, r3, #2
 80050c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	61fb      	str	r3, [r7, #28]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e00b      	b.n	80050ec <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	61f9      	str	r1, [r7, #28]
 80050de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	09db      	lsrs	r3, r3, #7
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b7f      	cmp	r3, #127	; 0x7f
 80050f0:	d8f0      	bhi.n	80050d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005102:	2204      	movs	r2, #4
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	6938      	ldr	r0, [r7, #16]
 8005108:	f7ff fa52 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f383 8811 	msr	BASEPRI, r3
}
 8005112:	bf00      	nop
 8005114:	3720      	adds	r7, #32
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20015510 	.word	0x20015510
 8005120:	200154e0 	.word	0x200154e0

08005124 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b088      	sub	sp, #32
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800512c:	f3ef 8311 	mrs	r3, BASEPRI
 8005130:	f04f 0120 	mov.w	r1, #32
 8005134:	f381 8811 	msr	BASEPRI, r1
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	481a      	ldr	r0, [pc, #104]	; (80051a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800513c:	f7ff f95f 	bl	80043fe <_PreparePacket>
 8005140:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e00b      	b.n	8005174 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	61f9      	str	r1, [r7, #28]
 8005166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b7f      	cmp	r3, #127	; 0x7f
 8005178:	d8f0      	bhi.n	800515c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800518a:	2206      	movs	r2, #6
 800518c:	68f9      	ldr	r1, [r7, #12]
 800518e:	6938      	ldr	r0, [r7, #16]
 8005190:	f7ff fa0e 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f383 8811 	msr	BASEPRI, r3
}
 800519a:	bf00      	nop
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20015510 	.word	0x20015510
 80051a8:	200154e0 	.word	0x200154e0

080051ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	089b      	lsrs	r3, r3, #2
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200154e0 	.word	0x200154e0

080051d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	; 0x30
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d06d      	beq.n	80052be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051e8:	2300      	movs	r3, #0
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ec:	e008      	b.n	8005200 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	3301      	adds	r3, #1
 80051fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005204:	429a      	cmp	r2, r3
 8005206:	d3f2      	bcc.n	80051ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8005208:	e000      	b.n	800520c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800520a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d055      	beq.n	80052be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f381 8811 	msr	BASEPRI, r1
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	482a      	ldr	r0, [pc, #168]	; (80052cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005222:	f7ff f8ec 	bl	80043fe <_PreparePacket>
 8005226:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	e00b      	b.n	800524e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	6279      	str	r1, [r7, #36]	; 0x24
 8005240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	09db      	lsrs	r3, r3, #7
 800524c:	623b      	str	r3, [r7, #32]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	2b7f      	cmp	r3, #127	; 0x7f
 8005252:	d8f0      	bhi.n	8005236 <SEGGER_SYSVIEW_SendModule+0x66>
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	627a      	str	r2, [r7, #36]	; 0x24
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e00b      	b.n	8005288 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	61f9      	str	r1, [r7, #28]
 800527a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	09db      	lsrs	r3, r3, #7
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b7f      	cmp	r3, #127	; 0x7f
 800528c:	d8f0      	bhi.n	8005270 <SEGGER_SYSVIEW_SendModule+0xa0>
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	61fa      	str	r2, [r7, #28]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800529e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	4619      	mov	r1, r3
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff f85c 	bl	8004364 <_EncodeStr>
 80052ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052ae:	2216      	movs	r2, #22
 80052b0:	68f9      	ldr	r1, [r7, #12]
 80052b2:	6938      	ldr	r0, [r7, #16]
 80052b4:	f7ff f97c 	bl	80045b0 <_SendPacket>
      RECORD_END();
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80052be:	bf00      	nop
 80052c0:	3730      	adds	r7, #48	; 0x30
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20015508 	.word	0x20015508
 80052cc:	20015510 	.word	0x20015510

080052d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1f2      	bne.n	80052e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20015508 	.word	0x20015508

0800530c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005312:	f3ef 8311 	mrs	r3, BASEPRI
 8005316:	f04f 0120 	mov.w	r1, #32
 800531a:	f381 8811 	msr	BASEPRI, r1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	4817      	ldr	r0, [pc, #92]	; (8005380 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005322:	f7ff f86c 	bl	80043fe <_PreparePacket>
 8005326:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	e00b      	b.n	8005350 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6179      	str	r1, [r7, #20]
 8005342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	09db      	lsrs	r3, r3, #7
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b7f      	cmp	r3, #127	; 0x7f
 8005354:	d8f0      	bhi.n	8005338 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	617a      	str	r2, [r7, #20]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005366:	221b      	movs	r2, #27
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	68b8      	ldr	r0, [r7, #8]
 800536c:	f7ff f920 	bl	80045b0 <_SendPacket>
  RECORD_END();
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f383 8811 	msr	BASEPRI, r3
}
 8005376:	bf00      	nop
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20015510 	.word	0x20015510
 8005384:	2001550c 	.word	0x2001550c

08005388 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005390:	f3ef 8311 	mrs	r3, BASEPRI
 8005394:	f04f 0120 	mov.w	r1, #32
 8005398:	f381 8811 	msr	BASEPRI, r1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	4827      	ldr	r0, [pc, #156]	; (800543c <SEGGER_SYSVIEW_Warn+0xb4>)
 80053a0:	f7ff f82d 	bl	80043fe <_PreparePacket>
 80053a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053a6:	2280      	movs	r2, #128	; 0x80
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	6938      	ldr	r0, [r7, #16]
 80053ac:	f7fe ffda 	bl	8004364 <_EncodeStr>
 80053b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	2301      	movs	r3, #1
 80053b8:	623b      	str	r3, [r7, #32]
 80053ba:	e00b      	b.n	80053d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	1c59      	adds	r1, r3, #1
 80053c4:	6279      	str	r1, [r7, #36]	; 0x24
 80053c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	09db      	lsrs	r3, r3, #7
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b7f      	cmp	r3, #127	; 0x7f
 80053d8:	d8f0      	bhi.n	80053bc <SEGGER_SYSVIEW_Warn+0x34>
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	627a      	str	r2, [r7, #36]	; 0x24
 80053e0:	6a3a      	ldr	r2, [r7, #32]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e00b      	b.n	800540c <SEGGER_SYSVIEW_Warn+0x84>
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	61f9      	str	r1, [r7, #28]
 80053fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	09db      	lsrs	r3, r3, #7
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b7f      	cmp	r3, #127	; 0x7f
 8005410:	d8f0      	bhi.n	80053f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005422:	221a      	movs	r2, #26
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f7ff f8c2 	bl	80045b0 <_SendPacket>
  RECORD_END();
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f383 8811 	msr	BASEPRI, r3
}
 8005432:	bf00      	nop
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20015510 	.word	0x20015510

08005440 <__errno>:
 8005440:	4b01      	ldr	r3, [pc, #4]	; (8005448 <__errno+0x8>)
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010

0800544c <__libc_init_array>:
 800544c:	b570      	push	{r4, r5, r6, lr}
 800544e:	4e0d      	ldr	r6, [pc, #52]	; (8005484 <__libc_init_array+0x38>)
 8005450:	4c0d      	ldr	r4, [pc, #52]	; (8005488 <__libc_init_array+0x3c>)
 8005452:	1ba4      	subs	r4, r4, r6
 8005454:	10a4      	asrs	r4, r4, #2
 8005456:	2500      	movs	r5, #0
 8005458:	42a5      	cmp	r5, r4
 800545a:	d109      	bne.n	8005470 <__libc_init_array+0x24>
 800545c:	4e0b      	ldr	r6, [pc, #44]	; (800548c <__libc_init_array+0x40>)
 800545e:	4c0c      	ldr	r4, [pc, #48]	; (8005490 <__libc_init_array+0x44>)
 8005460:	f000 fc36 	bl	8005cd0 <_init>
 8005464:	1ba4      	subs	r4, r4, r6
 8005466:	10a4      	asrs	r4, r4, #2
 8005468:	2500      	movs	r5, #0
 800546a:	42a5      	cmp	r5, r4
 800546c:	d105      	bne.n	800547a <__libc_init_array+0x2e>
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005474:	4798      	blx	r3
 8005476:	3501      	adds	r5, #1
 8005478:	e7ee      	b.n	8005458 <__libc_init_array+0xc>
 800547a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800547e:	4798      	blx	r3
 8005480:	3501      	adds	r5, #1
 8005482:	e7f2      	b.n	800546a <__libc_init_array+0x1e>
 8005484:	08005e9c 	.word	0x08005e9c
 8005488:	08005e9c 	.word	0x08005e9c
 800548c:	08005e9c 	.word	0x08005e9c
 8005490:	08005ea0 	.word	0x08005ea0

08005494 <memcmp>:
 8005494:	b530      	push	{r4, r5, lr}
 8005496:	2400      	movs	r4, #0
 8005498:	42a2      	cmp	r2, r4
 800549a:	d101      	bne.n	80054a0 <memcmp+0xc>
 800549c:	2000      	movs	r0, #0
 800549e:	e007      	b.n	80054b0 <memcmp+0x1c>
 80054a0:	5d03      	ldrb	r3, [r0, r4]
 80054a2:	3401      	adds	r4, #1
 80054a4:	190d      	adds	r5, r1, r4
 80054a6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80054aa:	42ab      	cmp	r3, r5
 80054ac:	d0f4      	beq.n	8005498 <memcmp+0x4>
 80054ae:	1b58      	subs	r0, r3, r5
 80054b0:	bd30      	pop	{r4, r5, pc}

080054b2 <memcpy>:
 80054b2:	b510      	push	{r4, lr}
 80054b4:	1e43      	subs	r3, r0, #1
 80054b6:	440a      	add	r2, r1
 80054b8:	4291      	cmp	r1, r2
 80054ba:	d100      	bne.n	80054be <memcpy+0xc>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c6:	e7f7      	b.n	80054b8 <memcpy+0x6>

080054c8 <memset>:
 80054c8:	4402      	add	r2, r0
 80054ca:	4603      	mov	r3, r0
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d100      	bne.n	80054d2 <memset+0xa>
 80054d0:	4770      	bx	lr
 80054d2:	f803 1b01 	strb.w	r1, [r3], #1
 80054d6:	e7f9      	b.n	80054cc <memset+0x4>

080054d8 <siprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	b500      	push	{lr}
 80054dc:	b09c      	sub	sp, #112	; 0x70
 80054de:	ab1d      	add	r3, sp, #116	; 0x74
 80054e0:	9002      	str	r0, [sp, #8]
 80054e2:	9006      	str	r0, [sp, #24]
 80054e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054e8:	4809      	ldr	r0, [pc, #36]	; (8005510 <siprintf+0x38>)
 80054ea:	9107      	str	r1, [sp, #28]
 80054ec:	9104      	str	r1, [sp, #16]
 80054ee:	4909      	ldr	r1, [pc, #36]	; (8005514 <siprintf+0x3c>)
 80054f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f4:	9105      	str	r1, [sp, #20]
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	a902      	add	r1, sp, #8
 80054fc:	f000 f866 	bl	80055cc <_svfiprintf_r>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	b01c      	add	sp, #112	; 0x70
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	b003      	add	sp, #12
 800550e:	4770      	bx	lr
 8005510:	20000010 	.word	0x20000010
 8005514:	ffff0208 	.word	0xffff0208

08005518 <__ssputs_r>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	688e      	ldr	r6, [r1, #8]
 800551e:	429e      	cmp	r6, r3
 8005520:	4682      	mov	sl, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4690      	mov	r8, r2
 8005526:	4699      	mov	r9, r3
 8005528:	d837      	bhi.n	800559a <__ssputs_r+0x82>
 800552a:	898a      	ldrh	r2, [r1, #12]
 800552c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005530:	d031      	beq.n	8005596 <__ssputs_r+0x7e>
 8005532:	6825      	ldr	r5, [r4, #0]
 8005534:	6909      	ldr	r1, [r1, #16]
 8005536:	1a6f      	subs	r7, r5, r1
 8005538:	6965      	ldr	r5, [r4, #20]
 800553a:	2302      	movs	r3, #2
 800553c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005540:	fb95 f5f3 	sdiv	r5, r5, r3
 8005544:	f109 0301 	add.w	r3, r9, #1
 8005548:	443b      	add	r3, r7
 800554a:	429d      	cmp	r5, r3
 800554c:	bf38      	it	cc
 800554e:	461d      	movcc	r5, r3
 8005550:	0553      	lsls	r3, r2, #21
 8005552:	d530      	bpl.n	80055b6 <__ssputs_r+0x9e>
 8005554:	4629      	mov	r1, r5
 8005556:	f000 fb21 	bl	8005b9c <_malloc_r>
 800555a:	4606      	mov	r6, r0
 800555c:	b950      	cbnz	r0, 8005574 <__ssputs_r+0x5c>
 800555e:	230c      	movs	r3, #12
 8005560:	f8ca 3000 	str.w	r3, [sl]
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	463a      	mov	r2, r7
 8005576:	6921      	ldr	r1, [r4, #16]
 8005578:	f7ff ff9b 	bl	80054b2 <memcpy>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	6126      	str	r6, [r4, #16]
 800558a:	6165      	str	r5, [r4, #20]
 800558c:	443e      	add	r6, r7
 800558e:	1bed      	subs	r5, r5, r7
 8005590:	6026      	str	r6, [r4, #0]
 8005592:	60a5      	str	r5, [r4, #8]
 8005594:	464e      	mov	r6, r9
 8005596:	454e      	cmp	r6, r9
 8005598:	d900      	bls.n	800559c <__ssputs_r+0x84>
 800559a:	464e      	mov	r6, r9
 800559c:	4632      	mov	r2, r6
 800559e:	4641      	mov	r1, r8
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	f000 fa93 	bl	8005acc <memmove>
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	1b9b      	subs	r3, r3, r6
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	441e      	add	r6, r3
 80055b0:	6026      	str	r6, [r4, #0]
 80055b2:	2000      	movs	r0, #0
 80055b4:	e7dc      	b.n	8005570 <__ssputs_r+0x58>
 80055b6:	462a      	mov	r2, r5
 80055b8:	f000 fb4a 	bl	8005c50 <_realloc_r>
 80055bc:	4606      	mov	r6, r0
 80055be:	2800      	cmp	r0, #0
 80055c0:	d1e2      	bne.n	8005588 <__ssputs_r+0x70>
 80055c2:	6921      	ldr	r1, [r4, #16]
 80055c4:	4650      	mov	r0, sl
 80055c6:	f000 fa9b 	bl	8005b00 <_free_r>
 80055ca:	e7c8      	b.n	800555e <__ssputs_r+0x46>

080055cc <_svfiprintf_r>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	461d      	mov	r5, r3
 80055d2:	898b      	ldrh	r3, [r1, #12]
 80055d4:	061f      	lsls	r7, r3, #24
 80055d6:	b09d      	sub	sp, #116	; 0x74
 80055d8:	4680      	mov	r8, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4616      	mov	r6, r2
 80055de:	d50f      	bpl.n	8005600 <_svfiprintf_r+0x34>
 80055e0:	690b      	ldr	r3, [r1, #16]
 80055e2:	b96b      	cbnz	r3, 8005600 <_svfiprintf_r+0x34>
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	f000 fad9 	bl	8005b9c <_malloc_r>
 80055ea:	6020      	str	r0, [r4, #0]
 80055ec:	6120      	str	r0, [r4, #16]
 80055ee:	b928      	cbnz	r0, 80055fc <_svfiprintf_r+0x30>
 80055f0:	230c      	movs	r3, #12
 80055f2:	f8c8 3000 	str.w	r3, [r8]
 80055f6:	f04f 30ff 	mov.w	r0, #4294967295
 80055fa:	e0c8      	b.n	800578e <_svfiprintf_r+0x1c2>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	6163      	str	r3, [r4, #20]
 8005600:	2300      	movs	r3, #0
 8005602:	9309      	str	r3, [sp, #36]	; 0x24
 8005604:	2320      	movs	r3, #32
 8005606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800560a:	2330      	movs	r3, #48	; 0x30
 800560c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005610:	9503      	str	r5, [sp, #12]
 8005612:	f04f 0b01 	mov.w	fp, #1
 8005616:	4637      	mov	r7, r6
 8005618:	463d      	mov	r5, r7
 800561a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800561e:	b10b      	cbz	r3, 8005624 <_svfiprintf_r+0x58>
 8005620:	2b25      	cmp	r3, #37	; 0x25
 8005622:	d13e      	bne.n	80056a2 <_svfiprintf_r+0xd6>
 8005624:	ebb7 0a06 	subs.w	sl, r7, r6
 8005628:	d00b      	beq.n	8005642 <_svfiprintf_r+0x76>
 800562a:	4653      	mov	r3, sl
 800562c:	4632      	mov	r2, r6
 800562e:	4621      	mov	r1, r4
 8005630:	4640      	mov	r0, r8
 8005632:	f7ff ff71 	bl	8005518 <__ssputs_r>
 8005636:	3001      	adds	r0, #1
 8005638:	f000 80a4 	beq.w	8005784 <_svfiprintf_r+0x1b8>
 800563c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563e:	4453      	add	r3, sl
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	783b      	ldrb	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 809d 	beq.w	8005784 <_svfiprintf_r+0x1b8>
 800564a:	2300      	movs	r3, #0
 800564c:	f04f 32ff 	mov.w	r2, #4294967295
 8005650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005654:	9304      	str	r3, [sp, #16]
 8005656:	9307      	str	r3, [sp, #28]
 8005658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800565c:	931a      	str	r3, [sp, #104]	; 0x68
 800565e:	462f      	mov	r7, r5
 8005660:	2205      	movs	r2, #5
 8005662:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005666:	4850      	ldr	r0, [pc, #320]	; (80057a8 <_svfiprintf_r+0x1dc>)
 8005668:	f7fa fe12 	bl	8000290 <memchr>
 800566c:	9b04      	ldr	r3, [sp, #16]
 800566e:	b9d0      	cbnz	r0, 80056a6 <_svfiprintf_r+0xda>
 8005670:	06d9      	lsls	r1, r3, #27
 8005672:	bf44      	itt	mi
 8005674:	2220      	movmi	r2, #32
 8005676:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800567a:	071a      	lsls	r2, r3, #28
 800567c:	bf44      	itt	mi
 800567e:	222b      	movmi	r2, #43	; 0x2b
 8005680:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005684:	782a      	ldrb	r2, [r5, #0]
 8005686:	2a2a      	cmp	r2, #42	; 0x2a
 8005688:	d015      	beq.n	80056b6 <_svfiprintf_r+0xea>
 800568a:	9a07      	ldr	r2, [sp, #28]
 800568c:	462f      	mov	r7, r5
 800568e:	2000      	movs	r0, #0
 8005690:	250a      	movs	r5, #10
 8005692:	4639      	mov	r1, r7
 8005694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005698:	3b30      	subs	r3, #48	; 0x30
 800569a:	2b09      	cmp	r3, #9
 800569c:	d94d      	bls.n	800573a <_svfiprintf_r+0x16e>
 800569e:	b1b8      	cbz	r0, 80056d0 <_svfiprintf_r+0x104>
 80056a0:	e00f      	b.n	80056c2 <_svfiprintf_r+0xf6>
 80056a2:	462f      	mov	r7, r5
 80056a4:	e7b8      	b.n	8005618 <_svfiprintf_r+0x4c>
 80056a6:	4a40      	ldr	r2, [pc, #256]	; (80057a8 <_svfiprintf_r+0x1dc>)
 80056a8:	1a80      	subs	r0, r0, r2
 80056aa:	fa0b f000 	lsl.w	r0, fp, r0
 80056ae:	4318      	orrs	r0, r3
 80056b0:	9004      	str	r0, [sp, #16]
 80056b2:	463d      	mov	r5, r7
 80056b4:	e7d3      	b.n	800565e <_svfiprintf_r+0x92>
 80056b6:	9a03      	ldr	r2, [sp, #12]
 80056b8:	1d11      	adds	r1, r2, #4
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	9103      	str	r1, [sp, #12]
 80056be:	2a00      	cmp	r2, #0
 80056c0:	db01      	blt.n	80056c6 <_svfiprintf_r+0xfa>
 80056c2:	9207      	str	r2, [sp, #28]
 80056c4:	e004      	b.n	80056d0 <_svfiprintf_r+0x104>
 80056c6:	4252      	negs	r2, r2
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	9207      	str	r2, [sp, #28]
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	783b      	ldrb	r3, [r7, #0]
 80056d2:	2b2e      	cmp	r3, #46	; 0x2e
 80056d4:	d10c      	bne.n	80056f0 <_svfiprintf_r+0x124>
 80056d6:	787b      	ldrb	r3, [r7, #1]
 80056d8:	2b2a      	cmp	r3, #42	; 0x2a
 80056da:	d133      	bne.n	8005744 <_svfiprintf_r+0x178>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfb8      	it	lt
 80056e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056ec:	3702      	adds	r7, #2
 80056ee:	9305      	str	r3, [sp, #20]
 80056f0:	4d2e      	ldr	r5, [pc, #184]	; (80057ac <_svfiprintf_r+0x1e0>)
 80056f2:	7839      	ldrb	r1, [r7, #0]
 80056f4:	2203      	movs	r2, #3
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fa fdca 	bl	8000290 <memchr>
 80056fc:	b138      	cbz	r0, 800570e <_svfiprintf_r+0x142>
 80056fe:	2340      	movs	r3, #64	; 0x40
 8005700:	1b40      	subs	r0, r0, r5
 8005702:	fa03 f000 	lsl.w	r0, r3, r0
 8005706:	9b04      	ldr	r3, [sp, #16]
 8005708:	4303      	orrs	r3, r0
 800570a:	3701      	adds	r7, #1
 800570c:	9304      	str	r3, [sp, #16]
 800570e:	7839      	ldrb	r1, [r7, #0]
 8005710:	4827      	ldr	r0, [pc, #156]	; (80057b0 <_svfiprintf_r+0x1e4>)
 8005712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005716:	2206      	movs	r2, #6
 8005718:	1c7e      	adds	r6, r7, #1
 800571a:	f7fa fdb9 	bl	8000290 <memchr>
 800571e:	2800      	cmp	r0, #0
 8005720:	d038      	beq.n	8005794 <_svfiprintf_r+0x1c8>
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <_svfiprintf_r+0x1e8>)
 8005724:	bb13      	cbnz	r3, 800576c <_svfiprintf_r+0x1a0>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	3307      	adds	r3, #7
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	3308      	adds	r3, #8
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	444b      	add	r3, r9
 8005736:	9309      	str	r3, [sp, #36]	; 0x24
 8005738:	e76d      	b.n	8005616 <_svfiprintf_r+0x4a>
 800573a:	fb05 3202 	mla	r2, r5, r2, r3
 800573e:	2001      	movs	r0, #1
 8005740:	460f      	mov	r7, r1
 8005742:	e7a6      	b.n	8005692 <_svfiprintf_r+0xc6>
 8005744:	2300      	movs	r3, #0
 8005746:	3701      	adds	r7, #1
 8005748:	9305      	str	r3, [sp, #20]
 800574a:	4619      	mov	r1, r3
 800574c:	250a      	movs	r5, #10
 800574e:	4638      	mov	r0, r7
 8005750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005754:	3a30      	subs	r2, #48	; 0x30
 8005756:	2a09      	cmp	r2, #9
 8005758:	d903      	bls.n	8005762 <_svfiprintf_r+0x196>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0c8      	beq.n	80056f0 <_svfiprintf_r+0x124>
 800575e:	9105      	str	r1, [sp, #20]
 8005760:	e7c6      	b.n	80056f0 <_svfiprintf_r+0x124>
 8005762:	fb05 2101 	mla	r1, r5, r1, r2
 8005766:	2301      	movs	r3, #1
 8005768:	4607      	mov	r7, r0
 800576a:	e7f0      	b.n	800574e <_svfiprintf_r+0x182>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	4622      	mov	r2, r4
 8005772:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <_svfiprintf_r+0x1ec>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4640      	mov	r0, r8
 8005778:	f3af 8000 	nop.w
 800577c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005780:	4681      	mov	r9, r0
 8005782:	d1d6      	bne.n	8005732 <_svfiprintf_r+0x166>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	065b      	lsls	r3, r3, #25
 8005788:	f53f af35 	bmi.w	80055f6 <_svfiprintf_r+0x2a>
 800578c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578e:	b01d      	add	sp, #116	; 0x74
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	ab03      	add	r3, sp, #12
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4622      	mov	r2, r4
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_svfiprintf_r+0x1ec>)
 800579c:	a904      	add	r1, sp, #16
 800579e:	4640      	mov	r0, r8
 80057a0:	f000 f882 	bl	80058a8 <_printf_i>
 80057a4:	e7ea      	b.n	800577c <_svfiprintf_r+0x1b0>
 80057a6:	bf00      	nop
 80057a8:	08005e5e 	.word	0x08005e5e
 80057ac:	08005e64 	.word	0x08005e64
 80057b0:	08005e68 	.word	0x08005e68
 80057b4:	00000000 	.word	0x00000000
 80057b8:	08005519 	.word	0x08005519

080057bc <_printf_common>:
 80057bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	4691      	mov	r9, r2
 80057c2:	461f      	mov	r7, r3
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057cc:	4293      	cmp	r3, r2
 80057ce:	bfb8      	it	lt
 80057d0:	4613      	movlt	r3, r2
 80057d2:	f8c9 3000 	str.w	r3, [r9]
 80057d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057da:	4606      	mov	r6, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	b112      	cbz	r2, 80057e6 <_printf_common+0x2a>
 80057e0:	3301      	adds	r3, #1
 80057e2:	f8c9 3000 	str.w	r3, [r9]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057f0:	3302      	addmi	r3, #2
 80057f2:	f8c9 3000 	strmi.w	r3, [r9]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d107      	bne.n	800580e <_printf_common+0x52>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	f8d9 2000 	ldr.w	r2, [r9]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	42ab      	cmp	r3, r5
 800580c:	dc28      	bgt.n	8005860 <_printf_common+0xa4>
 800580e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	3300      	adds	r3, #0
 8005816:	bf18      	it	ne
 8005818:	2301      	movne	r3, #1
 800581a:	0692      	lsls	r2, r2, #26
 800581c:	d42d      	bmi.n	800587a <_printf_common+0xbe>
 800581e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005822:	4639      	mov	r1, r7
 8005824:	4630      	mov	r0, r6
 8005826:	47c0      	blx	r8
 8005828:	3001      	adds	r0, #1
 800582a:	d020      	beq.n	800586e <_printf_common+0xb2>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	68e5      	ldr	r5, [r4, #12]
 8005830:	f8d9 2000 	ldr.w	r2, [r9]
 8005834:	f003 0306 	and.w	r3, r3, #6
 8005838:	2b04      	cmp	r3, #4
 800583a:	bf08      	it	eq
 800583c:	1aad      	subeq	r5, r5, r2
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	6922      	ldr	r2, [r4, #16]
 8005842:	bf0c      	ite	eq
 8005844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005848:	2500      	movne	r5, #0
 800584a:	4293      	cmp	r3, r2
 800584c:	bfc4      	itt	gt
 800584e:	1a9b      	subgt	r3, r3, r2
 8005850:	18ed      	addgt	r5, r5, r3
 8005852:	f04f 0900 	mov.w	r9, #0
 8005856:	341a      	adds	r4, #26
 8005858:	454d      	cmp	r5, r9
 800585a:	d11a      	bne.n	8005892 <_printf_common+0xd6>
 800585c:	2000      	movs	r0, #0
 800585e:	e008      	b.n	8005872 <_printf_common+0xb6>
 8005860:	2301      	movs	r3, #1
 8005862:	4652      	mov	r2, sl
 8005864:	4639      	mov	r1, r7
 8005866:	4630      	mov	r0, r6
 8005868:	47c0      	blx	r8
 800586a:	3001      	adds	r0, #1
 800586c:	d103      	bne.n	8005876 <_printf_common+0xba>
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	3501      	adds	r5, #1
 8005878:	e7c3      	b.n	8005802 <_printf_common+0x46>
 800587a:	18e1      	adds	r1, r4, r3
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	2030      	movs	r0, #48	; 0x30
 8005880:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005884:	4422      	add	r2, r4
 8005886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800588a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800588e:	3302      	adds	r3, #2
 8005890:	e7c5      	b.n	800581e <_printf_common+0x62>
 8005892:	2301      	movs	r3, #1
 8005894:	4622      	mov	r2, r4
 8005896:	4639      	mov	r1, r7
 8005898:	4630      	mov	r0, r6
 800589a:	47c0      	blx	r8
 800589c:	3001      	adds	r0, #1
 800589e:	d0e6      	beq.n	800586e <_printf_common+0xb2>
 80058a0:	f109 0901 	add.w	r9, r9, #1
 80058a4:	e7d8      	b.n	8005858 <_printf_common+0x9c>
	...

080058a8 <_printf_i>:
 80058a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80058b0:	460c      	mov	r4, r1
 80058b2:	7e09      	ldrb	r1, [r1, #24]
 80058b4:	b085      	sub	sp, #20
 80058b6:	296e      	cmp	r1, #110	; 0x6e
 80058b8:	4617      	mov	r7, r2
 80058ba:	4606      	mov	r6, r0
 80058bc:	4698      	mov	r8, r3
 80058be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058c0:	f000 80b3 	beq.w	8005a2a <_printf_i+0x182>
 80058c4:	d822      	bhi.n	800590c <_printf_i+0x64>
 80058c6:	2963      	cmp	r1, #99	; 0x63
 80058c8:	d036      	beq.n	8005938 <_printf_i+0x90>
 80058ca:	d80a      	bhi.n	80058e2 <_printf_i+0x3a>
 80058cc:	2900      	cmp	r1, #0
 80058ce:	f000 80b9 	beq.w	8005a44 <_printf_i+0x19c>
 80058d2:	2958      	cmp	r1, #88	; 0x58
 80058d4:	f000 8083 	beq.w	80059de <_printf_i+0x136>
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058e0:	e032      	b.n	8005948 <_printf_i+0xa0>
 80058e2:	2964      	cmp	r1, #100	; 0x64
 80058e4:	d001      	beq.n	80058ea <_printf_i+0x42>
 80058e6:	2969      	cmp	r1, #105	; 0x69
 80058e8:	d1f6      	bne.n	80058d8 <_printf_i+0x30>
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	0605      	lsls	r5, r0, #24
 80058f0:	f103 0104 	add.w	r1, r3, #4
 80058f4:	d52a      	bpl.n	800594c <_printf_i+0xa4>
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da03      	bge.n	8005906 <_printf_i+0x5e>
 80058fe:	222d      	movs	r2, #45	; 0x2d
 8005900:	425b      	negs	r3, r3
 8005902:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005906:	486f      	ldr	r0, [pc, #444]	; (8005ac4 <_printf_i+0x21c>)
 8005908:	220a      	movs	r2, #10
 800590a:	e039      	b.n	8005980 <_printf_i+0xd8>
 800590c:	2973      	cmp	r1, #115	; 0x73
 800590e:	f000 809d 	beq.w	8005a4c <_printf_i+0x1a4>
 8005912:	d808      	bhi.n	8005926 <_printf_i+0x7e>
 8005914:	296f      	cmp	r1, #111	; 0x6f
 8005916:	d020      	beq.n	800595a <_printf_i+0xb2>
 8005918:	2970      	cmp	r1, #112	; 0x70
 800591a:	d1dd      	bne.n	80058d8 <_printf_i+0x30>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f043 0320 	orr.w	r3, r3, #32
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	e003      	b.n	800592e <_printf_i+0x86>
 8005926:	2975      	cmp	r1, #117	; 0x75
 8005928:	d017      	beq.n	800595a <_printf_i+0xb2>
 800592a:	2978      	cmp	r1, #120	; 0x78
 800592c:	d1d4      	bne.n	80058d8 <_printf_i+0x30>
 800592e:	2378      	movs	r3, #120	; 0x78
 8005930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005934:	4864      	ldr	r0, [pc, #400]	; (8005ac8 <_printf_i+0x220>)
 8005936:	e055      	b.n	80059e4 <_printf_i+0x13c>
 8005938:	6813      	ldr	r3, [r2, #0]
 800593a:	1d19      	adds	r1, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6011      	str	r1, [r2, #0]
 8005940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005948:	2301      	movs	r3, #1
 800594a:	e08c      	b.n	8005a66 <_printf_i+0x1be>
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6011      	str	r1, [r2, #0]
 8005950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005954:	bf18      	it	ne
 8005956:	b21b      	sxthne	r3, r3
 8005958:	e7cf      	b.n	80058fa <_printf_i+0x52>
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	1d18      	adds	r0, r3, #4
 8005960:	6010      	str	r0, [r2, #0]
 8005962:	0628      	lsls	r0, r5, #24
 8005964:	d501      	bpl.n	800596a <_printf_i+0xc2>
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	e002      	b.n	8005970 <_printf_i+0xc8>
 800596a:	0668      	lsls	r0, r5, #25
 800596c:	d5fb      	bpl.n	8005966 <_printf_i+0xbe>
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	4854      	ldr	r0, [pc, #336]	; (8005ac4 <_printf_i+0x21c>)
 8005972:	296f      	cmp	r1, #111	; 0x6f
 8005974:	bf14      	ite	ne
 8005976:	220a      	movne	r2, #10
 8005978:	2208      	moveq	r2, #8
 800597a:	2100      	movs	r1, #0
 800597c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005980:	6865      	ldr	r5, [r4, #4]
 8005982:	60a5      	str	r5, [r4, #8]
 8005984:	2d00      	cmp	r5, #0
 8005986:	f2c0 8095 	blt.w	8005ab4 <_printf_i+0x20c>
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	f021 0104 	bic.w	r1, r1, #4
 8005990:	6021      	str	r1, [r4, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d13d      	bne.n	8005a12 <_printf_i+0x16a>
 8005996:	2d00      	cmp	r5, #0
 8005998:	f040 808e 	bne.w	8005ab8 <_printf_i+0x210>
 800599c:	4665      	mov	r5, ip
 800599e:	2a08      	cmp	r2, #8
 80059a0:	d10b      	bne.n	80059ba <_printf_i+0x112>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	07db      	lsls	r3, r3, #31
 80059a6:	d508      	bpl.n	80059ba <_printf_i+0x112>
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	6862      	ldr	r2, [r4, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	bfde      	ittt	le
 80059b0:	2330      	movle	r3, #48	; 0x30
 80059b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059ba:	ebac 0305 	sub.w	r3, ip, r5
 80059be:	6123      	str	r3, [r4, #16]
 80059c0:	f8cd 8000 	str.w	r8, [sp]
 80059c4:	463b      	mov	r3, r7
 80059c6:	aa03      	add	r2, sp, #12
 80059c8:	4621      	mov	r1, r4
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff fef6 	bl	80057bc <_printf_common>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d14d      	bne.n	8005a70 <_printf_i+0x1c8>
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	b005      	add	sp, #20
 80059da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059de:	4839      	ldr	r0, [pc, #228]	; (8005ac4 <_printf_i+0x21c>)
 80059e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059e4:	6813      	ldr	r3, [r2, #0]
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	1d1d      	adds	r5, r3, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6015      	str	r5, [r2, #0]
 80059ee:	060a      	lsls	r2, r1, #24
 80059f0:	d50b      	bpl.n	8005a0a <_printf_i+0x162>
 80059f2:	07ca      	lsls	r2, r1, #31
 80059f4:	bf44      	itt	mi
 80059f6:	f041 0120 	orrmi.w	r1, r1, #32
 80059fa:	6021      	strmi	r1, [r4, #0]
 80059fc:	b91b      	cbnz	r3, 8005a06 <_printf_i+0x15e>
 80059fe:	6822      	ldr	r2, [r4, #0]
 8005a00:	f022 0220 	bic.w	r2, r2, #32
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	2210      	movs	r2, #16
 8005a08:	e7b7      	b.n	800597a <_printf_i+0xd2>
 8005a0a:	064d      	lsls	r5, r1, #25
 8005a0c:	bf48      	it	mi
 8005a0e:	b29b      	uxthmi	r3, r3
 8005a10:	e7ef      	b.n	80059f2 <_printf_i+0x14a>
 8005a12:	4665      	mov	r5, ip
 8005a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a18:	fb02 3311 	mls	r3, r2, r1, r3
 8005a1c:	5cc3      	ldrb	r3, [r0, r3]
 8005a1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a22:	460b      	mov	r3, r1
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d1f5      	bne.n	8005a14 <_printf_i+0x16c>
 8005a28:	e7b9      	b.n	800599e <_printf_i+0xf6>
 8005a2a:	6813      	ldr	r3, [r2, #0]
 8005a2c:	6825      	ldr	r5, [r4, #0]
 8005a2e:	6961      	ldr	r1, [r4, #20]
 8005a30:	1d18      	adds	r0, r3, #4
 8005a32:	6010      	str	r0, [r2, #0]
 8005a34:	0628      	lsls	r0, r5, #24
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	d501      	bpl.n	8005a3e <_printf_i+0x196>
 8005a3a:	6019      	str	r1, [r3, #0]
 8005a3c:	e002      	b.n	8005a44 <_printf_i+0x19c>
 8005a3e:	066a      	lsls	r2, r5, #25
 8005a40:	d5fb      	bpl.n	8005a3a <_printf_i+0x192>
 8005a42:	8019      	strh	r1, [r3, #0]
 8005a44:	2300      	movs	r3, #0
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	4665      	mov	r5, ip
 8005a4a:	e7b9      	b.n	80059c0 <_printf_i+0x118>
 8005a4c:	6813      	ldr	r3, [r2, #0]
 8005a4e:	1d19      	adds	r1, r3, #4
 8005a50:	6011      	str	r1, [r2, #0]
 8005a52:	681d      	ldr	r5, [r3, #0]
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	2100      	movs	r1, #0
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f7fa fc19 	bl	8000290 <memchr>
 8005a5e:	b108      	cbz	r0, 8005a64 <_printf_i+0x1bc>
 8005a60:	1b40      	subs	r0, r0, r5
 8005a62:	6060      	str	r0, [r4, #4]
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a6e:	e7a7      	b.n	80059c0 <_printf_i+0x118>
 8005a70:	6923      	ldr	r3, [r4, #16]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4639      	mov	r1, r7
 8005a76:	4630      	mov	r0, r6
 8005a78:	47c0      	blx	r8
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d0aa      	beq.n	80059d4 <_printf_i+0x12c>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	079b      	lsls	r3, r3, #30
 8005a82:	d413      	bmi.n	8005aac <_printf_i+0x204>
 8005a84:	68e0      	ldr	r0, [r4, #12]
 8005a86:	9b03      	ldr	r3, [sp, #12]
 8005a88:	4298      	cmp	r0, r3
 8005a8a:	bfb8      	it	lt
 8005a8c:	4618      	movlt	r0, r3
 8005a8e:	e7a3      	b.n	80059d8 <_printf_i+0x130>
 8005a90:	2301      	movs	r3, #1
 8005a92:	464a      	mov	r2, r9
 8005a94:	4639      	mov	r1, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	47c0      	blx	r8
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d09a      	beq.n	80059d4 <_printf_i+0x12c>
 8005a9e:	3501      	adds	r5, #1
 8005aa0:	68e3      	ldr	r3, [r4, #12]
 8005aa2:	9a03      	ldr	r2, [sp, #12]
 8005aa4:	1a9b      	subs	r3, r3, r2
 8005aa6:	42ab      	cmp	r3, r5
 8005aa8:	dcf2      	bgt.n	8005a90 <_printf_i+0x1e8>
 8005aaa:	e7eb      	b.n	8005a84 <_printf_i+0x1dc>
 8005aac:	2500      	movs	r5, #0
 8005aae:	f104 0919 	add.w	r9, r4, #25
 8005ab2:	e7f5      	b.n	8005aa0 <_printf_i+0x1f8>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1ac      	bne.n	8005a12 <_printf_i+0x16a>
 8005ab8:	7803      	ldrb	r3, [r0, #0]
 8005aba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005abe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac2:	e76c      	b.n	800599e <_printf_i+0xf6>
 8005ac4:	08005e6f 	.word	0x08005e6f
 8005ac8:	08005e80 	.word	0x08005e80

08005acc <memmove>:
 8005acc:	4288      	cmp	r0, r1
 8005ace:	b510      	push	{r4, lr}
 8005ad0:	eb01 0302 	add.w	r3, r1, r2
 8005ad4:	d807      	bhi.n	8005ae6 <memmove+0x1a>
 8005ad6:	1e42      	subs	r2, r0, #1
 8005ad8:	4299      	cmp	r1, r3
 8005ada:	d00a      	beq.n	8005af2 <memmove+0x26>
 8005adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ae4:	e7f8      	b.n	8005ad8 <memmove+0xc>
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	d9f5      	bls.n	8005ad6 <memmove+0xa>
 8005aea:	1881      	adds	r1, r0, r2
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	42d3      	cmn	r3, r2
 8005af0:	d100      	bne.n	8005af4 <memmove+0x28>
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005af8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005afc:	e7f7      	b.n	8005aee <memmove+0x22>
	...

08005b00 <_free_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4605      	mov	r5, r0
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d045      	beq.n	8005b94 <_free_r+0x94>
 8005b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b0c:	1f0c      	subs	r4, r1, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bfb8      	it	lt
 8005b12:	18e4      	addlt	r4, r4, r3
 8005b14:	f000 f8d2 	bl	8005cbc <__malloc_lock>
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <_free_r+0x98>)
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	b933      	cbnz	r3, 8005b2e <_free_r+0x2e>
 8005b20:	6063      	str	r3, [r4, #4]
 8005b22:	6014      	str	r4, [r2, #0]
 8005b24:	4628      	mov	r0, r5
 8005b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b2a:	f000 b8c8 	b.w	8005cbe <__malloc_unlock>
 8005b2e:	42a3      	cmp	r3, r4
 8005b30:	d90c      	bls.n	8005b4c <_free_r+0x4c>
 8005b32:	6821      	ldr	r1, [r4, #0]
 8005b34:	1862      	adds	r2, r4, r1
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bf04      	itt	eq
 8005b3a:	681a      	ldreq	r2, [r3, #0]
 8005b3c:	685b      	ldreq	r3, [r3, #4]
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	bf04      	itt	eq
 8005b42:	1852      	addeq	r2, r2, r1
 8005b44:	6022      	streq	r2, [r4, #0]
 8005b46:	6004      	str	r4, [r0, #0]
 8005b48:	e7ec      	b.n	8005b24 <_free_r+0x24>
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	b10a      	cbz	r2, 8005b54 <_free_r+0x54>
 8005b50:	42a2      	cmp	r2, r4
 8005b52:	d9fa      	bls.n	8005b4a <_free_r+0x4a>
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	1858      	adds	r0, r3, r1
 8005b58:	42a0      	cmp	r0, r4
 8005b5a:	d10b      	bne.n	8005b74 <_free_r+0x74>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	4401      	add	r1, r0
 8005b60:	1858      	adds	r0, r3, r1
 8005b62:	4282      	cmp	r2, r0
 8005b64:	6019      	str	r1, [r3, #0]
 8005b66:	d1dd      	bne.n	8005b24 <_free_r+0x24>
 8005b68:	6810      	ldr	r0, [r2, #0]
 8005b6a:	6852      	ldr	r2, [r2, #4]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	4401      	add	r1, r0
 8005b70:	6019      	str	r1, [r3, #0]
 8005b72:	e7d7      	b.n	8005b24 <_free_r+0x24>
 8005b74:	d902      	bls.n	8005b7c <_free_r+0x7c>
 8005b76:	230c      	movs	r3, #12
 8005b78:	602b      	str	r3, [r5, #0]
 8005b7a:	e7d3      	b.n	8005b24 <_free_r+0x24>
 8005b7c:	6820      	ldr	r0, [r4, #0]
 8005b7e:	1821      	adds	r1, r4, r0
 8005b80:	428a      	cmp	r2, r1
 8005b82:	bf04      	itt	eq
 8005b84:	6811      	ldreq	r1, [r2, #0]
 8005b86:	6852      	ldreq	r2, [r2, #4]
 8005b88:	6062      	str	r2, [r4, #4]
 8005b8a:	bf04      	itt	eq
 8005b8c:	1809      	addeq	r1, r1, r0
 8005b8e:	6021      	streq	r1, [r4, #0]
 8005b90:	605c      	str	r4, [r3, #4]
 8005b92:	e7c7      	b.n	8005b24 <_free_r+0x24>
 8005b94:	bd38      	pop	{r3, r4, r5, pc}
 8005b96:	bf00      	nop
 8005b98:	200155f4 	.word	0x200155f4

08005b9c <_malloc_r>:
 8005b9c:	b570      	push	{r4, r5, r6, lr}
 8005b9e:	1ccd      	adds	r5, r1, #3
 8005ba0:	f025 0503 	bic.w	r5, r5, #3
 8005ba4:	3508      	adds	r5, #8
 8005ba6:	2d0c      	cmp	r5, #12
 8005ba8:	bf38      	it	cc
 8005baa:	250c      	movcc	r5, #12
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	4606      	mov	r6, r0
 8005bb0:	db01      	blt.n	8005bb6 <_malloc_r+0x1a>
 8005bb2:	42a9      	cmp	r1, r5
 8005bb4:	d903      	bls.n	8005bbe <_malloc_r+0x22>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	2000      	movs	r0, #0
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
 8005bbe:	f000 f87d 	bl	8005cbc <__malloc_lock>
 8005bc2:	4a21      	ldr	r2, [pc, #132]	; (8005c48 <_malloc_r+0xac>)
 8005bc4:	6814      	ldr	r4, [r2, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	b991      	cbnz	r1, 8005bf0 <_malloc_r+0x54>
 8005bca:	4c20      	ldr	r4, [pc, #128]	; (8005c4c <_malloc_r+0xb0>)
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	b91b      	cbnz	r3, 8005bd8 <_malloc_r+0x3c>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f863 	bl	8005c9c <_sbrk_r>
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f85e 	bl	8005c9c <_sbrk_r>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d124      	bne.n	8005c2e <_malloc_r+0x92>
 8005be4:	230c      	movs	r3, #12
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f868 	bl	8005cbe <__malloc_unlock>
 8005bee:	e7e4      	b.n	8005bba <_malloc_r+0x1e>
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	1b5b      	subs	r3, r3, r5
 8005bf4:	d418      	bmi.n	8005c28 <_malloc_r+0x8c>
 8005bf6:	2b0b      	cmp	r3, #11
 8005bf8:	d90f      	bls.n	8005c1a <_malloc_r+0x7e>
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	50cd      	str	r5, [r1, r3]
 8005bfe:	18cc      	adds	r4, r1, r3
 8005c00:	4630      	mov	r0, r6
 8005c02:	f000 f85c 	bl	8005cbe <__malloc_unlock>
 8005c06:	f104 000b 	add.w	r0, r4, #11
 8005c0a:	1d23      	adds	r3, r4, #4
 8005c0c:	f020 0007 	bic.w	r0, r0, #7
 8005c10:	1ac3      	subs	r3, r0, r3
 8005c12:	d0d3      	beq.n	8005bbc <_malloc_r+0x20>
 8005c14:	425a      	negs	r2, r3
 8005c16:	50e2      	str	r2, [r4, r3]
 8005c18:	e7d0      	b.n	8005bbc <_malloc_r+0x20>
 8005c1a:	428c      	cmp	r4, r1
 8005c1c:	684b      	ldr	r3, [r1, #4]
 8005c1e:	bf16      	itet	ne
 8005c20:	6063      	strne	r3, [r4, #4]
 8005c22:	6013      	streq	r3, [r2, #0]
 8005c24:	460c      	movne	r4, r1
 8005c26:	e7eb      	b.n	8005c00 <_malloc_r+0x64>
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6849      	ldr	r1, [r1, #4]
 8005c2c:	e7cc      	b.n	8005bc8 <_malloc_r+0x2c>
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d005      	beq.n	8005c44 <_malloc_r+0xa8>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f000 f82e 	bl	8005c9c <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0cf      	beq.n	8005be4 <_malloc_r+0x48>
 8005c44:	6025      	str	r5, [r4, #0]
 8005c46:	e7db      	b.n	8005c00 <_malloc_r+0x64>
 8005c48:	200155f4 	.word	0x200155f4
 8005c4c:	200155f8 	.word	0x200155f8

08005c50 <_realloc_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	4607      	mov	r7, r0
 8005c54:	4614      	mov	r4, r2
 8005c56:	460e      	mov	r6, r1
 8005c58:	b921      	cbnz	r1, 8005c64 <_realloc_r+0x14>
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c60:	f7ff bf9c 	b.w	8005b9c <_malloc_r>
 8005c64:	b922      	cbnz	r2, 8005c70 <_realloc_r+0x20>
 8005c66:	f7ff ff4b 	bl	8005b00 <_free_r>
 8005c6a:	4625      	mov	r5, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c70:	f000 f826 	bl	8005cc0 <_malloc_usable_size_r>
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d20f      	bcs.n	8005c98 <_realloc_r+0x48>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f7ff ff8e 	bl	8005b9c <_malloc_r>
 8005c80:	4605      	mov	r5, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0f2      	beq.n	8005c6c <_realloc_r+0x1c>
 8005c86:	4631      	mov	r1, r6
 8005c88:	4622      	mov	r2, r4
 8005c8a:	f7ff fc12 	bl	80054b2 <memcpy>
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff ff35 	bl	8005b00 <_free_r>
 8005c96:	e7e9      	b.n	8005c6c <_realloc_r+0x1c>
 8005c98:	4635      	mov	r5, r6
 8005c9a:	e7e7      	b.n	8005c6c <_realloc_r+0x1c>

08005c9c <_sbrk_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4c06      	ldr	r4, [pc, #24]	; (8005cb8 <_sbrk_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	f7fa ff6c 	bl	8000b84 <_sbrk>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_sbrk_r+0x1a>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_sbrk_r+0x1a>
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	2001574c 	.word	0x2001574c

08005cbc <__malloc_lock>:
 8005cbc:	4770      	bx	lr

08005cbe <__malloc_unlock>:
 8005cbe:	4770      	bx	lr

08005cc0 <_malloc_usable_size_r>:
 8005cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc4:	1f18      	subs	r0, r3, #4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfbc      	itt	lt
 8005cca:	580b      	ldrlt	r3, [r1, r0]
 8005ccc:	18c0      	addlt	r0, r0, r3
 8005cce:	4770      	bx	lr

08005cd0 <_init>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr

08005cdc <_fini>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr
