
13-FreeRTOS-Queue-Command.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008604  08008604  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800860c  0800860c  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08008614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015cd4  2000013c  08008750  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015e10  08008750  00025e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc39  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036bf  00000000  00000000  0003cda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  00040468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  00041790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023fb3  00000000  00000000  00042910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017aba  00000000  00000000  000668c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d65c4  00000000  00000000  0007e37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154941  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d8  00000000  00000000  001549bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008354 	.word	0x08008354

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000140 	.word	0x20000140
 80001ec:	08008354 	.word	0x08008354

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	20015d64 	.word	0x20015d64

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr
 800028c:	0000      	movs	r0, r0
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <USART2_UART_Init+0x4c>)
 8000668:	f001 fd74 	bl	8002154 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 fba3 	bl	8000dbc <Error_Handler>
  }

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20015c44 	.word	0x20015c44
 8000680:	40004400 	.word	0x40004400

08000684 <UART2_write>:

void UART2_write(char data[]){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fdf5 	bl	800027c <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	4803      	ldr	r0, [pc, #12]	; (80006ac <UART2_write+0x28>)
 800069e:	f001 fda6 	bl	80021ee <HAL_UART_Transmit>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20015c44 	.word	0x20015c44

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <main+0xdc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a34      	ldr	r2, [pc, #208]	; (800078c <main+0xdc>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006c2:	f000 fc47 	bl	8000f54 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80006c6:	f000 f889 	bl	80007dc <SystemClock_Config>

	/* Configure the peripherals */
	GPIO_Init();
 80006ca:	f000 f8e7 	bl	800089c <GPIO_Init>
	RTC_Init();
 80006ce:	f000 f93f 	bl	8000950 <RTC_Init>
	USART2_UART_Init();
 80006d2:	f7ff ffad 	bl	8000630 <USART2_UART_Init>


	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 80006d6:	f005 fbe9 	bl	8005eac <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80006da:	f006 fc21 	bl	8006f20 <SEGGER_SYSVIEW_Start>

	/**/
	HAL_UART_Receive_IT(&huart2,&data_byte,sizeof(data_byte));
 80006de:	2201      	movs	r2, #1
 80006e0:	492b      	ldr	r1, [pc, #172]	; (8000790 <main+0xe0>)
 80006e2:	482c      	ldr	r0, [pc, #176]	; (8000794 <main+0xe4>)
 80006e4:	f001 fe1c 	bl	8002320 <HAL_UART_Receive_IT>

	/* Create Queues */
	//Queue command
	command_queue=xQueueCreate(10,sizeof(APP_CMD_t*));
 80006e8:	2200      	movs	r2, #0
 80006ea:	2104      	movs	r1, #4
 80006ec:	200a      	movs	r0, #10
 80006ee:	f002 fe5b 	bl	80033a8 <xQueueGenericCreate>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <main+0xe8>)
 80006f6:	601a      	str	r2, [r3, #0]
	//Queue Write Uart
	uart_write_queue=xQueueCreate(10,sizeof(char*));
 80006f8:	2200      	movs	r2, #0
 80006fa:	2104      	movs	r1, #4
 80006fc:	200a      	movs	r0, #10
 80006fe:	f002 fe53 	bl	80033a8 <xQueueGenericCreate>
 8000702:	4602      	mov	r2, r0
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <main+0xec>)
 8000706:	601a      	str	r2, [r3, #0]

	if((command_queue != NULL) && (uart_write_queue != NULL))
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0xe8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d038      	beq.n	8000782 <main+0xd2>
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <main+0xec>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d034      	beq.n	8000782 <main+0xd2>
	{
		UART2_write("Queue's Creation Success!\n");
 8000718:	4821      	ldr	r0, [pc, #132]	; (80007a0 <main+0xf0>)
 800071a:	f7ff ffb3 	bl	8000684 <UART2_write>

		/* Create a taskk */
		//Tarea 1
		xTaskCreate(vTask1_menu_display,"task1-menu",500,NULL,1,&xTaskHandler1);
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <main+0xf4>)
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	2301      	movs	r3, #1
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2300      	movs	r3, #0
 8000728:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800072c:	491e      	ldr	r1, [pc, #120]	; (80007a8 <main+0xf8>)
 800072e:	481f      	ldr	r0, [pc, #124]	; (80007ac <main+0xfc>)
 8000730:	f003 fb4b 	bl	8003dca <xTaskCreate>
		//tarea 2
		xTaskCreate(vTask2_cmd_handling,"task2-cmd-handling",500,NULL,2,&xTaskHandler2);
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <main+0x100>)
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	2302      	movs	r3, #2
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2300      	movs	r3, #0
 800073e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000742:	491c      	ldr	r1, [pc, #112]	; (80007b4 <main+0x104>)
 8000744:	481c      	ldr	r0, [pc, #112]	; (80007b8 <main+0x108>)
 8000746:	f003 fb40 	bl	8003dca <xTaskCreate>
		//tarea 3
		xTaskCreate(vTask3_cmd_processing,"task3-cmd-process",500,NULL,2,&xTaskHandler3);
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <main+0x10c>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2302      	movs	r3, #2
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2300      	movs	r3, #0
 8000754:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000758:	4919      	ldr	r1, [pc, #100]	; (80007c0 <main+0x110>)
 800075a:	481a      	ldr	r0, [pc, #104]	; (80007c4 <main+0x114>)
 800075c:	f003 fb35 	bl	8003dca <xTaskCreate>
		//tarea 4
		xTaskCreate(vTask4_cmd_uart_write,"task4-uart-write",500,NULL,2,&xTaskHandler4);
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <main+0x118>)
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	2302      	movs	r3, #2
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2300      	movs	r3, #0
 800076a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800076e:	4917      	ldr	r1, [pc, #92]	; (80007cc <main+0x11c>)
 8000770:	4817      	ldr	r0, [pc, #92]	; (80007d0 <main+0x120>)
 8000772:	f003 fb2a 	bl	8003dca <xTaskCreate>

		/* Start Message */
		//HAL_UART_Transmit(&huart2,(uint8_t*) "FreeRTOS Init\n", sizeof("FreeRTOS Init\n"), HAL_MAX_DELAY);
		UART2_write("FreeRTOS Init: Queue Command Processing Demo\n");
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <main+0x124>)
 8000778:	f7ff ff84 	bl	8000684 <UART2_write>
		/* Init scheduler */
		//osKernelInitialize();

		/* Start scheduler */
		//osKernelStart();
		vTaskStartScheduler();
 800077c:	f003 fd18 	bl	80041b0 <vTaskStartScheduler>
 8000780:	e002      	b.n	8000788 <main+0xd8>

	}else
	{
		UART2_write("Queue Creation Failed\n");
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <main+0x128>)
 8000784:	f7ff ff7e 	bl	8000684 <UART2_write>
	}

	while (1);
 8000788:	e7fe      	b.n	8000788 <main+0xd8>
 800078a:	bf00      	nop
 800078c:	e0001000 	.word	0xe0001000
 8000790:	20015c84 	.word	0x20015c84
 8000794:	20015c44 	.word	0x20015c44
 8000798:	20000168 	.word	0x20000168
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	0800836c 	.word	0x0800836c
 80007a4:	20000158 	.word	0x20000158
 80007a8:	08008388 	.word	0x08008388
 80007ac:	08000961 	.word	0x08000961
 80007b0:	2000015c 	.word	0x2000015c
 80007b4:	08008394 	.word	0x08008394
 80007b8:	08000999 	.word	0x08000999
 80007bc:	20000160 	.word	0x20000160
 80007c0:	080083a8 	.word	0x080083a8
 80007c4:	080009fd 	.word	0x080009fd
 80007c8:	20000164 	.word	0x20000164
 80007cc:	080083bc 	.word	0x080083bc
 80007d0:	08000aa5 	.word	0x08000aa5
 80007d4:	080083d0 	.word	0x080083d0
 80007d8:	08008400 	.word	0x08008400

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b096      	sub	sp, #88	; 0x58
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e6:	2230      	movs	r2, #48	; 0x30
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 f9ae 	bl	8007b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000820:	2308      	movs	r3, #8
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000824:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082e:	2307      	movs	r3, #7
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000836:	4618      	mov	r0, r3
 8000838:	f000 ff48 	bl	80016cc <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000842:	f000 fabb 	bl	8000dbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000852:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2105      	movs	r1, #5
 8000864:	4618      	mov	r0, r3
 8000866:	f001 f9a1 	bl	8001bac <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000870:	f000 faa4 	bl	8000dbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000878:	23c0      	movs	r3, #192	; 0xc0
 800087a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fb84 	bl	8001f90 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800088e:	f000 fa95 	bl	8000dbc <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3758      	adds	r7, #88	; 0x58
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <GPIO_Init>:

/**
  * @brief  Function of gpio init.
  * @retval None
  */
void GPIO_Init(void){
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <GPIO_Init+0xa8>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a22      	ldr	r2, [pc, #136]	; (8000944 <GPIO_Init+0xa8>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <GPIO_Init+0xa8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <GPIO_Init+0xa8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <GPIO_Init+0xa8>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <GPIO_Init+0xa8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]


/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4815      	ldr	r0, [pc, #84]	; (8000948 <GPIO_Init+0xac>)
 80008f2:	f000 feb7 	bl	8001664 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(BUTTON_PORT, BUTTON_PIN, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <GPIO_Init+0xb0>)
 80008fc:	f000 feb2 	bl	8001664 <HAL_GPIO_WritePin>


/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = LED_GREEN_PIN;
 8000900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000904:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <GPIO_Init+0xac>)
 800091a:	f000 fcf1 	bl	8001300 <HAL_GPIO_Init>

/*Configure GPIO pins BUTTON */
GPIO_InitStruct.Pin = BUTTON_PIN;
 800091e:	2301      	movs	r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <GPIO_Init+0xb0>)
 8000936:	f000 fce3 	bl	8001300 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000

08000950 <RTC_Init>:

static void RTC_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
  {
    Error_Handler();
  }
*/
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <vTask1_menu_display>:

void vTask1_menu_display(void *params)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	//Apunto puntero al string menu
	char *pData = menu;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <vTask1_menu_display+0x30>)
 800096a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		xQueueSend(uart_write_queue,&pData,portMAX_DELAY);
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <vTask1_menu_display+0x34>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	f107 010c 	add.w	r1, r7, #12
 8000974:	2300      	movs	r3, #0
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	f002 fd7b 	bl	8003474 <xQueueGenericSend>

		//Esperamos hasta que exista una notifiacion.
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2000      	movs	r0, #0
 8000988:	f004 f91e 	bl	8004bc8 <xTaskNotifyWait>
		xQueueSend(uart_write_queue,&pData,portMAX_DELAY);
 800098c:	e7ee      	b.n	800096c <vTask1_menu_display+0xc>
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	2000016c 	.word	0x2000016c

08000998 <vTask2_cmd_handling>:

	}
}

void vTask2_cmd_handling(void *params)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

	uint8_t command_code=0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
	APP_CMD_t *new_cmd;

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f004 f90b 	bl	8004bc8 <xTaskNotifyWait>
		//1. send command to queue
		new_cmd = (APP_CMD_t*) pvPortMalloc(sizeof(APP_CMD_t));
 80009b2:	200b      	movs	r0, #11
 80009b4:	f005 f892 	bl	8005adc <pvPortMalloc>
 80009b8:	4603      	mov	r3, r0
 80009ba:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80009bc:	f004 ff26 	bl	800580c <vPortEnterCritical>
		command_code = getCommandCode(command_buffer);
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <vTask2_cmd_handling+0x5c>)
 80009c2:	f000 f8d7 	bl	8000b74 <getCommandCode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	73fb      	strb	r3, [r7, #15]
		new_cmd->COMMAND_NUM = command_code;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	7bfa      	ldrb	r2, [r7, #15]
 80009ce:	701a      	strb	r2, [r3, #0]
		getArguments(new_cmd->COMMAND_ARGS);
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f8db 	bl	8000b90 <getArguments>
		taskEXIT_CRITICAL();
 80009da:	f004 ff45 	bl	8005868 <vPortExitCritical>

		//send the command to the command queue
		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <vTask2_cmd_handling+0x60>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	f107 0108 	add.w	r1, r7, #8
 80009e6:	2300      	movs	r3, #0
 80009e8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ec:	f002 fd42 	bl	8003474 <xQueueGenericSend>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80009f0:	e7d8      	b.n	80009a4 <vTask2_cmd_handling+0xc>
 80009f2:	bf00      	nop
 80009f4:	20015d0c 	.word	0x20015d0c
 80009f8:	20000168 	.word	0x20000168

080009fc <vTask3_cmd_processing>:
	}

}

void vTask3_cmd_processing(void *params)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	; 0x48
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	APP_CMD_t *new_cmd;
	char task_msg[50];

	uint32_t toggle_duration = pdMS_TO_TICKS(500);
 8000a04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a08:	647b      	str	r3, [r7, #68]	; 0x44

	while(1)
	{
		xQueueReceive(command_queue,(void*)&new_cmd,portMAX_DELAY);
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <vTask3_cmd_processing+0xa4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000a12:	f04f 32ff 	mov.w	r2, #4294967295
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fef6 	bl	8003808 <xQueueReceive>

		if(new_cmd->COMMAND_NUM == LED_ON_COMMAND)
 8000a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d102      	bne.n	8000a2a <vTask3_cmd_processing+0x2e>
		{
			make_led_on();
 8000a24:	f000 f8e2 	bl	8000bec <make_led_on>
 8000a28:	e035      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == LED_OFF_COMMAND)
 8000a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d102      	bne.n	8000a38 <vTask3_cmd_processing+0x3c>
		{
			make_led_off();
 8000a32:	f000 f8e7 	bl	8000c04 <make_led_off>
 8000a36:	e02e      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_COMMAND)
 8000a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d103      	bne.n	8000a48 <vTask3_cmd_processing+0x4c>
		{
			led_toggle_start(toggle_duration);
 8000a40:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a42:	f000 f90d 	bl	8000c60 <led_toggle_start>
 8000a46:	e026      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == LED_TOGGLE_STOP_COMMAND)
 8000a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d102      	bne.n	8000a56 <vTask3_cmd_processing+0x5a>
		{
			led_toggle_stop();
 8000a50:	f000 f940 	bl	8000cd4 <led_toggle_stop>
 8000a54:	e01f      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == LED_READ_STATUS_COMMAND)
 8000a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	d105      	bne.n	8000a6a <vTask3_cmd_processing+0x6e>
		{
			read_led_status(task_msg);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f8da 	bl	8000c1c <read_led_status>
 8000a68:	e015      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == RTC_READ_DATE_TIME_COMMAND )
 8000a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d105      	bne.n	8000a7e <vTask3_cmd_processing+0x82>
		{
			read_rtc_info(task_msg);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f93e 	bl	8000cf8 <read_rtc_info>
 8000a7c:	e00b      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}
		else if(new_cmd->COMMAND_NUM == EXIT_APP )
 8000a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d102      	bne.n	8000a8c <vTask3_cmd_processing+0x90>
		{
			exit_app();
 8000a86:	f000 f965 	bl	8000d54 <exit_app>
 8000a8a:	e004      	b.n	8000a96 <vTask3_cmd_processing+0x9a>
		}else
		{
			print_error_message(task_msg);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f887 	bl	8000ba4 <print_error_message>
		}

		//lets free the allocated memory for the new command
		vPortFree(new_cmd);
 8000a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f005 f8e5 	bl	8005c68 <vPortFree>
		xQueueReceive(command_queue,(void*)&new_cmd,portMAX_DELAY);
 8000a9e:	e7b4      	b.n	8000a0a <vTask3_cmd_processing+0xe>
 8000aa0:	20000168 	.word	0x20000168

08000aa4 <vTask4_cmd_uart_write>:

	}
}

void vTask4_cmd_uart_write(void *params)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	char *pData = NULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//Leemos la cola
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <vTask4_cmd_uart_write+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f107 010c 	add.w	r1, r7, #12
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fea3 	bl	8003808 <xQueueReceive>
		UART2_write(pData);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fddd 	bl	8000684 <UART2_write>
		xQueueReceive(uart_write_queue, &pData, portMAX_DELAY);
 8000aca:	e7f1      	b.n	8000ab0 <vTask4_cmd_uart_write+0xc>
 8000acc:	2000016c 	.word	0x2000016c

08000ad0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]

	if(HAL_UART_Receive_IT(&huart2,&data_byte,sizeof(data_byte)) == HAL_OK){
 8000adc:	2201      	movs	r2, #1
 8000ade:	491e      	ldr	r1, [pc, #120]	; (8000b58 <HAL_UART_RxCpltCallback+0x88>)
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <HAL_UART_RxCpltCallback+0x8c>)
 8000ae2:	f001 fc1d 	bl	8002320 <HAL_UART_Receive_IT>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d125      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x68>

		command_buffer[command_len++] = data_byte;// & 0xFF;
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_UART_RxCpltCallback+0x90>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	b2d1      	uxtb	r1, r2
 8000af4:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <HAL_UART_RxCpltCallback+0x90>)
 8000af6:	7011      	strb	r1, [r2, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_UART_RxCpltCallback+0x88>)
 8000afc:	7819      	ldrb	r1, [r3, #0]
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <HAL_UART_RxCpltCallback+0x94>)
 8000b00:	5499      	strb	r1, [r3, r2]
		if(data_byte == '\r')
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_RxCpltCallback+0x88>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b0d      	cmp	r3, #13
 8000b08:	d116      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0x68>
		{
			//Reinicio command lenght
			command_len=0;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_UART_RxCpltCallback+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
			//El usuario termino de entregar el dato
			//Notificamos que el comando se ha recibido
			xTaskNotifyFromISR(xTaskHandler2,0,eNoAction,&xHigherPriorityTaskWoken);
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_RxCpltCallback+0x98>)
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f004 f8b6 	bl	8004c90 <xTaskGenericNotifyFromISR>
			xTaskNotifyFromISR(xTaskHandler1,0,eNoAction,&xHigherPriorityTaskWoken);
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_RxCpltCallback+0x9c>)
 8000b26:	6818      	ldr	r0, [r3, #0]
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	f004 f8ac 	bl	8004c90 <xTaskGenericNotifyFromISR>
		}
	}

	//Liberamos la CPU a la siguiente tarea.
	if(xHigherPriorityTaskWoken){
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <HAL_UART_RxCpltCallback+0x7e>
		taskYIELD();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_UART_RxCpltCallback+0xa0>)
 8000b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	f3bf 8f4f 	dsb	sy
 8000b4a:	f3bf 8f6f 	isb	sy
	}
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20015c84 	.word	0x20015c84
 8000b5c:	20015c44 	.word	0x20015c44
 8000b60:	20000170 	.word	0x20000170
 8000b64:	20015d0c 	.word	0x20015d0c
 8000b68:	2000015c 	.word	0x2000015c
 8000b6c:	20000158 	.word	0x20000158
 8000b70:	e000ed04 	.word	0xe000ed04

08000b74 <getCommandCode>:

uint8_t getCommandCode(uint8_t *buffer)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

	return buffer[0]-48;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3b30      	subs	r3, #48	; 0x30
 8000b82:	b2db      	uxtb	r3, r3
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <getArguments>:


void getArguments(uint8_t *buffer)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]


}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <print_error_message>:

void print_error_message(char *task_msg)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	sprintf( task_msg,"\r\nInvalid command received\r\n");
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <print_error_message+0x40>)
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb6:	6028      	str	r0, [r5, #0]
 8000bb8:	6069      	str	r1, [r5, #4]
 8000bba:	60aa      	str	r2, [r5, #8]
 8000bbc:	60eb      	str	r3, [r5, #12]
 8000bbe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000bc0:	6128      	str	r0, [r5, #16]
 8000bc2:	6169      	str	r1, [r5, #20]
 8000bc4:	61aa      	str	r2, [r5, #24]
 8000bc6:	7823      	ldrb	r3, [r4, #0]
 8000bc8:	772b      	strb	r3, [r5, #28]
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <print_error_message+0x44>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	1d39      	adds	r1, r7, #4
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd6:	f002 fc4d 	bl	8003474 <xQueueGenericSend>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	08008418 	.word	0x08008418
 8000be8:	2000016c 	.word	0x2000016c

08000bec <make_led_on>:

void make_led_on(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_PORT,LED_GREEN_PIN,SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf6:	4802      	ldr	r0, [pc, #8]	; (8000c00 <make_led_on+0x14>)
 8000bf8:	f000 fd34 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <make_led_off>:


void make_led_off(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_PORT,LED_GREEN_PIN,RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <make_led_off+0x14>)
 8000c10:	f000 fd28 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <read_led_status>:

void read_led_status(char *task_msg)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	sprintf(task_msg , "\r\nLED status is : %d\r\n", HAL_GPIO_ReadPin(LED_GREEN_PORT,LED_GREEN_PIN));
 8000c24:	687c      	ldr	r4, [r7, #4]
 8000c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2a:	480a      	ldr	r0, [pc, #40]	; (8000c54 <read_led_status+0x38>)
 8000c2c:	f000 fd02 	bl	8001634 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	461a      	mov	r2, r3
 8000c34:	4908      	ldr	r1, [pc, #32]	; (8000c58 <read_led_status+0x3c>)
 8000c36:	4620      	mov	r0, r4
 8000c38:	f006 ff90 	bl	8007b5c <siprintf>
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <read_led_status+0x40>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	1d39      	adds	r1, r7, #4
 8000c42:	2300      	movs	r3, #0
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	f002 fc14 	bl	8003474 <xQueueGenericSend>
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	08008438 	.word	0x08008438
 8000c5c:	2000016c 	.word	0x2000016c

08000c60 <led_toggle_start>:

void led_toggle_start(uint32_t duration)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	6078      	str	r0, [r7, #4]
	if(led_timer_handle==NULL){
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <led_toggle_start+0x48>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10a      	bne.n	8000c86 <led_toggle_start+0x26>

		//1-Creamos timer por software
		led_timer_handle = xTimerCreate("LED_TIMER", duration, pdTRUE, NULL, led_toggle);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <led_toggle_start+0x4c>)
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2201      	movs	r2, #1
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <led_toggle_start+0x50>)
 8000c7c:	f004 f9a2 	bl	8004fc4 <xTimerCreate>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <led_toggle_start+0x48>)
 8000c84:	601a      	str	r2, [r3, #0]
	}

	//2-Start
	xTimerStart(led_timer_handle,portMAX_DELAY);
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <led_toggle_start+0x48>)
 8000c88:	681c      	ldr	r4, [r3, #0]
 8000c8a:	f003 fba3 	bl	80043d4 <xTaskGetTickCount>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2300      	movs	r3, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f004 f9e4 	bl	8005068 <xTimerGenericCommand>
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	20000174 	.word	0x20000174
 8000cac:	08000cb5 	.word	0x08000cb5
 8000cb0:	08008450 	.word	0x08008450

08000cb4 <led_toggle>:

void led_toggle(TimerHandle_t xTimer){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GREEN_PORT, LED_GREEN_PIN);
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <led_toggle+0x1c>)
 8000cc2:	f000 fce8 	bl	8001696 <HAL_GPIO_TogglePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020c00 	.word	0x40020c00

08000cd4 <led_toggle_stop>:

void led_toggle_stop(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af02      	add	r7, sp, #8
	xTimerStop(led_timer_handle,portMAX_DELAY);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <led_toggle_stop+0x20>)
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2103      	movs	r1, #3
 8000cea:	f004 f9bd 	bl	8005068 <xTimerGenericCommand>
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000174 	.word	0x20000174

08000cf8 <read_rtc_info>:

void read_rtc_info(char *task_msg)
{
 8000cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
			sTime1.Hours,sTime1.Minutes,sTime1.Hours,sDate1.Date,sDate1.Month,sDate1.Year);

	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
	*/

	sprintf(task_msg,"\r\nTime: 00:00:00 \r\n Date : 01-01-2020 \r\n");
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <read_rtc_info+0x54>)
 8000d04:	4614      	mov	r4, r2
 8000d06:	469c      	mov	ip, r3
 8000d08:	f104 0e20 	add.w	lr, r4, #32
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4626      	mov	r6, r4
 8000d10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d12:	6028      	str	r0, [r5, #0]
 8000d14:	6069      	str	r1, [r5, #4]
 8000d16:	60aa      	str	r2, [r5, #8]
 8000d18:	60eb      	str	r3, [r5, #12]
 8000d1a:	3410      	adds	r4, #16
 8000d1c:	f10c 0c10 	add.w	ip, ip, #16
 8000d20:	4574      	cmp	r4, lr
 8000d22:	d1f3      	bne.n	8000d0c <read_rtc_info+0x14>
 8000d24:	4662      	mov	r2, ip
 8000d26:	4623      	mov	r3, r4
 8000d28:	cb03      	ldmia	r3!, {r0, r1}
 8000d2a:	6010      	str	r0, [r2, #0]
 8000d2c:	6051      	str	r1, [r2, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	7213      	strb	r3, [r2, #8]
	xQueueSend(uart_write_queue,&task_msg,portMAX_DELAY);
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <read_rtc_info+0x58>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	1d39      	adds	r1, r7, #4
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3e:	f002 fb99 	bl	8003474 <xQueueGenericSend>
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800845c 	.word	0x0800845c
 8000d50:	2000016c 	.word	0x2000016c

08000d54 <exit_app>:

void exit_app(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

taskENTER_CRITICAL();
 8000d58:	f004 fd58 	bl	800580c <vPortEnterCritical>
UART2_write("Se eliminan tareas, se deshabilita IRQ UART y se activa Sleep Mode...");
 8000d5c:	480e      	ldr	r0, [pc, #56]	; (8000d98 <exit_app+0x44>)
 8000d5e:	f7ff fc91 	bl	8000684 <UART2_write>

//Borro las tareas
vTaskDelete(xTaskHandler1);
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <exit_app+0x48>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 f986 	bl	8004078 <vTaskDelete>
vTaskDelete(xTaskHandler2);
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <exit_app+0x4c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 f981 	bl	8004078 <vTaskDelete>
vTaskDelete(xTaskHandler3);
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <exit_app+0x50>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 f97c 	bl	8004078 <vTaskDelete>
vTaskDelete(xTaskHandler4);
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <exit_app+0x54>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 f977 	bl	8004078 <vTaskDelete>

//Desactivo las interrupcion UART
/* USART2 interrupt Init */
HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000d8a:	2026      	movs	r0, #38	; 0x26
 8000d8c:	f000 fa7b 	bl	8001286 <HAL_NVIC_DisableIRQ>
taskEXIT_CRITICAL();
 8000d90:	f004 fd6a 	bl	8005868 <vPortExitCritical>

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08008488 	.word	0x08008488
 8000d9c:	20000158 	.word	0x20000158
 8000da0:	2000015c 	.word	0x2000015c
 8000da4:	20000160 	.word	0x20000160
 8000da8:	20000164 	.word	0x20000164

08000dac <vApplicationIdleHook>:


void vApplicationIdleHook(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
	//Envio a normal sleep mode
	__WFI();
 8000db0:	bf30      	wfi

}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dce:	2003      	movs	r0, #3
 8000dd0:	f000 fa24 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f06f 0001 	mvn.w	r0, #1
 8000ddc:	f000 fa29 	bl	8001232 <HAL_NVIC_SetPriority>

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1d      	ldr	r2, [pc, #116]	; (8000e78 <HAL_UART_MspInit+0x94>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d133      	bne.n	8000e6e <HAL_UART_MspInit+0x8a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_UART_MspInit+0x98>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <HAL_UART_MspInit+0x9c>)
 8000e5a:	f000 fa51 	bl	8001300 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 5);
 8000e5e:	2205      	movs	r2, #5
 8000e60:	2105      	movs	r1, #5
 8000e62:	2026      	movs	r0, #38	; 0x26
 8000e64:	f000 f9e5 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f000 f9fe 	bl	800126a <HAL_NVIC_EnableIRQ>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40004400 	.word	0x40004400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eae:	f000 f8a3 	bl	8000ff8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eb2:	f004 fd39 	bl	8005928 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <USART2_IRQHandler>:
/**
  * @brief This function handles USART2 global interrupt.
  */

void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f001 fa83 	bl	80023cc <HAL_UART_IRQHandler>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20015c44 	.word	0x20015c44

08000ed0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x50>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x16>
		heap_end = &end;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <_sbrk+0x50>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <_sbrk+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_sbrk+0x50>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <_sbrk+0x50>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	466a      	mov	r2, sp
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d907      	bls.n	8000f0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000efa:	f006 fde3 	bl	8007ac4 <__errno>
 8000efe:	4602      	mov	r2, r0
 8000f00:	230c      	movs	r3, #12
 8000f02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	e006      	b.n	8000f18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <_sbrk+0x50>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <_sbrk+0x50>)
 8000f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000178 	.word	0x20000178
 8000f24:	20015e10 	.word	0x20015e10

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0x28>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SystemInit+0x28>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x28>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94d 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	200f      	movs	r0, #15
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff ff1f 	bl	8000dca <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f973 	bl	80012a2 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f92d 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000c8 	.word	0x200000c8
 8000ff0:	200000d0 	.word	0x200000d0
 8000ff4:	200000cc 	.word	0x200000cc

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000d0 	.word	0x200000d0
 800101c:	20015d20 	.word	0x20015d20

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20015d20 	.word	0x20015d20

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	; (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db10      	blt.n	800110c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <__NVIC_DisableIRQ+0x40>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	3320      	adds	r3, #32
 8001100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001108:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff07 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff1c 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff0f 	bl	800109c <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff1f 	bl	80010d8 <__NVIC_DisableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff94 	bl	80011d8 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d004      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e00c      	b.n	80012f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2205      	movs	r2, #5
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	e16b      	b.n	80015f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 815a 	bne.w	80015ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d00b      	beq.n	800135a <HAL_GPIO_Init+0x5a>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800134e:	2b11      	cmp	r3, #17
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b12      	cmp	r3, #18
 8001358:	d130      	bne.n	80013bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001390:	2201      	movs	r2, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f003 0201 	and.w	r2, r3, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0xfc>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b12      	cmp	r3, #18
 80013fa:	d123      	bne.n	8001444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	08da      	lsrs	r2, r3, #3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3208      	adds	r2, #8
 800143e:	69b9      	ldr	r1, [r7, #24]
 8001440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0203 	and.w	r2, r3, #3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80b4 	beq.w	80015ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_GPIO_Init+0x308>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a5e      	ldr	r2, [pc, #376]	; (8001608 <HAL_GPIO_Init+0x308>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_GPIO_Init+0x308>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a2:	4a5a      	ldr	r2, [pc, #360]	; (800160c <HAL_GPIO_Init+0x30c>)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	220f      	movs	r2, #15
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_GPIO_Init+0x310>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d02b      	beq.n	8001526 <HAL_GPIO_Init+0x226>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a50      	ldr	r2, [pc, #320]	; (8001614 <HAL_GPIO_Init+0x314>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x222>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x318>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x21e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x31c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x21a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_GPIO_Init+0x320>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x216>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x324>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x212>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x328>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x20e>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x32c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x20a>
 8001506:	2307      	movs	r3, #7
 8001508:	e00e      	b.n	8001528 <HAL_GPIO_Init+0x228>
 800150a:	2308      	movs	r3, #8
 800150c:	e00c      	b.n	8001528 <HAL_GPIO_Init+0x228>
 800150e:	2306      	movs	r3, #6
 8001510:	e00a      	b.n	8001528 <HAL_GPIO_Init+0x228>
 8001512:	2305      	movs	r3, #5
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x228>
 8001516:	2304      	movs	r3, #4
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x228>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x228>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x228>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x228>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4934      	ldr	r1, [pc, #208]	; (800160c <HAL_GPIO_Init+0x30c>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <HAL_GPIO_Init+0x330>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a31      	ldr	r2, [pc, #196]	; (8001630 <HAL_GPIO_Init+0x330>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_GPIO_Init+0x330>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a26      	ldr	r2, [pc, #152]	; (8001630 <HAL_GPIO_Init+0x330>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_GPIO_Init+0x330>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_GPIO_Init+0x330>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_GPIO_Init+0x330>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a11      	ldr	r2, [pc, #68]	; (8001630 <HAL_GPIO_Init+0x330>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f ae90 	bls.w	800131c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	3724      	adds	r7, #36	; 0x24
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023800 	.word	0x40023800
 800160c:	40013800 	.word	0x40013800
 8001610:	40020000 	.word	0x40020000
 8001614:	40020400 	.word	0x40020400
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021000 	.word	0x40021000
 8001624:	40021400 	.word	0x40021400
 8001628:	40021800 	.word	0x40021800
 800162c:	40021c00 	.word	0x40021c00
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	887b      	ldrh	r3, [r7, #2]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e001      	b.n	8001656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	619a      	str	r2, [r3, #24]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	887b      	ldrh	r3, [r7, #2]
 80016a8:	401a      	ands	r2, r3
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d104      	bne.n	80016ba <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	041a      	lsls	r2, r3, #16
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e25b      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d075      	beq.n	80017d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ea:	4ba3      	ldr	r3, [pc, #652]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d00c      	beq.n	8001710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d112      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001702:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170e:	d10b      	bne.n	8001728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d05b      	beq.n	80017d4 <HAL_RCC_OscConfig+0x108>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d157      	bne.n	80017d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e236      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x74>
 8001732:	4b91      	ldr	r3, [pc, #580]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a90      	ldr	r2, [pc, #576]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a87      	ldr	r2, [pc, #540]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xb0>
 8001764:	4b84      	ldr	r3, [pc, #528]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a83      	ldr	r2, [pc, #524]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a80      	ldr	r2, [pc, #512]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc4c 	bl	8001020 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fc48 	bl	8001020 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1fb      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xc0>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fc38 	bl	8001020 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc34 	bl	8001020 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1e7      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0xe8>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ee:	4b62      	ldr	r3, [pc, #392]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1bb      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4952      	ldr	r1, [pc, #328]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_OscConfig+0x2b0>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fbed 	bl	8001020 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fbe9 	bl	8001020 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e19c      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4940      	ldr	r1, [pc, #256]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_OscConfig+0x2b0>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fbcc 	bl	8001020 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fbc8 	bl	8001020 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17b      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d030      	beq.n	8001918 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d016      	beq.n	80018ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x2b4>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fbac 	bl	8001020 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fba8 	bl	8001020 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e15b      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x200>
 80018ea:	e015      	b.n	8001918 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_RCC_OscConfig+0x2b4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb95 	bl	8001020 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fb91 	bl	8001020 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e144      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800190e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a0 	beq.w	8001a66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d121      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff fb57 	bl	8001020 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e011      	b.n	800199a <HAL_RCC_OscConfig+0x2ce>
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
 8001984:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001988:	f7ff fb4a 	bl	8001020 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0fd      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199a:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x4d4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d106      	bne.n	80019bc <HAL_RCC_OscConfig+0x2f0>
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a7c      	ldr	r2, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ba:	e01c      	b.n	80019f6 <HAL_RCC_OscConfig+0x32a>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d10c      	bne.n	80019de <HAL_RCC_OscConfig+0x312>
 80019c4:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a76      	ldr	r2, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	4b74      	ldr	r3, [pc, #464]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	4a73      	ldr	r2, [pc, #460]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6713      	str	r3, [r2, #112]	; 0x70
 80019dc:	e00b      	b.n	80019f6 <HAL_RCC_OscConfig+0x32a>
 80019de:	4b71      	ldr	r3, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a70      	ldr	r2, [pc, #448]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ee:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 80019f0:	f023 0304 	bic.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d015      	beq.n	8001a2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb0f 	bl	8001020 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb0b 	bl	8001020 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0bc      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ee      	beq.n	8001a06 <HAL_RCC_OscConfig+0x33a>
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff faf9 	bl	8001020 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff faf5 	bl	8001020 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0a6      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ee      	bne.n	8001a32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d105      	bne.n	8001a66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5a:	4b52      	ldr	r3, [pc, #328]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8092 	beq.w	8001b94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d05c      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d141      	bne.n	8001b08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <HAL_RCC_OscConfig+0x4dc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fac9 	bl	8001020 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff fac5 	bl	8001020 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e078      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69da      	ldr	r2, [r3, #28]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	019b      	lsls	r3, r3, #6
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	4933      	ldr	r1, [pc, #204]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ada:	4b33      	ldr	r3, [pc, #204]	; (8001ba8 <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa9e 	bl	8001020 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fa9a 	bl	8001020 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e04d      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
 8001b06:	e045      	b.n	8001b94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_OscConfig+0x4dc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa87 	bl	8001020 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fa83 	bl	8001020 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e036      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x44a>
 8001b34:	e02e      	b.n	8001b94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e029      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x4d8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d115      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d10d      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	42470060 	.word	0x42470060

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0cc      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d90c      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0b8      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d020      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	494d      	ldr	r1, [pc, #308]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d044      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d119      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e07f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e067      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4934      	ldr	r1, [pc, #208]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f9c0 	bl	8001020 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff f9bc 	bl	8001020 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e04f      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d20c      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e032      	b.n	8001d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4916      	ldr	r1, [pc, #88]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490e      	ldr	r1, [pc, #56]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f821 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	fa21 f303 	lsr.w	r3, r1, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f920 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	080085a4 	.word	0x080085a4
 8001d70:	200000c8 	.word	0x200000c8
 8001d74:	200000cc 	.word	0x200000cc

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d007      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x32>
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d008      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x38>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80b4 	bne.w	8001f0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001da6:	60bb      	str	r3, [r7, #8]
       break;
 8001da8:	e0b3      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b5e      	ldr	r3, [pc, #376]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dac:	60bb      	str	r3, [r7, #8]
      break;
 8001dae:	e0b0      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db0:	4b5a      	ldr	r3, [pc, #360]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04a      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	ea03 0501 	and.w	r5, r3, r1
 8001ddc:	ea04 0602 	and.w	r6, r4, r2
 8001de0:	4629      	mov	r1, r5
 8001de2:	4632      	mov	r2, r6
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	f04f 0400 	mov.w	r4, #0
 8001dec:	0154      	lsls	r4, r2, #5
 8001dee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df2:	014b      	lsls	r3, r1, #5
 8001df4:	4619      	mov	r1, r3
 8001df6:	4622      	mov	r2, r4
 8001df8:	1b49      	subs	r1, r1, r5
 8001dfa:	eb62 0206 	sbc.w	r2, r2, r6
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	0194      	lsls	r4, r2, #6
 8001e08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e0c:	018b      	lsls	r3, r1, #6
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	eb64 0402 	sbc.w	r4, r4, r2
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	00e2      	lsls	r2, r4, #3
 8001e1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e22:	00d9      	lsls	r1, r3, #3
 8001e24:	460b      	mov	r3, r1
 8001e26:	4614      	mov	r4, r2
 8001e28:	195b      	adds	r3, r3, r5
 8001e2a:	eb44 0406 	adc.w	r4, r4, r6
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	0262      	lsls	r2, r4, #9
 8001e38:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e3c:	0259      	lsls	r1, r3, #9
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	4621      	mov	r1, r4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f04f 0400 	mov.w	r4, #0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	f7fe fa6e 	bl	8000330 <__aeabi_uldivmod>
 8001e54:	4603      	mov	r3, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e049      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5c:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	f04f 0400 	mov.w	r4, #0
 8001e66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	ea03 0501 	and.w	r5, r3, r1
 8001e72:	ea04 0602 	and.w	r6, r4, r2
 8001e76:	4629      	mov	r1, r5
 8001e78:	4632      	mov	r2, r6
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f04f 0400 	mov.w	r4, #0
 8001e82:	0154      	lsls	r4, r2, #5
 8001e84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e88:	014b      	lsls	r3, r1, #5
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	1b49      	subs	r1, r1, r5
 8001e90:	eb62 0206 	sbc.w	r2, r2, r6
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	f04f 0400 	mov.w	r4, #0
 8001e9c:	0194      	lsls	r4, r2, #6
 8001e9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ea2:	018b      	lsls	r3, r1, #6
 8001ea4:	1a5b      	subs	r3, r3, r1
 8001ea6:	eb64 0402 	sbc.w	r4, r4, r2
 8001eaa:	f04f 0100 	mov.w	r1, #0
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	00e2      	lsls	r2, r4, #3
 8001eb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eb8:	00d9      	lsls	r1, r3, #3
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	195b      	adds	r3, r3, r5
 8001ec0:	eb44 0406 	adc.w	r4, r4, r6
 8001ec4:	f04f 0100 	mov.w	r1, #0
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	02a2      	lsls	r2, r4, #10
 8001ece:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ed2:	0299      	lsls	r1, r3, #10
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4621      	mov	r1, r4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f04f 0400 	mov.w	r4, #0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	f7fe fa23 	bl	8000330 <__aeabi_uldivmod>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	3301      	adds	r3, #1
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	60bb      	str	r3, [r7, #8]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f0e:	60bb      	str	r3, [r7, #8]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	68bb      	ldr	r3, [r7, #8]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	00f42400 	.word	0x00f42400
 8001f24:	007a1200 	.word	0x007a1200

08001f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200000c8 	.word	0x200000c8

08001f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f48:	4601      	mov	r1, r0
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	080085b4 	.word	0x080085b4

08001f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f6c:	f7ff ffdc 	bl	8001f28 <HAL_RCC_GetHCLKFreq>
 8001f70:	4601      	mov	r1, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0b5b      	lsrs	r3, r3, #13
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	080085b4 	.word	0x080085b4

08001f90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d035      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001fb8:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fbe:	f7ff f82f 	bl	8001020 <HAL_GetTick>
 8001fc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fc6:	f7ff f82b 	bl	8001020 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0b0      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fd8:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	019a      	lsls	r2, r3, #6
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	071b      	lsls	r3, r3, #28
 8001ff0:	4955      	ldr	r1, [pc, #340]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff f80f 	bl	8001020 <HAL_GetTick>
 8002002:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002006:	f7ff f80b 	bl	8001020 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e090      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002018:	4b4b      	ldr	r3, [pc, #300]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8083 	beq.w	8002138 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a43      	ldr	r2, [pc, #268]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002058:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800205a:	f7fe ffe1 	bl	8001020 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe ffdd 	bl	8001020 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e062      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02f      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	429a      	cmp	r2, r3
 800209c:	d028      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800209e:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d114      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe ffab 	bl	8001020 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe ffa7 	bl	8001020 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e02a      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020fc:	d10d      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800210e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002112:	490d      	ldr	r1, [pc, #52]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e005      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002120:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002128:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	4905      	ldr	r1, [pc, #20]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002134:	4313      	orrs	r3, r2
 8002136:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	42470068 	.word	0x42470068
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470e40 	.word	0x42470e40

08002154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e03f      	b.n	80021e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fe fe32 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2224      	movs	r2, #36	; 0x24
 8002184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fb97 	bl	80028cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b088      	sub	sp, #32
 80021f2:	af02      	add	r7, sp, #8
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b20      	cmp	r3, #32
 800220c:	f040 8083 	bne.w	8002316 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_UART_Transmit+0x2e>
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e07b      	b.n	8002318 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_UART_Transmit+0x40>
 800222a:	2302      	movs	r3, #2
 800222c:	e074      	b.n	8002318 <HAL_UART_Transmit+0x12a>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2221      	movs	r2, #33	; 0x21
 8002240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002244:	f7fe feec 	bl	8001020 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	88fa      	ldrh	r2, [r7, #6]
 8002254:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800225e:	e042      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002276:	d122      	bne.n	80022be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f9b6 	bl	80025f4 <UART_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e042      	b.n	8002318 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3302      	adds	r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	e017      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e013      	b.n	80022e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f993 	bl	80025f4 <UART_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e01f      	b.n	8002318 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1b7      	bne.n	8002260 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2200      	movs	r2, #0
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f97a 	bl	80025f4 <UART_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e006      	b.n	8002318 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002316:	2302      	movs	r3, #2
  }
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	d140      	bne.n	80023bc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_UART_Receive_IT+0x26>
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e039      	b.n	80023be <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_UART_Receive_IT+0x38>
 8002354:	2302      	movs	r3, #2
 8002356:	e032      	b.n	80023be <HAL_UART_Receive_IT+0x9e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	88fa      	ldrh	r2, [r7, #6]
 800236a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2222      	movs	r2, #34	; 0x22
 800237c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002396:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0220 	orr.w	r2, r2, #32
 80023b6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_UART_IRQHandler+0x52>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9d6 	bl	80027c8 <UART_Receive_IT>
      return;
 800241c:	e0d1      	b.n	80025c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80b0 	beq.w	8002586 <HAL_UART_IRQHandler+0x1ba>
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <HAL_UART_IRQHandler+0x70>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80a5 	beq.w	8002586 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_UART_IRQHandler+0x90>
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00a      	beq.n	800247c <HAL_UART_IRQHandler+0xb0>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_UART_IRQHandler+0xd0>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	f043 0204 	orr.w	r2, r3, #4
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <HAL_UART_IRQHandler+0xfa>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_UART_IRQHandler+0xee>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	f043 0208 	orr.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d078      	beq.n	80025c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_UART_IRQHandler+0x11c>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f970 	bl	80027c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_UART_IRQHandler+0x144>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d031      	beq.n	8002574 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8b9 	bl	8002688 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002520:	2b40      	cmp	r3, #64	; 0x40
 8002522:	d123      	bne.n	800256c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002532:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	4a21      	ldr	r2, [pc, #132]	; (80025c8 <HAL_UART_IRQHandler+0x1fc>)
 8002542:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe feb6 	bl	80012ba <HAL_DMA_Abort_IT>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d016      	beq.n	8002582 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800255e:	4610      	mov	r0, r2
 8002560:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002562:	e00e      	b.n	8002582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f83b 	bl	80025e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256a:	e00a      	b.n	8002582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f837 	bl	80025e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002572:	e006      	b.n	8002582 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f833 	bl	80025e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002580:	e01e      	b.n	80025c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002582:	bf00      	nop
    return;
 8002584:	e01c      	b.n	80025c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_UART_IRQHandler+0x1d6>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8a6 	bl	80026ec <UART_Transmit_IT>
    return;
 80025a0:	e00f      	b.n	80025c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_UART_IRQHandler+0x1f6>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8ee 	bl	8002798 <UART_EndTransmit_IT>
    return;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80025c0:	bf00      	nop
  }
}
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	080026c5 	.word	0x080026c5

080025cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002604:	e02c      	b.n	8002660 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d028      	beq.n	8002660 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <UART_WaitOnFlagUntilTimeout+0x30>
 8002614:	f7fe fd04 	bl	8001020 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d21d      	bcs.n	8002660 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002632:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00f      	b.n	8002680 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	429a      	cmp	r2, r3
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d0c3      	beq.n	8002606 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800269e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f7ff ff7e 	bl	80025e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b21      	cmp	r3, #33	; 0x21
 80026fe:	d144      	bne.n	800278a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002708:	d11a      	bne.n	8002740 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800271e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	1c9a      	adds	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	621a      	str	r2, [r3, #32]
 8002732:	e00e      	b.n	8002752 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	621a      	str	r2, [r3, #32]
 800273e:	e008      	b.n	8002752 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	1c59      	adds	r1, r3, #1
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6211      	str	r1, [r2, #32]
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4619      	mov	r1, r3
 8002760:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002774:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002784:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff07 	bl	80025cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b22      	cmp	r3, #34	; 0x22
 80027da:	d171      	bne.n	80028c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e4:	d123      	bne.n	800282e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	1c9a      	adds	r2, r3, #2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
 8002810:	e029      	b.n	8002866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b29b      	uxth	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
 800282c:	e01b      	b.n	8002866 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6858      	ldr	r0, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6291      	str	r1, [r2, #40]	; 0x28
 8002846:	b2c2      	uxtb	r2, r0
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e00c      	b.n	8002866 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	1c58      	adds	r0, r3, #1
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	6288      	str	r0, [r1, #40]	; 0x28
 800285e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29b      	uxth	r3, r3
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002876:	2b00      	cmp	r3, #0
 8002878:	d120      	bne.n	80028bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0220 	bic.w	r2, r2, #32
 8002888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002898:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0201 	bic.w	r2, r2, #1
 80028a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f90c 	bl	8000ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e002      	b.n	80028c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800290e:	f023 030c 	bic.w	r3, r3, #12
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	430b      	orrs	r3, r1
 800291a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293a:	f040 818b 	bne.w	8002c54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4ac1      	ldr	r2, [pc, #772]	; (8002c48 <UART_SetConfig+0x37c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d005      	beq.n	8002954 <UART_SetConfig+0x88>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4abf      	ldr	r2, [pc, #764]	; (8002c4c <UART_SetConfig+0x380>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f040 80bd 	bne.w	8002ace <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002954:	f7ff fb08 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	461d      	mov	r5, r3
 800295e:	f04f 0600 	mov.w	r6, #0
 8002962:	46a8      	mov	r8, r5
 8002964:	46b1      	mov	r9, r6
 8002966:	eb18 0308 	adds.w	r3, r8, r8
 800296a:	eb49 0409 	adc.w	r4, r9, r9
 800296e:	4698      	mov	r8, r3
 8002970:	46a1      	mov	r9, r4
 8002972:	eb18 0805 	adds.w	r8, r8, r5
 8002976:	eb49 0906 	adc.w	r9, r9, r6
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800298a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800298e:	4688      	mov	r8, r1
 8002990:	4691      	mov	r9, r2
 8002992:	eb18 0005 	adds.w	r0, r8, r5
 8002996:	eb49 0106 	adc.w	r1, r9, r6
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	461d      	mov	r5, r3
 80029a0:	f04f 0600 	mov.w	r6, #0
 80029a4:	196b      	adds	r3, r5, r5
 80029a6:	eb46 0406 	adc.w	r4, r6, r6
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	f7fd fcbf 	bl	8000330 <__aeabi_uldivmod>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	461a      	mov	r2, r3
 80029b8:	4ba5      	ldr	r3, [pc, #660]	; (8002c50 <UART_SetConfig+0x384>)
 80029ba:	fba3 2302 	umull	r2, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	461d      	mov	r5, r3
 80029c8:	f04f 0600 	mov.w	r6, #0
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46b2      	mov	sl, r6
 80029d0:	eb19 0309 	adds.w	r3, r9, r9
 80029d4:	eb4a 040a 	adc.w	r4, sl, sl
 80029d8:	4699      	mov	r9, r3
 80029da:	46a2      	mov	sl, r4
 80029dc:	eb19 0905 	adds.w	r9, r9, r5
 80029e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029f8:	4689      	mov	r9, r1
 80029fa:	4692      	mov	sl, r2
 80029fc:	eb19 0005 	adds.w	r0, r9, r5
 8002a00:	eb4a 0106 	adc.w	r1, sl, r6
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	461d      	mov	r5, r3
 8002a0a:	f04f 0600 	mov.w	r6, #0
 8002a0e:	196b      	adds	r3, r5, r5
 8002a10:	eb46 0406 	adc.w	r4, r6, r6
 8002a14:	461a      	mov	r2, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	f7fd fc8a 	bl	8000330 <__aeabi_uldivmod>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <UART_SetConfig+0x384>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a86      	ldr	r2, [pc, #536]	; (8002c50 <UART_SetConfig+0x384>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a44:	4498      	add	r8, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f04f 0600 	mov.w	r6, #0
 8002a4e:	46a9      	mov	r9, r5
 8002a50:	46b2      	mov	sl, r6
 8002a52:	eb19 0309 	adds.w	r3, r9, r9
 8002a56:	eb4a 040a 	adc.w	r4, sl, sl
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	46a2      	mov	sl, r4
 8002a5e:	eb19 0905 	adds.w	r9, r9, r5
 8002a62:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4692      	mov	sl, r2
 8002a7e:	eb19 0005 	adds.w	r0, r9, r5
 8002a82:	eb4a 0106 	adc.w	r1, sl, r6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	f04f 0600 	mov.w	r6, #0
 8002a90:	196b      	adds	r3, r5, r5
 8002a92:	eb46 0406 	adc.w	r4, r6, r6
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f7fd fc49 	bl	8000330 <__aeabi_uldivmod>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <UART_SetConfig+0x384>)
 8002aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2164      	movs	r1, #100	; 0x64
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <UART_SetConfig+0x384>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 0207 	and.w	r2, r3, #7
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4442      	add	r2, r8
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e26f      	b.n	8002fae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ace:	f7ff fa37 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	f04f 0600 	mov.w	r6, #0
 8002adc:	46a8      	mov	r8, r5
 8002ade:	46b1      	mov	r9, r6
 8002ae0:	eb18 0308 	adds.w	r3, r8, r8
 8002ae4:	eb49 0409 	adc.w	r4, r9, r9
 8002ae8:	4698      	mov	r8, r3
 8002aea:	46a1      	mov	r9, r4
 8002aec:	eb18 0805 	adds.w	r8, r8, r5
 8002af0:	eb49 0906 	adc.w	r9, r9, r6
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b08:	4688      	mov	r8, r1
 8002b0a:	4691      	mov	r9, r2
 8002b0c:	eb18 0005 	adds.w	r0, r8, r5
 8002b10:	eb49 0106 	adc.w	r1, r9, r6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f04f 0600 	mov.w	r6, #0
 8002b1e:	196b      	adds	r3, r5, r5
 8002b20:	eb46 0406 	adc.w	r4, r6, r6
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7fd fc02 	bl	8000330 <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <UART_SetConfig+0x384>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	461d      	mov	r5, r3
 8002b42:	f04f 0600 	mov.w	r6, #0
 8002b46:	46a9      	mov	r9, r5
 8002b48:	46b2      	mov	sl, r6
 8002b4a:	eb19 0309 	adds.w	r3, r9, r9
 8002b4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b52:	4699      	mov	r9, r3
 8002b54:	46a2      	mov	sl, r4
 8002b56:	eb19 0905 	adds.w	r9, r9, r5
 8002b5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b72:	4689      	mov	r9, r1
 8002b74:	4692      	mov	sl, r2
 8002b76:	eb19 0005 	adds.w	r0, r9, r5
 8002b7a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	461d      	mov	r5, r3
 8002b84:	f04f 0600 	mov.w	r6, #0
 8002b88:	196b      	adds	r3, r5, r5
 8002b8a:	eb46 0406 	adc.w	r4, r6, r6
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	f7fd fbcd 	bl	8000330 <__aeabi_uldivmod>
 8002b96:	4603      	mov	r3, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <UART_SetConfig+0x384>)
 8002b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2164      	movs	r1, #100	; 0x64
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <UART_SetConfig+0x384>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bbe:	4498      	add	r8, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	f04f 0600 	mov.w	r6, #0
 8002bc8:	46a9      	mov	r9, r5
 8002bca:	46b2      	mov	sl, r6
 8002bcc:	eb19 0309 	adds.w	r3, r9, r9
 8002bd0:	eb4a 040a 	adc.w	r4, sl, sl
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	46a2      	mov	sl, r4
 8002bd8:	eb19 0905 	adds.w	r9, r9, r5
 8002bdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bf4:	4689      	mov	r9, r1
 8002bf6:	4692      	mov	sl, r2
 8002bf8:	eb19 0005 	adds.w	r0, r9, r5
 8002bfc:	eb4a 0106 	adc.w	r1, sl, r6
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	196b      	adds	r3, r5, r5
 8002c0c:	eb46 0406 	adc.w	r4, r6, r6
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7fd fb8c 	bl	8000330 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <UART_SetConfig+0x384>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	; 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <UART_SetConfig+0x384>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 0207 	and.w	r2, r3, #7
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4442      	add	r2, r8
 8002c44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c46:	e1b2      	b.n	8002fae <UART_SetConfig+0x6e2>
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4ad7      	ldr	r2, [pc, #860]	; (8002fb8 <UART_SetConfig+0x6ec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d005      	beq.n	8002c6a <UART_SetConfig+0x39e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4ad6      	ldr	r2, [pc, #856]	; (8002fbc <UART_SetConfig+0x6f0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	f040 80d1 	bne.w	8002e0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c6a:	f7ff f97d 	bl	8001f68 <HAL_RCC_GetPCLK2Freq>
 8002c6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	469a      	mov	sl, r3
 8002c74:	f04f 0b00 	mov.w	fp, #0
 8002c78:	46d0      	mov	r8, sl
 8002c7a:	46d9      	mov	r9, fp
 8002c7c:	eb18 0308 	adds.w	r3, r8, r8
 8002c80:	eb49 0409 	adc.w	r4, r9, r9
 8002c84:	4698      	mov	r8, r3
 8002c86:	46a1      	mov	r9, r4
 8002c88:	eb18 080a 	adds.w	r8, r8, sl
 8002c8c:	eb49 090b 	adc.w	r9, r9, fp
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ca0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ca4:	4688      	mov	r8, r1
 8002ca6:	4691      	mov	r9, r2
 8002ca8:	eb1a 0508 	adds.w	r5, sl, r8
 8002cac:	eb4b 0609 	adc.w	r6, fp, r9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f04f 0400 	mov.w	r4, #0
 8002cc2:	0094      	lsls	r4, r2, #2
 8002cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4623      	mov	r3, r4
 8002cce:	4628      	mov	r0, r5
 8002cd0:	4631      	mov	r1, r6
 8002cd2:	f7fd fb2d 	bl	8000330 <__aeabi_uldivmod>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4bb8      	ldr	r3, [pc, #736]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	469b      	mov	fp, r3
 8002cec:	f04f 0c00 	mov.w	ip, #0
 8002cf0:	46d9      	mov	r9, fp
 8002cf2:	46e2      	mov	sl, ip
 8002cf4:	eb19 0309 	adds.w	r3, r9, r9
 8002cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	46a2      	mov	sl, r4
 8002d00:	eb19 090b 	adds.w	r9, r9, fp
 8002d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d1c:	4689      	mov	r9, r1
 8002d1e:	4692      	mov	sl, r2
 8002d20:	eb1b 0509 	adds.w	r5, fp, r9
 8002d24:	eb4c 060a 	adc.w	r6, ip, sl
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f04f 0400 	mov.w	r4, #0
 8002d3a:	0094      	lsls	r4, r2, #2
 8002d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d40:	008b      	lsls	r3, r1, #2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	4631      	mov	r1, r6
 8002d4a:	f7fd faf1 	bl	8000330 <__aeabi_uldivmod>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002d56:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2164      	movs	r1, #100	; 0x64
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	; 0x32
 8002d68:	4a95      	ldr	r2, [pc, #596]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d74:	4498      	add	r8, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	469b      	mov	fp, r3
 8002d7a:	f04f 0c00 	mov.w	ip, #0
 8002d7e:	46d9      	mov	r9, fp
 8002d80:	46e2      	mov	sl, ip
 8002d82:	eb19 0309 	adds.w	r3, r9, r9
 8002d86:	eb4a 040a 	adc.w	r4, sl, sl
 8002d8a:	4699      	mov	r9, r3
 8002d8c:	46a2      	mov	sl, r4
 8002d8e:	eb19 090b 	adds.w	r9, r9, fp
 8002d92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002daa:	4689      	mov	r9, r1
 8002dac:	4692      	mov	sl, r2
 8002dae:	eb1b 0509 	adds.w	r5, fp, r9
 8002db2:	eb4c 060a 	adc.w	r6, ip, sl
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	0094      	lsls	r4, r2, #2
 8002dca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dce:	008b      	lsls	r3, r1, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	f7fd faaa 	bl	8000330 <__aeabi_uldivmod>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a72      	ldr	r2, [pc, #456]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4442      	add	r2, r8
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e0d0      	b.n	8002fae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f7ff f898 	bl	8001f40 <HAL_RCC_GetPCLK1Freq>
 8002e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	469a      	mov	sl, r3
 8002e16:	f04f 0b00 	mov.w	fp, #0
 8002e1a:	46d0      	mov	r8, sl
 8002e1c:	46d9      	mov	r9, fp
 8002e1e:	eb18 0308 	adds.w	r3, r8, r8
 8002e22:	eb49 0409 	adc.w	r4, r9, r9
 8002e26:	4698      	mov	r8, r3
 8002e28:	46a1      	mov	r9, r4
 8002e2a:	eb18 080a 	adds.w	r8, r8, sl
 8002e2e:	eb49 090b 	adc.w	r9, r9, fp
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e46:	4688      	mov	r8, r1
 8002e48:	4691      	mov	r9, r2
 8002e4a:	eb1a 0508 	adds.w	r5, sl, r8
 8002e4e:	eb4b 0609 	adc.w	r6, fp, r9
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0094      	lsls	r4, r2, #2
 8002e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e6a:	008b      	lsls	r3, r1, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	4631      	mov	r1, r6
 8002e74:	f7fd fa5c 	bl	8000330 <__aeabi_uldivmod>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002e80:	fba3 2302 	umull	r2, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	469b      	mov	fp, r3
 8002e8e:	f04f 0c00 	mov.w	ip, #0
 8002e92:	46d9      	mov	r9, fp
 8002e94:	46e2      	mov	sl, ip
 8002e96:	eb19 0309 	adds.w	r3, r9, r9
 8002e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	46a2      	mov	sl, r4
 8002ea2:	eb19 090b 	adds.w	r9, r9, fp
 8002ea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	4692      	mov	sl, r2
 8002ec2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ec6:	eb4c 060a 	adc.w	r6, ip, sl
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	f04f 0400 	mov.w	r4, #0
 8002edc:	0094      	lsls	r4, r2, #2
 8002ede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ee2:	008b      	lsls	r3, r1, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	4631      	mov	r1, r6
 8002eec:	f7fd fa20 	bl	8000330 <__aeabi_uldivmod>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f16:	4498      	add	r8, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	469b      	mov	fp, r3
 8002f1c:	f04f 0c00 	mov.w	ip, #0
 8002f20:	46d9      	mov	r9, fp
 8002f22:	46e2      	mov	sl, ip
 8002f24:	eb19 0309 	adds.w	r3, r9, r9
 8002f28:	eb4a 040a 	adc.w	r4, sl, sl
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	eb19 090b 	adds.w	r9, r9, fp
 8002f34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	4692      	mov	sl, r2
 8002f50:	eb1b 0509 	adds.w	r5, fp, r9
 8002f54:	eb4c 060a 	adc.w	r6, ip, sl
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	0094      	lsls	r4, r2, #2
 8002f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f70:	008b      	lsls	r3, r1, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	4631      	mov	r1, r6
 8002f7a:	f7fd f9d9 	bl	8000330 <__aeabi_uldivmod>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f86:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2164      	movs	r1, #100	; 0x64
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	; 0x32
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4442      	add	r2, r8
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	e7ff      	b.n	8002fae <UART_SetConfig+0x6e2>
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fc4:	480d      	ldr	r0, [pc, #52]	; (8002ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc8:	480d      	ldr	r0, [pc, #52]	; (8003000 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fca:	490e      	ldr	r1, [pc, #56]	; (8003004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <LoopForever+0xe>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd0:	e002      	b.n	8002fd8 <LoopCopyDataInit>

08002fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd6:	3304      	adds	r3, #4

08002fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fdc:	d3f9      	bcc.n	8002fd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fde:	4a0b      	ldr	r2, [pc, #44]	; (800300c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fe0:	4c0b      	ldr	r4, [pc, #44]	; (8003010 <LoopForever+0x16>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe4:	e001      	b.n	8002fea <LoopFillZerobss>

08002fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe8:	3204      	adds	r2, #4

08002fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fec:	d3fb      	bcc.n	8002fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fee:	f7fd ff9b 	bl	8000f28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ff2:	f004 fd6d 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7fd fb5b 	bl	80006b0 <main>

08002ffa <LoopForever>:

LoopForever:
    b LoopForever
 8002ffa:	e7fe      	b.n	8002ffa <LoopForever>
  ldr   r0, =_estack
 8002ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003004:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8003008:	08008614 	.word	0x08008614
  ldr r2, =_sbss
 800300c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8003010:	20015e10 	.word	0x20015e10

08003014 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003014:	e7fe      	b.n	8003014 <ADC_IRQHandler>

08003016 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <vApplicationGetIdleTaskMemory+0x2c>)
 8003034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <vApplicationGetIdleTaskMemory+0x30>)
 800303a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2282      	movs	r2, #130	; 0x82
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	2000017c 	.word	0x2000017c
 8003054:	200001d4 	.word	0x200001d4

08003058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <vApplicationGetTimerTaskMemory+0x2c>)
 8003068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <vApplicationGetTimerTaskMemory+0x30>)
 800306e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003076:	601a      	str	r2, [r3, #0]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	200003dc 	.word	0x200003dc
 8003088:	20000434 	.word	0x20000434

0800308c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0208 	add.w	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f103 0208 	add.w	r2, r3, #8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 0208 	add.w	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
}
 8003122:	bf00      	nop
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d103      	bne.n	800314e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e00c      	b.n	8003168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3308      	adds	r3, #8
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e002      	b.n	800315c <vListInsert+0x2e>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	429a      	cmp	r2, r3
 8003166:	d2f6      	bcs.n	8003156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6892      	ldr	r2, [r2, #8]
 80031b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6852      	ldr	r2, [r2, #4]
 80031c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d103      	bne.n	80031d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	e7fe      	b.n	800321a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800321c:	f002 faf6 	bl	800580c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003228:	68f9      	ldr	r1, [r7, #12]
 800322a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	441a      	add	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	3b01      	subs	r3, #1
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	441a      	add	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	22ff      	movs	r2, #255	; 0xff
 8003260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d114      	bne.n	800329c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01a      	beq.n	80032b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3310      	adds	r3, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fa4a 	bl	8004718 <xTaskRemoveFromEventList>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <xQueueGenericReset+0xcc>)
 800328c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	e009      	b.n	80032b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3310      	adds	r3, #16
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fef3 	bl	800308c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3324      	adds	r3, #36	; 0x24
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff feee 	bl	800308c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032b0:	f002 fada 	bl	8005868 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032b4:	2301      	movs	r3, #1
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000ed04 	.word	0xe000ed04

080032c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08e      	sub	sp, #56	; 0x38
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <xQueueGenericCreateStatic+0x28>
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	e7fe      	b.n	80032ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <xQueueGenericCreateStatic+0x42>
 80032f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	e7fe      	b.n	8003304 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <xQueueGenericCreateStatic+0x4e>
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <xQueueGenericCreateStatic+0x52>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <xQueueGenericCreateStatic+0x54>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <xQueueGenericCreateStatic+0x6c>
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	623b      	str	r3, [r7, #32]
 800332e:	e7fe      	b.n	800332e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <xQueueGenericCreateStatic+0x78>
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <xQueueGenericCreateStatic+0x7c>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <xQueueGenericCreateStatic+0x7e>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <xQueueGenericCreateStatic+0x96>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e7fe      	b.n	8003358 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800335a:	2350      	movs	r3, #80	; 0x50
 800335c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b50      	cmp	r3, #80	; 0x50
 8003362:	d009      	beq.n	8003378 <xQueueGenericCreateStatic+0xb4>
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e7fe      	b.n	8003376 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800338a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f842 	bl	8003422 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <xQueueGenericCreate+0x28>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e7fe      	b.n	80033ce <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e004      	b.n	80033e6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	fb02 f303 	mul.w	r3, r2, r3
 80033e4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3350      	adds	r3, #80	; 0x50
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 fb76 	bl	8005adc <pvPortMalloc>
 80033f0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00f      	beq.n	8003418 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	3350      	adds	r3, #80	; 0x50
 80033fc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003406:	79fa      	ldrb	r2, [r7, #7]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f805 	bl	8003422 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003418:	69bb      	ldr	r3, [r7, #24]
	}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d103      	bne.n	800343e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e002      	b.n	8003444 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003450:	2101      	movs	r1, #1
 8003452:	69b8      	ldr	r0, [r7, #24]
 8003454:	f7ff fece 	bl	80031f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	68f9      	ldr	r1, [r7, #12]
 8003466:	2073      	movs	r0, #115	; 0x73
 8003468:	f003 fba4 	bl	8006bb4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b090      	sub	sp, #64	; 0x40
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <xQueueGenericSend+0x30>
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <xQueueGenericSend+0x3e>
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <xQueueGenericSend+0x42>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericSend+0x44>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <xQueueGenericSend+0x5c>
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	e7fe      	b.n	80034ce <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x6a>
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericSend+0x6e>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericSend+0x70>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <xQueueGenericSend+0x88>
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	e7fe      	b.n	80034fa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034fc:	f001 fabe 	bl	8004a7c <xTaskGetSchedulerState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <xQueueGenericSend+0x98>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xQueueGenericSend+0x9c>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xQueueGenericSend+0x9e>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <xQueueGenericSend+0xb6>
 8003516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e7fe      	b.n	8003528 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800352a:	f002 f96f 	bl	800580c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <xQueueGenericSend+0xcc>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d136      	bne.n	80035ae <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	4618      	mov	r0, r3
 8003544:	f004 f974 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	460b      	mov	r3, r1
 8003552:	4601      	mov	r1, r0
 8003554:	205a      	movs	r0, #90	; 0x5a
 8003556:	f003 fba3 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003560:	f000 fa66 	bl	8003a30 <prvCopyDataToQueue>
 8003564:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	3324      	adds	r3, #36	; 0x24
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f8d0 	bl	8004718 <xTaskRemoveFromEventList>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800357e:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <xQueueGenericSend+0x240>)
 8003580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	e00a      	b.n	80035a6 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <xQueueGenericSend+0x240>)
 8003598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035a6:	f002 f95f 	bl	8005868 <vPortExitCritical>
				return pdPASS;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07d      	b.n	80036aa <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d110      	bne.n	80035d6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035b4:	f002 f958 	bl	8005868 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 f938 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	4601      	mov	r1, r0
 80035cc:	205a      	movs	r0, #90	; 0x5a
 80035ce:	f003 fb67 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e069      	b.n	80036aa <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 f8ff 	bl	80047e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ea:	f002 f93d 	bl	8005868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ee:	f000 fe43 	bl	8004278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f2:	f002 f90b 	bl	800580c <vPortEnterCritical>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d103      	bne.n	800360c <xQueueGenericSend+0x198>
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003612:	b25b      	sxtb	r3, r3
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d103      	bne.n	8003622 <xQueueGenericSend+0x1ae>
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003622:	f002 f921 	bl	8005868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003626:	1d3a      	adds	r2, r7, #4
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f8ee 	bl	8004810 <xTaskCheckForTimeOut>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d124      	bne.n	8003684 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800363a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800363c:	f000 faf0 	bl	8003c20 <prvIsQueueFull>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d018      	beq.n	8003678 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	3310      	adds	r3, #16
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f810 	bl	8004674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003656:	f000 fa7b 	bl	8003b50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800365a:	f000 fe1b 	bl	8004294 <xTaskResumeAll>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f af62 	bne.w	800352a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <xQueueGenericSend+0x240>)
 8003668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	e758      	b.n	800352a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800367a:	f000 fa69 	bl	8003b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800367e:	f000 fe09 	bl	8004294 <xTaskResumeAll>
 8003682:	e752      	b.n	800352a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003686:	f000 fa63 	bl	8003b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800368a:	f000 fe03 	bl	8004294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	4618      	mov	r0, r3
 8003692:	f004 f8cd 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	460b      	mov	r3, r1
 80036a0:	4601      	mov	r1, r0
 80036a2:	205a      	movs	r0, #90	; 0x5a
 80036a4:	f003 fafc 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80036a8:	2300      	movs	r3, #0
		}
	}
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3738      	adds	r7, #56	; 0x38
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	e000ed04 	.word	0xe000ed04

080036b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d109      	bne.n	80036e4 <xQueueGenericSendFromISR+0x2c>
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	e7fe      	b.n	80036e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <xQueueGenericSendFromISR+0x3a>
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xQueueGenericSendFromISR+0x3e>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <xQueueGenericSendFromISR+0x40>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d109      	bne.n	8003710 <xQueueGenericSendFromISR+0x58>
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	623b      	str	r3, [r7, #32]
 800370e:	e7fe      	b.n	800370e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d103      	bne.n	800371e <xQueueGenericSendFromISR+0x66>
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <xQueueGenericSendFromISR+0x6a>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSendFromISR+0x6c>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericSendFromISR+0x84>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e7fe      	b.n	800373a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800373c:	f002 f94a 	bl	80059d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003740:	f3ef 8211 	mrs	r2, BASEPRI
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	61ba      	str	r2, [r7, #24]
 8003756:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003758:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <xQueueGenericSendFromISR+0xb6>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d136      	bne.n	80037dc <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	4618      	mov	r0, r3
 800377c:	f004 f858 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003780:	4601      	mov	r1, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	461a      	mov	r2, r3
 8003786:	2060      	movs	r0, #96	; 0x60
 8003788:	f003 f9ba 	bl	8006b00 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003792:	f000 f94d 	bl	8003a30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003796:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d112      	bne.n	80037c6 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	3324      	adds	r3, #36	; 0x24
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ffb3 	bl	8004718 <xTaskRemoveFromEventList>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00e      	beq.n	80037d6 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e007      	b.n	80037d6 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037ca:	3301      	adds	r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	b25a      	sxtb	r2, r3
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037d6:	2301      	movs	r3, #1
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80037da:	e00b      	b.n	80037f4 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 f826 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 80037e4:	4601      	mov	r1, r0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	461a      	mov	r2, r3
 80037ea:	2060      	movs	r0, #96	; 0x60
 80037ec:	f003 f988 	bl	8006b00 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003800:	4618      	mov	r0, r3
 8003802:	3738      	adds	r7, #56	; 0x38
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b08f      	sub	sp, #60	; 0x3c
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <xQueueReceive+0x2e>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	e7fe      	b.n	8003834 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d103      	bne.n	8003844 <xQueueReceive+0x3c>
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <xQueueReceive+0x40>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <xQueueReceive+0x42>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <xQueueReceive+0x5a>
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e7fe      	b.n	8003860 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003862:	f001 f90b 	bl	8004a7c <xTaskGetSchedulerState>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <xQueueReceive+0x6a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <xQueueReceive+0x6e>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <xQueueReceive+0x70>
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <xQueueReceive+0x88>
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e7fe      	b.n	800388e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003890:	f001 ffbc 	bl	800580c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	2b00      	cmp	r3, #0
 800389e:	d031      	beq.n	8003904 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a4:	f000 f92e 	bl	8003b04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 ffc0 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 80038b0:	4604      	mov	r4, r0
 80038b2:	2000      	movs	r0, #0
 80038b4:	f003 ffbc 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 80038b8:	4601      	mov	r1, r0
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	2301      	movs	r3, #1
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	460a      	mov	r2, r1
 80038c4:	4621      	mov	r1, r4
 80038c6:	205c      	movs	r0, #92	; 0x5c
 80038c8:	f003 f9ea 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00f      	beq.n	80038fc <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	3310      	adds	r3, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 ff19 	bl	8004718 <xTaskRemoveFromEventList>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038ec:	4b4f      	ldr	r3, [pc, #316]	; (8003a2c <xQueueReceive+0x224>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038fc:	f001 ffb4 	bl	8005868 <vPortExitCritical>
				return pdPASS;
 8003900:	2301      	movs	r3, #1
 8003902:	e08e      	b.n	8003a22 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800390a:	f001 ffad 	bl	8005868 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	4618      	mov	r0, r3
 8003912:	f003 ff8d 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003916:	4604      	mov	r4, r0
 8003918:	2000      	movs	r0, #0
 800391a:	f003 ff89 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 800391e:	4601      	mov	r1, r0
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	2301      	movs	r3, #1
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	460a      	mov	r2, r1
 800392a:	4621      	mov	r1, r4
 800392c:	205c      	movs	r0, #92	; 0x5c
 800392e:	f003 f9b7 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003932:	2300      	movs	r3, #0
 8003934:	e075      	b.n	8003a22 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800393c:	f107 0310 	add.w	r3, r7, #16
 8003940:	4618      	mov	r0, r3
 8003942:	f000 ff4f 	bl	80047e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003946:	2301      	movs	r3, #1
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800394a:	f001 ff8d 	bl	8005868 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800394e:	f000 fc93 	bl	8004278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003952:	f001 ff5b 	bl	800580c <vPortEnterCritical>
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800395c:	b25b      	sxtb	r3, r3
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d103      	bne.n	800396c <xQueueReceive+0x164>
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d103      	bne.n	8003982 <xQueueReceive+0x17a>
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003982:	f001 ff71 	bl	8005868 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003986:	1d3a      	adds	r2, r7, #4
 8003988:	f107 0310 	add.w	r3, r7, #16
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ff3e 	bl	8004810 <xTaskCheckForTimeOut>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d124      	bne.n	80039e4 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800399a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800399c:	f000 f92a 	bl	8003bf4 <prvIsQueueEmpty>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d018      	beq.n	80039d8 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	3324      	adds	r3, #36	; 0x24
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fe60 	bl	8004674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b6:	f000 f8cb 	bl	8003b50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039ba:	f000 fc6b 	bl	8004294 <xTaskResumeAll>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f af65 	bne.w	8003890 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <xQueueReceive+0x224>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	e75b      	b.n	8003890 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039da:	f000 f8b9 	bl	8003b50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039de:	f000 fc59 	bl	8004294 <xTaskResumeAll>
 80039e2:	e755      	b.n	8003890 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e6:	f000 f8b3 	bl	8003b50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ea:	f000 fc53 	bl	8004294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f0:	f000 f900 	bl	8003bf4 <prvIsQueueEmpty>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f43f af4a 	beq.w	8003890 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 ff16 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003a04:	4604      	mov	r4, r0
 8003a06:	2000      	movs	r0, #0
 8003a08:	f003 ff12 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003a0c:	4601      	mov	r1, r0
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	2301      	movs	r3, #1
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	460a      	mov	r2, r1
 8003a18:	4621      	mov	r1, r4
 8003a1a:	205c      	movs	r0, #92	; 0x5c
 8003a1c:	f003 f940 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003a20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3734      	adds	r7, #52	; 0x34
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd90      	pop	{r4, r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10d      	bne.n	8003a6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d14d      	bne.n	8003af2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f82c 	bl	8004ab8 <xTaskPriorityDisinherit>
 8003a60:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	e043      	b.n	8003af2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d119      	bne.n	8003aa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6898      	ldr	r0, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	f004 f85b 	bl	8007b36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	441a      	add	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d32b      	bcc.n	8003af2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	e026      	b.n	8003af2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68d8      	ldr	r0, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	461a      	mov	r2, r3
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	f004 f841 	bl	8007b36 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	425b      	negs	r3, r3
 8003abe:	441a      	add	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d207      	bcs.n	8003ae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	425b      	negs	r3, r3
 8003ada:	441a      	add	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d105      	bne.n	8003af2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003afa:	697b      	ldr	r3, [r7, #20]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	441a      	add	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d303      	bcc.n	8003b38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68d9      	ldr	r1, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	461a      	mov	r2, r3
 8003b42:	6838      	ldr	r0, [r7, #0]
 8003b44:	f003 fff7 	bl	8007b36 <memcpy>
	}
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b58:	f001 fe58 	bl	800580c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b64:	e011      	b.n	8003b8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3324      	adds	r3, #36	; 0x24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fdd0 	bl	8004718 <xTaskRemoveFromEventList>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b7e:	f000 fea7 	bl	80048d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dce9      	bgt.n	8003b66 <prvUnlockQueue+0x16>
 8003b92:	e000      	b.n	8003b96 <prvUnlockQueue+0x46>
					break;
 8003b94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b9e:	f001 fe63 	bl	8005868 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ba2:	f001 fe33 	bl	800580c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bae:	e011      	b.n	8003bd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3310      	adds	r3, #16
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fdab 	bl	8004718 <xTaskRemoveFromEventList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bc8:	f000 fe82 	bl	80048d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bcc:	7bbb      	ldrb	r3, [r7, #14]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	dce9      	bgt.n	8003bb0 <prvUnlockQueue+0x60>
 8003bdc:	e000      	b.n	8003be0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003be8:	f001 fe3e 	bl	8005868 <vPortExitCritical>
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003bfc:	f001 fe06 	bl	800580c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e001      	b.n	8003c12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c12:	f001 fe29 	bl	8005868 <vPortExitCritical>

	return xReturn;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c28:	f001 fdf0 	bl	800580c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d102      	bne.n	8003c3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e001      	b.n	8003c42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c42:	f001 fe11 	bl	8005868 <vPortExitCritical>

	return xReturn;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e01e      	b.n	8003c9e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c60:	4a12      	ldr	r2, [pc, #72]	; (8003cac <vQueueAddToRegistry+0x5c>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d115      	bne.n	8003c98 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c6c:	490f      	ldr	r1, [pc, #60]	; (8003cac <vQueueAddToRegistry+0x5c>)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <vQueueAddToRegistry+0x5c>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fdd3 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2071      	movs	r0, #113	; 0x71
 8003c92:	f002 ff35 	bl	8006b00 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8003c96:	e005      	b.n	8003ca4 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b07      	cmp	r3, #7
 8003ca2:	d9dd      	bls.n	8003c60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	20015d24 	.word	0x20015d24

08003cb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cc0:	f001 fda4 	bl	800580c <vPortEnterCritical>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d103      	bne.n	8003cda <vQueueWaitForMessageRestricted+0x2a>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d103      	bne.n	8003cf0 <vQueueWaitForMessageRestricted+0x40>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf0:	f001 fdba 	bl	8005868 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d106      	bne.n	8003d0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fcd9 	bl	80046bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f7ff ff20 	bl	8003b50 <prvUnlockQueue>
	}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af04      	add	r7, sp, #16
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <xTaskCreateStatic+0x28>
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	e7fe      	b.n	8003d3e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <xTaskCreateStatic+0x42>
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e7fe      	b.n	8003d58 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d5a:	2358      	movs	r3, #88	; 0x58
 8003d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b58      	cmp	r3, #88	; 0x58
 8003d62:	d009      	beq.n	8003d78 <xTaskCreateStatic+0x60>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e7fe      	b.n	8003d76 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01e      	beq.n	8003dbc <xTaskCreateStatic+0xa4>
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2202      	movs	r2, #2
 8003d92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d96:	2300      	movs	r3, #0
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f850 	bl	8003e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003db6:	f000 f8d3 	bl	8003f60 <prvAddNewTaskToReadyList>
 8003dba:	e001      	b.n	8003dc0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dc0:	697b      	ldr	r3, [r7, #20]
	}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b08c      	sub	sp, #48	; 0x30
 8003dce:	af04      	add	r7, sp, #16
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 fe7c 	bl	8005adc <pvPortMalloc>
 8003de4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003dec:	2058      	movs	r0, #88	; 0x58
 8003dee:	f001 fe75 	bl	8005adc <pvPortMalloc>
 8003df2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003e00:	e005      	b.n	8003e0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f001 ff30 	bl	8005c68 <vPortFree>
 8003e08:	e001      	b.n	8003e0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	9302      	str	r3, [sp, #8]
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f80e 	bl	8003e54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e38:	69f8      	ldr	r0, [r7, #28]
 8003e3a:	f000 f891 	bl	8003f60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e002      	b.n	8003e4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	21a5      	movs	r1, #165	; 0xa5
 8003e6e:	f003 fe6d 	bl	8007b4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <prvInitialiseNewTask+0x56>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e7fe      	b.n	8003ea8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e012      	b.n	8003ed6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	7819      	ldrb	r1, [r3, #0]
 8003eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3334      	adds	r3, #52	; 0x34
 8003ec0:	460a      	mov	r2, r1
 8003ec2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d006      	beq.n	8003ede <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	d9e9      	bls.n	8003eb0 <prvInitialiseNewTask+0x5c>
 8003edc:	e000      	b.n	8003ee0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003ede:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d901      	bls.n	8003ef2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eee:	2304      	movs	r3, #4
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f06:	3304      	adds	r3, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f8df 	bl	80030cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	3318      	adds	r3, #24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f8da 	bl	80030cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	f1c3 0205 	rsb	r2, r3, #5
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	2200      	movs	r2, #0
 8003f32:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	69b8      	ldr	r0, [r7, #24]
 8003f42:	f001 fb39 	bl	80055b8 <pxPortInitialiseStack>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f58:	bf00      	nop
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f60:	b5b0      	push	{r4, r5, r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af02      	add	r7, sp, #8
 8003f66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f68:	f001 fc50 	bl	800580c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <prvAddNewTaskToReadyList+0xfc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <prvAddNewTaskToReadyList+0xfc>)
 8003f74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f76:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <prvAddNewTaskToReadyList+0x100>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d109      	bne.n	8003f92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f7e:	4a38      	ldr	r2, [pc, #224]	; (8004060 <prvAddNewTaskToReadyList+0x100>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <prvAddNewTaskToReadyList+0xfc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d110      	bne.n	8003fae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f8c:	f000 fcb6 	bl	80048fc <prvInitialiseTaskLists>
 8003f90:	e00d      	b.n	8003fae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f92:	4b34      	ldr	r3, [pc, #208]	; (8004064 <prvAddNewTaskToReadyList+0x104>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <prvAddNewTaskToReadyList+0x100>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d802      	bhi.n	8003fae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fa8:	4a2d      	ldr	r2, [pc, #180]	; (8004060 <prvAddNewTaskToReadyList+0x100>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fae:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <prvAddNewTaskToReadyList+0x108>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <prvAddNewTaskToReadyList+0x108>)
 8003fb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <prvAddNewTaskToReadyList+0x108>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <prvAddNewTaskToReadyList+0x94>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f003 fb05 	bl	80075d8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	461d      	mov	r5, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	1ae3      	subs	r3, r4, r3
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	462b      	mov	r3, r5
 8003ff0:	f001 fff6 	bl	8005fe0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fb76 	bl	80076e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2201      	movs	r2, #1
 8004002:	409a      	lsls	r2, r3
 8004004:	4b19      	ldr	r3, [pc, #100]	; (800406c <prvAddNewTaskToReadyList+0x10c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	4a18      	ldr	r2, [pc, #96]	; (800406c <prvAddNewTaskToReadyList+0x10c>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4a15      	ldr	r2, [pc, #84]	; (8004070 <prvAddNewTaskToReadyList+0x110>)
 800401c:	441a      	add	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f7ff f85e 	bl	80030e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800402a:	f001 fc1d 	bl	8005868 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <prvAddNewTaskToReadyList+0x104>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <prvAddNewTaskToReadyList+0x100>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	429a      	cmp	r2, r3
 8004042:	d207      	bcs.n	8004054 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <prvAddNewTaskToReadyList+0x114>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bdb0      	pop	{r4, r5, r7, pc}
 800405c:	2000091c 	.word	0x2000091c
 8004060:	20000844 	.word	0x20000844
 8004064:	20000928 	.word	0x20000928
 8004068:	20000938 	.word	0x20000938
 800406c:	20000924 	.word	0x20000924
 8004070:	20000848 	.word	0x20000848
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004080:	f001 fbc4 	bl	800580c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <vTaskDelete+0x18>
 800408a:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <vTaskDelete+0x110>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e000      	b.n	8004092 <vTaskDelete+0x1a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f881 	bl	80031a0 <uxListRemove>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d115      	bne.n	80040d0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4938      	ldr	r1, [pc, #224]	; (800418c <vTaskDelete+0x114>)
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <vTaskDelete+0x58>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	2201      	movs	r2, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43da      	mvns	r2, r3
 80040c6:	4b32      	ldr	r3, [pc, #200]	; (8004190 <vTaskDelete+0x118>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4013      	ands	r3, r2
 80040cc:	4a30      	ldr	r2, [pc, #192]	; (8004190 <vTaskDelete+0x118>)
 80040ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3318      	adds	r3, #24
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff f85f 	bl	80031a0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80040e2:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <vTaskDelete+0x11c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <vTaskDelete+0x11c>)
 80040ea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <vTaskDelete+0x110>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10b      	bne.n	800410e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	4826      	ldr	r0, [pc, #152]	; (8004198 <vTaskDelete+0x120>)
 80040fe:	f7fe fff2 	bl	80030e6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <vTaskDelete+0x124>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3301      	adds	r3, #1
 8004108:	4a24      	ldr	r2, [pc, #144]	; (800419c <vTaskDelete+0x124>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	e009      	b.n	8004122 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <vTaskDelete+0x128>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <vTaskDelete+0x128>)
 8004116:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fc5b 	bl	80049d4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800411e:	f000 fc87 	bl	8004a30 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 fb83 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 800412a:	4603      	mov	r3, r0
 800412c:	4619      	mov	r1, r3
 800412e:	2022      	movs	r0, #34	; 0x22
 8004130:	f002 fcaa 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f001 ffba 	bl	80060b0 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 800413c:	f001 fb94 	bl	8005868 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <vTaskDelete+0x12c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <vTaskDelete+0x110>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	429a      	cmp	r2, r3
 8004150:	d115      	bne.n	800417e <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004152:	4b15      	ldr	r3, [pc, #84]	; (80041a8 <vTaskDelete+0x130>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <vTaskDelete+0xf6>
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	e7fe      	b.n	800416c <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <vTaskDelete+0x134>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000844 	.word	0x20000844
 800418c:	20000848 	.word	0x20000848
 8004190:	20000924 	.word	0x20000924
 8004194:	20000938 	.word	0x20000938
 8004198:	200008f0 	.word	0x200008f0
 800419c:	20000904 	.word	0x20000904
 80041a0:	2000091c 	.word	0x2000091c
 80041a4:	20000928 	.word	0x20000928
 80041a8:	20000944 	.word	0x20000944
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041be:	463a      	mov	r2, r7
 80041c0:	1d39      	adds	r1, r7, #4
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe ff2c 	bl	8003024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	9202      	str	r2, [sp, #8]
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2300      	movs	r3, #0
 80041dc:	460a      	mov	r2, r1
 80041de:	4920      	ldr	r1, [pc, #128]	; (8004260 <vTaskStartScheduler+0xb0>)
 80041e0:	4820      	ldr	r0, [pc, #128]	; (8004264 <vTaskStartScheduler+0xb4>)
 80041e2:	f7ff fd99 	bl	8003d18 <xTaskCreateStatic>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <vTaskStartScheduler+0xb8>)
 80041ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <vTaskStartScheduler+0xb8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e001      	b.n	80041fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d102      	bne.n	800420a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004204:	f000 fe96 	bl	8004f34 <xTimerCreateTimerTask>
 8004208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d115      	bne.n	800423c <vTaskStartScheduler+0x8c>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004222:	4b12      	ldr	r3, [pc, #72]	; (800426c <vTaskStartScheduler+0xbc>)
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800422a:	4b11      	ldr	r3, [pc, #68]	; (8004270 <vTaskStartScheduler+0xc0>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <vTaskStartScheduler+0xc4>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004236:	f001 fa4b 	bl	80056d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800423a:	e00d      	b.n	8004258 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d109      	bne.n	8004258 <vTaskStartScheduler+0xa8>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e7fe      	b.n	8004256 <vTaskStartScheduler+0xa6>
}
 8004258:	bf00      	nop
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	080084d0 	.word	0x080084d0
 8004264:	080048e9 	.word	0x080048e9
 8004268:	20000940 	.word	0x20000940
 800426c:	2000093c 	.word	0x2000093c
 8004270:	20000928 	.word	0x20000928
 8004274:	20000920 	.word	0x20000920

08004278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <vTaskSuspendAll+0x18>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a03      	ldr	r2, [pc, #12]	; (8004290 <vTaskSuspendAll+0x18>)
 8004284:	6013      	str	r3, [r2, #0]
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20000944 	.word	0x20000944

08004294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042a2:	4b43      	ldr	r3, [pc, #268]	; (80043b0 <xTaskResumeAll+0x11c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <xTaskResumeAll+0x2a>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	e7fe      	b.n	80042bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042be:	f001 faa5 	bl	800580c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042c2:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <xTaskResumeAll+0x11c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <xTaskResumeAll+0x11c>)
 80042ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b38      	ldr	r3, [pc, #224]	; (80043b0 <xTaskResumeAll+0x11c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d165      	bne.n	80043a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <xTaskResumeAll+0x120>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d061      	beq.n	80043a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042dc:	e032      	b.n	8004344 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042de:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <xTaskResumeAll+0x124>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3318      	adds	r3, #24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe ff58 	bl	80031a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe ff53 	bl	80031a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f003 f9f3 	bl	80076e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2201      	movs	r2, #1
 8004308:	409a      	lsls	r2, r3
 800430a:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <xTaskResumeAll+0x128>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <xTaskResumeAll+0x128>)
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <xTaskResumeAll+0x12c>)
 8004322:	441a      	add	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fe fedb 	bl	80030e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <xTaskResumeAll+0x130>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	429a      	cmp	r2, r3
 800433c:	d302      	bcc.n	8004344 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <xTaskResumeAll+0x134>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004344:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <xTaskResumeAll+0x124>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1c8      	bne.n	80042de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004352:	f000 fb6d 	bl	8004a30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004356:	4b1d      	ldr	r3, [pc, #116]	; (80043cc <xTaskResumeAll+0x138>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004362:	f000 f859 	bl	8004418 <xTaskIncrementTick>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <xTaskResumeAll+0x134>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3b01      	subs	r3, #1
 8004376:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f1      	bne.n	8004362 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800437e:	4b13      	ldr	r3, [pc, #76]	; (80043cc <xTaskResumeAll+0x138>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <xTaskResumeAll+0x134>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800438c:	2301      	movs	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004390:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <xTaskResumeAll+0x13c>)
 8004392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043a0:	f001 fa62 	bl	8005868 <vPortExitCritical>

	return xAlreadyYielded;
 80043a4:	68bb      	ldr	r3, [r7, #8]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000944 	.word	0x20000944
 80043b4:	2000091c 	.word	0x2000091c
 80043b8:	200008dc 	.word	0x200008dc
 80043bc:	20000924 	.word	0x20000924
 80043c0:	20000848 	.word	0x20000848
 80043c4:	20000844 	.word	0x20000844
 80043c8:	20000930 	.word	0x20000930
 80043cc:	2000092c 	.word	0x2000092c
 80043d0:	e000ed04 	.word	0xe000ed04

080043d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <xTaskGetTickCount+0x1c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043e0:	687b      	ldr	r3, [r7, #4]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000920 	.word	0x20000920

080043f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043fa:	f001 faeb 	bl	80059d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <xTaskGetTickCountFromISR+0x20>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004408:	683b      	ldr	r3, [r7, #0]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000920 	.word	0x20000920

08004418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004422:	4b52      	ldr	r3, [pc, #328]	; (800456c <xTaskIncrementTick+0x154>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f040 8090 	bne.w	800454c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800442c:	4b50      	ldr	r3, [pc, #320]	; (8004570 <xTaskIncrementTick+0x158>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004434:	4a4e      	ldr	r2, [pc, #312]	; (8004570 <xTaskIncrementTick+0x158>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11f      	bne.n	8004480 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004440:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <xTaskIncrementTick+0x15c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <xTaskIncrementTick+0x46>
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	e7fe      	b.n	800445c <xTaskIncrementTick+0x44>
 800445e:	4b45      	ldr	r3, [pc, #276]	; (8004574 <xTaskIncrementTick+0x15c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4b44      	ldr	r3, [pc, #272]	; (8004578 <xTaskIncrementTick+0x160>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a42      	ldr	r2, [pc, #264]	; (8004574 <xTaskIncrementTick+0x15c>)
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4a42      	ldr	r2, [pc, #264]	; (8004578 <xTaskIncrementTick+0x160>)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b42      	ldr	r3, [pc, #264]	; (800457c <xTaskIncrementTick+0x164>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3301      	adds	r3, #1
 8004478:	4a40      	ldr	r2, [pc, #256]	; (800457c <xTaskIncrementTick+0x164>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	f000 fad8 	bl	8004a30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004480:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <xTaskIncrementTick+0x168>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d351      	bcc.n	800452e <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448a:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <xTaskIncrementTick+0x15c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xTaskIncrementTick+0x80>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xTaskIncrementTick+0x82>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800449e:	4b38      	ldr	r3, [pc, #224]	; (8004580 <xTaskIncrementTick+0x168>)
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	601a      	str	r2, [r3, #0]
					break;
 80044a6:	e042      	b.n	800452e <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044a8:	4b32      	ldr	r3, [pc, #200]	; (8004574 <xTaskIncrementTick+0x15c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d203      	bcs.n	80044c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c0:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <xTaskIncrementTick+0x168>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]
						break;
 80044c6:	e032      	b.n	800452e <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3304      	adds	r3, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fe67 	bl	80031a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	3318      	adds	r3, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fe5e 	bl	80031a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 f8fe 	bl	80076e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	2201      	movs	r2, #1
 80044f2:	409a      	lsls	r2, r3
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <xTaskIncrementTick+0x16c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a22      	ldr	r2, [pc, #136]	; (8004584 <xTaskIncrementTick+0x16c>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4a1f      	ldr	r2, [pc, #124]	; (8004588 <xTaskIncrementTick+0x170>)
 800450c:	441a      	add	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3304      	adds	r3, #4
 8004512:	4619      	mov	r1, r3
 8004514:	4610      	mov	r0, r2
 8004516:	f7fe fde6 	bl	80030e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b1b      	ldr	r3, [pc, #108]	; (800458c <xTaskIncrementTick+0x174>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	429a      	cmp	r2, r3
 8004526:	d3b0      	bcc.n	800448a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452c:	e7ad      	b.n	800448a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <xTaskIncrementTick+0x174>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4914      	ldr	r1, [pc, #80]	; (8004588 <xTaskIncrementTick+0x170>)
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d907      	bls.n	8004556 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	e004      	b.n	8004556 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <xTaskIncrementTick+0x178>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	4a0f      	ldr	r2, [pc, #60]	; (8004590 <xTaskIncrementTick+0x178>)
 8004554:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <xTaskIncrementTick+0x17c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 800455e:	2301      	movs	r3, #1
 8004560:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004562:	697b      	ldr	r3, [r7, #20]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000944 	.word	0x20000944
 8004570:	20000920 	.word	0x20000920
 8004574:	200008d4 	.word	0x200008d4
 8004578:	200008d8 	.word	0x200008d8
 800457c:	20000934 	.word	0x20000934
 8004580:	2000093c 	.word	0x2000093c
 8004584:	20000924 	.word	0x20000924
 8004588:	20000848 	.word	0x20000848
 800458c:	20000844 	.word	0x20000844
 8004590:	2000092c 	.word	0x2000092c
 8004594:	20000930 	.word	0x20000930

08004598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459e:	4b2f      	ldr	r3, [pc, #188]	; (800465c <vTaskSwitchContext+0xc4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <vTaskSwitchContext+0xc8>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045ac:	e051      	b.n	8004652 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <vTaskSwitchContext+0xc8>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045b4:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <vTaskSwitchContext+0xcc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	fab3 f383 	clz	r3, r3
 80045c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	f1c3 031f 	rsb	r3, r3, #31
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	4927      	ldr	r1, [pc, #156]	; (8004668 <vTaskSwitchContext+0xd0>)
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	e7fe      	b.n	80045f0 <vTaskSwitchContext+0x58>
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <vTaskSwitchContext+0xd0>)
 80045fe:	4413      	add	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3308      	adds	r3, #8
 8004614:	429a      	cmp	r2, r3
 8004616:	d104      	bne.n	8004622 <vTaskSwitchContext+0x8a>
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a10      	ldr	r2, [pc, #64]	; (800466c <vTaskSwitchContext+0xd4>)
 800462a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vTaskSwitchContext+0xd4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3334      	adds	r3, #52	; 0x34
 8004632:	2205      	movs	r2, #5
 8004634:	490e      	ldr	r1, [pc, #56]	; (8004670 <vTaskSwitchContext+0xd8>)
 8004636:	4618      	mov	r0, r3
 8004638:	f003 fa6e 	bl	8007b18 <memcmp>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <vTaskSwitchContext+0xb6>
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <vTaskSwitchContext+0xd4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f003 f80a 	bl	8007660 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800464c:	e001      	b.n	8004652 <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 800464e:	f002 ffa7 	bl	80075a0 <SEGGER_SYSVIEW_OnIdle>
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000944 	.word	0x20000944
 8004660:	20000930 	.word	0x20000930
 8004664:	20000924 	.word	0x20000924
 8004668:	20000848 	.word	0x20000848
 800466c:	20000844 	.word	0x20000844
 8004670:	080084d0 	.word	0x080084d0

08004674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <vTaskPlaceOnEventList+0x24>
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e7fe      	b.n	8004696 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004698:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <vTaskPlaceOnEventList+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3318      	adds	r3, #24
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe fd44 	bl	800312e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046a6:	2101      	movs	r1, #1
 80046a8:	6838      	ldr	r0, [r7, #0]
 80046aa:	f000 fbcb 	bl	8004e44 <prvAddCurrentTaskToDelayedList>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000844 	.word	0x20000844

080046bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <vTaskPlaceOnEventListRestricted+0x26>
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e7fe      	b.n	80046e0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <vTaskPlaceOnEventListRestricted+0x58>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3318      	adds	r3, #24
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7fe fcfb 	bl	80030e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80046fc:	2024      	movs	r0, #36	; 0x24
 80046fe:	f002 f9a5 	bl	8006a4c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68b8      	ldr	r0, [r7, #8]
 8004706:	f000 fb9d 	bl	8004e44 <prvAddCurrentTaskToDelayedList>
	}
 800470a:	bf00      	nop
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000844 	.word	0x20000844

08004718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <xTaskRemoveFromEventList+0x2a>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e7fe      	b.n	8004740 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3318      	adds	r3, #24
 8004746:	4618      	mov	r0, r3
 8004748:	f7fe fd2a 	bl	80031a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474c:	4b1f      	ldr	r3, [pc, #124]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d120      	bne.n	8004796 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fd21 	bl	80031a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4618      	mov	r0, r3
 8004762:	f002 ffc1 	bl	80076e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	2201      	movs	r2, #1
 800476c:	409a      	lsls	r2, r3
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <xTaskRemoveFromEventList+0xb8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4313      	orrs	r3, r2
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <xTaskRemoveFromEventList+0xb8>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <xTaskRemoveFromEventList+0xbc>)
 8004786:	441a      	add	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe fca9 	bl	80030e6 <vListInsertEnd>
 8004794:	e005      	b.n	80047a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	3318      	adds	r3, #24
 800479a:	4619      	mov	r1, r3
 800479c:	480e      	ldr	r0, [pc, #56]	; (80047d8 <xTaskRemoveFromEventList+0xc0>)
 800479e:	f7fe fca2 	bl	80030e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <xTaskRemoveFromEventList+0xc4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d905      	bls.n	80047bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047b0:	2301      	movs	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <xTaskRemoveFromEventList+0xc8>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e001      	b.n	80047c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000944 	.word	0x20000944
 80047d0:	20000924 	.word	0x20000924
 80047d4:	20000848 	.word	0x20000848
 80047d8:	200008dc 	.word	0x200008dc
 80047dc:	20000844 	.word	0x20000844
 80047e0:	20000930 	.word	0x20000930

080047e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <vTaskInternalSetTimeOutState+0x24>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <vTaskInternalSetTimeOutState+0x28>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	20000934 	.word	0x20000934
 800480c:	20000920 	.word	0x20000920

08004810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <xTaskCheckForTimeOut+0x24>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e7fe      	b.n	8004832 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <xTaskCheckForTimeOut+0x3e>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e7fe      	b.n	800484c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800484e:	f000 ffdd 	bl	800580c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <xTaskCheckForTimeOut+0xb8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486a:	d102      	bne.n	8004872 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800486c:	2300      	movs	r3, #0
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e023      	b.n	80048ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <xTaskCheckForTimeOut+0xbc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d007      	beq.n	800488e <xTaskCheckForTimeOut+0x7e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	429a      	cmp	r2, r3
 8004886:	d302      	bcc.n	800488e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e015      	b.n	80048ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	429a      	cmp	r2, r3
 8004896:	d20b      	bcs.n	80048b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad2      	subs	r2, r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff ff9d 	bl	80047e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	e004      	b.n	80048ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048ba:	f000 ffd5 	bl	8005868 <vPortExitCritical>

	return xReturn;
 80048be:	69fb      	ldr	r3, [r7, #28]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3720      	adds	r7, #32
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000920 	.word	0x20000920
 80048cc:	20000934 	.word	0x20000934

080048d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048d4:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <vTaskMissedYield+0x14>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	20000930 	.word	0x20000930

080048e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048f0:	f000 f844 	bl	800497c <prvCheckTasksWaitingTermination>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80048f4:	f7fc fa5a 	bl	8000dac <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80048f8:	e7fa      	b.n	80048f0 <prvIdleTask+0x8>
	...

080048fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	e00c      	b.n	8004922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <prvInitialiseTaskLists+0x60>)
 8004914:	4413      	add	r3, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fbb8 	bl	800308c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3301      	adds	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d9ef      	bls.n	8004908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004928:	480d      	ldr	r0, [pc, #52]	; (8004960 <prvInitialiseTaskLists+0x64>)
 800492a:	f7fe fbaf 	bl	800308c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800492e:	480d      	ldr	r0, [pc, #52]	; (8004964 <prvInitialiseTaskLists+0x68>)
 8004930:	f7fe fbac 	bl	800308c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004934:	480c      	ldr	r0, [pc, #48]	; (8004968 <prvInitialiseTaskLists+0x6c>)
 8004936:	f7fe fba9 	bl	800308c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800493a:	480c      	ldr	r0, [pc, #48]	; (800496c <prvInitialiseTaskLists+0x70>)
 800493c:	f7fe fba6 	bl	800308c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004940:	480b      	ldr	r0, [pc, #44]	; (8004970 <prvInitialiseTaskLists+0x74>)
 8004942:	f7fe fba3 	bl	800308c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <prvInitialiseTaskLists+0x78>)
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <prvInitialiseTaskLists+0x64>)
 800494a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <prvInitialiseTaskLists+0x7c>)
 800494e:	4a05      	ldr	r2, [pc, #20]	; (8004964 <prvInitialiseTaskLists+0x68>)
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000848 	.word	0x20000848
 8004960:	200008ac 	.word	0x200008ac
 8004964:	200008c0 	.word	0x200008c0
 8004968:	200008dc 	.word	0x200008dc
 800496c:	200008f0 	.word	0x200008f0
 8004970:	20000908 	.word	0x20000908
 8004974:	200008d4 	.word	0x200008d4
 8004978:	200008d8 	.word	0x200008d8

0800497c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004982:	e019      	b.n	80049b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004984:	f000 ff42 	bl	800580c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <prvCheckTasksWaitingTermination+0x4c>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fc03 	bl	80031a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <prvCheckTasksWaitingTermination+0x50>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <prvCheckTasksWaitingTermination+0x50>)
 80049a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <prvCheckTasksWaitingTermination+0x54>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <prvCheckTasksWaitingTermination+0x54>)
 80049ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ae:	f000 ff5b 	bl	8005868 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f80e 	bl	80049d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b8:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <prvCheckTasksWaitingTermination+0x54>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e1      	bne.n	8004984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	200008f0 	.word	0x200008f0
 80049cc:	2000091c 	.word	0x2000091c
 80049d0:	20000904 	.word	0x20000904

080049d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d108      	bne.n	80049f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f93c 	bl	8005c68 <vPortFree>
				vPortFree( pxTCB );
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 f939 	bl	8005c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049f6:	e017      	b.n	8004a28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d103      	bne.n	8004a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 f930 	bl	8005c68 <vPortFree>
	}
 8004a08:	e00e      	b.n	8004a28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d009      	beq.n	8004a28 <prvDeleteTCB+0x54>
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e7fe      	b.n	8004a26 <prvDeleteTCB+0x52>
	}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <prvResetNextTaskUnblockTime+0x44>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <prvResetNextTaskUnblockTime+0x14>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <prvResetNextTaskUnblockTime+0x16>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d004      	beq.n	8004a54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <prvResetNextTaskUnblockTime+0x48>)
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a52:	e008      	b.n	8004a66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <prvResetNextTaskUnblockTime+0x44>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a05      	ldr	r2, [pc, #20]	; (8004a78 <prvResetNextTaskUnblockTime+0x48>)
 8004a64:	6013      	str	r3, [r2, #0]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	200008d4 	.word	0x200008d4
 8004a78:	2000093c 	.word	0x2000093c

08004a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <xTaskGetSchedulerState+0x34>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	e008      	b.n	8004aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a90:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <xTaskGetSchedulerState+0x38>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	e001      	b.n	8004aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004aa2:	687b      	ldr	r3, [r7, #4]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	20000928 	.word	0x20000928
 8004ab4:	20000944 	.word	0x20000944

08004ab8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d071      	beq.n	8004bb2 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ace:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <xTaskPriorityDisinherit+0x104>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d009      	beq.n	8004aec <xTaskPriorityDisinherit+0x34>
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e7fe      	b.n	8004aea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <xTaskPriorityDisinherit+0x50>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	e7fe      	b.n	8004b06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d049      	beq.n	8004bb2 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d145      	bne.n	8004bb2 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fb38 	bl	80031a0 <uxListRemove>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d115      	bne.n	8004b62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3a:	4921      	ldr	r1, [pc, #132]	; (8004bc0 <xTaskPriorityDisinherit+0x108>)
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xTaskPriorityDisinherit+0xaa>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	2201      	movs	r2, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43da      	mvns	r2, r3
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <xTaskPriorityDisinherit+0x10c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <xTaskPriorityDisinherit+0x10c>)
 8004b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4619      	mov	r1, r3
 8004b66:	204a      	movs	r0, #74	; 0x4a
 8004b68:	f001 ff8e 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	f1c3 0205 	rsb	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <xTaskPriorityDisinherit+0x10c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	4a0d      	ldr	r2, [pc, #52]	; (8004bc4 <xTaskPriorityDisinherit+0x10c>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a08      	ldr	r2, [pc, #32]	; (8004bc0 <xTaskPriorityDisinherit+0x108>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7fe fa9c 	bl	80030e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bb2:	697b      	ldr	r3, [r7, #20]
	}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000844 	.word	0x20000844
 8004bc0:	20000848 	.word	0x20000848
 8004bc4:	20000924 	.word	0x20000924

08004bc8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004bd6:	f000 fe19 	bl	800580c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004bda:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d01a      	beq.n	8004c1e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004be8:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	43d2      	mvns	r2, r2
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c06:	2101      	movs	r1, #1
 8004c08:	6838      	ldr	r0, [r7, #0]
 8004c0a:	f000 f91b 	bl	8004e44 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <xTaskNotifyWait+0xc4>)
 8004c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004c1e:	f000 fe23 	bl	8005868 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004c22:	f000 fdf3 	bl	800580c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	2040      	movs	r0, #64	; 0x40
 8004c34:	f002 f834 	bl	8006ca0 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d004      	beq.n	8004c48 <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d002      	beq.n	8004c5c <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e008      	b.n	8004c6e <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	43d2      	mvns	r2, r2
 8004c66:	400a      	ands	r2, r1
 8004c68:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <xTaskNotifyWait+0xc0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8004c78:	f000 fdf6 	bl	8005868 <vPortExitCritical>

		return xReturn;
 8004c7c:	697b      	ldr	r3, [r7, #20]
	}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000844 	.word	0x20000844
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b090      	sub	sp, #64	; 0x40
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <xTaskGenericNotifyFromISR+0x2e>
 8004caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	e7fe      	b.n	8004cbc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cbe:	f000 fe89 	bl	80059d4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	623a      	str	r2, [r7, #32]
 8004cdc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004cde:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d829      	bhi.n	8004d5c <xTaskGenericNotifyFromISR+0xcc>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <xTaskGenericNotifyFromISR+0x80>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d25 	.word	0x08004d25
 8004d18:	08004d33 	.word	0x08004d33
 8004d1c:	08004d3f 	.word	0x08004d3f
 8004d20:	08004d47 	.word	0x08004d47
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004d30:	e014      	b.n	8004d5c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004d3c:	e00e      	b.n	8004d5c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004d44:	e00a      	b.n	8004d5c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004d54:	e001      	b.n	8004d5a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004d5a:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY_FROM_ISR();
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f002 fd66 	bl	8007830 <SEGGER_SYSVIEW_ShrinkId>
 8004d64:	79f9      	ldrb	r1, [r7, #7]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d6a:	9201      	str	r2, [sp, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	4601      	mov	r1, r0
 8004d74:	203f      	movs	r0, #63	; 0x3f
 8004d76:	f002 f825 	bl	8006dc4 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d149      	bne.n	8004e16 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d009      	beq.n	8004d9e <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e7fe      	b.n	8004d9c <xTaskGenericNotifyFromISR+0x10c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9e:	4b23      	ldr	r3, [pc, #140]	; (8004e2c <xTaskGenericNotifyFromISR+0x19c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d120      	bne.n	8004de8 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	3304      	adds	r3, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe f9f8 	bl	80031a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 fc98 	bl	80076e8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <xTaskGenericNotifyFromISR+0x1a0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <xTaskGenericNotifyFromISR+0x1a0>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <xTaskGenericNotifyFromISR+0x1a4>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fe f980 	bl	80030e6 <vListInsertEnd>
 8004de6:	e005      	b.n	8004df4 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	3318      	adds	r3, #24
 8004dec:	4619      	mov	r1, r3
 8004dee:	4812      	ldr	r0, [pc, #72]	; (8004e38 <xTaskGenericNotifyFromISR+0x1a8>)
 8004df0:	f7fe f979 	bl	80030e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <xTaskGenericNotifyFromISR+0x1ac>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d909      	bls.n	8004e16 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <xTaskGenericNotifyFromISR+0x186>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <xTaskGenericNotifyFromISR+0x1b0>)
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3738      	adds	r7, #56	; 0x38
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000944 	.word	0x20000944
 8004e30:	20000924 	.word	0x20000924
 8004e34:	20000848 	.word	0x20000848
 8004e38:	200008dc 	.word	0x200008dc
 8004e3c:	20000844 	.word	0x20000844
 8004e40:	20000930 	.word	0x20000930

08004e44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e4e:	4b32      	ldr	r3, [pc, #200]	; (8004f18 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe f9a0 	bl	80031a0 <uxListRemove>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10b      	bne.n	8004e7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004e7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d110      	bne.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x64>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00d      	beq.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004e8c:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	211b      	movs	r1, #27
 8004e92:	4618      	mov	r0, r3
 8004e94:	f002 fc6c 	bl	8007770 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e98:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4820      	ldr	r0, [pc, #128]	; (8004f24 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004ea2:	f7fe f920 	bl	80030e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ea6:	e032      	b.n	8004f0e <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d20f      	bcs.n	8004ee0 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 fc52 	bl	8007770 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	4610      	mov	r0, r2
 8004eda:	f7fe f928 	bl	800312e <vListInsert>
}
 8004ede:	e016      	b.n	8004f0e <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8004ee0:	4b0e      	ldr	r3, [pc, #56]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f002 fc42 	bl	8007770 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f7fe f918 	bl	800312e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d202      	bcs.n	8004f0e <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <prvAddCurrentTaskToDelayedList+0xec>)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6013      	str	r3, [r2, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000920 	.word	0x20000920
 8004f1c:	20000844 	.word	0x20000844
 8004f20:	20000924 	.word	0x20000924
 8004f24:	20000908 	.word	0x20000908
 8004f28:	200008d8 	.word	0x200008d8
 8004f2c:	200008d4 	.word	0x200008d4
 8004f30:	2000093c 	.word	0x2000093c

08004f34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f3e:	f000 fafb 	bl	8005538 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f42:	4b1c      	ldr	r3, [pc, #112]	; (8004fb4 <xTimerCreateTimerTask+0x80>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d021      	beq.n	8004f8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	f107 0108 	add.w	r1, r7, #8
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe f87b 	bl	8003058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	9202      	str	r2, [sp, #8]
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	460a      	mov	r2, r1
 8004f74:	4910      	ldr	r1, [pc, #64]	; (8004fb8 <xTimerCreateTimerTask+0x84>)
 8004f76:	4811      	ldr	r0, [pc, #68]	; (8004fbc <xTimerCreateTimerTask+0x88>)
 8004f78:	f7fe fece 	bl	8003d18 <xTaskCreateStatic>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <xTimerCreateTimerTask+0x8c>)
 8004f80:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <xTimerCreateTimerTask+0x8c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	e7fe      	b.n	8004fa6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004fa8:	697b      	ldr	r3, [r7, #20]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000978 	.word	0x20000978
 8004fb8:	080084d8 	.word	0x080084d8
 8004fbc:	08005181 	.word	0x08005181
 8004fc0:	2000097c 	.word	0x2000097c

08004fc4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004fd2:	2030      	movs	r0, #48	; 0x30
 8004fd4:	f000 fd82 	bl	8005adc <pvPortMalloc>
 8004fd8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00d      	beq.n	8004ffc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f809 	bl	8005006 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004ffc:	697b      	ldr	r3, [r7, #20]
	}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <prvInitialiseNewTimer+0x28>
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e7fe      	b.n	800502c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	2b00      	cmp	r3, #0
 8005032:	d015      	beq.n	8005060 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005034:	f000 fa80 	bl	8005538 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	6a3a      	ldr	r2, [r7, #32]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe f836 	bl	80030cc <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005060:	bf00      	nop
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <xTimerGenericCommand+0x2c>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	e7fe      	b.n	8005092 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <xTimerGenericCommand+0x94>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02a      	beq.n	80050f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	dc18      	bgt.n	80050e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050ae:	f7ff fce5 	bl	8004a7c <xTaskGetSchedulerState>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d109      	bne.n	80050cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <xTimerGenericCommand+0x94>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f107 0114 	add.w	r1, r7, #20
 80050c0:	2300      	movs	r3, #0
 80050c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c4:	f7fe f9d6 	bl	8003474 <xQueueGenericSend>
 80050c8:	6278      	str	r0, [r7, #36]	; 0x24
 80050ca:	e012      	b.n	80050f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <xTimerGenericCommand+0x94>)
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	f107 0114 	add.w	r1, r7, #20
 80050d4:	2300      	movs	r3, #0
 80050d6:	2200      	movs	r2, #0
 80050d8:	f7fe f9cc 	bl	8003474 <xQueueGenericSend>
 80050dc:	6278      	str	r0, [r7, #36]	; 0x24
 80050de:	e008      	b.n	80050f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <xTimerGenericCommand+0x94>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f107 0114 	add.w	r1, r7, #20
 80050e8:	2300      	movs	r3, #0
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	f7fe fae4 	bl	80036b8 <xQueueGenericSendFromISR>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3728      	adds	r7, #40	; 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000978 	.word	0x20000978

08005100 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af02      	add	r7, sp, #8
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800510a:	4b1c      	ldr	r3, [pc, #112]	; (800517c <prvProcessExpiredTimer+0x7c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe f841 	bl	80031a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d121      	bne.n	800516a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	18d1      	adds	r1, r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	6978      	ldr	r0, [r7, #20]
 8005134:	f000 f8c8 	bl	80052c8 <prvInsertTimerInActiveList>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2300      	movs	r3, #0
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	2100      	movs	r1, #0
 8005148:	6978      	ldr	r0, [r7, #20]
 800514a:	f7ff ff8d 	bl	8005068 <xTimerGenericCommand>
 800514e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d109      	bne.n	800516a <prvProcessExpiredTimer+0x6a>
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e7fe      	b.n	8005168 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	6978      	ldr	r0, [r7, #20]
 8005170:	4798      	blx	r3
}
 8005172:	bf00      	nop
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000970 	.word	0x20000970

08005180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005188:	f107 0308 	add.w	r3, r7, #8
 800518c:	4618      	mov	r0, r3
 800518e:	f000 f857 	bl	8005240 <prvGetNextExpireTime>
 8005192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4619      	mov	r1, r3
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f803 	bl	80051a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800519e:	f000 f8d5 	bl	800534c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051a2:	e7f1      	b.n	8005188 <prvTimerTask+0x8>

080051a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051ae:	f7ff f863 	bl	8004278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051b2:	f107 0308 	add.w	r3, r7, #8
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 f866 	bl	8005288 <prvSampleTimeNow>
 80051bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d130      	bne.n	8005226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <prvProcessTimerOrBlockTask+0x3c>
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d806      	bhi.n	80051e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051d2:	f7ff f85f 	bl	8004294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff ff91 	bl	8005100 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80051de:	e024      	b.n	800522a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80051e6:	4b13      	ldr	r3, [pc, #76]	; (8005234 <prvProcessTimerOrBlockTask+0x90>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <prvProcessTimerOrBlockTask+0x94>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	4619      	mov	r1, r3
 8005206:	f7fe fd53 	bl	8003cb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800520a:	f7ff f843 	bl	8004294 <xTaskResumeAll>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <prvProcessTimerOrBlockTask+0x98>)
 8005216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f3bf 8f6f 	isb	sy
}
 8005224:	e001      	b.n	800522a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005226:	f7ff f835 	bl	8004294 <xTaskResumeAll>
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000974 	.word	0x20000974
 8005238:	20000978 	.word	0x20000978
 800523c:	e000ed04 	.word	0xe000ed04

08005240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005248:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <prvGetNextExpireTime+0x44>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005266:	4b07      	ldr	r3, [pc, #28]	; (8005284 <prvGetNextExpireTime+0x44>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e001      	b.n	8005276 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	20000970 	.word	0x20000970

08005288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005290:	f7ff f8a0 	bl	80043d4 <xTaskGetTickCount>
 8005294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <prvSampleTimeNow+0x3c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	429a      	cmp	r2, r3
 800529e:	d205      	bcs.n	80052ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052a0:	f000 f8ea 	bl	8005478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e002      	b.n	80052b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052b2:	4a04      	ldr	r2, [pc, #16]	; (80052c4 <prvSampleTimeNow+0x3c>)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000980 	.word	0x20000980

080052c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d812      	bhi.n	8005314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d302      	bcc.n	8005302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e01b      	b.n	800533a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <prvInsertTimerInActiveList+0x7c>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fd ff0e 	bl	800312e <vListInsert>
 8005312:	e012      	b.n	800533a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d206      	bcs.n	800532a <prvInsertTimerInActiveList+0x62>
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e007      	b.n	800533a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800532a:	4b07      	ldr	r3, [pc, #28]	; (8005348 <prvInsertTimerInActiveList+0x80>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fd fefa 	bl	800312e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800533a:	697b      	ldr	r3, [r7, #20]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20000974 	.word	0x20000974
 8005348:	20000970 	.word	0x20000970

0800534c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	; 0x30
 8005350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005352:	e07f      	b.n	8005454 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	db7b      	blt.n	8005452 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d004      	beq.n	8005370 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	3304      	adds	r3, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f7fd ff18 	bl	80031a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005370:	1d3b      	adds	r3, r7, #4
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff ff88 	bl	8005288 <prvSampleTimeNow>
 8005378:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2b09      	cmp	r3, #9
 800537e:	d869      	bhi.n	8005454 <prvProcessReceivedCommands+0x108>
 8005380:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <prvProcessReceivedCommands+0x3c>)
 8005382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005386:	bf00      	nop
 8005388:	080053b1 	.word	0x080053b1
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b1 	.word	0x080053b1
 8005394:	08005455 	.word	0x08005455
 8005398:	0800540b 	.word	0x0800540b
 800539c:	08005441 	.word	0x08005441
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053b1 	.word	0x080053b1
 80053a8:	08005455 	.word	0x08005455
 80053ac:	0800540b 	.word	0x0800540b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	18d1      	adds	r1, r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053be:	f7ff ff83 	bl	80052c8 <prvInsertTimerInActiveList>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d045      	beq.n	8005454 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d13d      	bne.n	8005454 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	441a      	add	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ea:	f7ff fe3d 	bl	8005068 <xTimerGenericCommand>
 80053ee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12e      	bne.n	8005454 <prvProcessReceivedCommands+0x108>
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e7fe      	b.n	8005408 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <prvProcessReceivedCommands+0xe0>
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	e7fe      	b.n	800542a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	18d1      	adds	r1, r2, r3
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800543a:	f7ff ff45 	bl	80052c8 <prvInsertTimerInActiveList>
					break;
 800543e:	e009      	b.n	8005454 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800544a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800544c:	f000 fc0c 	bl	8005c68 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005450:	e000      	b.n	8005454 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005452:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvProcessReceivedCommands+0x128>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f107 0108 	add.w	r1, r7, #8
 800545c:	2200      	movs	r2, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe f9d2 	bl	8003808 <xQueueReceive>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	f47f af74 	bne.w	8005354 <prvProcessReceivedCommands+0x8>
	}
}
 800546c:	bf00      	nop
 800546e:	3728      	adds	r7, #40	; 0x28
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000978 	.word	0x20000978

08005478 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800547e:	e044      	b.n	800550a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005480:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <prvSwitchTimerLists+0xb8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800548a:	4b29      	ldr	r3, [pc, #164]	; (8005530 <prvSwitchTimerLists+0xb8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f7fd fe81 	bl	80031a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d12d      	bne.n	800550a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d90e      	bls.n	80054de <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <prvSwitchTimerLists+0xb8>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f7fd fe29 	bl	800312e <vListInsert>
 80054dc:	e015      	b.n	800550a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054de:	2300      	movs	r3, #0
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	2100      	movs	r1, #0
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff fdbd 	bl	8005068 <xTimerGenericCommand>
 80054ee:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <prvSwitchTimerLists+0x92>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	e7fe      	b.n	8005508 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <prvSwitchTimerLists+0xb8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1b5      	bne.n	8005480 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <prvSwitchTimerLists+0xb8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <prvSwitchTimerLists+0xbc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a04      	ldr	r2, [pc, #16]	; (8005530 <prvSwitchTimerLists+0xb8>)
 8005520:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005522:	4a04      	ldr	r2, [pc, #16]	; (8005534 <prvSwitchTimerLists+0xbc>)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6013      	str	r3, [r2, #0]
}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000970 	.word	0x20000970
 8005534:	20000974 	.word	0x20000974

08005538 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800553e:	f000 f965 	bl	800580c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvCheckForValidListAndQueue+0x60>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d120      	bne.n	800558c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800554a:	4814      	ldr	r0, [pc, #80]	; (800559c <prvCheckForValidListAndQueue+0x64>)
 800554c:	f7fd fd9e 	bl	800308c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005550:	4813      	ldr	r0, [pc, #76]	; (80055a0 <prvCheckForValidListAndQueue+0x68>)
 8005552:	f7fd fd9b 	bl	800308c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005556:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <prvCheckForValidListAndQueue+0x6c>)
 8005558:	4a10      	ldr	r2, [pc, #64]	; (800559c <prvCheckForValidListAndQueue+0x64>)
 800555a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <prvCheckForValidListAndQueue+0x70>)
 800555e:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <prvCheckForValidListAndQueue+0x68>)
 8005560:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <prvCheckForValidListAndQueue+0x74>)
 8005568:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <prvCheckForValidListAndQueue+0x78>)
 800556a:	210c      	movs	r1, #12
 800556c:	200a      	movs	r0, #10
 800556e:	f7fd fea9 	bl	80032c4 <xQueueGenericCreateStatic>
 8005572:	4602      	mov	r2, r0
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <prvCheckForValidListAndQueue+0x60>)
 8005576:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <prvCheckForValidListAndQueue+0x60>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <prvCheckForValidListAndQueue+0x60>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	490b      	ldr	r1, [pc, #44]	; (80055b4 <prvCheckForValidListAndQueue+0x7c>)
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fb62 	bl	8003c50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800558c:	f000 f96c 	bl	8005868 <vPortExitCritical>
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000978 	.word	0x20000978
 800559c:	20000948 	.word	0x20000948
 80055a0:	2000095c 	.word	0x2000095c
 80055a4:	20000970 	.word	0x20000970
 80055a8:	20000974 	.word	0x20000974
 80055ac:	200009fc 	.word	0x200009fc
 80055b0:	20000984 	.word	0x20000984
 80055b4:	080084e0 	.word	0x080084e0

080055b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b04      	subs	r3, #4
 80055c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f023 0201 	bic.w	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3b04      	subs	r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055e8:	4a0c      	ldr	r2, [pc, #48]	; (800561c <pxPortInitialiseStack+0x64>)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3b14      	subs	r3, #20
 80055f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3b04      	subs	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f06f 0202 	mvn.w	r2, #2
 8005606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3b20      	subs	r3, #32
 800560c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	08005621 	.word	0x08005621

08005620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <prvTaskExitError+0x50>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d009      	beq.n	8005648 <prvTaskExitError+0x28>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e7fe      	b.n	8005646 <prvTaskExitError+0x26>
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800565a:	bf00      	nop
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0fc      	beq.n	800565c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	200000d4 	.word	0x200000d4
	...

08005680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005680:	4b07      	ldr	r3, [pc, #28]	; (80056a0 <pxCurrentTCBConst2>)
 8005682:	6819      	ldr	r1, [r3, #0]
 8005684:	6808      	ldr	r0, [r1, #0]
 8005686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568a:	f380 8809 	msr	PSP, r0
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8811 	msr	BASEPRI, r0
 800569a:	4770      	bx	lr
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst2>:
 80056a0:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056a8:	4808      	ldr	r0, [pc, #32]	; (80056cc <prvPortStartFirstTask+0x24>)
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	6800      	ldr	r0, [r0, #0]
 80056ae:	f380 8808 	msr	MSP, r0
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8814 	msr	CONTROL, r0
 80056ba:	b662      	cpsie	i
 80056bc:	b661      	cpsie	f
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	df00      	svc	0
 80056c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ca:	bf00      	nop
 80056cc:	e000ed08 	.word	0xe000ed08

080056d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056d6:	4b44      	ldr	r3, [pc, #272]	; (80057e8 <xPortStartScheduler+0x118>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a44      	ldr	r2, [pc, #272]	; (80057ec <xPortStartScheduler+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d109      	bne.n	80056f4 <xPortStartScheduler+0x24>
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	e7fe      	b.n	80056f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056f4:	4b3c      	ldr	r3, [pc, #240]	; (80057e8 <xPortStartScheduler+0x118>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3d      	ldr	r2, [pc, #244]	; (80057f0 <xPortStartScheduler+0x120>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d109      	bne.n	8005712 <xPortStartScheduler+0x42>
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e7fe      	b.n	8005710 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005712:	4b38      	ldr	r3, [pc, #224]	; (80057f4 <xPortStartScheduler+0x124>)
 8005714:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <xPortStartScheduler+0x128>)
 8005738:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800573a:	4b30      	ldr	r3, [pc, #192]	; (80057fc <xPortStartScheduler+0x12c>)
 800573c:	2207      	movs	r2, #7
 800573e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005740:	e009      	b.n	8005756 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <xPortStartScheduler+0x12c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3b01      	subs	r3, #1
 8005748:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <xPortStartScheduler+0x12c>)
 800574a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d0ef      	beq.n	8005742 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <xPortStartScheduler+0x12c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1c3 0307 	rsb	r3, r3, #7
 800576a:	2b04      	cmp	r3, #4
 800576c:	d009      	beq.n	8005782 <xPortStartScheduler+0xb2>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	e7fe      	b.n	8005780 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005782:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <xPortStartScheduler+0x12c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <xPortStartScheduler+0x12c>)
 800578a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <xPortStartScheduler+0x12c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005794:	4a19      	ldr	r2, [pc, #100]	; (80057fc <xPortStartScheduler+0x12c>)
 8005796:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057a0:	4b17      	ldr	r3, [pc, #92]	; (8005800 <xPortStartScheduler+0x130>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <xPortStartScheduler+0x130>)
 80057a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <xPortStartScheduler+0x130>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a13      	ldr	r2, [pc, #76]	; (8005800 <xPortStartScheduler+0x130>)
 80057b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057b8:	f000 f8de 	bl	8005978 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <xPortStartScheduler+0x134>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057c2:	f000 f8fd 	bl	80059c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <xPortStartScheduler+0x138>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <xPortStartScheduler+0x138>)
 80057cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057d2:	f7ff ff69 	bl	80056a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057d6:	f7fe fedf 	bl	8004598 <vTaskSwitchContext>
	prvTaskExitError();
 80057da:	f7ff ff21 	bl	8005620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	e000ed00 	.word	0xe000ed00
 80057ec:	410fc271 	.word	0x410fc271
 80057f0:	410fc270 	.word	0x410fc270
 80057f4:	e000e400 	.word	0xe000e400
 80057f8:	20000a4c 	.word	0x20000a4c
 80057fc:	20000a50 	.word	0x20000a50
 8005800:	e000ed20 	.word	0xe000ed20
 8005804:	200000d4 	.word	0x200000d4
 8005808:	e000ef34 	.word	0xe000ef34

0800580c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <vPortEnterCritical+0x54>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3301      	adds	r3, #1
 800582a:	4a0d      	ldr	r2, [pc, #52]	; (8005860 <vPortEnterCritical+0x54>)
 800582c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <vPortEnterCritical+0x54>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d10e      	bne.n	8005854 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005836:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <vPortEnterCritical+0x58>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <vPortEnterCritical+0x48>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	e7fe      	b.n	8005852 <vPortEnterCritical+0x46>
	}
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	200000d4 	.word	0x200000d4
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <vPortExitCritical+0x4c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d109      	bne.n	800588a <vPortExitCritical+0x22>
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e7fe      	b.n	8005888 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <vPortExitCritical+0x4c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <vPortExitCritical+0x4c>)
 8005892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <vPortExitCritical+0x4c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <vPortExitCritical+0x3e>
 800589c:	2300      	movs	r3, #0
 800589e:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	200000d4 	.word	0x200000d4
	...

080058c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058c0:	f3ef 8009 	mrs	r0, PSP
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <pxCurrentTCBConst>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f01e 0f10 	tst.w	lr, #16
 80058d0:	bf08      	it	eq
 80058d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058e4:	f380 8811 	msr	BASEPRI, r0
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f7fe fe52 	bl	8004598 <vTaskSwitchContext>
 80058f4:	f04f 0000 	mov.w	r0, #0
 80058f8:	f380 8811 	msr	BASEPRI, r0
 80058fc:	bc09      	pop	{r0, r3}
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	6808      	ldr	r0, [r1, #0]
 8005902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005906:	f01e 0f10 	tst.w	lr, #16
 800590a:	bf08      	it	eq
 800590c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005910:	f380 8809 	msr	PSP, r0
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w

08005920 <pxCurrentTCBConst>:
 8005920:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005940:	f001 fdb4 	bl	80074ac <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005944:	f7fe fd68 	bl	8004418 <xTaskIncrementTick>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d006      	beq.n	800595c <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800594e:	f001 fe0b 	bl	8007568 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <xPortSysTickHandler+0x4c>)
 8005954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e001      	b.n	8005960 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800595c:	f001 fde8 	bl	8007530 <SEGGER_SYSVIEW_RecordExitISR>
 8005960:	2300      	movs	r3, #0
 8005962:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	e000ed04 	.word	0xe000ed04

08005978 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <vPortSetupTimerInterrupt+0x34>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortSetupTimerInterrupt+0x38>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <vPortSetupTimerInterrupt+0x3c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <vPortSetupTimerInterrupt+0x40>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	099b      	lsrs	r3, r3, #6
 8005994:	4a09      	ldr	r2, [pc, #36]	; (80059bc <vPortSetupTimerInterrupt+0x44>)
 8005996:	3b01      	subs	r3, #1
 8005998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <vPortSetupTimerInterrupt+0x34>)
 800599c:	2207      	movs	r2, #7
 800599e:	601a      	str	r2, [r3, #0]
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	e000e010 	.word	0xe000e010
 80059b0:	e000e018 	.word	0xe000e018
 80059b4:	200000c8 	.word	0x200000c8
 80059b8:	10624dd3 	.word	0x10624dd3
 80059bc:	e000e014 	.word	0xe000e014

080059c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059d0 <vPortEnableVFP+0x10>
 80059c4:	6801      	ldr	r1, [r0, #0]
 80059c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059ca:	6001      	str	r1, [r0, #0]
 80059cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059ce:	bf00      	nop
 80059d0:	e000ed88 	.word	0xe000ed88

080059d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 80059da:	f000 f839 	bl	8005a50 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059de:	f3ef 8305 	mrs	r3, IPSR
 80059e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2b0f      	cmp	r3, #15
 80059e8:	d913      	bls.n	8005a12 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ea:	4a15      	ldr	r2, [pc, #84]	; (8005a40 <vPortValidateInterruptPriority+0x6c>)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059f4:	4b13      	ldr	r3, [pc, #76]	; (8005a44 <vPortValidateInterruptPriority+0x70>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	7afa      	ldrb	r2, [r7, #11]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d209      	bcs.n	8005a12 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	e7fe      	b.n	8005a10 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <vPortValidateInterruptPriority+0x74>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <vPortValidateInterruptPriority+0x78>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d909      	bls.n	8005a36 <vPortValidateInterruptPriority+0x62>
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	e7fe      	b.n	8005a34 <vPortValidateInterruptPriority+0x60>
	}
 8005a36:	bf00      	nop
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	e000e3f0 	.word	0xe000e3f0
 8005a44:	20000a4c 	.word	0x20000a4c
 8005a48:	e000ed0c 	.word	0xe000ed0c
 8005a4c:	20000a50 	.word	0x20000a50

08005a50 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a56:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <vSetVarulMaxPRIGROUPValue+0x84>)
 8005a58:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a6e:	e009      	b.n	8005a84 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005a78:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8c:	2b80      	cmp	r3, #128	; 0x80
 8005a8e:	d0ef      	beq.n	8005a70 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a90:	4b11      	ldr	r3, [pc, #68]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f1c3 0307 	rsb	r3, r3, #7
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d009      	beq.n	8005ab0 <vSetVarulMaxPRIGROUPValue+0x60>
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	e7fe      	b.n	8005aae <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005ab8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005aba:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ac2:	4a05      	ldr	r2, [pc, #20]	; (8005ad8 <vSetVarulMaxPRIGROUPValue+0x88>)
 8005ac4:	6013      	str	r3, [r2, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	e000e400 	.word	0xe000e400
 8005ad8:	20000a50 	.word	0x20000a50

08005adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ae8:	f7fe fbc6 	bl	8004278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aec:	4b59      	ldr	r3, [pc, #356]	; (8005c54 <pvPortMalloc+0x178>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005af4:	f000 f910 	bl	8005d18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005af8:	4b57      	ldr	r3, [pc, #348]	; (8005c58 <pvPortMalloc+0x17c>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f040 808c 	bne.w	8005c1e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01c      	beq.n	8005b46 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4413      	add	r3, r2
 8005b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f023 0307 	bic.w	r3, r3, #7
 8005b24:	3308      	adds	r3, #8
 8005b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <pvPortMalloc+0x6a>
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e7fe      	b.n	8005b44 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d068      	beq.n	8005c1e <pvPortMalloc+0x142>
 8005b4c:	4b43      	ldr	r3, [pc, #268]	; (8005c5c <pvPortMalloc+0x180>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d863      	bhi.n	8005c1e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b56:	4b42      	ldr	r3, [pc, #264]	; (8005c60 <pvPortMalloc+0x184>)
 8005b58:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b5a:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <pvPortMalloc+0x184>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b60:	e004      	b.n	8005b6c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <pvPortMalloc+0xa2>
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f1      	bne.n	8005b62 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b7e:	4b35      	ldr	r3, [pc, #212]	; (8005c54 <pvPortMalloc+0x178>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d04a      	beq.n	8005c1e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	4413      	add	r3, r2
 8005b90:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	1ad2      	subs	r2, r2, r3
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d91e      	bls.n	8005be8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d009      	beq.n	8005bd0 <pvPortMalloc+0xf4>
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	e7fe      	b.n	8005bce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	1ad2      	subs	r2, r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005be2:	69b8      	ldr	r0, [r7, #24]
 8005be4:	f000 f8fa 	bl	8005ddc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005be8:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <pvPortMalloc+0x180>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	; (8005c5c <pvPortMalloc+0x180>)
 8005bf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bf6:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <pvPortMalloc+0x180>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	; (8005c64 <pvPortMalloc+0x188>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d203      	bcs.n	8005c0a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <pvPortMalloc+0x180>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a17      	ldr	r2, [pc, #92]	; (8005c64 <pvPortMalloc+0x188>)
 8005c08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <pvPortMalloc+0x17c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c1e:	f7fe fb39 	bl	8004294 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8005c28:	f7fd f9f5 	bl	8003016 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <pvPortMalloc+0x16e>
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e7fe      	b.n	8005c48 <pvPortMalloc+0x16c>
	return pvReturn;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3728      	adds	r7, #40	; 0x28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	2001365c 	.word	0x2001365c
 8005c58:	20013668 	.word	0x20013668
 8005c5c:	20013660 	.word	0x20013660
 8005c60:	20013654 	.word	0x20013654
 8005c64:	20013664 	.word	0x20013664

08005c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d046      	beq.n	8005d08 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	425b      	negs	r3, r3
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <vPortFree+0xa8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4013      	ands	r3, r2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <vPortFree+0x42>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e7fe      	b.n	8005ca8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <vPortFree+0x5e>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	60bb      	str	r3, [r7, #8]
 8005cc4:	e7fe      	b.n	8005cc4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <vPortFree+0xa8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d019      	beq.n	8005d08 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d115      	bne.n	8005d08 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <vPortFree+0xa8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	401a      	ands	r2, r3
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cec:	f7fe fac4 	bl	8004278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <vPortFree+0xac>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4a06      	ldr	r2, [pc, #24]	; (8005d14 <vPortFree+0xac>)
 8005cfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cfe:	6938      	ldr	r0, [r7, #16]
 8005d00:	f000 f86c 	bl	8005ddc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d04:	f7fe fac6 	bl	8004294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20013668 	.word	0x20013668
 8005d14:	20013660 	.word	0x20013660

08005d18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d1e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005d22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <prvHeapInit+0xac>)
 8005d26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3307      	adds	r3, #7
 8005d36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0307 	bic.w	r3, r3, #7
 8005d3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	4a1f      	ldr	r2, [pc, #124]	; (8005dc4 <prvHeapInit+0xac>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d50:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <prvHeapInit+0xb0>)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d56:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <prvHeapInit+0xb0>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d64:	2208      	movs	r2, #8
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0307 	bic.w	r3, r3, #7
 8005d72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a15      	ldr	r2, [pc, #84]	; (8005dcc <prvHeapInit+0xb4>)
 8005d78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <prvHeapInit+0xb4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d82:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <prvHeapInit+0xb4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <prvHeapInit+0xb4>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <prvHeapInit+0xb8>)
 8005da6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <prvHeapInit+0xbc>)
 8005dae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005db0:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <prvHeapInit+0xc0>)
 8005db2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	20000a54 	.word	0x20000a54
 8005dc8:	20013654 	.word	0x20013654
 8005dcc:	2001365c 	.word	0x2001365c
 8005dd0:	20013664 	.word	0x20013664
 8005dd4:	20013660 	.word	0x20013660
 8005dd8:	20013668 	.word	0x20013668

08005ddc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005de4:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <prvInsertBlockIntoFreeList+0xac>)
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e002      	b.n	8005df0 <prvInsertBlockIntoFreeList+0x14>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d8f7      	bhi.n	8005dea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	4413      	add	r3, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d108      	bne.n	8005e1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	441a      	add	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	441a      	add	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d118      	bne.n	8005e64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <prvInsertBlockIntoFreeList+0xb0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d00d      	beq.n	8005e5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	441a      	add	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e008      	b.n	8005e6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <prvInsertBlockIntoFreeList+0xb0>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e003      	b.n	8005e6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d002      	beq.n	8005e7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20013654 	.word	0x20013654
 8005e8c:	2001365c 	.word	0x2001365c

08005e90 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005e94:	4803      	ldr	r0, [pc, #12]	; (8005ea4 <_cbSendSystemDesc+0x14>)
 8005e96:	f001 fab5 	bl	8007404 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005e9a:	4803      	ldr	r0, [pc, #12]	; (8005ea8 <_cbSendSystemDesc+0x18>)
 8005e9c:	f001 fab2 	bl	8007404 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	080084e8 	.word	0x080084e8
 8005ea8:	0800851c 	.word	0x0800851c

08005eac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8005eb6:	6819      	ldr	r1, [r3, #0]
 8005eb8:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <SEGGER_SYSVIEW_Conf+0x24>)
 8005eba:	4a06      	ldr	r2, [pc, #24]	; (8005ed4 <SEGGER_SYSVIEW_Conf+0x28>)
 8005ebc:	f000 fd78 	bl	80069b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005ec0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005ec4:	f000 fdb2 	bl	8006a2c <SEGGER_SYSVIEW_SetRAMBase>
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200000c8 	.word	0x200000c8
 8005ed0:	08005e91 	.word	0x08005e91
 8005ed4:	080085bc 	.word	0x080085bc

08005ed8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005ede:	2300      	movs	r3, #0
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	e034      	b.n	8005f4e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005ee4:	491e      	ldr	r1, [pc, #120]	; (8005f60 <_cbSendTaskList+0x88>)
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	491a      	ldr	r1, [pc, #104]	; (8005f60 <_cbSendTaskList+0x88>)
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	3304      	adds	r3, #4
 8005f04:	681c      	ldr	r4, [r3, #0]
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <_cbSendTaskList+0x88>)
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3308      	adds	r3, #8
 8005f16:	681d      	ldr	r5, [r3, #0]
 8005f18:	4911      	ldr	r1, [pc, #68]	; (8005f60 <_cbSendTaskList+0x88>)
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	330c      	adds	r3, #12
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	490d      	ldr	r1, [pc, #52]	; (8005f60 <_cbSendTaskList+0x88>)
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3310      	adds	r3, #16
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4633      	mov	r3, r6
 8005f40:	462a      	mov	r2, r5
 8005f42:	4621      	mov	r1, r4
 8005f44:	f000 f970 	bl	8006228 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <_cbSendTaskList+0x8c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3c5      	bcc.n	8005ee4 <_cbSendTaskList+0xc>
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f60:	2001366c 	.word	0x2001366c
 8005f64:	2001370c 	.word	0x2001370c

08005f68 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005f6e:	f7fe fa41 	bl	80043f4 <xTaskGetTickCountFromISR>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005f7c:	e9d7 5600 	ldrd	r5, r6, [r7]
 8005f80:	462b      	mov	r3, r5
 8005f82:	4634      	mov	r4, r6
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	0162      	lsls	r2, r4, #5
 8005f8e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005f92:	0159      	lsls	r1, r3, #5
 8005f94:	460b      	mov	r3, r1
 8005f96:	4614      	mov	r4, r2
 8005f98:	1b5b      	subs	r3, r3, r5
 8005f9a:	eb64 0406 	sbc.w	r4, r4, r6
 8005f9e:	f04f 0100 	mov.w	r1, #0
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	00a2      	lsls	r2, r4, #2
 8005fa8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005fac:	0099      	lsls	r1, r3, #2
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	195b      	adds	r3, r3, r5
 8005fb4:	eb44 0406 	adc.w	r4, r4, r6
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	00e2      	lsls	r2, r4, #3
 8005fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005fc6:	00d9      	lsls	r1, r3, #3
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4614      	mov	r4, r2
 8005fcc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8005fd0:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005fe0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005fee:	2205      	movs	r2, #5
 8005ff0:	492b      	ldr	r1, [pc, #172]	; (80060a0 <SYSVIEW_AddTask+0xc0>)
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f001 fd90 	bl	8007b18 <memcmp>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d04b      	beq.n	8006096 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b07      	cmp	r3, #7
 8006004:	d903      	bls.n	800600e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006006:	4828      	ldr	r0, [pc, #160]	; (80060a8 <SYSVIEW_AddTask+0xc8>)
 8006008:	f001 fd00 	bl	8007a0c <SEGGER_SYSVIEW_Warn>
    return;
 800600c:	e044      	b.n	8006098 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800600e:	4b25      	ldr	r3, [pc, #148]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4926      	ldr	r1, [pc, #152]	; (80060ac <SYSVIEW_AddTask+0xcc>)
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006022:	4b20      	ldr	r3, [pc, #128]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4921      	ldr	r1, [pc, #132]	; (80060ac <SYSVIEW_AddTask+0xcc>)
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	3304      	adds	r3, #4
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	491b      	ldr	r1, [pc, #108]	; (80060ac <SYSVIEW_AddTask+0xcc>)
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	3308      	adds	r3, #8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4916      	ldr	r1, [pc, #88]	; (80060ac <SYSVIEW_AddTask+0xcc>)
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	330c      	adds	r3, #12
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4910      	ldr	r1, [pc, #64]	; (80060ac <SYSVIEW_AddTask+0xcc>)
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	3310      	adds	r3, #16
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <SYSVIEW_AddTask+0xc4>)
 8006082:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f8ca 	bl	8006228 <SYSVIEW_SendTaskInfo>
 8006094:	e000      	b.n	8006098 <SYSVIEW_AddTask+0xb8>
    return;
 8006096:	bf00      	nop

}
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	0800852c 	.word	0x0800852c
 80060a4:	2001370c 	.word	0x2001370c
 80060a8:	08008534 	.word	0x08008534
 80060ac:	2001366c 	.word	0x2001366c

080060b0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80060b8:	4b59      	ldr	r3, [pc, #356]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80ab 	beq.w	8006218 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e00d      	b.n	80060e4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80060c8:	4956      	ldr	r1, [pc, #344]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d008      	beq.n	80060f0 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	3301      	adds	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	4b4e      	ldr	r3, [pc, #312]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d3ec      	bcc.n	80060c8 <SYSVIEW_DeleteTask+0x18>
 80060ee:	e000      	b.n	80060f2 <SYSVIEW_DeleteTask+0x42>
      break;
 80060f0:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80060f2:	4b4b      	ldr	r3, [pc, #300]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d111      	bne.n	8006122 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a46      	ldr	r2, [pc, #280]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 800610a:	4413      	add	r3, r2
 800610c:	2214      	movs	r2, #20
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f001 fd1b 	bl	8007b4c <memset>
    _NumTasks--;
 8006116:	4b42      	ldr	r3, [pc, #264]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	4a40      	ldr	r2, [pc, #256]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	e07b      	b.n	800621a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8006122:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	429a      	cmp	r2, r3
 800612a:	d276      	bcs.n	800621a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800612c:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	493c      	ldr	r1, [pc, #240]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	4838      	ldr	r0, [pc, #224]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4403      	add	r3, r0
 800614e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8006150:	4b33      	ldr	r3, [pc, #204]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1e5a      	subs	r2, r3, #1
 8006156:	4933      	ldr	r1, [pc, #204]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	3304      	adds	r3, #4
 8006164:	6819      	ldr	r1, [r3, #0]
 8006166:	482f      	ldr	r0, [pc, #188]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4403      	add	r3, r0
 8006174:	3304      	adds	r3, #4
 8006176:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8006178:	4b29      	ldr	r3, [pc, #164]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	4929      	ldr	r1, [pc, #164]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3308      	adds	r3, #8
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	4825      	ldr	r0, [pc, #148]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4403      	add	r3, r0
 800619c:	3308      	adds	r3, #8
 800619e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80061a0:	4b1f      	ldr	r3, [pc, #124]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	491f      	ldr	r1, [pc, #124]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	330c      	adds	r3, #12
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	481b      	ldr	r0, [pc, #108]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4403      	add	r3, r0
 80061c4:	330c      	adds	r3, #12
 80061c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80061c8:	4b15      	ldr	r3, [pc, #84]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1e5a      	subs	r2, r3, #1
 80061ce:	4915      	ldr	r1, [pc, #84]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	3310      	adds	r3, #16
 80061dc:	6819      	ldr	r1, [r3, #0]
 80061de:	4811      	ldr	r0, [pc, #68]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4403      	add	r3, r0
 80061ec:	3310      	adds	r3, #16
 80061ee:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1e5a      	subs	r2, r3, #1
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <SYSVIEW_DeleteTask+0x174>)
 8006200:	4413      	add	r3, r2
 8006202:	2214      	movs	r2, #20
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fca0 	bl	8007b4c <memset>
    _NumTasks--;
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3b01      	subs	r3, #1
 8006212:	4a03      	ldr	r2, [pc, #12]	; (8006220 <SYSVIEW_DeleteTask+0x170>)
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e000      	b.n	800621a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8006218:	bf00      	nop
  }
}
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	2001370c 	.word	0x2001370c
 8006224:	2001366c 	.word	0x2001366c

08006228 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	2214      	movs	r2, #20
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fc84 	bl	8007b4c <memset>
  TaskInfo.TaskID     = TaskID;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4618      	mov	r0, r3
 800625e:	f000 ffd7 	bl	8007210 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006262:	bf00      	nop
 8006264:	3728      	adds	r7, #40	; 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8006272:	4b21      	ldr	r3, [pc, #132]	; (80062f8 <_DoInit+0x8c>)
 8006274:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2203      	movs	r2, #3
 800627a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2203      	movs	r2, #3
 8006280:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a1d      	ldr	r2, [pc, #116]	; (80062fc <_DoInit+0x90>)
 8006286:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a1d      	ldr	r2, [pc, #116]	; (8006300 <_DoInit+0x94>)
 800628c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006294:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a14      	ldr	r2, [pc, #80]	; (80062fc <_DoInit+0x90>)
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a14      	ldr	r2, [pc, #80]	; (8006304 <_DoInit+0x98>)
 80062b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2210      	movs	r2, #16
 80062b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3307      	adds	r3, #7
 80062d0:	4a0d      	ldr	r2, [pc, #52]	; (8006308 <_DoInit+0x9c>)
 80062d2:	6810      	ldr	r0, [r2, #0]
 80062d4:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a0c      	ldr	r2, [pc, #48]	; (800630c <_DoInit+0xa0>)
 80062da:	6810      	ldr	r0, [r2, #0]
 80062dc:	6018      	str	r0, [r3, #0]
 80062de:	8891      	ldrh	r1, [r2, #4]
 80062e0:	7992      	ldrb	r2, [r2, #6]
 80062e2:	8099      	strh	r1, [r3, #4]
 80062e4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	719a      	strb	r2, [r3, #6]
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20015d64 	.word	0x20015d64
 80062fc:	08008584 	.word	0x08008584
 8006300:	20013710 	.word	0x20013710
 8006304:	20013b10 	.word	0x20013b10
 8006308:	08008590 	.word	0x08008590
 800630c:	08008594 	.word	0x08008594

08006310 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800631c:	4b3c      	ldr	r3, [pc, #240]	; (8006410 <SEGGER_RTT_ReadNoLock+0x100>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <SEGGER_RTT_ReadNoLock+0x18>
 8006324:	f7ff ffa2 	bl	800626c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4613      	mov	r3, r2
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	4413      	add	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	3360      	adds	r3, #96	; 0x60
 8006334:	4a36      	ldr	r2, [pc, #216]	; (8006410 <SEGGER_RTT_ReadNoLock+0x100>)
 8006336:	4413      	add	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	429a      	cmp	r2, r3
 8006354:	d92a      	bls.n	80063ac <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4293      	cmp	r3, r2
 8006366:	bf28      	it	cs
 8006368:	4613      	movcs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	4413      	add	r3, r2
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4619      	mov	r1, r3
 8006378:	69f8      	ldr	r0, [r7, #28]
 800637a:	f001 fbdc 	bl	8007b36 <memcpy>
    NumBytesRead += NumBytesRem;
 800637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4413      	add	r3, r2
 800638c:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d101      	bne.n	80063ac <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80063a8:	2300      	movs	r3, #0
 80063aa:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bf28      	it	cs
 80063bc:	4613      	movcs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	4413      	add	r3, r2
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4619      	mov	r1, r3
 80063d2:	69f8      	ldr	r0, [r7, #28]
 80063d4:	f001 fbaf 	bl	8007b36 <memcpy>
    NumBytesRead += NumBytesRem;
 80063d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006406:	4618      	mov	r0, r3
 8006408:	3728      	adds	r7, #40	; 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20015d64 	.word	0x20015d64

08006414 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8006422:	4b30      	ldr	r3, [pc, #192]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800642a:	f7ff ff1f 	bl	800626c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800642e:	4b2d      	ldr	r3, [pc, #180]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4293      	cmp	r3, r2
 8006438:	d24c      	bcs.n	80064d4 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800643a:	f3ef 8311 	mrs	r3, BASEPRI
 800643e:	f04f 0120 	mov.w	r1, #32
 8006442:	f381 8811 	msr	BASEPRI, r1
 8006446:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d032      	beq.n	80064b4 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800644e:	4925      	ldr	r1, [pc, #148]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	4613      	mov	r3, r2
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4413      	add	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	440b      	add	r3, r1
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006462:	4920      	ldr	r1, [pc, #128]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	440b      	add	r3, r1
 8006472:	3304      	adds	r3, #4
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006478:	491a      	ldr	r1, [pc, #104]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4613      	mov	r3, r2
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	3320      	adds	r3, #32
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 800648c:	4915      	ldr	r1, [pc, #84]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	440b      	add	r3, r1
 800649a:	3328      	adds	r3, #40	; 0x28
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80064a0:	4910      	ldr	r1, [pc, #64]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4613      	mov	r3, r2
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	4413      	add	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	440b      	add	r3, r1
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80064b4:	490b      	ldr	r1, [pc, #44]	; (80064e4 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4613      	mov	r3, r2
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	440b      	add	r3, r1
 80064c2:	332c      	adds	r3, #44	; 0x2c
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e002      	b.n	80064da <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80064da:	697b      	ldr	r3, [r7, #20]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20015d64 	.word	0x20015d64

080064e8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80064f6:	4b30      	ldr	r3, [pc, #192]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80064fe:	f7ff feb5 	bl	800626c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4293      	cmp	r3, r2
 800650c:	d24b      	bcs.n	80065a6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800650e:	f3ef 8311 	mrs	r3, BASEPRI
 8006512:	f04f 0120 	mov.w	r1, #32
 8006516:	f381 8811 	msr	BASEPRI, r1
 800651a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d031      	beq.n	8006586 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8006522:	4925      	ldr	r1, [pc, #148]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	3360      	adds	r3, #96	; 0x60
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006536:	4920      	ldr	r1, [pc, #128]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4613      	mov	r3, r2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	3364      	adds	r3, #100	; 0x64
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800654a:	491b      	ldr	r1, [pc, #108]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4613      	mov	r3, r2
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	4413      	add	r3, r2
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	440b      	add	r3, r1
 8006558:	3368      	adds	r3, #104	; 0x68
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 800655e:	4916      	ldr	r1, [pc, #88]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	440b      	add	r3, r1
 800656c:	3370      	adds	r3, #112	; 0x70
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8006572:	4911      	ldr	r1, [pc, #68]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	440b      	add	r3, r1
 8006580:	336c      	adds	r3, #108	; 0x6c
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8006586:	490c      	ldr	r1, [pc, #48]	; (80065b8 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4613      	mov	r3, r2
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4413      	add	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	440b      	add	r3, r1
 8006594:	3374      	adds	r3, #116	; 0x74
 8006596:	6a3a      	ldr	r2, [r7, #32]
 8006598:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e002      	b.n	80065ac <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	617b      	str	r3, [r7, #20]
  }
  return r;
 80065ac:	697b      	ldr	r3, [r7, #20]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20015d64 	.word	0x20015d64

080065bc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80065cc:	e002      	b.n	80065d4 <_EncodeStr+0x18>
    Len++;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3301      	adds	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f6      	bne.n	80065ce <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d901      	bls.n	80065ec <_EncodeStr+0x30>
    Len = Limit;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2bfe      	cmp	r3, #254	; 0xfe
 80065f0:	d806      	bhi.n	8006600 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	60fa      	str	r2, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e011      	b.n	8006624 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	60fa      	str	r2, [r7, #12]
 8006606:	22ff      	movs	r2, #255	; 0xff
 8006608:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	60fa      	str	r2, [r7, #12]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	0a19      	lsrs	r1, r3, #8
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	60fa      	str	r2, [r7, #12]
 8006620:	b2ca      	uxtb	r2, r1
 8006622:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006628:	e00a      	b.n	8006640 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	1c53      	adds	r3, r2, #1
 800662e:	60bb      	str	r3, [r7, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1c59      	adds	r1, r3, #1
 8006634:	60f9      	str	r1, [r7, #12]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	701a      	strb	r2, [r3, #0]
    n++;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	429a      	cmp	r2, r3
 8006646:	d3f0      	bcc.n	800662a <_EncodeStr+0x6e>
  }
  return pPayload;
 8006648:	68fb      	ldr	r3, [r7, #12]
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3304      	adds	r3, #4
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006674:	1cfb      	adds	r3, r7, #3
 8006676:	2201      	movs	r2, #1
 8006678:	4619      	mov	r1, r3
 800667a:	2001      	movs	r0, #1
 800667c:	f7ff fe48 	bl	8006310 <SEGGER_RTT_ReadNoLock>
 8006680:	4603      	mov	r3, r0
 8006682:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	dd44      	ble.n	8006714 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	2b04      	cmp	r3, #4
 800668e:	d01a      	beq.n	80066c6 <_HandleIncomingPacket+0x58>
 8006690:	2b04      	cmp	r3, #4
 8006692:	dc06      	bgt.n	80066a2 <_HandleIncomingPacket+0x34>
 8006694:	2b02      	cmp	r3, #2
 8006696:	d010      	beq.n	80066ba <_HandleIncomingPacket+0x4c>
 8006698:	2b02      	cmp	r3, #2
 800669a:	dc11      	bgt.n	80066c0 <_HandleIncomingPacket+0x52>
 800669c:	2b01      	cmp	r3, #1
 800669e:	d009      	beq.n	80066b4 <_HandleIncomingPacket+0x46>
 80066a0:	e02d      	b.n	80066fe <_HandleIncomingPacket+0x90>
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d015      	beq.n	80066d2 <_HandleIncomingPacket+0x64>
 80066a6:	2b06      	cmp	r3, #6
 80066a8:	db10      	blt.n	80066cc <_HandleIncomingPacket+0x5e>
 80066aa:	2b07      	cmp	r3, #7
 80066ac:	d014      	beq.n	80066d8 <_HandleIncomingPacket+0x6a>
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	d015      	beq.n	80066de <_HandleIncomingPacket+0x70>
 80066b2:	e024      	b.n	80066fe <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80066b4:	f000 fc34 	bl	8006f20 <SEGGER_SYSVIEW_Start>
      break;
 80066b8:	e031      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80066ba:	f000 fce9 	bl	8007090 <SEGGER_SYSVIEW_Stop>
      break;
 80066be:	e02e      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80066c0:	f000 fec4 	bl	800744c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80066c4:	e02b      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80066c6:	f000 fe89 	bl	80073dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 80066ca:	e028      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80066cc:	f000 fd06 	bl	80070dc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80066d0:	e025      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80066d2:	f001 f95d 	bl	8007990 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80066d6:	e022      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80066d8:	f001 f93c 	bl	8007954 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80066dc:	e01f      	b.n	800671e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80066de:	1cfb      	adds	r3, r7, #3
 80066e0:	2201      	movs	r2, #1
 80066e2:	4619      	mov	r1, r3
 80066e4:	2001      	movs	r0, #1
 80066e6:	f7ff fe13 	bl	8006310 <SEGGER_RTT_ReadNoLock>
 80066ea:	4603      	mov	r3, r0
 80066ec:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dd11      	ble.n	8006718 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 f8ac 	bl	8007854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80066fc:	e00c      	b.n	8006718 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	da0a      	bge.n	800671c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006706:	1cfb      	adds	r3, r7, #3
 8006708:	2201      	movs	r2, #1
 800670a:	4619      	mov	r1, r3
 800670c:	2001      	movs	r0, #1
 800670e:	f7ff fdff 	bl	8006310 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006712:	e003      	b.n	800671c <_HandleIncomingPacket+0xae>
    }
  }
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <_HandleIncomingPacket+0xb0>
      break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <_HandleIncomingPacket+0xb0>
      break;
 800671c:	bf00      	nop
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b08c      	sub	sp, #48	; 0x30
 800672c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800672e:	2301      	movs	r3, #1
 8006730:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673c:	4b30      	ldr	r3, [pc, #192]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	e00b      	b.n	800675c <_TrySendOverflowPacket+0x34>
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	62bb      	str	r3, [r7, #40]	; 0x28
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <_TrySendOverflowPacket+0x1c>
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006772:	4b24      	ldr	r3, [pc, #144]	; (8006804 <_TrySendOverflowPacket+0xdc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006778:	4b21      	ldr	r3, [pc, #132]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e00b      	b.n	80067a4 <_TrySendOverflowPacket+0x7c>
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	6279      	str	r1, [r7, #36]	; 0x24
 8006796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b7f      	cmp	r3, #127	; 0x7f
 80067a8:	d8f0      	bhi.n	800678c <_TrySendOverflowPacket+0x64>
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	627a      	str	r2, [r7, #36]	; 0x24
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	1d3b      	adds	r3, r7, #4
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	1d3b      	adds	r3, r7, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	2001      	movs	r0, #1
 80067c8:	f7f9 fd12 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80067cc:	4603      	mov	r3, r0
 80067ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80067dc:	4b08      	ldr	r3, [pc, #32]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	e004      	b.n	80067f4 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	4a03      	ldr	r2, [pc, #12]	; (8006800 <_TrySendOverflowPacket+0xd8>)
 80067f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80067f4:	693b      	ldr	r3, [r7, #16]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3730      	adds	r7, #48	; 0x30
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20015b28 	.word	0x20015b28
 8006804:	e0001004 	.word	0xe0001004

08006808 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	; 0x28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006814:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <_SendPacket+0x19c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d010      	beq.n	800683e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <_SendPacket+0x19c>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80a1 	beq.w	8006968 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006826:	4b5f      	ldr	r3, [pc, #380]	; (80069a4 <_SendPacket+0x19c>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d109      	bne.n	8006842 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800682e:	f7ff ff7b 	bl	8006728 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006832:	4b5c      	ldr	r3, [pc, #368]	; (80069a4 <_SendPacket+0x19c>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b01      	cmp	r3, #1
 8006838:	f040 8098 	bne.w	800696c <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 800683c:	e001      	b.n	8006842 <_SendPacket+0x3a>
    goto Send;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <_SendPacket+0x3c>
Send:
 8006842:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b1f      	cmp	r3, #31
 8006848:	d809      	bhi.n	800685e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800684a:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <_SendPacket+0x19c>)
 800684c:	69da      	ldr	r2, [r3, #28]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	f040 8089 	bne.w	8006970 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b17      	cmp	r3, #23
 8006862:	d807      	bhi.n	8006874 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3b01      	subs	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	e03d      	b.n	80068f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	2b7f      	cmp	r3, #127	; 0x7f
 8006880:	d912      	bls.n	80068a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	09da      	lsrs	r2, r3, #7
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b01      	subs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	3a01      	subs	r2, #1
 800689a:	60fa      	str	r2, [r7, #12]
 800689c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e006      	b.n	80068b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ba:	d912      	bls.n	80068e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	09da      	lsrs	r2, r3, #7
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	3a01      	subs	r2, #1
 80068d4:	60fa      	str	r2, [r7, #12]
 80068d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068da:	b2da      	uxtb	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e006      	b.n	80068f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068f0:	4b2d      	ldr	r3, [pc, #180]	; (80069a8 <_SendPacket+0x1a0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <_SendPacket+0x19c>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	623b      	str	r3, [r7, #32]
 8006908:	e00b      	b.n	8006922 <_SendPacket+0x11a>
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	1c59      	adds	r1, r3, #1
 8006912:	6279      	str	r1, [r7, #36]	; 0x24
 8006914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	09db      	lsrs	r3, r3, #7
 8006920:	623b      	str	r3, [r7, #32]
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b7f      	cmp	r3, #127	; 0x7f
 8006926:	d8f0      	bhi.n	800690a <_SendPacket+0x102>
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	627a      	str	r2, [r7, #36]	; 0x24
 800692e:	6a3a      	ldr	r2, [r7, #32]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	461a      	mov	r2, r3
 8006940:	68f9      	ldr	r1, [r7, #12]
 8006942:	2001      	movs	r0, #1
 8006944:	f7f9 fc54 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006948:	4603      	mov	r3, r0
 800694a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006952:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <_SendPacket+0x19c>)
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	60d3      	str	r3, [r2, #12]
 8006958:	e00b      	b.n	8006972 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800695a:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <_SendPacket+0x19c>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <_SendPacket+0x19c>)
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	e004      	b.n	8006972 <_SendPacket+0x16a>
    goto SendDone;
 8006968:	bf00      	nop
 800696a:	e002      	b.n	8006972 <_SendPacket+0x16a>
      goto SendDone;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <_SendPacket+0x16a>
      goto SendDone;
 8006970:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006972:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <_SendPacket+0x1a4>)
 8006974:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <_SendPacket+0x1a4>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697e:	429a      	cmp	r2, r3
 8006980:	d00b      	beq.n	800699a <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006982:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <_SendPacket+0x19c>)
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d107      	bne.n	800699a <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <_SendPacket+0x19c>)
 800698c:	2201      	movs	r2, #1
 800698e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006990:	f7ff fe6d 	bl	800666e <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006994:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <_SendPacket+0x19c>)
 8006996:	2200      	movs	r2, #0
 8006998:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800699a:	bf00      	nop
 800699c:	3728      	adds	r7, #40	; 0x28
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20015b28 	.word	0x20015b28
 80069a8:	e0001004 	.word	0xe0001004
 80069ac:	20015d64 	.word	0x20015d64

080069b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
 80069bc:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80069be:	2300      	movs	r3, #0
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <SEGGER_SYSVIEW_Init+0x68>)
 80069c8:	4914      	ldr	r1, [pc, #80]	; (8006a1c <SEGGER_SYSVIEW_Init+0x6c>)
 80069ca:	2001      	movs	r0, #1
 80069cc:	f7ff fd22 	bl	8006414 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80069d0:	2300      	movs	r3, #0
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	2308      	movs	r3, #8
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <SEGGER_SYSVIEW_Init+0x70>)
 80069d8:	4910      	ldr	r1, [pc, #64]	; (8006a1c <SEGGER_SYSVIEW_Init+0x6c>)
 80069da:	2001      	movs	r0, #1
 80069dc:	f7ff fd84 	bl	80064e8 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80069e0:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 80069e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80069e8:	4b0f      	ldr	r3, [pc, #60]	; (8006a28 <SEGGER_SYSVIEW_Init+0x78>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a0d      	ldr	r2, [pc, #52]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 80069ee:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80069f6:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a02:	4a08      	ldr	r2, [pc, #32]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a08:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <SEGGER_SYSVIEW_Init+0x74>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20013b20 	.word	0x20013b20
 8006a1c:	0800859c 	.word	0x0800859c
 8006a20:	20015b20 	.word	0x20015b20
 8006a24:	20015b28 	.word	0x20015b28
 8006a28:	e0001004 	.word	0xe0001004

08006a2c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6113      	str	r3, [r2, #16]
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20015b28 	.word	0x20015b28

08006a4c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a54:	f3ef 8311 	mrs	r3, BASEPRI
 8006a58:	f04f 0120 	mov.w	r1, #32
 8006a5c:	f381 8811 	msr	BASEPRI, r1
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	4808      	ldr	r0, [pc, #32]	; (8006a84 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006a64:	f7ff fdf7 	bl	8006656 <_PreparePacket>
 8006a68:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f7ff feca 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f383 8811 	msr	BASEPRI, r3
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20015b58 	.word	0x20015b58

08006a88 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a92:	f3ef 8311 	mrs	r3, BASEPRI
 8006a96:	f04f 0120 	mov.w	r1, #32
 8006a9a:	f381 8811 	msr	BASEPRI, r1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	4816      	ldr	r0, [pc, #88]	; (8006afc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006aa2:	f7ff fdd8 	bl	8006656 <_PreparePacket>
 8006aa6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e00b      	b.n	8006ace <SEGGER_SYSVIEW_RecordU32+0x46>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	61f9      	str	r1, [r7, #28]
 8006ac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad2:	d8f0      	bhi.n	8006ab6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	61fa      	str	r2, [r7, #28]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	6938      	ldr	r0, [r7, #16]
 8006aea:	f7ff fe8d 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20015b58 	.word	0x20015b58

08006b00 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08c      	sub	sp, #48	; 0x30
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	f04f 0120 	mov.w	r1, #32
 8006b14:	f381 8811 	msr	BASEPRI, r1
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	4825      	ldr	r0, [pc, #148]	; (8006bb0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006b1c:	f7ff fd9b 	bl	8006656 <_PreparePacket>
 8006b20:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b2e:	e00b      	b.n	8006b48 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	09db      	lsrs	r3, r3, #7
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4c:	d8f0      	bhi.n	8006b30 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	e00b      	b.n	8006b80 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	6279      	str	r1, [r7, #36]	; 0x24
 8006b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	2b7f      	cmp	r3, #127	; 0x7f
 8006b84:	d8f0      	bhi.n	8006b68 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b8c:	6a3a      	ldr	r2, [r7, #32]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6979      	ldr	r1, [r7, #20]
 8006b9a:	69b8      	ldr	r0, [r7, #24]
 8006b9c:	f7ff fe34 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f383 8811 	msr	BASEPRI, r3
}
 8006ba6:	bf00      	nop
 8006ba8:	3730      	adds	r7, #48	; 0x30
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20015b58 	.word	0x20015b58

08006bb4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08e      	sub	sp, #56	; 0x38
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc6:	f04f 0120 	mov.w	r1, #32
 8006bca:	f381 8811 	msr	BASEPRI, r1
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	4832      	ldr	r0, [pc, #200]	; (8006c9c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006bd2:	f7ff fd40 	bl	8006656 <_PreparePacket>
 8006bd6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	633b      	str	r3, [r7, #48]	; 0x30
 8006be4:	e00b      	b.n	8006bfe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	1c59      	adds	r1, r3, #1
 8006bee:	6379      	str	r1, [r7, #52]	; 0x34
 8006bf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	09db      	lsrs	r3, r3, #7
 8006bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	2b7f      	cmp	r3, #127	; 0x7f
 8006c02:	d8f0      	bhi.n	8006be6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	637a      	str	r2, [r7, #52]	; 0x34
 8006c0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	e00b      	b.n	8006c6e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	1c59      	adds	r1, r3, #1
 8006c5e:	6279      	str	r1, [r7, #36]	; 0x24
 8006c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	09db      	lsrs	r3, r3, #7
 8006c6c:	623b      	str	r3, [r7, #32]
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	2b7f      	cmp	r3, #127	; 0x7f
 8006c72:	d8f0      	bhi.n	8006c56 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	627a      	str	r2, [r7, #36]	; 0x24
 8006c7a:	6a3a      	ldr	r2, [r7, #32]
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	69b8      	ldr	r0, [r7, #24]
 8006c8a:	f7ff fdbd 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	f383 8811 	msr	BASEPRI, r3
}
 8006c94:	bf00      	nop
 8006c96:	3738      	adds	r7, #56	; 0x38
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20015b58 	.word	0x20015b58

08006ca0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b090      	sub	sp, #64	; 0x40
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cae:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb2:	f04f 0120 	mov.w	r1, #32
 8006cb6:	f381 8811 	msr	BASEPRI, r1
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	4840      	ldr	r0, [pc, #256]	; (8006dc0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006cbe:	f7ff fcca 	bl	8006656 <_PreparePacket>
 8006cc2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cd0:	e00b      	b.n	8006cea <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	09db      	lsrs	r3, r3, #7
 8006ce8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b7f      	cmp	r3, #127	; 0x7f
 8006cee:	d8f0      	bhi.n	8006cd2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
 8006d08:	e00b      	b.n	8006d22 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d10:	1c59      	adds	r1, r3, #1
 8006d12:	6379      	str	r1, [r7, #52]	; 0x34
 8006d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	09db      	lsrs	r3, r3, #7
 8006d20:	633b      	str	r3, [r7, #48]	; 0x30
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2b7f      	cmp	r3, #127	; 0x7f
 8006d26:	d8f0      	bhi.n	8006d0a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	637a      	str	r2, [r7, #52]	; 0x34
 8006d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d40:	e00b      	b.n	8006d5a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	1c59      	adds	r1, r3, #1
 8006d4a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	09db      	lsrs	r3, r3, #7
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5e:	d8f0      	bhi.n	8006d42 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
 8006d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d76:	623b      	str	r3, [r7, #32]
 8006d78:	e00b      	b.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1c59      	adds	r1, r3, #1
 8006d82:	6279      	str	r1, [r7, #36]	; 0x24
 8006d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	09db      	lsrs	r3, r3, #7
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	2b7f      	cmp	r3, #127	; 0x7f
 8006d96:	d8f0      	bhi.n	8006d7a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8006d9e:	6a3a      	ldr	r2, [r7, #32]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	6979      	ldr	r1, [r7, #20]
 8006dac:	69b8      	ldr	r0, [r7, #24]
 8006dae:	f7ff fd2b 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f383 8811 	msr	BASEPRI, r3
}
 8006db8:	bf00      	nop
 8006dba:	3740      	adds	r7, #64	; 0x40
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20015b58 	.word	0x20015b58

08006dc4 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b092      	sub	sp, #72	; 0x48
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dd6:	f04f 0120 	mov.w	r1, #32
 8006dda:	f381 8811 	msr	BASEPRI, r1
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	484e      	ldr	r0, [pc, #312]	; (8006f1c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006de2:	f7ff fc38 	bl	8006656 <_PreparePacket>
 8006de6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	643b      	str	r3, [r7, #64]	; 0x40
 8006df4:	e00b      	b.n	8006e0e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfc:	1c59      	adds	r1, r3, #1
 8006dfe:	6479      	str	r1, [r7, #68]	; 0x44
 8006e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0a:	09db      	lsrs	r3, r3, #7
 8006e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	2b7f      	cmp	r3, #127	; 0x7f
 8006e12:	d8f0      	bhi.n	8006df6 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	647a      	str	r2, [r7, #68]	; 0x44
 8006e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e2c:	e00b      	b.n	8006e46 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	09db      	lsrs	r3, r3, #7
 8006e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b7f      	cmp	r3, #127	; 0x7f
 8006e4a:	d8f0      	bhi.n	8006e2e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
 8006e64:	e00b      	b.n	8006e7e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	1c59      	adds	r1, r3, #1
 8006e6e:	6379      	str	r1, [r7, #52]	; 0x34
 8006e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	09db      	lsrs	r3, r3, #7
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b7f      	cmp	r3, #127	; 0x7f
 8006e82:	d8f0      	bhi.n	8006e66 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	637a      	str	r2, [r7, #52]	; 0x34
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	b2d2      	uxtb	r2, r2
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9c:	e00b      	b.n	8006eb6 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eba:	d8f0      	bhi.n	8006e9e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed2:	623b      	str	r3, [r7, #32]
 8006ed4:	e00b      	b.n	8006eee <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	1c59      	adds	r1, r3, #1
 8006ede:	6279      	str	r1, [r7, #36]	; 0x24
 8006ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	09db      	lsrs	r3, r3, #7
 8006eec:	623b      	str	r3, [r7, #32]
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef2:	d8f0      	bhi.n	8006ed6 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8006efa:	6a3a      	ldr	r2, [r7, #32]
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69b8      	ldr	r0, [r7, #24]
 8006f0a:	f7ff fc7d 	bl	8006808 <_SendPacket>
  RECORD_END();
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
 8006f16:	3748      	adds	r7, #72	; 0x48
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20015b58 	.word	0x20015b58

08006f20 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	; 0x30
 8006f24:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006f26:	4b57      	ldr	r3, [pc, #348]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006f2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f30:	f04f 0120 	mov.w	r1, #32
 8006f34:	f381 8811 	msr	BASEPRI, r1
 8006f38:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006f3a:	220a      	movs	r2, #10
 8006f3c:	4952      	ldr	r1, [pc, #328]	; (8007088 <SEGGER_SYSVIEW_Start+0x168>)
 8006f3e:	2001      	movs	r0, #1
 8006f40:	f7f9 f956 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006f4a:	200a      	movs	r0, #10
 8006f4c:	f7ff fd7e 	bl	8006a4c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f50:	f3ef 8311 	mrs	r3, BASEPRI
 8006f54:	f04f 0120 	mov.w	r1, #32
 8006f58:	f381 8811 	msr	BASEPRI, r1
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	484b      	ldr	r0, [pc, #300]	; (800708c <SEGGER_SYSVIEW_Start+0x16c>)
 8006f60:	f7ff fb79 	bl	8006656 <_PreparePacket>
 8006f64:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	4b45      	ldr	r3, [pc, #276]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f74:	e00b      	b.n	8006f8e <SEGGER_SYSVIEW_Start+0x6e>
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	1c59      	adds	r1, r3, #1
 8006f7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b7f      	cmp	r3, #127	; 0x7f
 8006f92:	d8f0      	bhi.n	8006f76 <SEGGER_SYSVIEW_Start+0x56>
 8006f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa8:	4b36      	ldr	r3, [pc, #216]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	e00b      	b.n	8006fc8 <SEGGER_SYSVIEW_Start+0xa8>
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	6279      	str	r1, [r7, #36]	; 0x24
 8006fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	09db      	lsrs	r3, r3, #7
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	2b7f      	cmp	r3, #127	; 0x7f
 8006fcc:	d8f0      	bhi.n	8006fb0 <SEGGER_SYSVIEW_Start+0x90>
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	4b28      	ldr	r3, [pc, #160]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e00b      	b.n	8007002 <SEGGER_SYSVIEW_Start+0xe2>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	61f9      	str	r1, [r7, #28]
 8006ff4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	09db      	lsrs	r3, r3, #7
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	2b7f      	cmp	r3, #127	; 0x7f
 8007006:	d8f0      	bhi.n	8006fea <SEGGER_SYSVIEW_Start+0xca>
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	61fa      	str	r2, [r7, #28]
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	2302      	movs	r3, #2
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	e00b      	b.n	800703a <SEGGER_SYSVIEW_Start+0x11a>
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	1c59      	adds	r1, r3, #1
 800702a:	6179      	str	r1, [r7, #20]
 800702c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	09db      	lsrs	r3, r3, #7
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b7f      	cmp	r3, #127	; 0x7f
 800703e:	d8f0      	bhi.n	8007022 <SEGGER_SYSVIEW_Start+0x102>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	1c5a      	adds	r2, r3, #1
 8007044:	617a      	str	r2, [r7, #20]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007050:	2218      	movs	r2, #24
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fbd7 	bl	8006808 <_SendPacket>
      RECORD_END();
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007060:	4b08      	ldr	r3, [pc, #32]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <SEGGER_SYSVIEW_Start+0x164>)
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800706e:	f000 f9ed 	bl	800744c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007072:	f000 f9b3 	bl	80073dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007076:	f000 fc8b 	bl	8007990 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800707a:	bf00      	nop
 800707c:	3730      	adds	r7, #48	; 0x30
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20015b28 	.word	0x20015b28
 8007088:	080085c4 	.word	0x080085c4
 800708c:	20015b58 	.word	0x20015b58

08007090 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007096:	f3ef 8311 	mrs	r3, BASEPRI
 800709a:	f04f 0120 	mov.w	r1, #32
 800709e:	f381 8811 	msr	BASEPRI, r1
 80070a2:	607b      	str	r3, [r7, #4]
 80070a4:	480b      	ldr	r0, [pc, #44]	; (80070d4 <SEGGER_SYSVIEW_Stop+0x44>)
 80070a6:	f7ff fad6 	bl	8006656 <_PreparePacket>
 80070aa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80070ac:	4b0a      	ldr	r3, [pc, #40]	; (80070d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80070b4:	220b      	movs	r2, #11
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6838      	ldr	r0, [r7, #0]
 80070ba:	f7ff fba5 	bl	8006808 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <SEGGER_SYSVIEW_Stop+0x48>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f383 8811 	msr	BASEPRI, r3
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20015b58 	.word	0x20015b58
 80070d8:	20015b28 	.word	0x20015b28

080070dc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08c      	sub	sp, #48	; 0x30
 80070e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80070e2:	f3ef 8311 	mrs	r3, BASEPRI
 80070e6:	f04f 0120 	mov.w	r1, #32
 80070ea:	f381 8811 	msr	BASEPRI, r1
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	4845      	ldr	r0, [pc, #276]	; (8007208 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80070f2:	f7ff fab0 	bl	8006656 <_PreparePacket>
 80070f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007100:	4b42      	ldr	r3, [pc, #264]	; (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
 8007106:	e00b      	b.n	8007120 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	09db      	lsrs	r3, r3, #7
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	2b7f      	cmp	r3, #127	; 0x7f
 8007124:	d8f0      	bhi.n	8007108 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800712c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
 800713a:	4b34      	ldr	r3, [pc, #208]	; (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	623b      	str	r3, [r7, #32]
 8007140:	e00b      	b.n	800715a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	b2da      	uxtb	r2, r3
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	6279      	str	r1, [r7, #36]	; 0x24
 800714c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	09db      	lsrs	r3, r3, #7
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	2b7f      	cmp	r3, #127	; 0x7f
 800715e:	d8f0      	bhi.n	8007142 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	627a      	str	r2, [r7, #36]	; 0x24
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	61fb      	str	r3, [r7, #28]
 8007174:	4b25      	ldr	r3, [pc, #148]	; (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	61bb      	str	r3, [r7, #24]
 800717a:	e00b      	b.n	8007194 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	61f9      	str	r1, [r7, #28]
 8007186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	09db      	lsrs	r3, r3, #7
 8007192:	61bb      	str	r3, [r7, #24]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b7f      	cmp	r3, #127	; 0x7f
 8007198:	d8f0      	bhi.n	800717c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	61fa      	str	r2, [r7, #28]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	2302      	movs	r3, #2
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e00b      	b.n	80071cc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	6179      	str	r1, [r7, #20]
 80071be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b7f      	cmp	r3, #127	; 0x7f
 80071d0:	d8f0      	bhi.n	80071b4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	617a      	str	r2, [r7, #20]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80071e2:	2218      	movs	r2, #24
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f7ff fb0e 	bl	8006808 <_SendPacket>
  RECORD_END();
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80071f2:	4b06      	ldr	r3, [pc, #24]	; (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	4798      	blx	r3
  }
}
 8007200:	bf00      	nop
 8007202:	3730      	adds	r7, #48	; 0x30
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20015b58 	.word	0x20015b58
 800720c:	20015b28 	.word	0x20015b28

08007210 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b092      	sub	sp, #72	; 0x48
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007218:	f3ef 8311 	mrs	r3, BASEPRI
 800721c:	f04f 0120 	mov.w	r1, #32
 8007220:	f381 8811 	msr	BASEPRI, r1
 8007224:	617b      	str	r3, [r7, #20]
 8007226:	486b      	ldr	r0, [pc, #428]	; (80073d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007228:	f7ff fa15 	bl	8006656 <_PreparePacket>
 800722c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	647b      	str	r3, [r7, #68]	; 0x44
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4b67      	ldr	r3, [pc, #412]	; (80073d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	089b      	lsrs	r3, r3, #2
 8007242:	643b      	str	r3, [r7, #64]	; 0x40
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	b2da      	uxtb	r2, r3
 800724a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	6479      	str	r1, [r7, #68]	; 0x44
 8007250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
 800725e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007260:	2b7f      	cmp	r3, #127	; 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	647a      	str	r2, [r7, #68]	; 0x44
 800726a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007272:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	63bb      	str	r3, [r7, #56]	; 0x38
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	b2da      	uxtb	r2, r3
 8007284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	63f9      	str	r1, [r7, #60]	; 0x3c
 800728a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	63bb      	str	r3, [r7, #56]	; 0x38
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ac:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	4619      	mov	r1, r3
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff f980 	bl	80065bc <_EncodeStr>
 80072bc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80072be:	2209      	movs	r2, #9
 80072c0:	68f9      	ldr	r1, [r7, #12]
 80072c2:	6938      	ldr	r0, [r7, #16]
 80072c4:	f7ff faa0 	bl	8006808 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4b40      	ldr	r3, [pc, #256]	; (80073d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	089b      	lsrs	r3, r3, #2
 80072dc:	633b      	str	r3, [r7, #48]	; 0x30
 80072de:	e00b      	b.n	80072f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	6379      	str	r1, [r7, #52]	; 0x34
 80072ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	09db      	lsrs	r3, r3, #7
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	2b7f      	cmp	r3, #127	; 0x7f
 80072fc:	d8f0      	bhi.n	80072e0 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80072fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	637a      	str	r2, [r7, #52]	; 0x34
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
 8007318:	e00b      	b.n	8007332 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	1c59      	adds	r1, r3, #1
 8007322:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007324:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	09db      	lsrs	r3, r3, #7
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
 8007332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007334:	2b7f      	cmp	r3, #127	; 0x7f
 8007336:	d8f0      	bhi.n	800731a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800733e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007340:	b2d2      	uxtb	r2, r2
 8007342:	701a      	strb	r2, [r3, #0]
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	623b      	str	r3, [r7, #32]
 8007352:	e00b      	b.n	800736c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	1c59      	adds	r1, r3, #1
 800735c:	6279      	str	r1, [r7, #36]	; 0x24
 800735e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	09db      	lsrs	r3, r3, #7
 800736a:	623b      	str	r3, [r7, #32]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	2b7f      	cmp	r3, #127	; 0x7f
 8007370:	d8f0      	bhi.n	8007354 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	627a      	str	r2, [r7, #36]	; 0x24
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	2300      	movs	r3, #0
 8007388:	61bb      	str	r3, [r7, #24]
 800738a:	e00b      	b.n	80073a4 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	b2da      	uxtb	r2, r3
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	1c59      	adds	r1, r3, #1
 8007394:	61f9      	str	r1, [r7, #28]
 8007396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	09db      	lsrs	r3, r3, #7
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	2b7f      	cmp	r3, #127	; 0x7f
 80073a8:	d8f0      	bhi.n	800738c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	61fa      	str	r2, [r7, #28]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80073ba:	2215      	movs	r2, #21
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	6938      	ldr	r0, [r7, #16]
 80073c0:	f7ff fa22 	bl	8006808 <_SendPacket>
  RECORD_END();
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f383 8811 	msr	BASEPRI, r3
}
 80073ca:	bf00      	nop
 80073cc:	3748      	adds	r7, #72	; 0x48
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20015b58 	.word	0x20015b58
 80073d8:	20015b28 	.word	0x20015b28

080073dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80073f2:	4b03      	ldr	r3, [pc, #12]	; (8007400 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4798      	blx	r3
  }
}
 80073fa:	bf00      	nop
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20015b28 	.word	0x20015b28

08007404 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800740c:	f3ef 8311 	mrs	r3, BASEPRI
 8007410:	f04f 0120 	mov.w	r1, #32
 8007414:	f381 8811 	msr	BASEPRI, r1
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	480b      	ldr	r0, [pc, #44]	; (8007448 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800741c:	f7ff f91b 	bl	8006656 <_PreparePacket>
 8007420:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007422:	2280      	movs	r2, #128	; 0x80
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	6938      	ldr	r0, [r7, #16]
 8007428:	f7ff f8c8 	bl	80065bc <_EncodeStr>
 800742c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800742e:	220e      	movs	r2, #14
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f7ff f9e8 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f383 8811 	msr	BASEPRI, r3
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20015b58 	.word	0x20015b58

0800744c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800744c:	b590      	push	{r4, r7, lr}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007452:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d019      	beq.n	800748e <SEGGER_SYSVIEW_RecordSystime+0x42>
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d014      	beq.n	800748e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4798      	blx	r3
 800746c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007470:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007472:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007476:	f04f 0300 	mov.w	r3, #0
 800747a:	f04f 0400 	mov.w	r4, #0
 800747e:	0013      	movs	r3, r2
 8007480:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007482:	461a      	mov	r2, r3
 8007484:	4601      	mov	r1, r0
 8007486:	200d      	movs	r0, #13
 8007488:	f7ff fb3a 	bl	8006b00 <SEGGER_SYSVIEW_RecordU32x2>
 800748c:	e005      	b.n	800749a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	200c      	movs	r0, #12
 8007496:	f7ff faf7 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd90      	pop	{r4, r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20015b28 	.word	0x20015b28
 80074a8:	e0001004 	.word	0xe0001004

080074ac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074b2:	f3ef 8311 	mrs	r3, BASEPRI
 80074b6:	f04f 0120 	mov.w	r1, #32
 80074ba:	f381 8811 	msr	BASEPRI, r1
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	4819      	ldr	r0, [pc, #100]	; (8007528 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80074c2:	f7ff f8c8 	bl	8006656 <_PreparePacket>
 80074c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80074cc:	4b17      	ldr	r3, [pc, #92]	; (800752c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	e00b      	b.n	80074f8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1c59      	adds	r1, r3, #1
 80074e8:	6179      	str	r1, [r7, #20]
 80074ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	09db      	lsrs	r3, r3, #7
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b7f      	cmp	r3, #127	; 0x7f
 80074fc:	d8f0      	bhi.n	80074e0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	617a      	str	r2, [r7, #20]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800750e:	2202      	movs	r2, #2
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	68b8      	ldr	r0, [r7, #8]
 8007514:	f7ff f978 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f383 8811 	msr	BASEPRI, r3
}
 800751e:	bf00      	nop
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20015b58 	.word	0x20015b58
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007536:	f3ef 8311 	mrs	r3, BASEPRI
 800753a:	f04f 0120 	mov.w	r1, #32
 800753e:	f381 8811 	msr	BASEPRI, r1
 8007542:	607b      	str	r3, [r7, #4]
 8007544:	4807      	ldr	r0, [pc, #28]	; (8007564 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007546:	f7ff f886 	bl	8006656 <_PreparePacket>
 800754a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800754c:	2203      	movs	r2, #3
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6838      	ldr	r0, [r7, #0]
 8007552:	f7ff f959 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f383 8811 	msr	BASEPRI, r3
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20015b58 	.word	0x20015b58

08007568 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800756e:	f3ef 8311 	mrs	r3, BASEPRI
 8007572:	f04f 0120 	mov.w	r1, #32
 8007576:	f381 8811 	msr	BASEPRI, r1
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	4807      	ldr	r0, [pc, #28]	; (800759c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800757e:	f7ff f86a 	bl	8006656 <_PreparePacket>
 8007582:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007584:	2212      	movs	r2, #18
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6838      	ldr	r0, [r7, #0]
 800758a:	f7ff f93d 	bl	8006808 <_SendPacket>
  RECORD_END();
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f383 8811 	msr	BASEPRI, r3
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20015b58 	.word	0x20015b58

080075a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80075a6:	f3ef 8311 	mrs	r3, BASEPRI
 80075aa:	f04f 0120 	mov.w	r1, #32
 80075ae:	f381 8811 	msr	BASEPRI, r1
 80075b2:	607b      	str	r3, [r7, #4]
 80075b4:	4807      	ldr	r0, [pc, #28]	; (80075d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80075b6:	f7ff f84e 	bl	8006656 <_PreparePacket>
 80075ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80075bc:	2211      	movs	r2, #17
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6838      	ldr	r0, [r7, #0]
 80075c2:	f7ff f921 	bl	8006808 <_SendPacket>
  RECORD_END();
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f383 8811 	msr	BASEPRI, r3
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20015b58 	.word	0x20015b58

080075d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075e0:	f3ef 8311 	mrs	r3, BASEPRI
 80075e4:	f04f 0120 	mov.w	r1, #32
 80075e8:	f381 8811 	msr	BASEPRI, r1
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	481a      	ldr	r0, [pc, #104]	; (8007658 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80075f0:	f7ff f831 	bl	8006656 <_PreparePacket>
 80075f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075fa:	4b18      	ldr	r3, [pc, #96]	; (800765c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	089b      	lsrs	r3, r3, #2
 8007604:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	61bb      	str	r3, [r7, #24]
 800760e:	e00b      	b.n	8007628 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	61f9      	str	r1, [r7, #28]
 800761a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	09db      	lsrs	r3, r3, #7
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2b7f      	cmp	r3, #127	; 0x7f
 800762c:	d8f0      	bhi.n	8007610 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	61fa      	str	r2, [r7, #28]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800763e:	2208      	movs	r2, #8
 8007640:	68f9      	ldr	r1, [r7, #12]
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f7ff f8e0 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20015b58 	.word	0x20015b58
 800765c:	20015b28 	.word	0x20015b28

08007660 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007668:	f3ef 8311 	mrs	r3, BASEPRI
 800766c:	f04f 0120 	mov.w	r1, #32
 8007670:	f381 8811 	msr	BASEPRI, r1
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	481a      	ldr	r0, [pc, #104]	; (80076e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007678:	f7fe ffed 	bl	8006656 <_PreparePacket>
 800767c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007682:	4b18      	ldr	r3, [pc, #96]	; (80076e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	61bb      	str	r3, [r7, #24]
 8007696:	e00b      	b.n	80076b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	b2da      	uxtb	r2, r3
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	1c59      	adds	r1, r3, #1
 80076a0:	61f9      	str	r1, [r7, #28]
 80076a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	09db      	lsrs	r3, r3, #7
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	2b7f      	cmp	r3, #127	; 0x7f
 80076b4:	d8f0      	bhi.n	8007698 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	61fa      	str	r2, [r7, #28]
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80076c6:	2204      	movs	r2, #4
 80076c8:	68f9      	ldr	r1, [r7, #12]
 80076ca:	6938      	ldr	r0, [r7, #16]
 80076cc:	f7ff f89c 	bl	8006808 <_SendPacket>
  RECORD_END();
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f383 8811 	msr	BASEPRI, r3
}
 80076d6:	bf00      	nop
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20015b58 	.word	0x20015b58
 80076e4:	20015b28 	.word	0x20015b28

080076e8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80076f0:	f3ef 8311 	mrs	r3, BASEPRI
 80076f4:	f04f 0120 	mov.w	r1, #32
 80076f8:	f381 8811 	msr	BASEPRI, r1
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	481a      	ldr	r0, [pc, #104]	; (8007768 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007700:	f7fe ffa9 	bl	8006656 <_PreparePacket>
 8007704:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800770a:	4b18      	ldr	r3, [pc, #96]	; (800776c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	089b      	lsrs	r3, r3, #2
 8007714:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	e00b      	b.n	8007738 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	1c59      	adds	r1, r3, #1
 8007728:	61f9      	str	r1, [r7, #28]
 800772a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	09db      	lsrs	r3, r3, #7
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b7f      	cmp	r3, #127	; 0x7f
 800773c:	d8f0      	bhi.n	8007720 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	61fa      	str	r2, [r7, #28]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800774e:	2206      	movs	r2, #6
 8007750:	68f9      	ldr	r1, [r7, #12]
 8007752:	6938      	ldr	r0, [r7, #16]
 8007754:	f7ff f858 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f383 8811 	msr	BASEPRI, r3
}
 800775e:	bf00      	nop
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20015b58 	.word	0x20015b58
 800776c:	20015b28 	.word	0x20015b28

08007770 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800777a:	f3ef 8311 	mrs	r3, BASEPRI
 800777e:	f04f 0120 	mov.w	r1, #32
 8007782:	f381 8811 	msr	BASEPRI, r1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	4827      	ldr	r0, [pc, #156]	; (8007828 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800778a:	f7fe ff64 	bl	8006656 <_PreparePacket>
 800778e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007794:	4b25      	ldr	r3, [pc, #148]	; (800782c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	089b      	lsrs	r3, r3, #2
 800779e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	623b      	str	r3, [r7, #32]
 80077a8:	e00b      	b.n	80077c2 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	1c59      	adds	r1, r3, #1
 80077b2:	6279      	str	r1, [r7, #36]	; 0x24
 80077b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	09db      	lsrs	r3, r3, #7
 80077c0:	623b      	str	r3, [r7, #32]
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b7f      	cmp	r3, #127	; 0x7f
 80077c6:	d8f0      	bhi.n	80077aa <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	627a      	str	r2, [r7, #36]	; 0x24
 80077ce:	6a3a      	ldr	r2, [r7, #32]
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	e00b      	b.n	80077fa <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1c59      	adds	r1, r3, #1
 80077ea:	61f9      	str	r1, [r7, #28]
 80077ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	09db      	lsrs	r3, r3, #7
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b7f      	cmp	r3, #127	; 0x7f
 80077fe:	d8f0      	bhi.n	80077e2 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	61fa      	str	r2, [r7, #28]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007810:	2207      	movs	r2, #7
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	6938      	ldr	r0, [r7, #16]
 8007816:	f7fe fff7 	bl	8006808 <_SendPacket>
  RECORD_END();
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f383 8811 	msr	BASEPRI, r3
}
 8007820:	bf00      	nop
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	20015b58 	.word	0x20015b58
 800782c:	20015b28 	.word	0x20015b28

08007830 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	089b      	lsrs	r3, r3, #2
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20015b28 	.word	0x20015b28

08007854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800785e:	4b3b      	ldr	r3, [pc, #236]	; (800794c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d06d      	beq.n	8007942 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007866:	4b39      	ldr	r3, [pc, #228]	; (800794c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800786c:	2300      	movs	r3, #0
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007870:	e008      	b.n	8007884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800787e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007880:	3301      	adds	r3, #1
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	429a      	cmp	r2, r3
 800788a:	d3f2      	bcc.n	8007872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800788c:	e000      	b.n	8007890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800788e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d055      	beq.n	8007942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007896:	f3ef 8311 	mrs	r3, BASEPRI
 800789a:	f04f 0120 	mov.w	r1, #32
 800789e:	f381 8811 	msr	BASEPRI, r1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	482a      	ldr	r0, [pc, #168]	; (8007950 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80078a6:	f7fe fed6 	bl	8006656 <_PreparePacket>
 80078aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	623b      	str	r3, [r7, #32]
 80078b8:	e00b      	b.n	80078d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	1c59      	adds	r1, r3, #1
 80078c2:	6279      	str	r1, [r7, #36]	; 0x24
 80078c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	623b      	str	r3, [r7, #32]
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	2b7f      	cmp	r3, #127	; 0x7f
 80078d6:	d8f0      	bhi.n	80078ba <SEGGER_SYSVIEW_SendModule+0x66>
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	627a      	str	r2, [r7, #36]	; 0x24
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e00b      	b.n	800790c <SEGGER_SYSVIEW_SendModule+0xb8>
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	1c59      	adds	r1, r3, #1
 80078fc:	61f9      	str	r1, [r7, #28]
 80078fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	09db      	lsrs	r3, r3, #7
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	2b7f      	cmp	r3, #127	; 0x7f
 8007910:	d8f0      	bhi.n	80078f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	61fa      	str	r2, [r7, #28]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2280      	movs	r2, #128	; 0x80
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7fe fe46 	bl	80065bc <_EncodeStr>
 8007930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007932:	2216      	movs	r2, #22
 8007934:	68f9      	ldr	r1, [r7, #12]
 8007936:	6938      	ldr	r0, [r7, #16]
 8007938:	f7fe ff66 	bl	8006808 <_SendPacket>
      RECORD_END();
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007942:	bf00      	nop
 8007944:	3730      	adds	r7, #48	; 0x30
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	20015b50 	.word	0x20015b50
 8007950:	20015b58 	.word	0x20015b58

08007954 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00f      	beq.n	8007982 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f2      	bne.n	8007968 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20015b50 	.word	0x20015b50

08007990 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007996:	f3ef 8311 	mrs	r3, BASEPRI
 800799a:	f04f 0120 	mov.w	r1, #32
 800799e:	f381 8811 	msr	BASEPRI, r1
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	4817      	ldr	r0, [pc, #92]	; (8007a04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80079a6:	f7fe fe56 	bl	8006656 <_PreparePacket>
 80079aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e00b      	b.n	80079d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	1c59      	adds	r1, r3, #1
 80079c4:	6179      	str	r1, [r7, #20]
 80079c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	09db      	lsrs	r3, r3, #7
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b7f      	cmp	r3, #127	; 0x7f
 80079d8:	d8f0      	bhi.n	80079bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	617a      	str	r2, [r7, #20]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80079ea:	221b      	movs	r2, #27
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	68b8      	ldr	r0, [r7, #8]
 80079f0:	f7fe ff0a 	bl	8006808 <_SendPacket>
  RECORD_END();
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f383 8811 	msr	BASEPRI, r3
}
 80079fa:	bf00      	nop
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20015b58 	.word	0x20015b58
 8007a08:	20015b54 	.word	0x20015b54

08007a0c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a14:	f3ef 8311 	mrs	r3, BASEPRI
 8007a18:	f04f 0120 	mov.w	r1, #32
 8007a1c:	f381 8811 	msr	BASEPRI, r1
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	4827      	ldr	r0, [pc, #156]	; (8007ac0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007a24:	f7fe fe17 	bl	8006656 <_PreparePacket>
 8007a28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a2a:	2280      	movs	r2, #128	; 0x80
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	6938      	ldr	r0, [r7, #16]
 8007a30:	f7fe fdc4 	bl	80065bc <_EncodeStr>
 8007a34:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	623b      	str	r3, [r7, #32]
 8007a3e:	e00b      	b.n	8007a58 <SEGGER_SYSVIEW_Warn+0x4c>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	1c59      	adds	r1, r3, #1
 8007a48:	6279      	str	r1, [r7, #36]	; 0x24
 8007a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	09db      	lsrs	r3, r3, #7
 8007a56:	623b      	str	r3, [r7, #32]
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a5c:	d8f0      	bhi.n	8007a40 <SEGGER_SYSVIEW_Warn+0x34>
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	627a      	str	r2, [r7, #36]	; 0x24
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	2300      	movs	r3, #0
 8007a74:	61bb      	str	r3, [r7, #24]
 8007a76:	e00b      	b.n	8007a90 <SEGGER_SYSVIEW_Warn+0x84>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	1c59      	adds	r1, r3, #1
 8007a80:	61f9      	str	r1, [r7, #28]
 8007a82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	09db      	lsrs	r3, r3, #7
 8007a8e:	61bb      	str	r3, [r7, #24]
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b7f      	cmp	r3, #127	; 0x7f
 8007a94:	d8f0      	bhi.n	8007a78 <SEGGER_SYSVIEW_Warn+0x6c>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	1c5a      	adds	r2, r3, #1
 8007a9a:	61fa      	str	r2, [r7, #28]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	b2d2      	uxtb	r2, r2
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007aa6:	221a      	movs	r2, #26
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f7fe feac 	bl	8006808 <_SendPacket>
  RECORD_END();
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f383 8811 	msr	BASEPRI, r3
}
 8007ab6:	bf00      	nop
 8007ab8:	3728      	adds	r7, #40	; 0x28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20015b58 	.word	0x20015b58

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	200000d8 	.word	0x200000d8

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4e0d      	ldr	r6, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1ba4      	subs	r4, r4, r6
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2500      	movs	r5, #0
 8007adc:	42a5      	cmp	r5, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4e0b      	ldr	r6, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f000 fc36 	bl	8008354 <_init>
 8007ae8:	1ba4      	subs	r4, r4, r6
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2500      	movs	r5, #0
 8007aee:	42a5      	cmp	r5, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007af8:	4798      	blx	r3
 8007afa:	3501      	adds	r5, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b02:	4798      	blx	r3
 8007b04:	3501      	adds	r5, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	0800860c 	.word	0x0800860c
 8007b0c:	0800860c 	.word	0x0800860c
 8007b10:	0800860c 	.word	0x0800860c
 8007b14:	08008610 	.word	0x08008610

08007b18 <memcmp>:
 8007b18:	b530      	push	{r4, r5, lr}
 8007b1a:	2400      	movs	r4, #0
 8007b1c:	42a2      	cmp	r2, r4
 8007b1e:	d101      	bne.n	8007b24 <memcmp+0xc>
 8007b20:	2000      	movs	r0, #0
 8007b22:	e007      	b.n	8007b34 <memcmp+0x1c>
 8007b24:	5d03      	ldrb	r3, [r0, r4]
 8007b26:	3401      	adds	r4, #1
 8007b28:	190d      	adds	r5, r1, r4
 8007b2a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007b2e:	42ab      	cmp	r3, r5
 8007b30:	d0f4      	beq.n	8007b1c <memcmp+0x4>
 8007b32:	1b58      	subs	r0, r3, r5
 8007b34:	bd30      	pop	{r4, r5, pc}

08007b36 <memcpy>:
 8007b36:	b510      	push	{r4, lr}
 8007b38:	1e43      	subs	r3, r0, #1
 8007b3a:	440a      	add	r2, r1
 8007b3c:	4291      	cmp	r1, r2
 8007b3e:	d100      	bne.n	8007b42 <memcpy+0xc>
 8007b40:	bd10      	pop	{r4, pc}
 8007b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b4a:	e7f7      	b.n	8007b3c <memcpy+0x6>

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <siprintf>:
 8007b5c:	b40e      	push	{r1, r2, r3}
 8007b5e:	b500      	push	{lr}
 8007b60:	b09c      	sub	sp, #112	; 0x70
 8007b62:	ab1d      	add	r3, sp, #116	; 0x74
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	9006      	str	r0, [sp, #24]
 8007b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b6c:	4809      	ldr	r0, [pc, #36]	; (8007b94 <siprintf+0x38>)
 8007b6e:	9107      	str	r1, [sp, #28]
 8007b70:	9104      	str	r1, [sp, #16]
 8007b72:	4909      	ldr	r1, [pc, #36]	; (8007b98 <siprintf+0x3c>)
 8007b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b78:	9105      	str	r1, [sp, #20]
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	a902      	add	r1, sp, #8
 8007b80:	f000 f866 	bl	8007c50 <_svfiprintf_r>
 8007b84:	9b02      	ldr	r3, [sp, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	b01c      	add	sp, #112	; 0x70
 8007b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b90:	b003      	add	sp, #12
 8007b92:	4770      	bx	lr
 8007b94:	200000d8 	.word	0x200000d8
 8007b98:	ffff0208 	.word	0xffff0208

08007b9c <__ssputs_r>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	688e      	ldr	r6, [r1, #8]
 8007ba2:	429e      	cmp	r6, r3
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	4690      	mov	r8, r2
 8007baa:	4699      	mov	r9, r3
 8007bac:	d837      	bhi.n	8007c1e <__ssputs_r+0x82>
 8007bae:	898a      	ldrh	r2, [r1, #12]
 8007bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bb4:	d031      	beq.n	8007c1a <__ssputs_r+0x7e>
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	6909      	ldr	r1, [r1, #16]
 8007bba:	1a6f      	subs	r7, r5, r1
 8007bbc:	6965      	ldr	r5, [r4, #20]
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007bc8:	f109 0301 	add.w	r3, r9, #1
 8007bcc:	443b      	add	r3, r7
 8007bce:	429d      	cmp	r5, r3
 8007bd0:	bf38      	it	cc
 8007bd2:	461d      	movcc	r5, r3
 8007bd4:	0553      	lsls	r3, r2, #21
 8007bd6:	d530      	bpl.n	8007c3a <__ssputs_r+0x9e>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f000 fb21 	bl	8008220 <_malloc_r>
 8007bde:	4606      	mov	r6, r0
 8007be0:	b950      	cbnz	r0, 8007bf8 <__ssputs_r+0x5c>
 8007be2:	230c      	movs	r3, #12
 8007be4:	f8ca 3000 	str.w	r3, [sl]
 8007be8:	89a3      	ldrh	r3, [r4, #12]
 8007bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf8:	463a      	mov	r2, r7
 8007bfa:	6921      	ldr	r1, [r4, #16]
 8007bfc:	f7ff ff9b 	bl	8007b36 <memcpy>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	6126      	str	r6, [r4, #16]
 8007c0e:	6165      	str	r5, [r4, #20]
 8007c10:	443e      	add	r6, r7
 8007c12:	1bed      	subs	r5, r5, r7
 8007c14:	6026      	str	r6, [r4, #0]
 8007c16:	60a5      	str	r5, [r4, #8]
 8007c18:	464e      	mov	r6, r9
 8007c1a:	454e      	cmp	r6, r9
 8007c1c:	d900      	bls.n	8007c20 <__ssputs_r+0x84>
 8007c1e:	464e      	mov	r6, r9
 8007c20:	4632      	mov	r2, r6
 8007c22:	4641      	mov	r1, r8
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	f000 fa93 	bl	8008150 <memmove>
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	1b9b      	subs	r3, r3, r6
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	441e      	add	r6, r3
 8007c34:	6026      	str	r6, [r4, #0]
 8007c36:	2000      	movs	r0, #0
 8007c38:	e7dc      	b.n	8007bf4 <__ssputs_r+0x58>
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	f000 fb4a 	bl	80082d4 <_realloc_r>
 8007c40:	4606      	mov	r6, r0
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d1e2      	bne.n	8007c0c <__ssputs_r+0x70>
 8007c46:	6921      	ldr	r1, [r4, #16]
 8007c48:	4650      	mov	r0, sl
 8007c4a:	f000 fa9b 	bl	8008184 <_free_r>
 8007c4e:	e7c8      	b.n	8007be2 <__ssputs_r+0x46>

08007c50 <_svfiprintf_r>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	461d      	mov	r5, r3
 8007c56:	898b      	ldrh	r3, [r1, #12]
 8007c58:	061f      	lsls	r7, r3, #24
 8007c5a:	b09d      	sub	sp, #116	; 0x74
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	4616      	mov	r6, r2
 8007c62:	d50f      	bpl.n	8007c84 <_svfiprintf_r+0x34>
 8007c64:	690b      	ldr	r3, [r1, #16]
 8007c66:	b96b      	cbnz	r3, 8007c84 <_svfiprintf_r+0x34>
 8007c68:	2140      	movs	r1, #64	; 0x40
 8007c6a:	f000 fad9 	bl	8008220 <_malloc_r>
 8007c6e:	6020      	str	r0, [r4, #0]
 8007c70:	6120      	str	r0, [r4, #16]
 8007c72:	b928      	cbnz	r0, 8007c80 <_svfiprintf_r+0x30>
 8007c74:	230c      	movs	r3, #12
 8007c76:	f8c8 3000 	str.w	r3, [r8]
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7e:	e0c8      	b.n	8007e12 <_svfiprintf_r+0x1c2>
 8007c80:	2340      	movs	r3, #64	; 0x40
 8007c82:	6163      	str	r3, [r4, #20]
 8007c84:	2300      	movs	r3, #0
 8007c86:	9309      	str	r3, [sp, #36]	; 0x24
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c8e:	2330      	movs	r3, #48	; 0x30
 8007c90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c94:	9503      	str	r5, [sp, #12]
 8007c96:	f04f 0b01 	mov.w	fp, #1
 8007c9a:	4637      	mov	r7, r6
 8007c9c:	463d      	mov	r5, r7
 8007c9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ca2:	b10b      	cbz	r3, 8007ca8 <_svfiprintf_r+0x58>
 8007ca4:	2b25      	cmp	r3, #37	; 0x25
 8007ca6:	d13e      	bne.n	8007d26 <_svfiprintf_r+0xd6>
 8007ca8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007cac:	d00b      	beq.n	8007cc6 <_svfiprintf_r+0x76>
 8007cae:	4653      	mov	r3, sl
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	f7ff ff71 	bl	8007b9c <__ssputs_r>
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f000 80a4 	beq.w	8007e08 <_svfiprintf_r+0x1b8>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc2:	4453      	add	r3, sl
 8007cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc6:	783b      	ldrb	r3, [r7, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 809d 	beq.w	8007e08 <_svfiprintf_r+0x1b8>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8007ce2:	462f      	mov	r7, r5
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007cea:	4850      	ldr	r0, [pc, #320]	; (8007e2c <_svfiprintf_r+0x1dc>)
 8007cec:	f7f8 fad0 	bl	8000290 <memchr>
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	b9d0      	cbnz	r0, 8007d2a <_svfiprintf_r+0xda>
 8007cf4:	06d9      	lsls	r1, r3, #27
 8007cf6:	bf44      	itt	mi
 8007cf8:	2220      	movmi	r2, #32
 8007cfa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007cfe:	071a      	lsls	r2, r3, #28
 8007d00:	bf44      	itt	mi
 8007d02:	222b      	movmi	r2, #43	; 0x2b
 8007d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d08:	782a      	ldrb	r2, [r5, #0]
 8007d0a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d0c:	d015      	beq.n	8007d3a <_svfiprintf_r+0xea>
 8007d0e:	9a07      	ldr	r2, [sp, #28]
 8007d10:	462f      	mov	r7, r5
 8007d12:	2000      	movs	r0, #0
 8007d14:	250a      	movs	r5, #10
 8007d16:	4639      	mov	r1, r7
 8007d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d1c:	3b30      	subs	r3, #48	; 0x30
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d94d      	bls.n	8007dbe <_svfiprintf_r+0x16e>
 8007d22:	b1b8      	cbz	r0, 8007d54 <_svfiprintf_r+0x104>
 8007d24:	e00f      	b.n	8007d46 <_svfiprintf_r+0xf6>
 8007d26:	462f      	mov	r7, r5
 8007d28:	e7b8      	b.n	8007c9c <_svfiprintf_r+0x4c>
 8007d2a:	4a40      	ldr	r2, [pc, #256]	; (8007e2c <_svfiprintf_r+0x1dc>)
 8007d2c:	1a80      	subs	r0, r0, r2
 8007d2e:	fa0b f000 	lsl.w	r0, fp, r0
 8007d32:	4318      	orrs	r0, r3
 8007d34:	9004      	str	r0, [sp, #16]
 8007d36:	463d      	mov	r5, r7
 8007d38:	e7d3      	b.n	8007ce2 <_svfiprintf_r+0x92>
 8007d3a:	9a03      	ldr	r2, [sp, #12]
 8007d3c:	1d11      	adds	r1, r2, #4
 8007d3e:	6812      	ldr	r2, [r2, #0]
 8007d40:	9103      	str	r1, [sp, #12]
 8007d42:	2a00      	cmp	r2, #0
 8007d44:	db01      	blt.n	8007d4a <_svfiprintf_r+0xfa>
 8007d46:	9207      	str	r2, [sp, #28]
 8007d48:	e004      	b.n	8007d54 <_svfiprintf_r+0x104>
 8007d4a:	4252      	negs	r2, r2
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	9207      	str	r2, [sp, #28]
 8007d52:	9304      	str	r3, [sp, #16]
 8007d54:	783b      	ldrb	r3, [r7, #0]
 8007d56:	2b2e      	cmp	r3, #46	; 0x2e
 8007d58:	d10c      	bne.n	8007d74 <_svfiprintf_r+0x124>
 8007d5a:	787b      	ldrb	r3, [r7, #1]
 8007d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5e:	d133      	bne.n	8007dc8 <_svfiprintf_r+0x178>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	1d1a      	adds	r2, r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	9203      	str	r2, [sp, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bfb8      	it	lt
 8007d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d70:	3702      	adds	r7, #2
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	4d2e      	ldr	r5, [pc, #184]	; (8007e30 <_svfiprintf_r+0x1e0>)
 8007d76:	7839      	ldrb	r1, [r7, #0]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f7f8 fa88 	bl	8000290 <memchr>
 8007d80:	b138      	cbz	r0, 8007d92 <_svfiprintf_r+0x142>
 8007d82:	2340      	movs	r3, #64	; 0x40
 8007d84:	1b40      	subs	r0, r0, r5
 8007d86:	fa03 f000 	lsl.w	r0, r3, r0
 8007d8a:	9b04      	ldr	r3, [sp, #16]
 8007d8c:	4303      	orrs	r3, r0
 8007d8e:	3701      	adds	r7, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	7839      	ldrb	r1, [r7, #0]
 8007d94:	4827      	ldr	r0, [pc, #156]	; (8007e34 <_svfiprintf_r+0x1e4>)
 8007d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d9a:	2206      	movs	r2, #6
 8007d9c:	1c7e      	adds	r6, r7, #1
 8007d9e:	f7f8 fa77 	bl	8000290 <memchr>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d038      	beq.n	8007e18 <_svfiprintf_r+0x1c8>
 8007da6:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <_svfiprintf_r+0x1e8>)
 8007da8:	bb13      	cbnz	r3, 8007df0 <_svfiprintf_r+0x1a0>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	3308      	adds	r3, #8
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db8:	444b      	add	r3, r9
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	e76d      	b.n	8007c9a <_svfiprintf_r+0x4a>
 8007dbe:	fb05 3202 	mla	r2, r5, r2, r3
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	e7a6      	b.n	8007d16 <_svfiprintf_r+0xc6>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	3701      	adds	r7, #1
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	250a      	movs	r5, #10
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dd8:	3a30      	subs	r2, #48	; 0x30
 8007dda:	2a09      	cmp	r2, #9
 8007ddc:	d903      	bls.n	8007de6 <_svfiprintf_r+0x196>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0c8      	beq.n	8007d74 <_svfiprintf_r+0x124>
 8007de2:	9105      	str	r1, [sp, #20]
 8007de4:	e7c6      	b.n	8007d74 <_svfiprintf_r+0x124>
 8007de6:	fb05 2101 	mla	r1, r5, r1, r2
 8007dea:	2301      	movs	r3, #1
 8007dec:	4607      	mov	r7, r0
 8007dee:	e7f0      	b.n	8007dd2 <_svfiprintf_r+0x182>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	4622      	mov	r2, r4
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <_svfiprintf_r+0x1ec>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f3af 8000 	nop.w
 8007e00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e04:	4681      	mov	r9, r0
 8007e06:	d1d6      	bne.n	8007db6 <_svfiprintf_r+0x166>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	065b      	lsls	r3, r3, #25
 8007e0c:	f53f af35 	bmi.w	8007c7a <_svfiprintf_r+0x2a>
 8007e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e12:	b01d      	add	sp, #116	; 0x74
 8007e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e18:	ab03      	add	r3, sp, #12
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <_svfiprintf_r+0x1ec>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	4640      	mov	r0, r8
 8007e24:	f000 f882 	bl	8007f2c <_printf_i>
 8007e28:	e7ea      	b.n	8007e00 <_svfiprintf_r+0x1b0>
 8007e2a:	bf00      	nop
 8007e2c:	080085ce 	.word	0x080085ce
 8007e30:	080085d4 	.word	0x080085d4
 8007e34:	080085d8 	.word	0x080085d8
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	08007b9d 	.word	0x08007b9d

08007e40 <_printf_common>:
 8007e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	4691      	mov	r9, r2
 8007e46:	461f      	mov	r7, r3
 8007e48:	688a      	ldr	r2, [r1, #8]
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e50:	4293      	cmp	r3, r2
 8007e52:	bfb8      	it	lt
 8007e54:	4613      	movlt	r3, r2
 8007e56:	f8c9 3000 	str.w	r3, [r9]
 8007e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e5e:	4606      	mov	r6, r0
 8007e60:	460c      	mov	r4, r1
 8007e62:	b112      	cbz	r2, 8007e6a <_printf_common+0x2a>
 8007e64:	3301      	adds	r3, #1
 8007e66:	f8c9 3000 	str.w	r3, [r9]
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	0699      	lsls	r1, r3, #26
 8007e6e:	bf42      	ittt	mi
 8007e70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e74:	3302      	addmi	r3, #2
 8007e76:	f8c9 3000 	strmi.w	r3, [r9]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	f015 0506 	ands.w	r5, r5, #6
 8007e80:	d107      	bne.n	8007e92 <_printf_common+0x52>
 8007e82:	f104 0a19 	add.w	sl, r4, #25
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	f8d9 2000 	ldr.w	r2, [r9]
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	42ab      	cmp	r3, r5
 8007e90:	dc28      	bgt.n	8007ee4 <_printf_common+0xa4>
 8007e92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	3300      	adds	r3, #0
 8007e9a:	bf18      	it	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	0692      	lsls	r2, r2, #26
 8007ea0:	d42d      	bmi.n	8007efe <_printf_common+0xbe>
 8007ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	47c0      	blx	r8
 8007eac:	3001      	adds	r0, #1
 8007eae:	d020      	beq.n	8007ef2 <_printf_common+0xb2>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	68e5      	ldr	r5, [r4, #12]
 8007eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb8:	f003 0306 	and.w	r3, r3, #6
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	bf08      	it	eq
 8007ec0:	1aad      	subeq	r5, r5, r2
 8007ec2:	68a3      	ldr	r3, [r4, #8]
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	bf0c      	ite	eq
 8007ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ecc:	2500      	movne	r5, #0
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	bfc4      	itt	gt
 8007ed2:	1a9b      	subgt	r3, r3, r2
 8007ed4:	18ed      	addgt	r5, r5, r3
 8007ed6:	f04f 0900 	mov.w	r9, #0
 8007eda:	341a      	adds	r4, #26
 8007edc:	454d      	cmp	r5, r9
 8007ede:	d11a      	bne.n	8007f16 <_printf_common+0xd6>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e008      	b.n	8007ef6 <_printf_common+0xb6>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4652      	mov	r2, sl
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4630      	mov	r0, r6
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d103      	bne.n	8007efa <_printf_common+0xba>
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efa:	3501      	adds	r5, #1
 8007efc:	e7c3      	b.n	8007e86 <_printf_common+0x46>
 8007efe:	18e1      	adds	r1, r4, r3
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	2030      	movs	r0, #48	; 0x30
 8007f04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f08:	4422      	add	r2, r4
 8007f0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f12:	3302      	adds	r3, #2
 8007f14:	e7c5      	b.n	8007ea2 <_printf_common+0x62>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4622      	mov	r2, r4
 8007f1a:	4639      	mov	r1, r7
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	47c0      	blx	r8
 8007f20:	3001      	adds	r0, #1
 8007f22:	d0e6      	beq.n	8007ef2 <_printf_common+0xb2>
 8007f24:	f109 0901 	add.w	r9, r9, #1
 8007f28:	e7d8      	b.n	8007edc <_printf_common+0x9c>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f34:	460c      	mov	r4, r1
 8007f36:	7e09      	ldrb	r1, [r1, #24]
 8007f38:	b085      	sub	sp, #20
 8007f3a:	296e      	cmp	r1, #110	; 0x6e
 8007f3c:	4617      	mov	r7, r2
 8007f3e:	4606      	mov	r6, r0
 8007f40:	4698      	mov	r8, r3
 8007f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f44:	f000 80b3 	beq.w	80080ae <_printf_i+0x182>
 8007f48:	d822      	bhi.n	8007f90 <_printf_i+0x64>
 8007f4a:	2963      	cmp	r1, #99	; 0x63
 8007f4c:	d036      	beq.n	8007fbc <_printf_i+0x90>
 8007f4e:	d80a      	bhi.n	8007f66 <_printf_i+0x3a>
 8007f50:	2900      	cmp	r1, #0
 8007f52:	f000 80b9 	beq.w	80080c8 <_printf_i+0x19c>
 8007f56:	2958      	cmp	r1, #88	; 0x58
 8007f58:	f000 8083 	beq.w	8008062 <_printf_i+0x136>
 8007f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007f64:	e032      	b.n	8007fcc <_printf_i+0xa0>
 8007f66:	2964      	cmp	r1, #100	; 0x64
 8007f68:	d001      	beq.n	8007f6e <_printf_i+0x42>
 8007f6a:	2969      	cmp	r1, #105	; 0x69
 8007f6c:	d1f6      	bne.n	8007f5c <_printf_i+0x30>
 8007f6e:	6820      	ldr	r0, [r4, #0]
 8007f70:	6813      	ldr	r3, [r2, #0]
 8007f72:	0605      	lsls	r5, r0, #24
 8007f74:	f103 0104 	add.w	r1, r3, #4
 8007f78:	d52a      	bpl.n	8007fd0 <_printf_i+0xa4>
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da03      	bge.n	8007f8a <_printf_i+0x5e>
 8007f82:	222d      	movs	r2, #45	; 0x2d
 8007f84:	425b      	negs	r3, r3
 8007f86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007f8a:	486f      	ldr	r0, [pc, #444]	; (8008148 <_printf_i+0x21c>)
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	e039      	b.n	8008004 <_printf_i+0xd8>
 8007f90:	2973      	cmp	r1, #115	; 0x73
 8007f92:	f000 809d 	beq.w	80080d0 <_printf_i+0x1a4>
 8007f96:	d808      	bhi.n	8007faa <_printf_i+0x7e>
 8007f98:	296f      	cmp	r1, #111	; 0x6f
 8007f9a:	d020      	beq.n	8007fde <_printf_i+0xb2>
 8007f9c:	2970      	cmp	r1, #112	; 0x70
 8007f9e:	d1dd      	bne.n	8007f5c <_printf_i+0x30>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	f043 0320 	orr.w	r3, r3, #32
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	e003      	b.n	8007fb2 <_printf_i+0x86>
 8007faa:	2975      	cmp	r1, #117	; 0x75
 8007fac:	d017      	beq.n	8007fde <_printf_i+0xb2>
 8007fae:	2978      	cmp	r1, #120	; 0x78
 8007fb0:	d1d4      	bne.n	8007f5c <_printf_i+0x30>
 8007fb2:	2378      	movs	r3, #120	; 0x78
 8007fb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fb8:	4864      	ldr	r0, [pc, #400]	; (800814c <_printf_i+0x220>)
 8007fba:	e055      	b.n	8008068 <_printf_i+0x13c>
 8007fbc:	6813      	ldr	r3, [r2, #0]
 8007fbe:	1d19      	adds	r1, r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6011      	str	r1, [r2, #0]
 8007fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e08c      	b.n	80080ea <_printf_i+0x1be>
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6011      	str	r1, [r2, #0]
 8007fd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fd8:	bf18      	it	ne
 8007fda:	b21b      	sxthne	r3, r3
 8007fdc:	e7cf      	b.n	8007f7e <_printf_i+0x52>
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	6825      	ldr	r5, [r4, #0]
 8007fe2:	1d18      	adds	r0, r3, #4
 8007fe4:	6010      	str	r0, [r2, #0]
 8007fe6:	0628      	lsls	r0, r5, #24
 8007fe8:	d501      	bpl.n	8007fee <_printf_i+0xc2>
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	e002      	b.n	8007ff4 <_printf_i+0xc8>
 8007fee:	0668      	lsls	r0, r5, #25
 8007ff0:	d5fb      	bpl.n	8007fea <_printf_i+0xbe>
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	4854      	ldr	r0, [pc, #336]	; (8008148 <_printf_i+0x21c>)
 8007ff6:	296f      	cmp	r1, #111	; 0x6f
 8007ff8:	bf14      	ite	ne
 8007ffa:	220a      	movne	r2, #10
 8007ffc:	2208      	moveq	r2, #8
 8007ffe:	2100      	movs	r1, #0
 8008000:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008004:	6865      	ldr	r5, [r4, #4]
 8008006:	60a5      	str	r5, [r4, #8]
 8008008:	2d00      	cmp	r5, #0
 800800a:	f2c0 8095 	blt.w	8008138 <_printf_i+0x20c>
 800800e:	6821      	ldr	r1, [r4, #0]
 8008010:	f021 0104 	bic.w	r1, r1, #4
 8008014:	6021      	str	r1, [r4, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d13d      	bne.n	8008096 <_printf_i+0x16a>
 800801a:	2d00      	cmp	r5, #0
 800801c:	f040 808e 	bne.w	800813c <_printf_i+0x210>
 8008020:	4665      	mov	r5, ip
 8008022:	2a08      	cmp	r2, #8
 8008024:	d10b      	bne.n	800803e <_printf_i+0x112>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	07db      	lsls	r3, r3, #31
 800802a:	d508      	bpl.n	800803e <_printf_i+0x112>
 800802c:	6923      	ldr	r3, [r4, #16]
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	bfde      	ittt	le
 8008034:	2330      	movle	r3, #48	; 0x30
 8008036:	f805 3c01 	strble.w	r3, [r5, #-1]
 800803a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800803e:	ebac 0305 	sub.w	r3, ip, r5
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	f8cd 8000 	str.w	r8, [sp]
 8008048:	463b      	mov	r3, r7
 800804a:	aa03      	add	r2, sp, #12
 800804c:	4621      	mov	r1, r4
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff fef6 	bl	8007e40 <_printf_common>
 8008054:	3001      	adds	r0, #1
 8008056:	d14d      	bne.n	80080f4 <_printf_i+0x1c8>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	b005      	add	sp, #20
 800805e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008062:	4839      	ldr	r0, [pc, #228]	; (8008148 <_printf_i+0x21c>)
 8008064:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008068:	6813      	ldr	r3, [r2, #0]
 800806a:	6821      	ldr	r1, [r4, #0]
 800806c:	1d1d      	adds	r5, r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6015      	str	r5, [r2, #0]
 8008072:	060a      	lsls	r2, r1, #24
 8008074:	d50b      	bpl.n	800808e <_printf_i+0x162>
 8008076:	07ca      	lsls	r2, r1, #31
 8008078:	bf44      	itt	mi
 800807a:	f041 0120 	orrmi.w	r1, r1, #32
 800807e:	6021      	strmi	r1, [r4, #0]
 8008080:	b91b      	cbnz	r3, 800808a <_printf_i+0x15e>
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	f022 0220 	bic.w	r2, r2, #32
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	2210      	movs	r2, #16
 800808c:	e7b7      	b.n	8007ffe <_printf_i+0xd2>
 800808e:	064d      	lsls	r5, r1, #25
 8008090:	bf48      	it	mi
 8008092:	b29b      	uxthmi	r3, r3
 8008094:	e7ef      	b.n	8008076 <_printf_i+0x14a>
 8008096:	4665      	mov	r5, ip
 8008098:	fbb3 f1f2 	udiv	r1, r3, r2
 800809c:	fb02 3311 	mls	r3, r2, r1, r3
 80080a0:	5cc3      	ldrb	r3, [r0, r3]
 80080a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080a6:	460b      	mov	r3, r1
 80080a8:	2900      	cmp	r1, #0
 80080aa:	d1f5      	bne.n	8008098 <_printf_i+0x16c>
 80080ac:	e7b9      	b.n	8008022 <_printf_i+0xf6>
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	6825      	ldr	r5, [r4, #0]
 80080b2:	6961      	ldr	r1, [r4, #20]
 80080b4:	1d18      	adds	r0, r3, #4
 80080b6:	6010      	str	r0, [r2, #0]
 80080b8:	0628      	lsls	r0, r5, #24
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	d501      	bpl.n	80080c2 <_printf_i+0x196>
 80080be:	6019      	str	r1, [r3, #0]
 80080c0:	e002      	b.n	80080c8 <_printf_i+0x19c>
 80080c2:	066a      	lsls	r2, r5, #25
 80080c4:	d5fb      	bpl.n	80080be <_printf_i+0x192>
 80080c6:	8019      	strh	r1, [r3, #0]
 80080c8:	2300      	movs	r3, #0
 80080ca:	6123      	str	r3, [r4, #16]
 80080cc:	4665      	mov	r5, ip
 80080ce:	e7b9      	b.n	8008044 <_printf_i+0x118>
 80080d0:	6813      	ldr	r3, [r2, #0]
 80080d2:	1d19      	adds	r1, r3, #4
 80080d4:	6011      	str	r1, [r2, #0]
 80080d6:	681d      	ldr	r5, [r3, #0]
 80080d8:	6862      	ldr	r2, [r4, #4]
 80080da:	2100      	movs	r1, #0
 80080dc:	4628      	mov	r0, r5
 80080de:	f7f8 f8d7 	bl	8000290 <memchr>
 80080e2:	b108      	cbz	r0, 80080e8 <_printf_i+0x1bc>
 80080e4:	1b40      	subs	r0, r0, r5
 80080e6:	6060      	str	r0, [r4, #4]
 80080e8:	6863      	ldr	r3, [r4, #4]
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	2300      	movs	r3, #0
 80080ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080f2:	e7a7      	b.n	8008044 <_printf_i+0x118>
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	462a      	mov	r2, r5
 80080f8:	4639      	mov	r1, r7
 80080fa:	4630      	mov	r0, r6
 80080fc:	47c0      	blx	r8
 80080fe:	3001      	adds	r0, #1
 8008100:	d0aa      	beq.n	8008058 <_printf_i+0x12c>
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	079b      	lsls	r3, r3, #30
 8008106:	d413      	bmi.n	8008130 <_printf_i+0x204>
 8008108:	68e0      	ldr	r0, [r4, #12]
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	4298      	cmp	r0, r3
 800810e:	bfb8      	it	lt
 8008110:	4618      	movlt	r0, r3
 8008112:	e7a3      	b.n	800805c <_printf_i+0x130>
 8008114:	2301      	movs	r3, #1
 8008116:	464a      	mov	r2, r9
 8008118:	4639      	mov	r1, r7
 800811a:	4630      	mov	r0, r6
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d09a      	beq.n	8008058 <_printf_i+0x12c>
 8008122:	3501      	adds	r5, #1
 8008124:	68e3      	ldr	r3, [r4, #12]
 8008126:	9a03      	ldr	r2, [sp, #12]
 8008128:	1a9b      	subs	r3, r3, r2
 800812a:	42ab      	cmp	r3, r5
 800812c:	dcf2      	bgt.n	8008114 <_printf_i+0x1e8>
 800812e:	e7eb      	b.n	8008108 <_printf_i+0x1dc>
 8008130:	2500      	movs	r5, #0
 8008132:	f104 0919 	add.w	r9, r4, #25
 8008136:	e7f5      	b.n	8008124 <_printf_i+0x1f8>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1ac      	bne.n	8008096 <_printf_i+0x16a>
 800813c:	7803      	ldrb	r3, [r0, #0]
 800813e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008142:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008146:	e76c      	b.n	8008022 <_printf_i+0xf6>
 8008148:	080085df 	.word	0x080085df
 800814c:	080085f0 	.word	0x080085f0

08008150 <memmove>:
 8008150:	4288      	cmp	r0, r1
 8008152:	b510      	push	{r4, lr}
 8008154:	eb01 0302 	add.w	r3, r1, r2
 8008158:	d807      	bhi.n	800816a <memmove+0x1a>
 800815a:	1e42      	subs	r2, r0, #1
 800815c:	4299      	cmp	r1, r3
 800815e:	d00a      	beq.n	8008176 <memmove+0x26>
 8008160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008164:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008168:	e7f8      	b.n	800815c <memmove+0xc>
 800816a:	4283      	cmp	r3, r0
 800816c:	d9f5      	bls.n	800815a <memmove+0xa>
 800816e:	1881      	adds	r1, r0, r2
 8008170:	1ad2      	subs	r2, r2, r3
 8008172:	42d3      	cmn	r3, r2
 8008174:	d100      	bne.n	8008178 <memmove+0x28>
 8008176:	bd10      	pop	{r4, pc}
 8008178:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800817c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008180:	e7f7      	b.n	8008172 <memmove+0x22>
	...

08008184 <_free_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4605      	mov	r5, r0
 8008188:	2900      	cmp	r1, #0
 800818a:	d045      	beq.n	8008218 <_free_r+0x94>
 800818c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008190:	1f0c      	subs	r4, r1, #4
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfb8      	it	lt
 8008196:	18e4      	addlt	r4, r4, r3
 8008198:	f000 f8d2 	bl	8008340 <__malloc_lock>
 800819c:	4a1f      	ldr	r2, [pc, #124]	; (800821c <_free_r+0x98>)
 800819e:	6813      	ldr	r3, [r2, #0]
 80081a0:	4610      	mov	r0, r2
 80081a2:	b933      	cbnz	r3, 80081b2 <_free_r+0x2e>
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6014      	str	r4, [r2, #0]
 80081a8:	4628      	mov	r0, r5
 80081aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ae:	f000 b8c8 	b.w	8008342 <__malloc_unlock>
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	d90c      	bls.n	80081d0 <_free_r+0x4c>
 80081b6:	6821      	ldr	r1, [r4, #0]
 80081b8:	1862      	adds	r2, r4, r1
 80081ba:	4293      	cmp	r3, r2
 80081bc:	bf04      	itt	eq
 80081be:	681a      	ldreq	r2, [r3, #0]
 80081c0:	685b      	ldreq	r3, [r3, #4]
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	bf04      	itt	eq
 80081c6:	1852      	addeq	r2, r2, r1
 80081c8:	6022      	streq	r2, [r4, #0]
 80081ca:	6004      	str	r4, [r0, #0]
 80081cc:	e7ec      	b.n	80081a8 <_free_r+0x24>
 80081ce:	4613      	mov	r3, r2
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	b10a      	cbz	r2, 80081d8 <_free_r+0x54>
 80081d4:	42a2      	cmp	r2, r4
 80081d6:	d9fa      	bls.n	80081ce <_free_r+0x4a>
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	1858      	adds	r0, r3, r1
 80081dc:	42a0      	cmp	r0, r4
 80081de:	d10b      	bne.n	80081f8 <_free_r+0x74>
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	4401      	add	r1, r0
 80081e4:	1858      	adds	r0, r3, r1
 80081e6:	4282      	cmp	r2, r0
 80081e8:	6019      	str	r1, [r3, #0]
 80081ea:	d1dd      	bne.n	80081a8 <_free_r+0x24>
 80081ec:	6810      	ldr	r0, [r2, #0]
 80081ee:	6852      	ldr	r2, [r2, #4]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	4401      	add	r1, r0
 80081f4:	6019      	str	r1, [r3, #0]
 80081f6:	e7d7      	b.n	80081a8 <_free_r+0x24>
 80081f8:	d902      	bls.n	8008200 <_free_r+0x7c>
 80081fa:	230c      	movs	r3, #12
 80081fc:	602b      	str	r3, [r5, #0]
 80081fe:	e7d3      	b.n	80081a8 <_free_r+0x24>
 8008200:	6820      	ldr	r0, [r4, #0]
 8008202:	1821      	adds	r1, r4, r0
 8008204:	428a      	cmp	r2, r1
 8008206:	bf04      	itt	eq
 8008208:	6811      	ldreq	r1, [r2, #0]
 800820a:	6852      	ldreq	r2, [r2, #4]
 800820c:	6062      	str	r2, [r4, #4]
 800820e:	bf04      	itt	eq
 8008210:	1809      	addeq	r1, r1, r0
 8008212:	6021      	streq	r1, [r4, #0]
 8008214:	605c      	str	r4, [r3, #4]
 8008216:	e7c7      	b.n	80081a8 <_free_r+0x24>
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	bf00      	nop
 800821c:	20015c3c 	.word	0x20015c3c

08008220 <_malloc_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	1ccd      	adds	r5, r1, #3
 8008224:	f025 0503 	bic.w	r5, r5, #3
 8008228:	3508      	adds	r5, #8
 800822a:	2d0c      	cmp	r5, #12
 800822c:	bf38      	it	cc
 800822e:	250c      	movcc	r5, #12
 8008230:	2d00      	cmp	r5, #0
 8008232:	4606      	mov	r6, r0
 8008234:	db01      	blt.n	800823a <_malloc_r+0x1a>
 8008236:	42a9      	cmp	r1, r5
 8008238:	d903      	bls.n	8008242 <_malloc_r+0x22>
 800823a:	230c      	movs	r3, #12
 800823c:	6033      	str	r3, [r6, #0]
 800823e:	2000      	movs	r0, #0
 8008240:	bd70      	pop	{r4, r5, r6, pc}
 8008242:	f000 f87d 	bl	8008340 <__malloc_lock>
 8008246:	4a21      	ldr	r2, [pc, #132]	; (80082cc <_malloc_r+0xac>)
 8008248:	6814      	ldr	r4, [r2, #0]
 800824a:	4621      	mov	r1, r4
 800824c:	b991      	cbnz	r1, 8008274 <_malloc_r+0x54>
 800824e:	4c20      	ldr	r4, [pc, #128]	; (80082d0 <_malloc_r+0xb0>)
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	b91b      	cbnz	r3, 800825c <_malloc_r+0x3c>
 8008254:	4630      	mov	r0, r6
 8008256:	f000 f863 	bl	8008320 <_sbrk_r>
 800825a:	6020      	str	r0, [r4, #0]
 800825c:	4629      	mov	r1, r5
 800825e:	4630      	mov	r0, r6
 8008260:	f000 f85e 	bl	8008320 <_sbrk_r>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d124      	bne.n	80082b2 <_malloc_r+0x92>
 8008268:	230c      	movs	r3, #12
 800826a:	6033      	str	r3, [r6, #0]
 800826c:	4630      	mov	r0, r6
 800826e:	f000 f868 	bl	8008342 <__malloc_unlock>
 8008272:	e7e4      	b.n	800823e <_malloc_r+0x1e>
 8008274:	680b      	ldr	r3, [r1, #0]
 8008276:	1b5b      	subs	r3, r3, r5
 8008278:	d418      	bmi.n	80082ac <_malloc_r+0x8c>
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d90f      	bls.n	800829e <_malloc_r+0x7e>
 800827e:	600b      	str	r3, [r1, #0]
 8008280:	50cd      	str	r5, [r1, r3]
 8008282:	18cc      	adds	r4, r1, r3
 8008284:	4630      	mov	r0, r6
 8008286:	f000 f85c 	bl	8008342 <__malloc_unlock>
 800828a:	f104 000b 	add.w	r0, r4, #11
 800828e:	1d23      	adds	r3, r4, #4
 8008290:	f020 0007 	bic.w	r0, r0, #7
 8008294:	1ac3      	subs	r3, r0, r3
 8008296:	d0d3      	beq.n	8008240 <_malloc_r+0x20>
 8008298:	425a      	negs	r2, r3
 800829a:	50e2      	str	r2, [r4, r3]
 800829c:	e7d0      	b.n	8008240 <_malloc_r+0x20>
 800829e:	428c      	cmp	r4, r1
 80082a0:	684b      	ldr	r3, [r1, #4]
 80082a2:	bf16      	itet	ne
 80082a4:	6063      	strne	r3, [r4, #4]
 80082a6:	6013      	streq	r3, [r2, #0]
 80082a8:	460c      	movne	r4, r1
 80082aa:	e7eb      	b.n	8008284 <_malloc_r+0x64>
 80082ac:	460c      	mov	r4, r1
 80082ae:	6849      	ldr	r1, [r1, #4]
 80082b0:	e7cc      	b.n	800824c <_malloc_r+0x2c>
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d005      	beq.n	80082c8 <_malloc_r+0xa8>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4630      	mov	r0, r6
 80082c0:	f000 f82e 	bl	8008320 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d0cf      	beq.n	8008268 <_malloc_r+0x48>
 80082c8:	6025      	str	r5, [r4, #0]
 80082ca:	e7db      	b.n	8008284 <_malloc_r+0x64>
 80082cc:	20015c3c 	.word	0x20015c3c
 80082d0:	20015c40 	.word	0x20015c40

080082d4 <_realloc_r>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	4607      	mov	r7, r0
 80082d8:	4614      	mov	r4, r2
 80082da:	460e      	mov	r6, r1
 80082dc:	b921      	cbnz	r1, 80082e8 <_realloc_r+0x14>
 80082de:	4611      	mov	r1, r2
 80082e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082e4:	f7ff bf9c 	b.w	8008220 <_malloc_r>
 80082e8:	b922      	cbnz	r2, 80082f4 <_realloc_r+0x20>
 80082ea:	f7ff ff4b 	bl	8008184 <_free_r>
 80082ee:	4625      	mov	r5, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f4:	f000 f826 	bl	8008344 <_malloc_usable_size_r>
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d20f      	bcs.n	800831c <_realloc_r+0x48>
 80082fc:	4621      	mov	r1, r4
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ff8e 	bl	8008220 <_malloc_r>
 8008304:	4605      	mov	r5, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d0f2      	beq.n	80082f0 <_realloc_r+0x1c>
 800830a:	4631      	mov	r1, r6
 800830c:	4622      	mov	r2, r4
 800830e:	f7ff fc12 	bl	8007b36 <memcpy>
 8008312:	4631      	mov	r1, r6
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff ff35 	bl	8008184 <_free_r>
 800831a:	e7e9      	b.n	80082f0 <_realloc_r+0x1c>
 800831c:	4635      	mov	r5, r6
 800831e:	e7e7      	b.n	80082f0 <_realloc_r+0x1c>

08008320 <_sbrk_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4c06      	ldr	r4, [pc, #24]	; (800833c <_sbrk_r+0x1c>)
 8008324:	2300      	movs	r3, #0
 8008326:	4605      	mov	r5, r0
 8008328:	4608      	mov	r0, r1
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	f7f8 fdd0 	bl	8000ed0 <_sbrk>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_sbrk_r+0x1a>
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	b103      	cbz	r3, 800833a <_sbrk_r+0x1a>
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20015e0c 	.word	0x20015e0c

08008340 <__malloc_lock>:
 8008340:	4770      	bx	lr

08008342 <__malloc_unlock>:
 8008342:	4770      	bx	lr

08008344 <_malloc_usable_size_r>:
 8008344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008348:	1f18      	subs	r0, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	bfbc      	itt	lt
 800834e:	580b      	ldrlt	r3, [r1, r0]
 8008350:	18c0      	addlt	r0, r0, r3
 8008352:	4770      	bx	lr

08008354 <_init>:
 8008354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008356:	bf00      	nop
 8008358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835a:	bc08      	pop	{r3}
 800835c:	469e      	mov	lr, r3
 800835e:	4770      	bx	lr

08008360 <_fini>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	bf00      	nop
 8008364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008366:	bc08      	pop	{r3}
 8008368:	469e      	mov	lr, r3
 800836a:	4770      	bx	lr
