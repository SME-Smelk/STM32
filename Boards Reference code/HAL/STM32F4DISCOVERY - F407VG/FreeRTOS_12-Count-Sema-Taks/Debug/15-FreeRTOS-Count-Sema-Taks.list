
15-FreeRTOS-Count-Sema-Taks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006184  08006184  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800618c  0800618c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006190  08006190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015660  20000010  080061a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015670  080061a4  00025670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ded  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f90  00000000  00000000  00038e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022e9f  00000000  00000000  0003de58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000155a9  00000000  00000000  00060cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d01bb  00000000  00000000  000762a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014645b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  001464d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005fac 	.word	0x08005fac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08005fac 	.word	0x08005fac

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	200155c8 	.word	0x200155c8

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b972 	b.w	8000588 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9e08      	ldr	r6, [sp, #32]
 80002c2:	4604      	mov	r4, r0
 80002c4:	4688      	mov	r8, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14b      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4615      	mov	r5, r2
 80002ce:	d967      	bls.n	80003a0 <__udivmoddi4+0xe4>
 80002d0:	fab2 f282 	clz	r2, r2
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0720 	rsb	r7, r2, #32
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	fa20 f707 	lsr.w	r7, r0, r7
 80002e2:	4095      	lsls	r5, r2
 80002e4:	ea47 0803 	orr.w	r8, r7, r3
 80002e8:	4094      	lsls	r4, r2
 80002ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ee:	0c23      	lsrs	r3, r4, #16
 80002f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f4:	fa1f fc85 	uxth.w	ip, r5
 80002f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000300:	fb07 f10c 	mul.w	r1, r7, ip
 8000304:	4299      	cmp	r1, r3
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x60>
 8000308:	18eb      	adds	r3, r5, r3
 800030a:	f107 30ff 	add.w	r0, r7, #4294967295
 800030e:	f080 811b 	bcs.w	8000548 <__udivmoddi4+0x28c>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 8118 	bls.w	8000548 <__udivmoddi4+0x28c>
 8000318:	3f02      	subs	r7, #2
 800031a:	442b      	add	r3, r5
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0fe 	udiv	r0, r3, lr
 8000324:	fb0e 3310 	mls	r3, lr, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000330:	45a4      	cmp	ip, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x290>
 800033e:	45a4      	cmp	ip, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x290>
 8000344:	3802      	subs	r0, #2
 8000346:	442c      	add	r4, r5
 8000348:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800034c:	eba4 040c 	sub.w	r4, r4, ip
 8000350:	2700      	movs	r7, #0
 8000352:	b11e      	cbz	r6, 800035c <__udivmoddi4+0xa0>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c6 4300 	strd	r4, r3, [r6]
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xbe>
 8000366:	2e00      	cmp	r6, #0
 8000368:	f000 80eb 	beq.w	8000542 <__udivmoddi4+0x286>
 800036c:	2700      	movs	r7, #0
 800036e:	e9c6 0100 	strd	r0, r1, [r6]
 8000372:	4638      	mov	r0, r7
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	2f00      	cmp	r7, #0
 8000380:	d147      	bne.n	8000412 <__udivmoddi4+0x156>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd0>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	4698      	mov	r8, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa0>
 800039a:	e9c6 4800 	strd	r4, r8, [r6]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa0>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xe8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 808f 	bne.w	80004cc <__udivmoddi4+0x210>
 80003ae:	1b49      	subs	r1, r1, r5
 80003b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b4:	fa1f f885 	uxth.w	r8, r5
 80003b8:	2701      	movs	r7, #1
 80003ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80003be:	0c23      	lsrs	r3, r4, #16
 80003c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c8:	fb08 f10c 	mul.w	r1, r8, ip
 80003cc:	4299      	cmp	r1, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d0:	18eb      	adds	r3, r5, r3
 80003d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x122>
 80003d8:	4299      	cmp	r1, r3
 80003da:	f200 80cd 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 80003de:	4684      	mov	ip, r0
 80003e0:	1a59      	subs	r1, r3, r1
 80003e2:	b2a3      	uxth	r3, r4
 80003e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	fb08 f800 	mul.w	r8, r8, r0
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x14c>
 80003f8:	192c      	adds	r4, r5, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14a>
 8000400:	45a0      	cmp	r8, r4
 8000402:	f200 80b6 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 8000406:	4618      	mov	r0, r3
 8000408:	eba4 0408 	sub.w	r4, r4, r8
 800040c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000410:	e79f      	b.n	8000352 <__udivmoddi4+0x96>
 8000412:	f1c7 0c20 	rsb	ip, r7, #32
 8000416:	40bb      	lsls	r3, r7
 8000418:	fa22 fe0c 	lsr.w	lr, r2, ip
 800041c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000420:	fa01 f407 	lsl.w	r4, r1, r7
 8000424:	fa20 f50c 	lsr.w	r5, r0, ip
 8000428:	fa21 f30c 	lsr.w	r3, r1, ip
 800042c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000430:	4325      	orrs	r5, r4
 8000432:	fbb3 f9f8 	udiv	r9, r3, r8
 8000436:	0c2c      	lsrs	r4, r5, #16
 8000438:	fb08 3319 	mls	r3, r8, r9, r3
 800043c:	fa1f fa8e 	uxth.w	sl, lr
 8000440:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000444:	fb09 f40a 	mul.w	r4, r9, sl
 8000448:	429c      	cmp	r4, r3
 800044a:	fa02 f207 	lsl.w	r2, r2, r7
 800044e:	fa00 f107 	lsl.w	r1, r0, r7
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000454:	eb1e 0303 	adds.w	r3, lr, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	f080 8087 	bcs.w	800056e <__udivmoddi4+0x2b2>
 8000460:	429c      	cmp	r4, r3
 8000462:	f240 8084 	bls.w	800056e <__udivmoddi4+0x2b2>
 8000466:	f1a9 0902 	sub.w	r9, r9, #2
 800046a:	4473      	add	r3, lr
 800046c:	1b1b      	subs	r3, r3, r4
 800046e:	b2ad      	uxth	r5, r5
 8000470:	fbb3 f0f8 	udiv	r0, r3, r8
 8000474:	fb08 3310 	mls	r3, r8, r0, r3
 8000478:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800047c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000480:	45a2      	cmp	sl, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1da>
 8000484:	eb1e 0404 	adds.w	r4, lr, r4
 8000488:	f100 33ff 	add.w	r3, r0, #4294967295
 800048c:	d26b      	bcs.n	8000566 <__udivmoddi4+0x2aa>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d969      	bls.n	8000566 <__udivmoddi4+0x2aa>
 8000492:	3802      	subs	r0, #2
 8000494:	4474      	add	r4, lr
 8000496:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	eba4 040a 	sub.w	r4, r4, sl
 80004a2:	454c      	cmp	r4, r9
 80004a4:	46c2      	mov	sl, r8
 80004a6:	464b      	mov	r3, r9
 80004a8:	d354      	bcc.n	8000554 <__udivmoddi4+0x298>
 80004aa:	d051      	beq.n	8000550 <__udivmoddi4+0x294>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d069      	beq.n	8000584 <__udivmoddi4+0x2c8>
 80004b0:	ebb1 050a 	subs.w	r5, r1, sl
 80004b4:	eb64 0403 	sbc.w	r4, r4, r3
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	40fc      	lsrs	r4, r7
 80004c0:	ea4c 0505 	orr.w	r5, ip, r5
 80004c4:	e9c6 5400 	strd	r5, r4, [r6]
 80004c8:	2700      	movs	r7, #0
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0xa0>
 80004cc:	f1c2 0320 	rsb	r3, r2, #32
 80004d0:	fa20 f703 	lsr.w	r7, r0, r3
 80004d4:	4095      	lsls	r5, r2
 80004d6:	fa01 f002 	lsl.w	r0, r1, r2
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e2:	4338      	orrs	r0, r7
 80004e4:	0c01      	lsrs	r1, r0, #16
 80004e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ea:	fa1f f885 	uxth.w	r8, r5
 80004ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f6:	fb07 f308 	mul.w	r3, r7, r8
 80004fa:	428b      	cmp	r3, r1
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x256>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f107 3cff 	add.w	ip, r7, #4294967295
 8000508:	d22f      	bcs.n	800056a <__udivmoddi4+0x2ae>
 800050a:	428b      	cmp	r3, r1
 800050c:	d92d      	bls.n	800056a <__udivmoddi4+0x2ae>
 800050e:	3f02      	subs	r7, #2
 8000510:	4429      	add	r1, r5
 8000512:	1acb      	subs	r3, r1, r3
 8000514:	b281      	uxth	r1, r0
 8000516:	fbb3 f0fe 	udiv	r0, r3, lr
 800051a:	fb0e 3310 	mls	r3, lr, r0, r3
 800051e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000522:	fb00 f308 	mul.w	r3, r0, r8
 8000526:	428b      	cmp	r3, r1
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x27e>
 800052a:	1869      	adds	r1, r5, r1
 800052c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000530:	d217      	bcs.n	8000562 <__udivmoddi4+0x2a6>
 8000532:	428b      	cmp	r3, r1
 8000534:	d915      	bls.n	8000562 <__udivmoddi4+0x2a6>
 8000536:	3802      	subs	r0, #2
 8000538:	4429      	add	r1, r5
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000540:	e73b      	b.n	80003ba <__udivmoddi4+0xfe>
 8000542:	4637      	mov	r7, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e709      	b.n	800035c <__udivmoddi4+0xa0>
 8000548:	4607      	mov	r7, r0
 800054a:	e6e7      	b.n	800031c <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x8c>
 8000550:	4541      	cmp	r1, r8
 8000552:	d2ab      	bcs.n	80004ac <__udivmoddi4+0x1f0>
 8000554:	ebb8 0a02 	subs.w	sl, r8, r2
 8000558:	eb69 020e 	sbc.w	r2, r9, lr
 800055c:	3801      	subs	r0, #1
 800055e:	4613      	mov	r3, r2
 8000560:	e7a4      	b.n	80004ac <__udivmoddi4+0x1f0>
 8000562:	4660      	mov	r0, ip
 8000564:	e7e9      	b.n	800053a <__udivmoddi4+0x27e>
 8000566:	4618      	mov	r0, r3
 8000568:	e795      	b.n	8000496 <__udivmoddi4+0x1da>
 800056a:	4667      	mov	r7, ip
 800056c:	e7d1      	b.n	8000512 <__udivmoddi4+0x256>
 800056e:	4681      	mov	r9, r0
 8000570:	e77c      	b.n	800046c <__udivmoddi4+0x1b0>
 8000572:	3802      	subs	r0, #2
 8000574:	442c      	add	r4, r5
 8000576:	e747      	b.n	8000408 <__udivmoddi4+0x14c>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	442b      	add	r3, r5
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	4638      	mov	r0, r7
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xda>
 8000584:	4637      	mov	r7, r6
 8000586:	e6e9      	b.n	800035c <__udivmoddi4+0xa0>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <USART2_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005c4:	f001 fad0 	bl	8001b68 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 f9b7 	bl	8000940 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20015580 	.word	0x20015580
 80005dc:	40004400 	.word	0x40004400

080005e0 <UART2_write>:

void UART2_write(char data[]){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe47 	bl	800027c <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <UART2_write+0x28>)
 80005fa:	f001 fb02 	bl	8001c02 <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20015580 	.word	0x20015580

0800060c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0c      	blt.n	8000638 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_SetPendingIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	3340      	adds	r3, #64	; 0x40
 8000634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <main+0x80>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1d      	ldr	r2, [pc, #116]	; (80006c8 <main+0x80>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800065a:	f000 fa09 	bl	8000a70 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800065e:	f000 f843 	bl	80006e8 <SystemClock_Config>

	/* Configure the peripherals */
	GPIO_Init();
 8000662:	f000 f8a1 	bl	80007a8 <GPIO_Init>
	USART2_UART_Init();
 8000666:	f7ff ff91 	bl	800058c <USART2_UART_Init>

	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 800066a:	f003 ffb7 	bl	80045dc <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800066e:	f004 fe85 	bl	800537c <SEGGER_SYSVIEW_Start>

    /* Before a semaphore is used it must be explicitly created.  In this example
	a counting semaphore is created.  The semaphore is created to have a maximum
	count value of 10, and an initial count value of 0. */
    xCountingSemaphore = xSemaphoreCreateCounting( 10, 0 );
 8000672:	2100      	movs	r1, #0
 8000674:	200a      	movs	r0, #10
 8000676:	f002 f8ef 	bl	8002858 <xQueueCreateCountingSemaphore>
 800067a:	4602      	mov	r2, r0
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <main+0x84>)
 800067e:	601a      	str	r2, [r3, #0]

	/* Check the semaphore was created successfully. */
	if( xCountingSemaphore != NULL )
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <main+0x84>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d01a      	beq.n	80006be <main+0x76>
	{

		/* Start Message */
		UART2_write("Demo of usage of counting semaphore\r\n");
 8000688:	4811      	ldr	r0, [pc, #68]	; (80006d0 <main+0x88>)
 800068a:	f7ff ffa9 	bl	80005e0 <UART2_write>

		/* Create the 'handler' task.  This is the task that will be synchronized
		with the interrupt.  The handler task is created with a high priority to
		ensure it runs immediately after the interrupt exits.  In this case a
		priority of 3 is chosen. */
		xTaskCreate( vHandlerTask, "Handler", 500, NULL, 1, NULL );
 800068e:	2300      	movs	r3, #0
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <main+0x8c>)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <main+0x90>)
 80006a0:	f002 fba7 	bl	8002df2 <xTaskCreate>

		/* Create the task that will periodically generate a software interrupt.
		This is created with a priority below the handler task to ensure it will
		get preempted each time the handler task exist the Blocked state. */
		xTaskCreate( vPeriodicTask, "Periodic", 500, NULL, 3, NULL );
 80006a4:	2300      	movs	r3, #0
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2303      	movs	r3, #3
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006b2:	490a      	ldr	r1, [pc, #40]	; (80006dc <main+0x94>)
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <main+0x98>)
 80006b6:	f002 fb9c 	bl	8002df2 <xTaskCreate>

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
 80006ba:	f002 fd29 	bl	8003110 <vTaskStartScheduler>
	}

	UART2_write("Semaphore error r\n");
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0x9c>)
 80006c0:	f7ff ff8e 	bl	80005e0 <UART2_write>

	while (1);
 80006c4:	e7fe      	b.n	80006c4 <main+0x7c>
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	200155c0 	.word	0x200155c0
 80006d0:	08005fc4 	.word	0x08005fc4
 80006d4:	08005fec 	.word	0x08005fec
 80006d8:	08000861 	.word	0x08000861
 80006dc:	08005ff4 	.word	0x08005ff4
 80006e0:	08000889 	.word	0x08000889
 80006e4:	08006000 	.word	0x08006000

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b096      	sub	sp, #88	; 0x58
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 fc50 	bl	8005f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073a:	2307      	movs	r3, #7
 800073c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fccc 	bl	80010e0 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800074e:	f000 f8f7 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000762:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ff25 	bl	80015c0 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800077c:	f000 f8e0 	bl	8000940 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000780:	2301      	movs	r3, #1
 8000782:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000784:	23c0      	movs	r3, #192	; 0xc0
 8000786:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f908 	bl	80019a4 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800079a:	f000 f8d1 	bl	8000940 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3758      	adds	r7, #88	; 0x58
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <GPIO_Init>:

/**
  * @brief  Function of gpio init.
  * @retval None
  */
void GPIO_Init(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <GPIO_Init+0xac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a23      	ldr	r2, [pc, #140]	; (8000854 <GPIO_Init+0xac>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <GPIO_Init+0xac>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <GPIO_Init+0xac>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <GPIO_Init+0xac>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <GPIO_Init+0xac>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]


/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <GPIO_Init+0xb0>)
 80007fe:	f000 fc55 	bl	80010ac <HAL_GPIO_WritePin>

/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = LED_GREEN_PIN;
 8000802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000806:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <GPIO_Init+0xb0>)
 800081c:	f000 faac 	bl	8000d78 <HAL_GPIO_Init>

/*Configure GPIO pins LED: LED_GREEN_PIN */
/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = BUTTON_PIN;
 8000820:	2301      	movs	r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <GPIO_Init+0xb4>)
 8000838:	f000 fa9e 	bl	8000d78 <HAL_GPIO_Init>



/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 15, configMAX_SYSCALL_INTERRUPT_PRIORITY);
 800083c:	2250      	movs	r2, #80	; 0x50
 800083e:	210f      	movs	r1, #15
 8000840:	2006      	movs	r0, #6
 8000842:	f000 fa62 	bl	8000d0a <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000846:	2006      	movs	r0, #6
 8000848:	f000 fa7b 	bl	8000d42 <HAL_NVIC_EnableIRQ>

}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000

08000860 <vHandlerTask>:

static void vHandlerTask( void *pvParameters )
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <vHandlerTask+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	4618      	mov	r0, r3
 8000872:	f002 f8bf 	bl	80029f4 <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */

		UART2_write("Handler task - Processing event.\r\n");
 8000876:	4803      	ldr	r0, [pc, #12]	; (8000884 <vHandlerTask+0x24>)
 8000878:	f7ff feb2 	bl	80005e0 <UART2_write>
		xSemaphoreTake( xCountingSemaphore, portMAX_DELAY );
 800087c:	e7f4      	b.n	8000868 <vHandlerTask+0x8>
 800087e:	bf00      	nop
 8000880:	200155c0 	.word	0x200155c0
 8000884:	08006014 	.word	0x08006014

08000888 <vPeriodicTask>:
	}
}

static void vPeriodicTask( void *pvParameters )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	/* As per most tasks, this task is implemented within an infinite loop. */
	while(1)
	{
		/* This task is just used to 'simulate' an interrupt.  This is done by
		periodically generating a software interrupt. */
		vTaskDelay( pdMS_TO_TICKS(500) );
 8000890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000894:	f002 fc04 	bl	80030a0 <vTaskDelay>

		/* Generate the interrupt, printing a message both before hand and
		afterwards so the sequence of execution is evident from the output. */

    	UART2_write("Periodic task - Pending the interrupt.\r\n");
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <vPeriodicTask+0x24>)
 800089a:	f7ff fea1 	bl	80005e0 <UART2_write>

        //pend the interrupt
        NVIC_SetPendingIRQ(EXTI0_IRQn);
 800089e:	2006      	movs	r0, #6
 80008a0:	f7ff feb4 	bl	800060c <__NVIC_SetPendingIRQ>

        UART2_write("Periodic task - Resuming.\r\n");
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <vPeriodicTask+0x28>)
 80008a6:	f7ff fe9b 	bl	80005e0 <UART2_write>
		vTaskDelay( pdMS_TO_TICKS(500) );
 80008aa:	e7f1      	b.n	8000890 <vPeriodicTask+0x8>
 80008ac:	08006038 	.word	0x08006038
 80008b0:	08006064 	.word	0x08006064

080008b4 <EXTI0_IRQ_CallBack>:

	}
}

void EXTI0_IRQ_CallBack(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
	the events to allow the handler task to process them in turn without any
	events getting lost.  This simulates multiple interrupts being taken by the
	processor, even though in this case the events are simulated within a single
	interrupt occurrence.*/

	UART2_write("==>Button_Handler\r\n");
 80008be:	481d      	ldr	r0, [pc, #116]	; (8000934 <EXTI0_IRQ_CallBack+0x80>)
 80008c0:	f7ff fe8e 	bl	80005e0 <UART2_write>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <EXTI0_IRQ_CallBack+0x84>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	1d3a      	adds	r2, r7, #4
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fff4 	bl	80028ba <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <EXTI0_IRQ_CallBack+0x84>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	1d3a      	adds	r2, r7, #4
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 ffed 	bl	80028ba <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <EXTI0_IRQ_CallBack+0x84>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 ffe6 	bl	80028ba <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <EXTI0_IRQ_CallBack+0x84>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1d3a      	adds	r2, r7, #4
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 ffdf 	bl	80028ba <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <EXTI0_IRQ_CallBack+0x84>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1d3a      	adds	r2, r7, #4
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 ffd8 	bl	80028ba <xQueueGiveFromISR>

	NOTE: The syntax for forcing a context switch within an ISR varies between
	FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
	the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
	from an ISR! */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00a      	beq.n	8000926 <EXTI0_IRQ_CallBack+0x72>
 8000910:	f005 f858 	bl	80059c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <EXTI0_IRQ_CallBack+0x88>)
 8000916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	f3bf 8f6f 	isb	sy

}
 8000924:	e001      	b.n	800092a <EXTI0_IRQ_CallBack+0x76>
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8000926:	f005 f831 	bl	800598c <SEGGER_SYSVIEW_RecordExitISR>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08006080 	.word	0x08006080
 8000938:	200155c0 	.word	0x200155c0
 800093c:	e000ed04 	.word	0xe000ed04

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000952:	2003      	movs	r0, #3
 8000954:	f000 f9ce 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	210f      	movs	r1, #15
 800095c:	f06f 0001 	mvn.w	r0, #1
 8000960:	f000 f9d3 	bl	8000d0a <HAL_NVIC_SetPriority>

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12b      	bne.n	80009e2 <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	230c      	movs	r3, #12
 80009c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x8c>)
 80009de:	f000 f9cb 	bl	8000d78 <HAL_GPIO_Init>

  }
}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000

080009f8 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 f877 	bl	8000b14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a26:	f003 fb17 	bl	8004058 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <EXTI0_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  traceISR_ENTER();
 8000a32:	f004 ff69 	bl	8005908 <SEGGER_SYSVIEW_RecordEnterISR>

  EXTI0_IRQ_CallBack();
 8000a36:	f7ff ff3d 	bl	80008b4 <EXTI0_IRQ_CallBack>

  traceISR_EXIT();
 8000a3a:	f004 ffa7 	bl	800598c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <SystemInit+0x28>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <SystemInit+0x28>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SystemInit+0x28>)
 8000a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f92b 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	200f      	movs	r0, #15
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff ff53 	bl	800094e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f943 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f000 f90b 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200155c4 	.word	0x200155c4

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200155c4 	.word	0x200155c4

08000b54 <__NVIC_SetPriorityGrouping>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff3e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff31 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	e16b      	b.n	800106c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d94:	2201      	movs	r2, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 815a 	bne.w	8001066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d00b      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc6:	2b11      	cmp	r3, #17
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b12      	cmp	r3, #18
 8000dd0:	d130      	bne.n	8000e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4013      	ands	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68da      	ldr	r2, [r3, #12]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e08:	2201      	movs	r2, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 0201 	and.w	r2, r3, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0xfc>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	69b9      	ldr	r1, [r7, #24]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80b4 	beq.w	8001066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a5e      	ldr	r2, [pc, #376]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b5c      	ldr	r3, [pc, #368]	; (8001080 <HAL_GPIO_Init+0x308>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x310>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_GPIO_Init+0x226>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d025      	beq.n	8000f9a <HAL_GPIO_Init+0x222>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d01f      	beq.n	8000f96 <HAL_GPIO_Init+0x21e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x21a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x216>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x324>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x212>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x328>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x32c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x20a>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f82:	2308      	movs	r3, #8
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x228>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb0:	4934      	ldr	r1, [pc, #208]	; (8001084 <HAL_GPIO_Init+0x30c>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe2:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100c:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x330>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_GPIO_Init+0x330>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001060:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <HAL_GPIO_Init+0x330>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae90 	bls.w	8000d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	3724      	adds	r7, #36	; 0x24
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40021400 	.word	0x40021400
 80010a0:	40021800 	.word	0x40021800
 80010a4:	40021c00 	.word	0x40021c00
 80010a8:	40013c00 	.word	0x40013c00

080010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	619a      	str	r2, [r3, #24]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e25b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d075      	beq.n	80011ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fe:	4ba3      	ldr	r3, [pc, #652]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00c      	beq.n	8001124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110a:	4ba0      	ldr	r3, [pc, #640]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	2b08      	cmp	r3, #8
 8001114:	d112      	bne.n	800113c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b9d      	ldr	r3, [pc, #628]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001122:	d10b      	bne.n	800113c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001124:	4b99      	ldr	r3, [pc, #612]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d05b      	beq.n	80011e8 <HAL_RCC_OscConfig+0x108>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d157      	bne.n	80011e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e236      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d106      	bne.n	8001154 <HAL_RCC_OscConfig+0x74>
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a90      	ldr	r2, [pc, #576]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01d      	b.n	8001190 <HAL_RCC_OscConfig+0xb0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x98>
 800115e:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a8a      	ldr	r2, [pc, #552]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a87      	ldr	r2, [pc, #540]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0xb0>
 8001178:	4b84      	ldr	r3, [pc, #528]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a83      	ldr	r2, [pc, #524]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a80      	ldr	r2, [pc, #512]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fcd0 	bl	8000b3c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fccc 	bl	8000b3c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1fb      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0xc0>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcbc 	bl	8000b3c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fcb8 	bl	8000b3c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1e7      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	4b6c      	ldr	r3, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0xe8>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d063      	beq.n	80012be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f6:	4b65      	ldr	r3, [pc, #404]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001202:	4b62      	ldr	r3, [pc, #392]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d11c      	bne.n	8001248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b5f      	ldr	r3, [pc, #380]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d116      	bne.n	8001248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	4b5c      	ldr	r3, [pc, #368]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x152>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d001      	beq.n	8001232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e1bb      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b56      	ldr	r3, [pc, #344]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4952      	ldr	r1, [pc, #328]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e03a      	b.n	80012be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001250:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <HAL_RCC_OscConfig+0x2b0>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fc71 	bl	8000b3c <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc6d 	bl	8000b3c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e19c      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4940      	ldr	r1, [pc, #256]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x2b0>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fc50 	bl	8000b3c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc4c 	bl	8000b3c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e17b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d030      	beq.n	800132c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d016      	beq.n	8001300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_RCC_OscConfig+0x2b4>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc30 	bl	8000b3c <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc2c 	bl	8000b3c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e15b      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x200>
 80012fe:	e015      	b.n	800132c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x2b4>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fc19 	bl	8000b3c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800130e:	f7ff fc15 	bl	8000b3c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e144      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a0 	beq.w	800147a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d121      	bne.n	80013ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_RCC_OscConfig+0x2b8>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fbdb 	bl	8000b3c <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e011      	b.n	80013ae <HAL_RCC_OscConfig+0x2ce>
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	42470000 	.word	0x42470000
 8001394:	42470e80 	.word	0x42470e80
 8001398:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139c:	f7ff fbce 	bl	8000b3c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0fd      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ae:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x2f0>
 80013c2:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c6:	4a7c      	ldr	r2, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6713      	str	r3, [r2, #112]	; 0x70
 80013ce:	e01c      	b.n	800140a <HAL_RCC_OscConfig+0x32a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x312>
 80013d8:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a76      	ldr	r2, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a73      	ldr	r2, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x32a>
 80013f2:	4b71      	ldr	r3, [pc, #452]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f6:	4a70      	ldr	r2, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
 80013fe:	4b6e      	ldr	r3, [pc, #440]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001402:	4a6d      	ldr	r2, [pc, #436]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fb93 	bl	8000b3c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb8f 	bl	8000b3c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0bc      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	4b61      	ldr	r3, [pc, #388]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <HAL_RCC_OscConfig+0x33a>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb7d 	bl	8000b3c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb79 	bl	8000b3c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0a6      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b56      	ldr	r3, [pc, #344]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	4b52      	ldr	r3, [pc, #328]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8092 	beq.w	80015a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d05c      	beq.n	800154a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d141      	bne.n	800151c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b48      	ldr	r3, [pc, #288]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb4d 	bl	8000b3c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb49 	bl	8000b3c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e078      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	019b      	lsls	r3, r3, #6
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	085b      	lsrs	r3, r3, #1
 80014dc:	3b01      	subs	r3, #1
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	4933      	ldr	r1, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb22 	bl	8000b3c <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fb1e 	bl	8000b3c <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e04d      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x41c>
 800151a:	e045      	b.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b27      	ldr	r3, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x4dc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb0b 	bl	8000b3c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fb07 	bl	8000b3c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e036      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x44a>
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e029      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_RCC_OscConfig+0x4d8>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	429a      	cmp	r2, r3
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d115      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001584:	4293      	cmp	r3, r2
 8001586:	d10d      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40007000 	.word	0x40007000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	42470060 	.word	0x42470060

080015c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0cc      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d90c      	bls.n	80015fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0b8      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	494d      	ldr	r1, [pc, #308]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	4313      	orrs	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d044      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d119      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e07f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d003      	beq.n	800167e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800167a:	2b03      	cmp	r3, #3
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e067      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f023 0203 	bic.w	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4934      	ldr	r1, [pc, #208]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fa44 	bl	8000b3c <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff fa40 	bl	8000b3c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e04f      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 020c 	and.w	r2, r3, #12
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1eb      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d20c      	bcs.n	8001708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e032      	b.n	800176e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	4916      	ldr	r1, [pc, #88]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	490e      	ldr	r1, [pc, #56]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001746:	f000 f821 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174a:	4601      	mov	r1, r0
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	fa21 f303 	lsr.w	r3, r1, r3
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff f9a4 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00
 800177c:	40023800 	.word	0x40023800
 8001780:	08006158 	.word	0x08006158
 8001784:	20000000 	.word	0x20000000
 8001788:	20000004 	.word	0x20000004

0800178c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d007      	beq.n	80017be <HAL_RCC_GetSysClockFreq+0x32>
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d008      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x38>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80b4 	bne.w	8001920 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017ba:	60bb      	str	r3, [r7, #8]
       break;
 80017bc:	e0b3      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80017c0:	60bb      	str	r3, [r7, #8]
      break;
 80017c2:	e0b0      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ce:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d04a      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017da:	4b55      	ldr	r3, [pc, #340]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	099b      	lsrs	r3, r3, #6
 80017e0:	f04f 0400 	mov.w	r4, #0
 80017e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	ea03 0501 	and.w	r5, r3, r1
 80017f0:	ea04 0602 	and.w	r6, r4, r2
 80017f4:	4629      	mov	r1, r5
 80017f6:	4632      	mov	r2, r6
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	f04f 0400 	mov.w	r4, #0
 8001800:	0154      	lsls	r4, r2, #5
 8001802:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001806:	014b      	lsls	r3, r1, #5
 8001808:	4619      	mov	r1, r3
 800180a:	4622      	mov	r2, r4
 800180c:	1b49      	subs	r1, r1, r5
 800180e:	eb62 0206 	sbc.w	r2, r2, r6
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f04f 0400 	mov.w	r4, #0
 800181a:	0194      	lsls	r4, r2, #6
 800181c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001820:	018b      	lsls	r3, r1, #6
 8001822:	1a5b      	subs	r3, r3, r1
 8001824:	eb64 0402 	sbc.w	r4, r4, r2
 8001828:	f04f 0100 	mov.w	r1, #0
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	00e2      	lsls	r2, r4, #3
 8001832:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001836:	00d9      	lsls	r1, r3, #3
 8001838:	460b      	mov	r3, r1
 800183a:	4614      	mov	r4, r2
 800183c:	195b      	adds	r3, r3, r5
 800183e:	eb44 0406 	adc.w	r4, r4, r6
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	0262      	lsls	r2, r4, #9
 800184c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001850:	0259      	lsls	r1, r3, #9
 8001852:	460b      	mov	r3, r1
 8001854:	4614      	mov	r4, r2
 8001856:	4618      	mov	r0, r3
 8001858:	4621      	mov	r1, r4
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	f7fe fd12 	bl	800028c <__aeabi_uldivmod>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e049      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	ea03 0501 	and.w	r5, r3, r1
 8001886:	ea04 0602 	and.w	r6, r4, r2
 800188a:	4629      	mov	r1, r5
 800188c:	4632      	mov	r2, r6
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	0154      	lsls	r4, r2, #5
 8001898:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800189c:	014b      	lsls	r3, r1, #5
 800189e:	4619      	mov	r1, r3
 80018a0:	4622      	mov	r2, r4
 80018a2:	1b49      	subs	r1, r1, r5
 80018a4:	eb62 0206 	sbc.w	r2, r2, r6
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	f04f 0400 	mov.w	r4, #0
 80018b0:	0194      	lsls	r4, r2, #6
 80018b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b6:	018b      	lsls	r3, r1, #6
 80018b8:	1a5b      	subs	r3, r3, r1
 80018ba:	eb64 0402 	sbc.w	r4, r4, r2
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018cc:	00d9      	lsls	r1, r3, #3
 80018ce:	460b      	mov	r3, r1
 80018d0:	4614      	mov	r4, r2
 80018d2:	195b      	adds	r3, r3, r5
 80018d4:	eb44 0406 	adc.w	r4, r4, r6
 80018d8:	f04f 0100 	mov.w	r1, #0
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	02a2      	lsls	r2, r4, #10
 80018e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018e6:	0299      	lsls	r1, r3, #10
 80018e8:	460b      	mov	r3, r1
 80018ea:	4614      	mov	r4, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	4621      	mov	r1, r4
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4623      	mov	r3, r4
 80018fa:	f7fe fcc7 	bl	800028c <__aeabi_uldivmod>
 80018fe:	4603      	mov	r3, r0
 8001900:	460c      	mov	r4, r1
 8001902:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	3301      	adds	r3, #1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	60bb      	str	r3, [r7, #8]
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001922:	60bb      	str	r3, [r7, #8]
      break;
 8001924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001926:	68bb      	ldr	r3, [r7, #8]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	00f42400 	.word	0x00f42400
 8001938:	007a1200 	.word	0x007a1200

0800193c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_RCC_GetHCLKFreq+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000000 	.word	0x20000000

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff0 	bl	800193c <HAL_RCC_GetHCLKFreq>
 800195c:	4601      	mov	r1, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0a9b      	lsrs	r3, r3, #10
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	08006168 	.word	0x08006168

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffdc 	bl	800193c <HAL_RCC_GetHCLKFreq>
 8001984:	4601      	mov	r1, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0b5b      	lsrs	r3, r3, #13
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08006168 	.word	0x08006168

080019a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d035      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80019d2:	f7ff f8b3 	bl	8000b3c <HAL_GetTick>
 80019d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80019da:	f7ff f8af 	bl	8000b3c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0b0      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019ec:	4b5b      	ldr	r3, [pc, #364]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	019a      	lsls	r2, r3, #6
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	071b      	lsls	r3, r3, #28
 8001a04:	4955      	ldr	r1, [pc, #340]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001a0c:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a12:	f7ff f893 	bl	8000b3c <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001a1a:	f7ff f88f 	bl	8000b3c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e090      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8083 	beq.w	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b44      	ldr	r3, [pc, #272]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a43      	ldr	r2, [pc, #268]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a3e      	ldr	r2, [pc, #248]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a6e:	f7ff f865 	bl	8000b3c <HAL_GetTick>
 8001a72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff f861 	bl	8000b3c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e062      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a94:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02f      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001abc:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d114      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff f82f 	bl	8000b3c <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7ff f82b 	bl	8000b3c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e02a      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ee      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e005      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b38:	6093      	str	r3, [r2, #8]
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b46:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	42470068 	.word	0x42470068
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42470e40 	.word	0x42470e40

08001b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e03f      	b.n	8001bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe feea 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f90b 	bl	8001dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af02      	add	r7, sp, #8
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	f040 8083 	bne.w	8001d2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_UART_Transmit+0x2e>
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e07b      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Transmit+0x40>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e074      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2221      	movs	r2, #33	; 0x21
 8001c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c58:	f7fe ff70 	bl	8000b3c <HAL_GetTick>
 8001c5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	88fa      	ldrh	r2, [r7, #6]
 8001c62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c72:	e042      	b.n	8001cfa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8a:	d122      	bne.n	8001cd2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f84c 	bl	8001d34 <UART_WaitOnFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e042      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d103      	bne.n	8001cca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e017      	b.n	8001cfa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	e013      	b.n	8001cfa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f829 	bl	8001d34 <UART_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e01f      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1b7      	bne.n	8001c74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f810 	bl	8001d34 <UART_WaitOnFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e006      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d44:	e02c      	b.n	8001da0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d028      	beq.n	8001da0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d54:	f7fe fef2 	bl	8000b3c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d21d      	bcs.n	8001da0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e00f      	b.n	8001dc0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4013      	ands	r3, r2
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d0c3      	beq.n	8001d46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e0a:	f023 030c 	bic.w	r3, r3, #12
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e36:	f040 818b 	bne.w	8002150 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4ac1      	ldr	r2, [pc, #772]	; (8002144 <UART_SetConfig+0x37c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d005      	beq.n	8001e50 <UART_SetConfig+0x88>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4abf      	ldr	r2, [pc, #764]	; (8002148 <UART_SetConfig+0x380>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f040 80bd 	bne.w	8001fca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e50:	f7ff fd94 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8001e54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	461d      	mov	r5, r3
 8001e5a:	f04f 0600 	mov.w	r6, #0
 8001e5e:	46a8      	mov	r8, r5
 8001e60:	46b1      	mov	r9, r6
 8001e62:	eb18 0308 	adds.w	r3, r8, r8
 8001e66:	eb49 0409 	adc.w	r4, r9, r9
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	46a1      	mov	r9, r4
 8001e6e:	eb18 0805 	adds.w	r8, r8, r5
 8001e72:	eb49 0906 	adc.w	r9, r9, r6
 8001e76:	f04f 0100 	mov.w	r1, #0
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e8a:	4688      	mov	r8, r1
 8001e8c:	4691      	mov	r9, r2
 8001e8e:	eb18 0005 	adds.w	r0, r8, r5
 8001e92:	eb49 0106 	adc.w	r1, r9, r6
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	f04f 0600 	mov.w	r6, #0
 8001ea0:	196b      	adds	r3, r5, r5
 8001ea2:	eb46 0406 	adc.w	r4, r6, r6
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4623      	mov	r3, r4
 8001eaa:	f7fe f9ef 	bl	800028c <__aeabi_uldivmod>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4ba5      	ldr	r3, [pc, #660]	; (800214c <UART_SetConfig+0x384>)
 8001eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	f04f 0600 	mov.w	r6, #0
 8001ec8:	46a9      	mov	r9, r5
 8001eca:	46b2      	mov	sl, r6
 8001ecc:	eb19 0309 	adds.w	r3, r9, r9
 8001ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	46a2      	mov	sl, r4
 8001ed8:	eb19 0905 	adds.w	r9, r9, r5
 8001edc:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ee0:	f04f 0100 	mov.w	r1, #0
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ef4:	4689      	mov	r9, r1
 8001ef6:	4692      	mov	sl, r2
 8001ef8:	eb19 0005 	adds.w	r0, r9, r5
 8001efc:	eb4a 0106 	adc.w	r1, sl, r6
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	461d      	mov	r5, r3
 8001f06:	f04f 0600 	mov.w	r6, #0
 8001f0a:	196b      	adds	r3, r5, r5
 8001f0c:	eb46 0406 	adc.w	r4, r6, r6
 8001f10:	461a      	mov	r2, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	f7fe f9ba 	bl	800028c <__aeabi_uldivmod>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b8b      	ldr	r3, [pc, #556]	; (800214c <UART_SetConfig+0x384>)
 8001f20:	fba3 1302 	umull	r1, r3, r3, r2
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	2164      	movs	r1, #100	; 0x64
 8001f28:	fb01 f303 	mul.w	r3, r1, r3
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	3332      	adds	r3, #50	; 0x32
 8001f32:	4a86      	ldr	r2, [pc, #536]	; (800214c <UART_SetConfig+0x384>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f40:	4498      	add	r8, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	461d      	mov	r5, r3
 8001f46:	f04f 0600 	mov.w	r6, #0
 8001f4a:	46a9      	mov	r9, r5
 8001f4c:	46b2      	mov	sl, r6
 8001f4e:	eb19 0309 	adds.w	r3, r9, r9
 8001f52:	eb4a 040a 	adc.w	r4, sl, sl
 8001f56:	4699      	mov	r9, r3
 8001f58:	46a2      	mov	sl, r4
 8001f5a:	eb19 0905 	adds.w	r9, r9, r5
 8001f5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f76:	4689      	mov	r9, r1
 8001f78:	4692      	mov	sl, r2
 8001f7a:	eb19 0005 	adds.w	r0, r9, r5
 8001f7e:	eb4a 0106 	adc.w	r1, sl, r6
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	461d      	mov	r5, r3
 8001f88:	f04f 0600 	mov.w	r6, #0
 8001f8c:	196b      	adds	r3, r5, r5
 8001f8e:	eb46 0406 	adc.w	r4, r6, r6
 8001f92:	461a      	mov	r2, r3
 8001f94:	4623      	mov	r3, r4
 8001f96:	f7fe f979 	bl	800028c <__aeabi_uldivmod>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <UART_SetConfig+0x384>)
 8001fa2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2164      	movs	r1, #100	; 0x64
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	3332      	adds	r3, #50	; 0x32
 8001fb4:	4a65      	ldr	r2, [pc, #404]	; (800214c <UART_SetConfig+0x384>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	f003 0207 	and.w	r2, r3, #7
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4442      	add	r2, r8
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e26f      	b.n	80024aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fca:	f7ff fcc3 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8001fce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	f04f 0600 	mov.w	r6, #0
 8001fd8:	46a8      	mov	r8, r5
 8001fda:	46b1      	mov	r9, r6
 8001fdc:	eb18 0308 	adds.w	r3, r8, r8
 8001fe0:	eb49 0409 	adc.w	r4, r9, r9
 8001fe4:	4698      	mov	r8, r3
 8001fe6:	46a1      	mov	r9, r4
 8001fe8:	eb18 0805 	adds.w	r8, r8, r5
 8001fec:	eb49 0906 	adc.w	r9, r9, r6
 8001ff0:	f04f 0100 	mov.w	r1, #0
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ffc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002000:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002004:	4688      	mov	r8, r1
 8002006:	4691      	mov	r9, r2
 8002008:	eb18 0005 	adds.w	r0, r8, r5
 800200c:	eb49 0106 	adc.w	r1, r9, r6
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	461d      	mov	r5, r3
 8002016:	f04f 0600 	mov.w	r6, #0
 800201a:	196b      	adds	r3, r5, r5
 800201c:	eb46 0406 	adc.w	r4, r6, r6
 8002020:	461a      	mov	r2, r3
 8002022:	4623      	mov	r3, r4
 8002024:	f7fe f932 	bl	800028c <__aeabi_uldivmod>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	461a      	mov	r2, r3
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <UART_SetConfig+0x384>)
 8002030:	fba3 2302 	umull	r2, r3, r3, r2
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	461d      	mov	r5, r3
 800203e:	f04f 0600 	mov.w	r6, #0
 8002042:	46a9      	mov	r9, r5
 8002044:	46b2      	mov	sl, r6
 8002046:	eb19 0309 	adds.w	r3, r9, r9
 800204a:	eb4a 040a 	adc.w	r4, sl, sl
 800204e:	4699      	mov	r9, r3
 8002050:	46a2      	mov	sl, r4
 8002052:	eb19 0905 	adds.w	r9, r9, r5
 8002056:	eb4a 0a06 	adc.w	sl, sl, r6
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002066:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800206a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800206e:	4689      	mov	r9, r1
 8002070:	4692      	mov	sl, r2
 8002072:	eb19 0005 	adds.w	r0, r9, r5
 8002076:	eb4a 0106 	adc.w	r1, sl, r6
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	461d      	mov	r5, r3
 8002080:	f04f 0600 	mov.w	r6, #0
 8002084:	196b      	adds	r3, r5, r5
 8002086:	eb46 0406 	adc.w	r4, r6, r6
 800208a:	461a      	mov	r2, r3
 800208c:	4623      	mov	r3, r4
 800208e:	f7fe f8fd 	bl	800028c <__aeabi_uldivmod>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	461a      	mov	r2, r3
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <UART_SetConfig+0x384>)
 800209a:	fba3 1302 	umull	r1, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2164      	movs	r1, #100	; 0x64
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	3332      	adds	r3, #50	; 0x32
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <UART_SetConfig+0x384>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ba:	4498      	add	r8, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	461d      	mov	r5, r3
 80020c0:	f04f 0600 	mov.w	r6, #0
 80020c4:	46a9      	mov	r9, r5
 80020c6:	46b2      	mov	sl, r6
 80020c8:	eb19 0309 	adds.w	r3, r9, r9
 80020cc:	eb4a 040a 	adc.w	r4, sl, sl
 80020d0:	4699      	mov	r9, r3
 80020d2:	46a2      	mov	sl, r4
 80020d4:	eb19 0905 	adds.w	r9, r9, r5
 80020d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f0:	4689      	mov	r9, r1
 80020f2:	4692      	mov	sl, r2
 80020f4:	eb19 0005 	adds.w	r0, r9, r5
 80020f8:	eb4a 0106 	adc.w	r1, sl, r6
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	461d      	mov	r5, r3
 8002102:	f04f 0600 	mov.w	r6, #0
 8002106:	196b      	adds	r3, r5, r5
 8002108:	eb46 0406 	adc.w	r4, r6, r6
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	f7fe f8bc 	bl	800028c <__aeabi_uldivmod>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	461a      	mov	r2, r3
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <UART_SetConfig+0x384>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	2164      	movs	r1, #100	; 0x64
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	3332      	adds	r3, #50	; 0x32
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <UART_SetConfig+0x384>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4442      	add	r2, r8
 8002140:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002142:	e1b2      	b.n	80024aa <UART_SetConfig+0x6e2>
 8002144:	40011000 	.word	0x40011000
 8002148:	40011400 	.word	0x40011400
 800214c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4ad7      	ldr	r2, [pc, #860]	; (80024b4 <UART_SetConfig+0x6ec>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d005      	beq.n	8002166 <UART_SetConfig+0x39e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4ad6      	ldr	r2, [pc, #856]	; (80024b8 <UART_SetConfig+0x6f0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	f040 80d1 	bne.w	8002308 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002166:	f7ff fc09 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 800216a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	469a      	mov	sl, r3
 8002170:	f04f 0b00 	mov.w	fp, #0
 8002174:	46d0      	mov	r8, sl
 8002176:	46d9      	mov	r9, fp
 8002178:	eb18 0308 	adds.w	r3, r8, r8
 800217c:	eb49 0409 	adc.w	r4, r9, r9
 8002180:	4698      	mov	r8, r3
 8002182:	46a1      	mov	r9, r4
 8002184:	eb18 080a 	adds.w	r8, r8, sl
 8002188:	eb49 090b 	adc.w	r9, r9, fp
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002198:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800219c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021a0:	4688      	mov	r8, r1
 80021a2:	4691      	mov	r9, r2
 80021a4:	eb1a 0508 	adds.w	r5, sl, r8
 80021a8:	eb4b 0609 	adc.w	r6, fp, r9
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	f04f 0400 	mov.w	r4, #0
 80021be:	0094      	lsls	r4, r2, #2
 80021c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021c4:	008b      	lsls	r3, r1, #2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	4628      	mov	r0, r5
 80021cc:	4631      	mov	r1, r6
 80021ce:	f7fe f85d 	bl	800028c <__aeabi_uldivmod>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	461a      	mov	r2, r3
 80021d8:	4bb8      	ldr	r3, [pc, #736]	; (80024bc <UART_SetConfig+0x6f4>)
 80021da:	fba3 2302 	umull	r2, r3, r3, r2
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	469b      	mov	fp, r3
 80021e8:	f04f 0c00 	mov.w	ip, #0
 80021ec:	46d9      	mov	r9, fp
 80021ee:	46e2      	mov	sl, ip
 80021f0:	eb19 0309 	adds.w	r3, r9, r9
 80021f4:	eb4a 040a 	adc.w	r4, sl, sl
 80021f8:	4699      	mov	r9, r3
 80021fa:	46a2      	mov	sl, r4
 80021fc:	eb19 090b 	adds.w	r9, r9, fp
 8002200:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002218:	4689      	mov	r9, r1
 800221a:	4692      	mov	sl, r2
 800221c:	eb1b 0509 	adds.w	r5, fp, r9
 8002220:	eb4c 060a 	adc.w	r6, ip, sl
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f04f 0400 	mov.w	r4, #0
 8002236:	0094      	lsls	r4, r2, #2
 8002238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800223c:	008b      	lsls	r3, r1, #2
 800223e:	461a      	mov	r2, r3
 8002240:	4623      	mov	r3, r4
 8002242:	4628      	mov	r0, r5
 8002244:	4631      	mov	r1, r6
 8002246:	f7fe f821 	bl	800028c <__aeabi_uldivmod>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	461a      	mov	r2, r3
 8002250:	4b9a      	ldr	r3, [pc, #616]	; (80024bc <UART_SetConfig+0x6f4>)
 8002252:	fba3 1302 	umull	r1, r3, r3, r2
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2164      	movs	r1, #100	; 0x64
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	3332      	adds	r3, #50	; 0x32
 8002264:	4a95      	ldr	r2, [pc, #596]	; (80024bc <UART_SetConfig+0x6f4>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002270:	4498      	add	r8, r3
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	469b      	mov	fp, r3
 8002276:	f04f 0c00 	mov.w	ip, #0
 800227a:	46d9      	mov	r9, fp
 800227c:	46e2      	mov	sl, ip
 800227e:	eb19 0309 	adds.w	r3, r9, r9
 8002282:	eb4a 040a 	adc.w	r4, sl, sl
 8002286:	4699      	mov	r9, r3
 8002288:	46a2      	mov	sl, r4
 800228a:	eb19 090b 	adds.w	r9, r9, fp
 800228e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800229e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022a6:	4689      	mov	r9, r1
 80022a8:	4692      	mov	sl, r2
 80022aa:	eb1b 0509 	adds.w	r5, fp, r9
 80022ae:	eb4c 060a 	adc.w	r6, ip, sl
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	f04f 0400 	mov.w	r4, #0
 80022c4:	0094      	lsls	r4, r2, #2
 80022c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022ca:	008b      	lsls	r3, r1, #2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	4628      	mov	r0, r5
 80022d2:	4631      	mov	r1, r6
 80022d4:	f7fd ffda 	bl	800028c <__aeabi_uldivmod>
 80022d8:	4603      	mov	r3, r0
 80022da:	460c      	mov	r4, r1
 80022dc:	461a      	mov	r2, r3
 80022de:	4b77      	ldr	r3, [pc, #476]	; (80024bc <UART_SetConfig+0x6f4>)
 80022e0:	fba3 1302 	umull	r1, r3, r3, r2
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	2164      	movs	r1, #100	; 0x64
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	3332      	adds	r3, #50	; 0x32
 80022f2:	4a72      	ldr	r2, [pc, #456]	; (80024bc <UART_SetConfig+0x6f4>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4442      	add	r2, r8
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e0d0      	b.n	80024aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002308:	f7ff fb24 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 800230c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	469a      	mov	sl, r3
 8002312:	f04f 0b00 	mov.w	fp, #0
 8002316:	46d0      	mov	r8, sl
 8002318:	46d9      	mov	r9, fp
 800231a:	eb18 0308 	adds.w	r3, r8, r8
 800231e:	eb49 0409 	adc.w	r4, r9, r9
 8002322:	4698      	mov	r8, r3
 8002324:	46a1      	mov	r9, r4
 8002326:	eb18 080a 	adds.w	r8, r8, sl
 800232a:	eb49 090b 	adc.w	r9, r9, fp
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800233a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800233e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002342:	4688      	mov	r8, r1
 8002344:	4691      	mov	r9, r2
 8002346:	eb1a 0508 	adds.w	r5, sl, r8
 800234a:	eb4b 0609 	adc.w	r6, fp, r9
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4619      	mov	r1, r3
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	0094      	lsls	r4, r2, #2
 8002362:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002366:	008b      	lsls	r3, r1, #2
 8002368:	461a      	mov	r2, r3
 800236a:	4623      	mov	r3, r4
 800236c:	4628      	mov	r0, r5
 800236e:	4631      	mov	r1, r6
 8002370:	f7fd ff8c 	bl	800028c <__aeabi_uldivmod>
 8002374:	4603      	mov	r3, r0
 8002376:	460c      	mov	r4, r1
 8002378:	461a      	mov	r2, r3
 800237a:	4b50      	ldr	r3, [pc, #320]	; (80024bc <UART_SetConfig+0x6f4>)
 800237c:	fba3 2302 	umull	r2, r3, r3, r2
 8002380:	095b      	lsrs	r3, r3, #5
 8002382:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	469b      	mov	fp, r3
 800238a:	f04f 0c00 	mov.w	ip, #0
 800238e:	46d9      	mov	r9, fp
 8002390:	46e2      	mov	sl, ip
 8002392:	eb19 0309 	adds.w	r3, r9, r9
 8002396:	eb4a 040a 	adc.w	r4, sl, sl
 800239a:	4699      	mov	r9, r3
 800239c:	46a2      	mov	sl, r4
 800239e:	eb19 090b 	adds.w	r9, r9, fp
 80023a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023a6:	f04f 0100 	mov.w	r1, #0
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ba:	4689      	mov	r9, r1
 80023bc:	4692      	mov	sl, r2
 80023be:	eb1b 0509 	adds.w	r5, fp, r9
 80023c2:	eb4c 060a 	adc.w	r6, ip, sl
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	f04f 0400 	mov.w	r4, #0
 80023d8:	0094      	lsls	r4, r2, #2
 80023da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023de:	008b      	lsls	r3, r1, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	4628      	mov	r0, r5
 80023e6:	4631      	mov	r1, r6
 80023e8:	f7fd ff50 	bl	800028c <__aeabi_uldivmod>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <UART_SetConfig+0x6f4>)
 80023f4:	fba3 1302 	umull	r1, r3, r3, r2
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	2164      	movs	r1, #100	; 0x64
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	3332      	adds	r3, #50	; 0x32
 8002406:	4a2d      	ldr	r2, [pc, #180]	; (80024bc <UART_SetConfig+0x6f4>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002412:	4498      	add	r8, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	469b      	mov	fp, r3
 8002418:	f04f 0c00 	mov.w	ip, #0
 800241c:	46d9      	mov	r9, fp
 800241e:	46e2      	mov	sl, ip
 8002420:	eb19 0309 	adds.w	r3, r9, r9
 8002424:	eb4a 040a 	adc.w	r4, sl, sl
 8002428:	4699      	mov	r9, r3
 800242a:	46a2      	mov	sl, r4
 800242c:	eb19 090b 	adds.w	r9, r9, fp
 8002430:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002440:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002444:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002448:	4689      	mov	r9, r1
 800244a:	4692      	mov	sl, r2
 800244c:	eb1b 0509 	adds.w	r5, fp, r9
 8002450:	eb4c 060a 	adc.w	r6, ip, sl
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4619      	mov	r1, r3
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f04f 0400 	mov.w	r4, #0
 8002466:	0094      	lsls	r4, r2, #2
 8002468:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800246c:	008b      	lsls	r3, r1, #2
 800246e:	461a      	mov	r2, r3
 8002470:	4623      	mov	r3, r4
 8002472:	4628      	mov	r0, r5
 8002474:	4631      	mov	r1, r6
 8002476:	f7fd ff09 	bl	800028c <__aeabi_uldivmod>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	461a      	mov	r2, r3
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <UART_SetConfig+0x6f4>)
 8002482:	fba3 1302 	umull	r1, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2164      	movs	r1, #100	; 0x64
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	3332      	adds	r3, #50	; 0x32
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <UART_SetConfig+0x6f4>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4442      	add	r2, r8
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	e7ff      	b.n	80024aa <UART_SetConfig+0x6e2>
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40011400 	.word	0x40011400
 80024bc:	51eb851f 	.word	0x51eb851f

080024c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c4:	480d      	ldr	r0, [pc, #52]	; (80024fc <LoopForever+0x6>)
  ldr r1, =_edata
 80024c6:	490e      	ldr	r1, [pc, #56]	; (8002500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <LoopForever+0xe>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024cc:	e002      	b.n	80024d4 <LoopCopyDataInit>

080024ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d2:	3304      	adds	r3, #4

080024d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d8:	d3f9      	bcc.n	80024ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024dc:	4c0b      	ldr	r4, [pc, #44]	; (800250c <LoopForever+0x16>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e0:	e001      	b.n	80024e6 <LoopFillZerobss>

080024e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e4:	3204      	adds	r2, #4

080024e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e8:	d3fb      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024ea:	f7fe faab 	bl	8000a44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024ee:	f003 fd17 	bl	8005f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024f2:	f7fe f8a9 	bl	8000648 <main>

080024f6 <LoopForever>:

LoopForever:
    b LoopForever
 80024f6:	e7fe      	b.n	80024f6 <LoopForever>
  ldr   r0, =_estack
 80024f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002500:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002504:	08006194 	.word	0x08006194
  ldr r2, =_sbss
 8002508:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800250c:	20015670 	.word	0x20015670

08002510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002510:	e7fe      	b.n	8002510 <ADC_IRQHandler>

08002512 <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <vApplicationGetIdleTaskMemory+0x2c>)
 8002530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <vApplicationGetIdleTaskMemory+0x30>)
 8002536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2282      	movs	r2, #130	; 0x82
 800253c:	601a      	str	r2, [r3, #0]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000002c 	.word	0x2000002c
 8002550:	20000084 	.word	0x20000084

08002554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0208 	add.w	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0208 	add.w	r2, r3, #8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0208 	add.w	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	601a      	str	r2, [r3, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025f6:	b480      	push	{r7}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d103      	bne.n	8002616 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e00c      	b.n	8002630 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3308      	adds	r3, #8
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	e002      	b.n	8002624 <vListInsert+0x2e>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d2f6      	bcs.n	800261e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	601a      	str	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6852      	ldr	r2, [r2, #4]
 8002688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	d103      	bne.n	800269c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	1e5a      	subs	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80026e4:	f001 fc2a 	bl	8003f3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	441a      	add	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	3b01      	subs	r3, #1
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	441a      	add	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	22ff      	movs	r2, #255	; 0xff
 8002728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d114      	bne.n	8002764 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01a      	beq.n	8002778 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3310      	adds	r3, #16
 8002746:	4618      	mov	r0, r3
 8002748:	f000 ff52 	bl	80035f0 <xTaskRemoveFromEventList>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d012      	beq.n	8002778 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <xQueueGenericReset+0xcc>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	e009      	b.n	8002778 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3310      	adds	r3, #16
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fef3 	bl	8002554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3324      	adds	r3, #36	; 0x24
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff feee 	bl	8002554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002778:	f001 fc0e 	bl	8003f98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800277c:	2301      	movs	r3, #1
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000ed04 	.word	0xe000ed04

0800278c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af02      	add	r7, sp, #8
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	4613      	mov	r3, r2
 8002798:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <xQueueGenericCreate+0x28>
 80027a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e7fe      	b.n	80027b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e004      	b.n	80027ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3350      	adds	r3, #80	; 0x50
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fd1c 	bl	800420c <pvPortMalloc>
 80027d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00f      	beq.n	80027fc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3350      	adds	r3, #80	; 0x50
 80027e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f805 	bl	8002806 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80027fc:	69bb      	ldr	r3, [r7, #24]
	}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e002      	b.n	8002828 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002834:	2101      	movs	r1, #1
 8002836:	69b8      	ldr	r0, [r7, #24]
 8002838:	f7ff ff40 	bl	80026bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	2073      	movs	r0, #115	; 0x73
 800284c:	f002 fc8e 	bl	800516c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <xQueueCreateCountingSemaphore+0x24>
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	e7fe      	b.n	800287a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	429a      	cmp	r2, r3
 8002882:	d909      	bls.n	8002898 <xQueueCreateCountingSemaphore+0x40>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e7fe      	b.n	8002896 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002898:	2202      	movs	r2, #2
 800289a:	2100      	movs	r1, #0
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff75 	bl	800278c <xQueueGenericCreate>
 80028a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80028b0:	697b      	ldr	r3, [r7, #20]
	}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b08e      	sub	sp, #56	; 0x38
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <xQueueGiveFromISR+0x28>
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	623b      	str	r3, [r7, #32]
 80028e0:	e7fe      	b.n	80028e0 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <xQueueGiveFromISR+0x44>
 80028ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e7fe      	b.n	80028fc <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <xQueueGiveFromISR+0x54>
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <xQueueGiveFromISR+0x58>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <xQueueGiveFromISR+0x5a>
 8002912:	2300      	movs	r3, #0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <xQueueGiveFromISR+0x72>
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e7fe      	b.n	800292a <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800292c:	f001 fbea 	bl	8004104 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002930:	f3ef 8211 	mrs	r2, BASEPRI
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	617a      	str	r2, [r7, #20]
 8002946:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002948:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	429a      	cmp	r2, r3
 800295a:	d235      	bcs.n	80029c8 <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	4618      	mov	r0, r3
 800296a:	f003 f98f 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 800296e:	4601      	mov	r1, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	2060      	movs	r0, #96	; 0x60
 8002976:	f002 fb9f 	bl	80050b8 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002982:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d112      	bne.n	80029b2 <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d016      	beq.n	80029c2 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002996:	3324      	adds	r3, #36	; 0x24
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fe29 	bl	80035f0 <xTaskRemoveFromEventList>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e007      	b.n	80029c2 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b6:	3301      	adds	r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029c2:	2301      	movs	r3, #1
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
 80029c6:	e00b      	b.n	80029e0 <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 f95e 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 80029d0:	4601      	mov	r1, r0
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	2060      	movs	r0, #96	; 0x60
 80029d8:	f002 fb6e 	bl	80050b8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b08f      	sub	sp, #60	; 0x3c
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	e7fe      	b.n	8002a22 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <xQueueSemaphoreTake+0x4c>
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e7fe      	b.n	8002a3e <xQueueSemaphoreTake+0x4a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a40:	f001 fa7c 	bl	8003f3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d036      	beq.n	8002abe <xQueueSemaphoreTake+0xca>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 f91a 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f003 f916 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002a60:	4601      	mov	r1, r0
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	205c      	movs	r0, #92	; 0x5c
 8002a70:	f002 fbf2 	bl	8005258 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	1e5a      	subs	r2, r3, #1
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <xQueueSemaphoreTake+0x9a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002a84:	f001 f8a4 	bl	8003bd0 <pvTaskIncrementMutexHeldCount>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00f      	beq.n	8002ab6 <xQueueSemaphoreTake+0xc2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	3310      	adds	r3, #16
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fda8 	bl	80035f0 <xTaskRemoveFromEventList>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <xQueueSemaphoreTake+0xc2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002aa6:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <xQueueSemaphoreTake+0x248>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ab6:	f001 fa6f 	bl	8003f98 <vPortExitCritical>
				return pdPASS;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0ba      	b.n	8002c34 <xQueueSemaphoreTake+0x240>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d122      	bne.n	8002b0a <xQueueSemaphoreTake+0x116>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <xQueueSemaphoreTake+0xea>
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	e7fe      	b.n	8002adc <xQueueSemaphoreTake+0xe8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002ade:	f001 fa5b 	bl	8003f98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 f8d1 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002aea:	4604      	mov	r4, r0
 8002aec:	2000      	movs	r0, #0
 8002aee:	f003 f8cd 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002af2:	4601      	mov	r1, r0
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	460a      	mov	r2, r1
 8002afe:	4621      	mov	r1, r4
 8002b00:	205c      	movs	r0, #92	; 0x5c
 8002b02:	f002 fba9 	bl	8005258 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e094      	b.n	8002c34 <xQueueSemaphoreTake+0x240>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d106      	bne.n	8002b1e <xQueueSemaphoreTake+0x12a>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fdd1 	bl	80036bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b1e:	f001 fa3b 	bl	8003f98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b22:	f000 fb53 	bl	80031cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b26:	f001 fa09 	bl	8003f3c <vPortEnterCritical>
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d103      	bne.n	8002b40 <xQueueSemaphoreTake+0x14c>
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d103      	bne.n	8002b56 <xQueueSemaphoreTake+0x162>
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b56:	f001 fa1f 	bl	8003f98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b5a:	463a      	mov	r2, r7
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fdc0 	bl	80036e8 <xTaskCheckForTimeOut>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d132      	bne.n	8002bd4 <xQueueSemaphoreTake+0x1e0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b70:	f000 f8d0 	bl	8002d14 <prvIsQueueEmpty>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d026      	beq.n	8002bc8 <xQueueSemaphoreTake+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <xQueueSemaphoreTake+0x1a2>
					{
						taskENTER_CRITICAL();
 8002b82:	f001 f9db 	bl	8003f3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fef0 	bl	8003970 <xTaskPriorityInherit>
 8002b90:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 8002b92:	f001 fa01 	bl	8003f98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3324      	adds	r3, #36	; 0x24
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fd02 	bl	80035a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ba6:	f000 f863 	bl	8002c70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002baa:	f000 fb1d 	bl	80031e8 <xTaskResumeAll>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f af45 	bne.w	8002a40 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <xQueueSemaphoreTake+0x248>)
 8002bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	e73b      	b.n	8002a40 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002bc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bca:	f000 f851 	bl	8002c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bce:	f000 fb0b 	bl	80031e8 <xTaskResumeAll>
 8002bd2:	e735      	b.n	8002a40 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bd6:	f000 f84b 	bl	8002c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bda:	f000 fb05 	bl	80031e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002be0:	f000 f898 	bl	8002d14 <prvIsQueueEmpty>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f43f af2a 	beq.w	8002a40 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00d      	beq.n	8002c0e <xQueueSemaphoreTake+0x21a>
					{
						taskENTER_CRITICAL();
 8002bf2:	f001 f9a3 	bl	8003f3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf8:	f000 f822 	bl	8002c40 <prvGetDisinheritPriorityAfterTimeout>
 8002bfc:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 ff3d 	bl	8003a84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002c0a:	f001 f9c5 	bl	8003f98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 f83b 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002c16:	4604      	mov	r4, r0
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f003 f837 	bl	8005c8c <SEGGER_SYSVIEW_ShrinkId>
 8002c1e:	4601      	mov	r1, r0
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	4613      	mov	r3, r2
 8002c28:	460a      	mov	r2, r1
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	205c      	movs	r0, #92	; 0x5c
 8002c2e:	f002 fb13 	bl	8005258 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002c32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3734      	adds	r7, #52	; 0x34
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1c3 0305 	rsb	r3, r3, #5
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e001      	b.n	8002c62 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c62:	68fb      	ldr	r3, [r7, #12]
	}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c78:	f001 f960 	bl	8003f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c84:	e011      	b.n	8002caa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3324      	adds	r3, #36	; 0x24
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fcac 	bl	80035f0 <xTaskRemoveFromEventList>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c9e:	f000 fd83 	bl	80037a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	dce9      	bgt.n	8002c86 <prvUnlockQueue+0x16>
 8002cb2:	e000      	b.n	8002cb6 <prvUnlockQueue+0x46>
					break;
 8002cb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cbe:	f001 f96b 	bl	8003f98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cc2:	f001 f93b 	bl	8003f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ccc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cce:	e011      	b.n	8002cf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d012      	beq.n	8002cfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3310      	adds	r3, #16
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fc87 	bl	80035f0 <xTaskRemoveFromEventList>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ce8:	f000 fd5e 	bl	80037a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	dce9      	bgt.n	8002cd0 <prvUnlockQueue+0x60>
 8002cfc:	e000      	b.n	8002d00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	22ff      	movs	r2, #255	; 0xff
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d08:	f001 f946 	bl	8003f98 <vPortExitCritical>
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d1c:	f001 f90e 	bl	8003f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e001      	b.n	8002d32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d32:	f001 f931 	bl	8003f98 <vPortExitCritical>

	return xReturn;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	; 0x38
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <xTaskCreateStatic+0x28>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	623b      	str	r3, [r7, #32]
 8002d66:	e7fe      	b.n	8002d66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <xTaskCreateStatic+0x42>
 8002d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	e7fe      	b.n	8002d80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d82:	2358      	movs	r3, #88	; 0x58
 8002d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b58      	cmp	r3, #88	; 0x58
 8002d8a:	d009      	beq.n	8002da0 <xTaskCreateStatic+0x60>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	e7fe      	b.n	8002d9e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01e      	beq.n	8002de4 <xTaskCreateStatic+0xa4>
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9303      	str	r3, [sp, #12]
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f850 	bl	8002e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dde:	f000 f8d3 	bl	8002f88 <prvAddNewTaskToReadyList>
 8002de2:	e001      	b.n	8002de8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002de8:	697b      	ldr	r3, [r7, #20]
	}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b08c      	sub	sp, #48	; 0x30
 8002df6:	af04      	add	r7, sp, #16
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 fa00 	bl	800420c <pvPortMalloc>
 8002e0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00e      	beq.n	8002e32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e14:	2058      	movs	r0, #88	; 0x58
 8002e16:	f001 f9f9 	bl	800420c <pvPortMalloc>
 8002e1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
 8002e28:	e005      	b.n	8002e36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e2a:	6978      	ldr	r0, [r7, #20]
 8002e2c:	f001 fab4 	bl	8004398 <vPortFree>
 8002e30:	e001      	b.n	8002e36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	2300      	movs	r3, #0
 8002e48:	9303      	str	r3, [sp, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	9302      	str	r3, [sp, #8]
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f80e 	bl	8002e7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e60:	69f8      	ldr	r0, [r7, #28]
 8002e62:	f000 f891 	bl	8002f88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e002      	b.n	8002e72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e72:	69bb      	ldr	r3, [r7, #24]
	}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	461a      	mov	r2, r3
 8002e94:	21a5      	movs	r1, #165	; 0xa5
 8002e96:	f003 f881 	bl	8005f9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f023 0307 	bic.w	r3, r3, #7
 8002eb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <prvInitialiseNewTask+0x56>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e7fe      	b.n	8002ed0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e012      	b.n	8002efe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	7819      	ldrb	r1, [r3, #0]
 8002ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3334      	adds	r3, #52	; 0x34
 8002ee8:	460a      	mov	r2, r1
 8002eea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3301      	adds	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d9e9      	bls.n	8002ed8 <prvInitialiseNewTask+0x5c>
 8002f04:	e000      	b.n	8002f08 <prvInitialiseNewTask+0x8c>
		{
			break;
 8002f06:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d901      	bls.n	8002f1a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f16:	2304      	movs	r3, #4
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f24:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fb2f 	bl	8002594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb2a 	bl	8002594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	f1c3 0205 	rsb	r2, r3, #5
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	69b8      	ldr	r0, [r7, #24]
 8002f6a:	f000 febd 	bl	8003ce8 <pxPortInitialiseStack>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f90:	f000 ffd4 	bl	8003f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <prvAddNewTaskToReadyList+0xfc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <prvAddNewTaskToReadyList+0xfc>)
 8002f9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f9e:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <prvAddNewTaskToReadyList+0x100>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <prvAddNewTaskToReadyList+0x100>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <prvAddNewTaskToReadyList+0xfc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d110      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fb4:	f000 fc1c 	bl	80037f0 <prvInitialiseTaskLists>
 8002fb8:	e00d      	b.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <prvAddNewTaskToReadyList+0x104>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fc2:	4b31      	ldr	r3, [pc, #196]	; (8003088 <prvAddNewTaskToReadyList+0x100>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d802      	bhi.n	8002fd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <prvAddNewTaskToReadyList+0x100>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <prvAddNewTaskToReadyList+0x108>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	; (8003090 <prvAddNewTaskToReadyList+0x108>)
 8002fde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <prvAddNewTaskToReadyList+0x108>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <prvAddNewTaskToReadyList+0x94>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fd1f 	bl	8005a34 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	461d      	mov	r5, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461c      	mov	r4, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	1ae3      	subs	r3, r4, r3
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	462b      	mov	r3, r5
 8003018:	f001 fb7a 	bl	8004710 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	f002 fd90 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	2201      	movs	r2, #1
 800302a:	409a      	lsls	r2, r3
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <prvAddNewTaskToReadyList+0x10c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4313      	orrs	r3, r2
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <prvAddNewTaskToReadyList+0x10c>)
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <prvAddNewTaskToReadyList+0x110>)
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7ff faae 	bl	80025ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003052:	f000 ffa1 	bl	8003f98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <prvAddNewTaskToReadyList+0x104>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvAddNewTaskToReadyList+0x100>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	429a      	cmp	r2, r3
 800306a:	d207      	bcs.n	800307c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <prvAddNewTaskToReadyList+0x114>)
 800306e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bdb0      	pop	{r4, r5, r7, pc}
 8003084:	20000364 	.word	0x20000364
 8003088:	2000028c 	.word	0x2000028c
 800308c:	20000370 	.word	0x20000370
 8003090:	20000380 	.word	0x20000380
 8003094:	2000036c 	.word	0x2000036c
 8003098:	20000290 	.word	0x20000290
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01a      	beq.n	80030e8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <vTaskDelay+0x68>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <vTaskDelay+0x2e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	e7fe      	b.n	80030cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80030ce:	f000 f87d 	bl	80031cc <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	2023      	movs	r0, #35	; 0x23
 80030d6:	f001 ffb3 	bl	8005040 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030da:	2100      	movs	r1, #0
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fd8b 	bl	8003bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030e2:	f000 f881 	bl	80031e8 <xTaskResumeAll>
 80030e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d107      	bne.n	80030fe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <vTaskDelay+0x6c>)
 80030f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000038c 	.word	0x2000038c
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800311e:	463a      	mov	r2, r7
 8003120:	1d39      	adds	r1, r7, #4
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f9fa 	bl	8002520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	9202      	str	r2, [sp, #8]
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2300      	movs	r3, #0
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	460a      	mov	r2, r1
 800313e:	491d      	ldr	r1, [pc, #116]	; (80031b4 <vTaskStartScheduler+0xa4>)
 8003140:	481d      	ldr	r0, [pc, #116]	; (80031b8 <vTaskStartScheduler+0xa8>)
 8003142:	f7ff fdfd 	bl	8002d40 <xTaskCreateStatic>
 8003146:	4602      	mov	r2, r0
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <vTaskStartScheduler+0xac>)
 800314a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <vTaskStartScheduler+0xac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003154:	2301      	movs	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	e001      	b.n	800315e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d115      	bne.n	8003190 <vTaskStartScheduler+0x80>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <vTaskStartScheduler+0xb0>)
 8003178:	f04f 32ff 	mov.w	r2, #4294967295
 800317c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <vTaskStartScheduler+0xb4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003184:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <vTaskStartScheduler+0xb8>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800318a:	f000 fe39 	bl	8003e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800318e:	e00d      	b.n	80031ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d109      	bne.n	80031ac <vTaskStartScheduler+0x9c>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e7fe      	b.n	80031aa <vTaskStartScheduler+0x9a>
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	08006094 	.word	0x08006094
 80031b8:	080037c1 	.word	0x080037c1
 80031bc:	20000388 	.word	0x20000388
 80031c0:	20000384 	.word	0x20000384
 80031c4:	20000370 	.word	0x20000370
 80031c8:	20000368 	.word	0x20000368

080031cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <vTaskSuspendAll+0x18>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <vTaskSuspendAll+0x18>)
 80031d8:	6013      	str	r3, [r2, #0]
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	2000038c 	.word	0x2000038c

080031e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031f6:	4b43      	ldr	r3, [pc, #268]	; (8003304 <xTaskResumeAll+0x11c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <xTaskResumeAll+0x2a>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	e7fe      	b.n	8003210 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003212:	f000 fe93 	bl	8003f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <xTaskResumeAll+0x11c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <xTaskResumeAll+0x11c>)
 800321e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003220:	4b38      	ldr	r3, [pc, #224]	; (8003304 <xTaskResumeAll+0x11c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d165      	bne.n	80032f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <xTaskResumeAll+0x120>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d061      	beq.n	80032f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003230:	e032      	b.n	8003298 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <xTaskResumeAll+0x124>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3318      	adds	r3, #24
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fa12 	bl	8002668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3304      	adds	r3, #4
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fa0d 	bl	8002668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fc77 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <xTaskResumeAll+0x128>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <xTaskResumeAll+0x128>)
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4a27      	ldr	r2, [pc, #156]	; (8003314 <xTaskResumeAll+0x12c>)
 8003276:	441a      	add	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3304      	adds	r3, #4
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7ff f995 	bl	80025ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <xTaskResumeAll+0x130>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <xTaskResumeAll+0x134>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <xTaskResumeAll+0x124>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1c8      	bne.n	8003232 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032a6:	f000 fb3d 	bl	8003924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <xTaskResumeAll+0x138>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032b6:	f000 f849 	bl	800334c <xTaskIncrementTick>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80032c0:	4b16      	ldr	r3, [pc, #88]	; (800331c <xTaskResumeAll+0x134>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f1      	bne.n	80032b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <xTaskResumeAll+0x138>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <xTaskResumeAll+0x134>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <xTaskResumeAll+0x13c>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032f4:	f000 fe50 	bl	8003f98 <vPortExitCritical>

	return xAlreadyYielded;
 80032f8:	68bb      	ldr	r3, [r7, #8]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000038c 	.word	0x2000038c
 8003308:	20000364 	.word	0x20000364
 800330c:	20000324 	.word	0x20000324
 8003310:	2000036c 	.word	0x2000036c
 8003314:	20000290 	.word	0x20000290
 8003318:	2000028c 	.word	0x2000028c
 800331c:	20000378 	.word	0x20000378
 8003320:	20000374 	.word	0x20000374
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800332e:	f000 fee9 	bl	8004104 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <xTaskGetTickCountFromISR+0x20>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800333c:	683b      	ldr	r3, [r7, #0]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000368 	.word	0x20000368

0800334c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003356:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <xTaskIncrementTick+0x154>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8090 	bne.w	8003480 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <xTaskIncrementTick+0x158>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003368:	4a4e      	ldr	r2, [pc, #312]	; (80034a4 <xTaskIncrementTick+0x158>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11f      	bne.n	80033b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003374:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <xTaskIncrementTick+0x15c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <xTaskIncrementTick+0x46>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	e7fe      	b.n	8003390 <xTaskIncrementTick+0x44>
 8003392:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <xTaskIncrementTick+0x15c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	4b44      	ldr	r3, [pc, #272]	; (80034ac <xTaskIncrementTick+0x160>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <xTaskIncrementTick+0x15c>)
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4a42      	ldr	r2, [pc, #264]	; (80034ac <xTaskIncrementTick+0x160>)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <xTaskIncrementTick+0x164>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3301      	adds	r3, #1
 80033ac:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <xTaskIncrementTick+0x164>)
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	f000 fab8 	bl	8003924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <xTaskIncrementTick+0x168>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d351      	bcc.n	8003462 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033be:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <xTaskIncrementTick+0x15c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <xTaskIncrementTick+0x80>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <xTaskIncrementTick+0x82>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <xTaskIncrementTick+0x168>)
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	601a      	str	r2, [r3, #0]
					break;
 80033da:	e042      	b.n	8003462 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <xTaskIncrementTick+0x15c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d203      	bcs.n	80033fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033f4:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <xTaskIncrementTick+0x168>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
						break;
 80033fa:	e032      	b.n	8003462 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3304      	adds	r3, #4
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff f931 	bl	8002668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3318      	adds	r3, #24
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff f928 	bl	8002668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fb92 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <xTaskIncrementTick+0x16c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <xTaskIncrementTick+0x16c>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4a1f      	ldr	r2, [pc, #124]	; (80034bc <xTaskIncrementTick+0x170>)
 8003440:	441a      	add	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7ff f8b0 	bl	80025ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <xTaskIncrementTick+0x174>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	429a      	cmp	r2, r3
 800345a:	d3b0      	bcc.n	80033be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800345c:	2301      	movs	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003460:	e7ad      	b.n	80033be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <xTaskIncrementTick+0x174>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4914      	ldr	r1, [pc, #80]	; (80034bc <xTaskIncrementTick+0x170>)
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d907      	bls.n	800348a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800347a:	2301      	movs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e004      	b.n	800348a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <xTaskIncrementTick+0x178>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	4a0f      	ldr	r2, [pc, #60]	; (80034c4 <xTaskIncrementTick+0x178>)
 8003488:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <xTaskIncrementTick+0x17c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003496:	697b      	ldr	r3, [r7, #20]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	2000038c 	.word	0x2000038c
 80034a4:	20000368 	.word	0x20000368
 80034a8:	2000031c 	.word	0x2000031c
 80034ac:	20000320 	.word	0x20000320
 80034b0:	2000037c 	.word	0x2000037c
 80034b4:	20000384 	.word	0x20000384
 80034b8:	2000036c 	.word	0x2000036c
 80034bc:	20000290 	.word	0x20000290
 80034c0:	2000028c 	.word	0x2000028c
 80034c4:	20000374 	.word	0x20000374
 80034c8:	20000378 	.word	0x20000378

080034cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <vTaskSwitchContext+0xc4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034da:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <vTaskSwitchContext+0xc8>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034e0:	e051      	b.n	8003586 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 80034e2:	4b2c      	ldr	r3, [pc, #176]	; (8003594 <vTaskSwitchContext+0xc8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <vTaskSwitchContext+0xcc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034f6:	7afb      	ldrb	r3, [r7, #11]
 80034f8:	f1c3 031f 	rsb	r3, r3, #31
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	4927      	ldr	r1, [pc, #156]	; (800359c <vTaskSwitchContext+0xd0>)
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003516:	f383 8811 	msr	BASEPRI, r3
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	f3bf 8f4f 	dsb	sy
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	e7fe      	b.n	8003524 <vTaskSwitchContext+0x58>
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4a1a      	ldr	r2, [pc, #104]	; (800359c <vTaskSwitchContext+0xd0>)
 8003532:	4413      	add	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3308      	adds	r3, #8
 8003548:	429a      	cmp	r2, r3
 800354a:	d104      	bne.n	8003556 <vTaskSwitchContext+0x8a>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <vTaskSwitchContext+0xd4>)
 800355e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <vTaskSwitchContext+0xd4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3334      	adds	r3, #52	; 0x34
 8003566:	2205      	movs	r2, #5
 8003568:	490e      	ldr	r1, [pc, #56]	; (80035a4 <vTaskSwitchContext+0xd8>)
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fcfc 	bl	8005f68 <memcmp>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <vTaskSwitchContext+0xb6>
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <vTaskSwitchContext+0xd4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fa9e 	bl	8005abc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003580:	e001      	b.n	8003586 <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8003582:	f002 fa3b 	bl	80059fc <SEGGER_SYSVIEW_OnIdle>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000038c 	.word	0x2000038c
 8003594:	20000378 	.word	0x20000378
 8003598:	2000036c 	.word	0x2000036c
 800359c:	20000290 	.word	0x20000290
 80035a0:	2000028c 	.word	0x2000028c
 80035a4:	08006094 	.word	0x08006094

080035a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <vTaskPlaceOnEventList+0x24>
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e7fe      	b.n	80035ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <vTaskPlaceOnEventList+0x44>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3318      	adds	r3, #24
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff f80e 	bl	80025f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035da:	2101      	movs	r1, #1
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	f000 fb0b 	bl	8003bf8 <prvAddCurrentTaskToDelayedList>
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2000028c 	.word	0x2000028c

080035f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <xTaskRemoveFromEventList+0x2a>
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	e7fe      	b.n	8003618 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	3318      	adds	r3, #24
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f822 	bl	8002668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003624:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <xTaskRemoveFromEventList+0xb4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d120      	bne.n	800366e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	3304      	adds	r3, #4
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f819 	bl	8002668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fa83 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <xTaskRemoveFromEventList+0xb8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <xTaskRemoveFromEventList+0xb8>)
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <xTaskRemoveFromEventList+0xbc>)
 800365e:	441a      	add	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe ffa1 	bl	80025ae <vListInsertEnd>
 800366c:	e005      	b.n	800367a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3318      	adds	r3, #24
 8003672:	4619      	mov	r1, r3
 8003674:	480e      	ldr	r0, [pc, #56]	; (80036b0 <xTaskRemoveFromEventList+0xc0>)
 8003676:	f7fe ff9a 	bl	80025ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <xTaskRemoveFromEventList+0xc4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d905      	bls.n	8003694 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003688:	2301      	movs	r3, #1
 800368a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <xTaskRemoveFromEventList+0xc8>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e001      	b.n	8003698 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003698:	697b      	ldr	r3, [r7, #20]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000038c 	.word	0x2000038c
 80036a8:	2000036c 	.word	0x2000036c
 80036ac:	20000290 	.word	0x20000290
 80036b0:	20000324 	.word	0x20000324
 80036b4:	2000028c 	.word	0x2000028c
 80036b8:	20000378 	.word	0x20000378

080036bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <vTaskInternalSetTimeOutState+0x24>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <vTaskInternalSetTimeOutState+0x28>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	2000037c 	.word	0x2000037c
 80036e4:	20000368 	.word	0x20000368

080036e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d109      	bne.n	800370c <xTaskCheckForTimeOut+0x24>
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e7fe      	b.n	800370a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d109      	bne.n	8003726 <xTaskCheckForTimeOut+0x3e>
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e7fe      	b.n	8003724 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003726:	f000 fc09 	bl	8003f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <xTaskCheckForTimeOut+0xb8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d102      	bne.n	800374a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	e023      	b.n	8003792 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <xTaskCheckForTimeOut+0xbc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d007      	beq.n	8003766 <xTaskCheckForTimeOut+0x7e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	429a      	cmp	r2, r3
 800375e:	d302      	bcc.n	8003766 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e015      	b.n	8003792 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	d20b      	bcs.n	8003788 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad2      	subs	r2, r2, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff9d 	bl	80036bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e004      	b.n	8003792 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800378e:	2301      	movs	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003792:	f000 fc01 	bl	8003f98 <vPortExitCritical>

	return xReturn;
 8003796:	69fb      	ldr	r3, [r7, #28]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000368 	.word	0x20000368
 80037a4:	2000037c 	.word	0x2000037c

080037a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <vTaskMissedYield+0x14>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	20000378 	.word	0x20000378

080037c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037c8:	f000 f852 	bl	8003870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <prvIdleTask+0x28>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d9f9      	bls.n	80037c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <prvIdleTask+0x2c>)
 80037d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037e4:	e7f0      	b.n	80037c8 <prvIdleTask+0x8>
 80037e6:	bf00      	nop
 80037e8:	20000290 	.word	0x20000290
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	e00c      	b.n	8003816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <prvInitialiseTaskLists+0x60>)
 8003808:	4413      	add	r3, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fea2 	bl	8002554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d9ef      	bls.n	80037fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <prvInitialiseTaskLists+0x64>)
 800381e:	f7fe fe99 	bl	8002554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <prvInitialiseTaskLists+0x68>)
 8003824:	f7fe fe96 	bl	8002554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <prvInitialiseTaskLists+0x6c>)
 800382a:	f7fe fe93 	bl	8002554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800382e:	480c      	ldr	r0, [pc, #48]	; (8003860 <prvInitialiseTaskLists+0x70>)
 8003830:	f7fe fe90 	bl	8002554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003834:	480b      	ldr	r0, [pc, #44]	; (8003864 <prvInitialiseTaskLists+0x74>)
 8003836:	f7fe fe8d 	bl	8002554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <prvInitialiseTaskLists+0x78>)
 800383c:	4a05      	ldr	r2, [pc, #20]	; (8003854 <prvInitialiseTaskLists+0x64>)
 800383e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <prvInitialiseTaskLists+0x7c>)
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <prvInitialiseTaskLists+0x68>)
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000290 	.word	0x20000290
 8003854:	200002f4 	.word	0x200002f4
 8003858:	20000308 	.word	0x20000308
 800385c:	20000324 	.word	0x20000324
 8003860:	20000338 	.word	0x20000338
 8003864:	20000350 	.word	0x20000350
 8003868:	2000031c 	.word	0x2000031c
 800386c:	20000320 	.word	0x20000320

08003870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003876:	e019      	b.n	80038ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003878:	f000 fb60 	bl	8003f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <prvCheckTasksWaitingTermination+0x4c>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe feed 	bl	8002668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <prvCheckTasksWaitingTermination+0x50>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3b01      	subs	r3, #1
 8003894:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <prvCheckTasksWaitingTermination+0x50>)
 8003896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3b01      	subs	r3, #1
 800389e:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 80038a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038a2:	f000 fb79 	bl	8003f98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f80e 	bl	80038c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <prvCheckTasksWaitingTermination+0x54>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e1      	bne.n	8003878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038b4:	bf00      	nop
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000338 	.word	0x20000338
 80038c0:	20000364 	.word	0x20000364
 80038c4:	2000034c 	.word	0x2000034c

080038c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fd5a 	bl	8004398 <vPortFree>
				vPortFree( pxTCB );
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fd57 	bl	8004398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038ea:	e017      	b.n	800391c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d103      	bne.n	80038fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fd4e 	bl	8004398 <vPortFree>
	}
 80038fc:	e00e      	b.n	800391c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003904:	2b02      	cmp	r3, #2
 8003906:	d009      	beq.n	800391c <prvDeleteTCB+0x54>
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e7fe      	b.n	800391a <prvDeleteTCB+0x52>
	}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <prvResetNextTaskUnblockTime+0x44>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <prvResetNextTaskUnblockTime+0x14>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <prvResetNextTaskUnblockTime+0x16>
 8003938:	2300      	movs	r3, #0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <prvResetNextTaskUnblockTime+0x48>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295
 8003944:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003946:	e008      	b.n	800395a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <prvResetNextTaskUnblockTime+0x44>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <prvResetNextTaskUnblockTime+0x48>)
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000031c 	.word	0x2000031c
 800396c:	20000384 	.word	0x20000384

08003970 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d073      	beq.n	8003a6e <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <xTaskPriorityInherit+0x108>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	429a      	cmp	r2, r3
 8003992:	d263      	bcs.n	8003a5c <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db06      	blt.n	80039aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <xTaskPriorityInherit+0x108>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f1c3 0205 	rsb	r2, r3, #5
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4a30      	ldr	r2, [pc, #192]	; (8003a7c <xTaskPriorityInherit+0x10c>)
 80039bc:	4413      	add	r3, r2
 80039be:	4299      	cmp	r1, r3
 80039c0:	d101      	bne.n	80039c6 <xTaskPriorityInherit+0x56>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <xTaskPriorityInherit+0x58>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d03a      	beq.n	8003a42 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe fe49 	bl	8002668 <uxListRemove>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d115      	bne.n	8003a08 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	4926      	ldr	r1, [pc, #152]	; (8003a7c <xTaskPriorityInherit+0x10c>)
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <xTaskPriorityInherit+0x98>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	2201      	movs	r2, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43da      	mvns	r2, r3
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <xTaskPriorityInherit+0x110>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4013      	ands	r3, r2
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <xTaskPriorityInherit+0x110>)
 8003a06:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <xTaskPriorityInherit+0x108>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <xTaskPriorityInherit+0x110>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	4a17      	ldr	r2, [pc, #92]	; (8003a80 <xTaskPriorityInherit+0x110>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <xTaskPriorityInherit+0x10c>)
 8003a32:	441a      	add	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fdb7 	bl	80025ae <vListInsertEnd>
 8003a40:	e004      	b.n	8003a4c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <xTaskPriorityInherit+0x108>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	2049      	movs	r0, #73	; 0x49
 8003a52:	f001 faf5 	bl	8005040 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e008      	b.n	8003a6e <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <xTaskPriorityInherit+0x108>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d201      	bcs.n	8003a6e <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
	}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	2000028c 	.word	0x2000028c
 8003a7c:	20000290 	.word	0x20000290
 8003a80:	2000036c 	.word	0x2000036c

08003a84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 808f 	beq.w	8003bbc <vTaskPriorityDisinheritAfterTimeout+0x138>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e7fe      	b.n	8003ab8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d902      	bls.n	8003aca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	e002      	b.n	8003ad0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d070      	beq.n	8003bbc <vTaskPriorityDisinheritAfterTimeout+0x138>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d16b      	bne.n	8003bbc <vTaskPriorityDisinheritAfterTimeout+0x138>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d109      	bne.n	8003b02 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	e7fe      	b.n	8003b00 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4619      	mov	r1, r3
 8003b06:	204a      	movs	r0, #74	; 0x4a
 8003b08:	f001 fa9a 	bl	8005040 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	db04      	blt.n	8003b2a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0205 	rsb	r2, r3, #5
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	6959      	ldr	r1, [r3, #20]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a23      	ldr	r2, [pc, #140]	; (8003bc8 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	d101      	bne.n	8003b44 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d038      	beq.n	8003bbc <vTaskPriorityDisinheritAfterTimeout+0x138>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fe fd8a 	bl	8002668 <uxListRemove>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <vTaskPriorityDisinheritAfterTimeout+0x102>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <vTaskPriorityDisinheritAfterTimeout+0x102>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43da      	mvns	r2, r3
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4013      	ands	r3, r2
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003b84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 ffdb 	bl	8005b44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	2201      	movs	r2, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4a06      	ldr	r2, [pc, #24]	; (8003bc8 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8003bae:	441a      	add	r2, r3
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f7fe fcf9 	bl	80025ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bbc:	bf00      	nop
 8003bbe:	3720      	adds	r7, #32
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	2000028c 	.word	0x2000028c
 8003bc8:	20000290 	.word	0x20000290
 8003bcc:	2000036c 	.word	0x2000036c

08003bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003bd4:	4b07      	ldr	r3, [pc, #28]	; (8003bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003be2:	3201      	adds	r2, #1
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8003be6:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
	}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	2000028c 	.word	0x2000028c

08003bf8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c02:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c08:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fd2a 	bl	8002668 <uxListRemove>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10b      	bne.n	8003c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	2201      	movs	r2, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d110      	bne.n	8003c5c <prvAddCurrentTaskToDelayedList+0x64>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00d      	beq.n	8003c5c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	211b      	movs	r1, #27
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 ffc0 	bl	8005bcc <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4c:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4820      	ldr	r0, [pc, #128]	; (8003cd8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c56:	f7fe fcaa 	bl	80025ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c5a:	e032      	b.n	8003cc2 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4413      	add	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d20f      	bcs.n	8003c94 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c74:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2104      	movs	r1, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 ffa6 	bl	8005bcc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c80:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f7fe fcb2 	bl	80025f6 <vListInsert>
}
 8003c92:	e016      	b.n	8003cc2 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 ff96 	bl	8005bcc <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fe fca2 	bl	80025f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d202      	bcs.n	8003cc2 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8003cbc:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	6013      	str	r3, [r2, #0]
}
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000368 	.word	0x20000368
 8003cd0:	2000028c 	.word	0x2000028c
 8003cd4:	2000036c 	.word	0x2000036c
 8003cd8:	20000350 	.word	0x20000350
 8003cdc:	20000320 	.word	0x20000320
 8003ce0:	2000031c 	.word	0x2000031c
 8003ce4:	20000384 	.word	0x20000384

08003ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b04      	subs	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0201 	bic.w	r2, r3, #1
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d18:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <pxPortInitialiseStack+0x64>)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b14      	subs	r3, #20
 8003d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b04      	subs	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f06f 0202 	mvn.w	r2, #2
 8003d36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3b20      	subs	r3, #32
 8003d3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	08003d51 	.word	0x08003d51

08003d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <prvTaskExitError+0x50>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d009      	beq.n	8003d78 <prvTaskExitError+0x28>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e7fe      	b.n	8003d76 <prvTaskExitError+0x26>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d8a:	bf00      	nop
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0fc      	beq.n	8003d8c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000000c 	.word	0x2000000c
	...

08003db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <pxCurrentTCBConst2>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dba:	f380 8809 	msr	PSP, r0
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	4770      	bx	lr
 8003dcc:	f3af 8000 	nop.w

08003dd0 <pxCurrentTCBConst2>:
 8003dd0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003dd8:	4808      	ldr	r0, [pc, #32]	; (8003dfc <prvPortStartFirstTask+0x24>)
 8003dda:	6800      	ldr	r0, [r0, #0]
 8003ddc:	6800      	ldr	r0, [r0, #0]
 8003dde:	f380 8808 	msr	MSP, r0
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8814 	msr	CONTROL, r0
 8003dea:	b662      	cpsie	i
 8003dec:	b661      	cpsie	f
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	df00      	svc	0
 8003df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dfa:	bf00      	nop
 8003dfc:	e000ed08 	.word	0xe000ed08

08003e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e06:	4b44      	ldr	r3, [pc, #272]	; (8003f18 <xPortStartScheduler+0x118>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a44      	ldr	r2, [pc, #272]	; (8003f1c <xPortStartScheduler+0x11c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d109      	bne.n	8003e24 <xPortStartScheduler+0x24>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	e7fe      	b.n	8003e22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e24:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <xPortStartScheduler+0x118>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a3d      	ldr	r2, [pc, #244]	; (8003f20 <xPortStartScheduler+0x120>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d109      	bne.n	8003e42 <xPortStartScheduler+0x42>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e7fe      	b.n	8003e40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e42:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <xPortStartScheduler+0x124>)
 8003e44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	22ff      	movs	r2, #255	; 0xff
 8003e52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <xPortStartScheduler+0x128>)
 8003e68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e6a:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e70:	e009      	b.n	8003e86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003e72:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003e7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d0ef      	beq.n	8003e72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e92:	4b26      	ldr	r3, [pc, #152]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d009      	beq.n	8003eb2 <xPortStartScheduler+0xb2>
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	e7fe      	b.n	8003eb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003eba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <xPortStartScheduler+0x12c>)
 8003ec6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <xPortStartScheduler+0x130>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <xPortStartScheduler+0x130>)
 8003ed6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <xPortStartScheduler+0x130>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <xPortStartScheduler+0x130>)
 8003ee2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ee6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ee8:	f000 f8de 	bl	80040a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <xPortStartScheduler+0x134>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003ef2:	f000 f8fd 	bl	80040f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <xPortStartScheduler+0x138>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a0f      	ldr	r2, [pc, #60]	; (8003f38 <xPortStartScheduler+0x138>)
 8003efc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f02:	f7ff ff69 	bl	8003dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f06:	f7ff fae1 	bl	80034cc <vTaskSwitchContext>
	prvTaskExitError();
 8003f0a:	f7ff ff21 	bl	8003d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	410fc271 	.word	0x410fc271
 8003f20:	410fc270 	.word	0x410fc270
 8003f24:	e000e400 	.word	0xe000e400
 8003f28:	20000390 	.word	0x20000390
 8003f2c:	20000394 	.word	0x20000394
 8003f30:	e000ed20 	.word	0xe000ed20
 8003f34:	2000000c 	.word	0x2000000c
 8003f38:	e000ef34 	.word	0xe000ef34

08003f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f54:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <vPortEnterCritical+0x54>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <vPortEnterCritical+0x54>)
 8003f5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <vPortEnterCritical+0x54>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10e      	bne.n	8003f84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <vPortEnterCritical+0x58>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <vPortEnterCritical+0x48>
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	e7fe      	b.n	8003f82 <vPortEnterCritical+0x46>
	}
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	2000000c 	.word	0x2000000c
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <vPortExitCritical+0x4c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <vPortExitCritical+0x22>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	e7fe      	b.n	8003fb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <vPortExitCritical+0x4c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <vPortExitCritical+0x4c>)
 8003fc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <vPortExitCritical+0x4c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <vPortExitCritical+0x3e>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000000c 	.word	0x2000000c
	...

08003ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ff0:	f3ef 8009 	mrs	r0, PSP
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <pxCurrentTCBConst>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f01e 0f10 	tst.w	lr, #16
 8004000:	bf08      	it	eq
 8004002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	6010      	str	r0, [r2, #0]
 800400c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004014:	f380 8811 	msr	BASEPRI, r0
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f7ff fa54 	bl	80034cc <vTaskSwitchContext>
 8004024:	f04f 0000 	mov.w	r0, #0
 8004028:	f380 8811 	msr	BASEPRI, r0
 800402c:	bc09      	pop	{r0, r3}
 800402e:	6819      	ldr	r1, [r3, #0]
 8004030:	6808      	ldr	r0, [r1, #0]
 8004032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004036:	f01e 0f10 	tst.w	lr, #16
 800403a:	bf08      	it	eq
 800403c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004040:	f380 8809 	msr	PSP, r0
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	f3af 8000 	nop.w

08004050 <pxCurrentTCBConst>:
 8004050:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8004070:	f001 fc4a 	bl	8005908 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004074:	f7ff f96a 	bl	800334c <xTaskIncrementTick>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d006      	beq.n	800408c <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 800407e:	f001 fca1 	bl	80059c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <xPortSysTickHandler+0x4c>)
 8004084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e001      	b.n	8004090 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 800408c:	f001 fc7e 	bl	800598c <SEGGER_SYSVIEW_RecordExitISR>
 8004090:	2300      	movs	r3, #0
 8004092:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	e000ed04 	.word	0xe000ed04

080040a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <vPortSetupTimerInterrupt+0x34>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <vPortSetupTimerInterrupt+0x38>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <vPortSetupTimerInterrupt+0x3c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <vPortSetupTimerInterrupt+0x40>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	099b      	lsrs	r3, r3, #6
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <vPortSetupTimerInterrupt+0x44>)
 80040c6:	3b01      	subs	r3, #1
 80040c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <vPortSetupTimerInterrupt+0x34>)
 80040cc:	2207      	movs	r2, #7
 80040ce:	601a      	str	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e010 	.word	0xe000e010
 80040e0:	e000e018 	.word	0xe000e018
 80040e4:	20000000 	.word	0x20000000
 80040e8:	10624dd3 	.word	0x10624dd3
 80040ec:	e000e014 	.word	0xe000e014

080040f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004100 <vPortEnableVFP+0x10>
 80040f4:	6801      	ldr	r1, [r0, #0]
 80040f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040fa:	6001      	str	r1, [r0, #0]
 80040fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040fe:	bf00      	nop
 8004100:	e000ed88 	.word	0xe000ed88

08004104 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 800410a:	f000 f839 	bl	8004180 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800410e:	f3ef 8305 	mrs	r3, IPSR
 8004112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	d913      	bls.n	8004142 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <vPortValidateInterruptPriority+0x6c>)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <vPortValidateInterruptPriority+0x70>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	7afa      	ldrb	r2, [r7, #11]
 800412a:	429a      	cmp	r2, r3
 800412c:	d209      	bcs.n	8004142 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004132:	f383 8811 	msr	BASEPRI, r3
 8004136:	f3bf 8f6f 	isb	sy
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	e7fe      	b.n	8004140 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <vPortValidateInterruptPriority+0x74>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <vPortValidateInterruptPriority+0x78>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d909      	bls.n	8004166 <vPortValidateInterruptPriority+0x62>
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	e7fe      	b.n	8004164 <vPortValidateInterruptPriority+0x60>
	}
 8004166:	bf00      	nop
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e3f0 	.word	0xe000e3f0
 8004174:	20000390 	.word	0x20000390
 8004178:	e000ed0c 	.word	0xe000ed0c
 800417c:	20000394 	.word	0x20000394

08004180 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <vSetVarulMaxPRIGROUPValue+0x84>)
 8004188:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 800419a:	2207      	movs	r2, #7
 800419c:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419e:	e009      	b.n	80041b4 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041a8:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041bc:	2b80      	cmp	r3, #128	; 0x80
 80041be:	d0ef      	beq.n	80041a0 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1c3 0307 	rsb	r3, r3, #7
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d009      	beq.n	80041e0 <vSetVarulMaxPRIGROUPValue+0x60>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	e7fe      	b.n	80041de <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041e8:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <vSetVarulMaxPRIGROUPValue+0x88>)
 80041f4:	6013      	str	r3, [r2, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	e000e400 	.word	0xe000e400
 8004208:	20000394 	.word	0x20000394

0800420c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004218:	f7fe ffd8 	bl	80031cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <pvPortMalloc+0x178>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004224:	f000 f910 	bl	8004448 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004228:	4b57      	ldr	r3, [pc, #348]	; (8004388 <pvPortMalloc+0x17c>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 808c 	bne.w	800434e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800423c:	2208      	movs	r2, #8
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d013      	beq.n	8004276 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	3308      	adds	r3, #8
 8004256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <pvPortMalloc+0x6a>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e7fe      	b.n	8004274 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d068      	beq.n	800434e <pvPortMalloc+0x142>
 800427c:	4b43      	ldr	r3, [pc, #268]	; (800438c <pvPortMalloc+0x180>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d863      	bhi.n	800434e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004286:	4b42      	ldr	r3, [pc, #264]	; (8004390 <pvPortMalloc+0x184>)
 8004288:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <pvPortMalloc+0x184>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004290:	e004      	b.n	800429c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d903      	bls.n	80042ae <pvPortMalloc+0xa2>
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f1      	bne.n	8004292 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042ae:	4b35      	ldr	r3, [pc, #212]	; (8004384 <pvPortMalloc+0x178>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d04a      	beq.n	800434e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2208      	movs	r2, #8
 80042be:	4413      	add	r3, r2
 80042c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1ad2      	subs	r2, r2, r3
 80042d2:	2308      	movs	r3, #8
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d91e      	bls.n	8004318 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <pvPortMalloc+0xf4>
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e7fe      	b.n	80042fe <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1ad2      	subs	r2, r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004312:	69b8      	ldr	r0, [r7, #24]
 8004314:	f000 f8fa 	bl	800450c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004318:	4b1c      	ldr	r3, [pc, #112]	; (800438c <pvPortMalloc+0x180>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a1a      	ldr	r2, [pc, #104]	; (800438c <pvPortMalloc+0x180>)
 8004324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <pvPortMalloc+0x180>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <pvPortMalloc+0x188>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d203      	bcs.n	800433a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <pvPortMalloc+0x180>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <pvPortMalloc+0x188>)
 8004338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <pvPortMalloc+0x17c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	431a      	orrs	r2, r3
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800434e:	f7fe ff4b 	bl	80031e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004358:	f7fe f8db 	bl	8002512 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <pvPortMalloc+0x16e>
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e7fe      	b.n	8004378 <pvPortMalloc+0x16c>
	return pvReturn;
 800437a:	69fb      	ldr	r3, [r7, #28]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20012fa0 	.word	0x20012fa0
 8004388:	20012fac 	.word	0x20012fac
 800438c:	20012fa4 	.word	0x20012fa4
 8004390:	20012f98 	.word	0x20012f98
 8004394:	20012fa8 	.word	0x20012fa8

08004398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d046      	beq.n	8004438 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043aa:	2308      	movs	r3, #8
 80043ac:	425b      	negs	r3, r3
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4413      	add	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <vPortFree+0xa8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <vPortFree+0x42>
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e7fe      	b.n	80043d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <vPortFree+0x5e>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	e7fe      	b.n	80043f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <vPortFree+0xa8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d115      	bne.n	8004438 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortFree+0xa8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800441c:	f7fe fed6 	bl	80031cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <vPortFree+0xac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4413      	add	r3, r2
 800442a:	4a06      	ldr	r2, [pc, #24]	; (8004444 <vPortFree+0xac>)
 800442c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f000 f86c 	bl	800450c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004434:	f7fe fed8 	bl	80031e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004438:	bf00      	nop
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20012fac 	.word	0x20012fac
 8004444:	20012fa4 	.word	0x20012fa4

08004448 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800444e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004452:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004454:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <prvHeapInit+0xac>)
 8004456:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00c      	beq.n	800447c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3307      	adds	r3, #7
 8004466:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <prvHeapInit+0xac>)
 8004478:	4413      	add	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <prvHeapInit+0xb0>)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <prvHeapInit+0xb0>)
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004494:	2208      	movs	r2, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a15      	ldr	r2, [pc, #84]	; (80044fc <prvHeapInit+0xb4>)
 80044a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <prvHeapInit+0xb4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <prvHeapInit+0xb4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	1ad2      	subs	r2, r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <prvHeapInit+0xb4>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <prvHeapInit+0xb8>)
 80044d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	4a09      	ldr	r2, [pc, #36]	; (8004504 <prvHeapInit+0xbc>)
 80044de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <prvHeapInit+0xc0>)
 80044e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044e6:	601a      	str	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	20000398 	.word	0x20000398
 80044f8:	20012f98 	.word	0x20012f98
 80044fc:	20012fa0 	.word	0x20012fa0
 8004500:	20012fa8 	.word	0x20012fa8
 8004504:	20012fa4 	.word	0x20012fa4
 8004508:	20012fac 	.word	0x20012fac

0800450c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004514:	4b28      	ldr	r3, [pc, #160]	; (80045b8 <prvInsertBlockIntoFreeList+0xac>)
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e002      	b.n	8004520 <prvInsertBlockIntoFreeList+0x14>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d8f7      	bhi.n	800451a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d108      	bne.n	800454e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	441a      	add	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d118      	bne.n	8004594 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b15      	ldr	r3, [pc, #84]	; (80045bc <prvInsertBlockIntoFreeList+0xb0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d00d      	beq.n	800458a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e008      	b.n	800459c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <prvInsertBlockIntoFreeList+0xb0>)
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e003      	b.n	800459c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d002      	beq.n	80045aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20012f98 	.word	0x20012f98
 80045bc:	20012fa0 	.word	0x20012fa0

080045c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80045c4:	4803      	ldr	r0, [pc, #12]	; (80045d4 <_cbSendSystemDesc+0x14>)
 80045c6:	f001 f94b 	bl	8005860 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80045ca:	4803      	ldr	r0, [pc, #12]	; (80045d8 <_cbSendSystemDesc+0x18>)
 80045cc:	f001 f948 	bl	8005860 <SEGGER_SYSVIEW_SendSysDesc>
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	0800609c 	.word	0x0800609c
 80045d8:	080060d0 	.word	0x080060d0

080045dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <SEGGER_SYSVIEW_Conf+0x20>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <SEGGER_SYSVIEW_Conf+0x20>)
 80045e6:	6819      	ldr	r1, [r3, #0]
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <SEGGER_SYSVIEW_Conf+0x24>)
 80045ea:	4a06      	ldr	r2, [pc, #24]	; (8004604 <SEGGER_SYSVIEW_Conf+0x28>)
 80045ec:	f000 fcbc 	bl	8004f68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80045f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80045f4:	f000 fcf6 	bl	8004fe4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20000000 	.word	0x20000000
 8004600:	080045c1 	.word	0x080045c1
 8004604:	08006170 	.word	0x08006170

08004608 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800460a:	b085      	sub	sp, #20
 800460c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	e034      	b.n	800467e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004614:	491e      	ldr	r1, [pc, #120]	; (8004690 <_cbSendTaskList+0x88>)
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	491a      	ldr	r1, [pc, #104]	; (8004690 <_cbSendTaskList+0x88>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3304      	adds	r3, #4
 8004634:	681c      	ldr	r4, [r3, #0]
 8004636:	4916      	ldr	r1, [pc, #88]	; (8004690 <_cbSendTaskList+0x88>)
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3308      	adds	r3, #8
 8004646:	681d      	ldr	r5, [r3, #0]
 8004648:	4911      	ldr	r1, [pc, #68]	; (8004690 <_cbSendTaskList+0x88>)
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	330c      	adds	r3, #12
 8004658:	681e      	ldr	r6, [r3, #0]
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <_cbSendTaskList+0x88>)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3310      	adds	r3, #16
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	4633      	mov	r3, r6
 8004670:	462a      	mov	r2, r5
 8004672:	4621      	mov	r1, r4
 8004674:	f000 f8b4 	bl	80047e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <_cbSendTaskList+0x8c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d3c5      	bcc.n	8004614 <_cbSendTaskList+0xc>
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004690:	20012fb0 	.word	0x20012fb0
 8004694:	20013050 	.word	0x20013050

08004698 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800469e:	f7fe fe43 	bl	8003328 <xTaskGetTickCountFromISR>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f04f 0400 	mov.w	r4, #0
 80046a8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80046ac:	e9d7 5600 	ldrd	r5, r6, [r7]
 80046b0:	462b      	mov	r3, r5
 80046b2:	4634      	mov	r4, r6
 80046b4:	f04f 0100 	mov.w	r1, #0
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	0162      	lsls	r2, r4, #5
 80046be:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	460b      	mov	r3, r1
 80046c6:	4614      	mov	r4, r2
 80046c8:	1b5b      	subs	r3, r3, r5
 80046ca:	eb64 0406 	sbc.w	r4, r4, r6
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	00a2      	lsls	r2, r4, #2
 80046d8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80046dc:	0099      	lsls	r1, r3, #2
 80046de:	460b      	mov	r3, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	195b      	adds	r3, r3, r5
 80046e4:	eb44 0406 	adc.w	r4, r4, r6
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	00e2      	lsls	r2, r4, #3
 80046f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046f6:	00d9      	lsls	r1, r3, #3
 80046f8:	460b      	mov	r3, r1
 80046fa:	4614      	mov	r4, r2
 80046fc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004700:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004704:	4618      	mov	r0, r3
 8004706:	4621      	mov	r1, r4
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004710 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800471e:	2205      	movs	r2, #5
 8004720:	492b      	ldr	r1, [pc, #172]	; (80047d0 <SYSVIEW_AddTask+0xc0>)
 8004722:	68b8      	ldr	r0, [r7, #8]
 8004724:	f001 fc20 	bl	8005f68 <memcmp>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d04b      	beq.n	80047c6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b07      	cmp	r3, #7
 8004734:	d903      	bls.n	800473e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004736:	4828      	ldr	r0, [pc, #160]	; (80047d8 <SYSVIEW_AddTask+0xc8>)
 8004738:	f001 fb96 	bl	8005e68 <SEGGER_SYSVIEW_Warn>
    return;
 800473c:	e044      	b.n	80047c8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800473e:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	4926      	ldr	r1, [pc, #152]	; (80047dc <SYSVIEW_AddTask+0xcc>)
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4921      	ldr	r1, [pc, #132]	; (80047dc <SYSVIEW_AddTask+0xcc>)
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3304      	adds	r3, #4
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	491b      	ldr	r1, [pc, #108]	; (80047dc <SYSVIEW_AddTask+0xcc>)
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3308      	adds	r3, #8
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4916      	ldr	r1, [pc, #88]	; (80047dc <SYSVIEW_AddTask+0xcc>)
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	330c      	adds	r3, #12
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4910      	ldr	r1, [pc, #64]	; (80047dc <SYSVIEW_AddTask+0xcc>)
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	3310      	adds	r3, #16
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80047aa:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	4a08      	ldr	r2, [pc, #32]	; (80047d4 <SYSVIEW_AddTask+0xc4>)
 80047b2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f80e 	bl	80047e0 <SYSVIEW_SendTaskInfo>
 80047c4:	e000      	b.n	80047c8 <SYSVIEW_AddTask+0xb8>
    return;
 80047c6:	bf00      	nop

}
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	080060e0 	.word	0x080060e0
 80047d4:	20013050 	.word	0x20013050
 80047d8:	080060e8 	.word	0x080060e8
 80047dc:	20012fb0 	.word	0x20012fb0

080047e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08a      	sub	sp, #40	; 0x28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	2214      	movs	r2, #20
 80047f4:	2100      	movs	r1, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fbd0 	bl	8005f9c <memset>
  TaskInfo.TaskID     = TaskID;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ff29 	bl	800566c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800481a:	bf00      	nop
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <_DoInit+0x8c>)
 800482c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2203      	movs	r2, #3
 8004832:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2203      	movs	r2, #3
 8004838:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <_DoInit+0x90>)
 800483e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <_DoInit+0x94>)
 8004844:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800484c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <_DoInit+0x90>)
 8004864:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a14      	ldr	r2, [pc, #80]	; (80048bc <_DoInit+0x98>)
 800486a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2210      	movs	r2, #16
 8004870:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3307      	adds	r3, #7
 8004888:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <_DoInit+0x9c>)
 800488a:	6810      	ldr	r0, [r2, #0]
 800488c:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <_DoInit+0xa0>)
 8004892:	6810      	ldr	r0, [r2, #0]
 8004894:	6018      	str	r0, [r3, #0]
 8004896:	8891      	ldrh	r1, [r2, #4]
 8004898:	7992      	ldrb	r2, [r2, #6]
 800489a:	8099      	strh	r1, [r3, #4]
 800489c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	719a      	strb	r2, [r3, #6]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	200155c8 	.word	0x200155c8
 80048b4:	08006138 	.word	0x08006138
 80048b8:	20013054 	.word	0x20013054
 80048bc:	20013454 	.word	0x20013454
 80048c0:	08006144 	.word	0x08006144
 80048c4:	08006148 	.word	0x08006148

080048c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 80048d4:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <SEGGER_RTT_ReadNoLock+0x18>
 80048dc:	f7ff ffa2 	bl	8004824 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	3360      	adds	r3, #96	; 0x60
 80048ec:	4a36      	ldr	r2, [pc, #216]	; (80049c8 <SEGGER_RTT_ReadNoLock+0x100>)
 80048ee:	4413      	add	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004906:	6a3a      	ldr	r2, [r7, #32]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	429a      	cmp	r2, r3
 800490c:	d92a      	bls.n	8004964 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4293      	cmp	r3, r2
 800491e:	bf28      	it	cs
 8004920:	4613      	movcs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	4413      	add	r3, r2
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4619      	mov	r1, r3
 8004930:	69f8      	ldr	r0, [r7, #28]
 8004932:	f001 fb28 	bl	8005f86 <memcpy>
    NumBytesRead += NumBytesRem;
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4413      	add	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800494e:	6a3a      	ldr	r2, [r7, #32]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	6a3a      	ldr	r2, [r7, #32]
 800495c:	429a      	cmp	r2, r3
 800495e:	d101      	bne.n	8004964 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4293      	cmp	r3, r2
 8004972:	bf28      	it	cs
 8004974:	4613      	movcs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d018      	beq.n	80049b0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	685a      	ldr	r2, [r3, #4]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	4413      	add	r3, r2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4619      	mov	r1, r3
 800498a:	69f8      	ldr	r0, [r7, #28]
 800498c:	f001 fafb 	bl	8005f86 <memcpy>
    NumBytesRead += NumBytesRem;
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3728      	adds	r7, #40	; 0x28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200155c8 	.word	0x200155c8

080049cc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80049da:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80049e2:	f7ff ff1f 	bl	8004824 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d24c      	bcs.n	8004a8c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80049f2:	f3ef 8311 	mrs	r3, BASEPRI
 80049f6:	f04f 0120 	mov.w	r1, #32
 80049fa:	f381 8811 	msr	BASEPRI, r1
 80049fe:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d032      	beq.n	8004a6c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8004a06:	4925      	ldr	r1, [pc, #148]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	440b      	add	r3, r1
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a1a:	4920      	ldr	r1, [pc, #128]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	440b      	add	r3, r1
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004a30:	491a      	ldr	r1, [pc, #104]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3320      	adds	r3, #32
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004a44:	4915      	ldr	r1, [pc, #84]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	440b      	add	r3, r1
 8004a52:	3328      	adds	r3, #40	; 0x28
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004a58:	4910      	ldr	r1, [pc, #64]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4413      	add	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	440b      	add	r3, r1
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004a6c:	490b      	ldr	r1, [pc, #44]	; (8004a9c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	4413      	add	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	440b      	add	r3, r1
 8004a7a:	332c      	adds	r3, #44	; 0x2c
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e002      	b.n	8004a92 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200155c8 	.word	0x200155c8

08004aa0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004aae:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8004ab6:	f7ff feb5 	bl	8004824 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d24b      	bcs.n	8004b5e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8004ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8004aca:	f04f 0120 	mov.w	r1, #32
 8004ace:	f381 8811 	msr	BASEPRI, r1
 8004ad2:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d031      	beq.n	8004b3e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8004ada:	4925      	ldr	r1, [pc, #148]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3360      	adds	r3, #96	; 0x60
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004aee:	4920      	ldr	r1, [pc, #128]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4613      	mov	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	4413      	add	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	440b      	add	r3, r1
 8004afc:	3364      	adds	r3, #100	; 0x64
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004b02:	491b      	ldr	r1, [pc, #108]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	3368      	adds	r3, #104	; 0x68
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8004b16:	4916      	ldr	r1, [pc, #88]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	3370      	adds	r3, #112	; 0x70
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8004b2a:	4911      	ldr	r1, [pc, #68]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	336c      	adds	r3, #108	; 0x6c
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8004b3e:	490c      	ldr	r1, [pc, #48]	; (8004b70 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4613      	mov	r3, r2
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3374      	adds	r3, #116	; 0x74
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e002      	b.n	8004b64 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b64:	697b      	ldr	r3, [r7, #20]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200155c8 	.word	0x200155c8

08004b74 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b84:	e002      	b.n	8004b8c <_EncodeStr+0x18>
    Len++;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f6      	bne.n	8004b86 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d901      	bls.n	8004ba4 <_EncodeStr+0x30>
    Len = Limit;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8004ba8:	d806      	bhi.n	8004bb8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	60fa      	str	r2, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e011      	b.n	8004bdc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	60fa      	str	r2, [r7, #12]
 8004bbe:	22ff      	movs	r2, #255	; 0xff
 8004bc0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	0a19      	lsrs	r1, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	60fa      	str	r2, [r7, #12]
 8004bd8:	b2ca      	uxtb	r2, r1
 8004bda:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004be0:	e00a      	b.n	8004bf8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	1c53      	adds	r3, r2, #1
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	60f9      	str	r1, [r7, #12]
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	701a      	strb	r2, [r3, #0]
    n++;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d3f0      	bcc.n	8004be2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c2c:	1cfb      	adds	r3, r7, #3
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4619      	mov	r1, r3
 8004c32:	2001      	movs	r0, #1
 8004c34:	f7ff fe48 	bl	80048c8 <SEGGER_RTT_ReadNoLock>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	dd44      	ble.n	8004ccc <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d01a      	beq.n	8004c7e <_HandleIncomingPacket+0x58>
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	dc06      	bgt.n	8004c5a <_HandleIncomingPacket+0x34>
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d010      	beq.n	8004c72 <_HandleIncomingPacket+0x4c>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	dc11      	bgt.n	8004c78 <_HandleIncomingPacket+0x52>
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d009      	beq.n	8004c6c <_HandleIncomingPacket+0x46>
 8004c58:	e02d      	b.n	8004cb6 <_HandleIncomingPacket+0x90>
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d015      	beq.n	8004c8a <_HandleIncomingPacket+0x64>
 8004c5e:	2b06      	cmp	r3, #6
 8004c60:	db10      	blt.n	8004c84 <_HandleIncomingPacket+0x5e>
 8004c62:	2b07      	cmp	r3, #7
 8004c64:	d014      	beq.n	8004c90 <_HandleIncomingPacket+0x6a>
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d015      	beq.n	8004c96 <_HandleIncomingPacket+0x70>
 8004c6a:	e024      	b.n	8004cb6 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c6c:	f000 fb86 	bl	800537c <SEGGER_SYSVIEW_Start>
      break;
 8004c70:	e031      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c72:	f000 fc3b 	bl	80054ec <SEGGER_SYSVIEW_Stop>
      break;
 8004c76:	e02e      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c78:	f000 fe16 	bl	80058a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c7c:	e02b      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c7e:	f000 fddb 	bl	8005838 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c82:	e028      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c84:	f000 fc58 	bl	8005538 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c88:	e025      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c8a:	f001 f8af 	bl	8005dec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c8e:	e022      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c90:	f001 f88e 	bl	8005db0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c94:	e01f      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c96:	1cfb      	adds	r3, r7, #3
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f7ff fe13 	bl	80048c8 <SEGGER_RTT_ReadNoLock>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd11      	ble.n	8004cd0 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fffe 	bl	8005cb0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004cb4:	e00c      	b.n	8004cd0 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	b25b      	sxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da0a      	bge.n	8004cd4 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cbe:	1cfb      	adds	r3, r7, #3
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f7ff fdff 	bl	80048c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004cca:	e003      	b.n	8004cd4 <_HandleIncomingPacket+0xae>
    }
  }
 8004ccc:	bf00      	nop
 8004cce:	e002      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
      break;
 8004cd0:	bf00      	nop
 8004cd2:	e000      	b.n	8004cd6 <_HandleIncomingPacket+0xb0>
      break;
 8004cd4:	bf00      	nop
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08c      	sub	sp, #48	; 0x30
 8004ce4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004cea:	1d3b      	adds	r3, r7, #4
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfa:	e00b      	b.n	8004d14 <_TrySendOverflowPacket+0x34>
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	09db      	lsrs	r3, r3, #7
 8004d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	2b7f      	cmp	r3, #127	; 0x7f
 8004d18:	d8f0      	bhi.n	8004cfc <_TrySendOverflowPacket+0x1c>
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d2a:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <_TrySendOverflowPacket+0xdc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d30:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	e00b      	b.n	8004d5c <_TrySendOverflowPacket+0x7c>
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <_TrySendOverflowPacket+0x64>
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	627a      	str	r2, [r7, #36]	; 0x24
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	461a      	mov	r2, r3
 8004d7a:	1d3b      	adds	r3, r7, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7fb fa36 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d84:	4603      	mov	r3, r0
 8004d86:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004d94:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	e004      	b.n	8004dac <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	3301      	adds	r3, #1
 8004da8:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <_TrySendOverflowPacket+0xd8>)
 8004daa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dac:	693b      	ldr	r3, [r7, #16]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3730      	adds	r7, #48	; 0x30
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	2001546c 	.word	0x2001546c
 8004dbc:	e0001004 	.word	0xe0001004

08004dc0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004dcc:	4b63      	ldr	r3, [pc, #396]	; (8004f5c <_SendPacket+0x19c>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d010      	beq.n	8004df6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004dd4:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <_SendPacket+0x19c>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a1 	beq.w	8004f20 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004dde:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <_SendPacket+0x19c>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d109      	bne.n	8004dfa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004de6:	f7ff ff7b 	bl	8004ce0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004dea:	4b5c      	ldr	r3, [pc, #368]	; (8004f5c <_SendPacket+0x19c>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	f040 8098 	bne.w	8004f24 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004df4:	e001      	b.n	8004dfa <_SendPacket+0x3a>
    goto Send;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <_SendPacket+0x3c>
Send:
 8004dfa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b1f      	cmp	r3, #31
 8004e00:	d809      	bhi.n	8004e16 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e02:	4b56      	ldr	r3, [pc, #344]	; (8004f5c <_SendPacket+0x19c>)
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 8089 	bne.w	8004f28 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b17      	cmp	r3, #23
 8004e1a:	d807      	bhi.n	8004e2c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	e03d      	b.n	8004ea8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b7f      	cmp	r3, #127	; 0x7f
 8004e38:	d912      	bls.n	8004e60 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	09da      	lsrs	r2, r3, #7
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	3a01      	subs	r2, #1
 8004e52:	60fa      	str	r2, [r7, #12]
 8004e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e006      	b.n	8004e6e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b7f      	cmp	r3, #127	; 0x7f
 8004e72:	d912      	bls.n	8004e9a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	09da      	lsrs	r2, r3, #7
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	60fa      	str	r2, [r7, #12]
 8004e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e006      	b.n	8004ea8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <_SendPacket+0x1a0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <_SendPacket+0x19c>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	e00b      	b.n	8004eda <_SendPacket+0x11a>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	6279      	str	r1, [r7, #36]	; 0x24
 8004ecc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	09db      	lsrs	r3, r3, #7
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ede:	d8f0      	bhi.n	8004ec2 <_SendPacket+0x102>
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	2001      	movs	r0, #1
 8004efc:	f7fb f978 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f00:	4603      	mov	r3, r0
 8004f02:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f0a:	4a14      	ldr	r2, [pc, #80]	; (8004f5c <_SendPacket+0x19c>)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	60d3      	str	r3, [r2, #12]
 8004f10:	e00b      	b.n	8004f2a <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <_SendPacket+0x19c>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <_SendPacket+0x19c>)
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e004      	b.n	8004f2a <_SendPacket+0x16a>
    goto SendDone;
 8004f20:	bf00      	nop
 8004f22:	e002      	b.n	8004f2a <_SendPacket+0x16a>
      goto SendDone;
 8004f24:	bf00      	nop
 8004f26:	e000      	b.n	8004f2a <_SendPacket+0x16a>
      goto SendDone;
 8004f28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <_SendPacket+0x1a4>)
 8004f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <_SendPacket+0x1a4>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d00b      	beq.n	8004f52 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <_SendPacket+0x19c>)
 8004f3c:	789b      	ldrb	r3, [r3, #2]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d107      	bne.n	8004f52 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f42:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <_SendPacket+0x19c>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f48:	f7ff fe6d 	bl	8004c26 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <_SendPacket+0x19c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f52:	bf00      	nop
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	2001546c 	.word	0x2001546c
 8004f60:	e0001004 	.word	0xe0001004
 8004f64:	200155c8 	.word	0x200155c8

08004f68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f7e:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <SEGGER_SYSVIEW_Init+0x68>)
 8004f80:	4914      	ldr	r1, [pc, #80]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004f82:	2001      	movs	r0, #1
 8004f84:	f7ff fd22 	bl	80049cc <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <SEGGER_SYSVIEW_Init+0x70>)
 8004f90:	4910      	ldr	r1, [pc, #64]	; (8004fd4 <SEGGER_SYSVIEW_Init+0x6c>)
 8004f92:	2001      	movs	r0, #1
 8004f94:	f7ff fd84 	bl	8004aa0 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fa0:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <SEGGER_SYSVIEW_Init+0x78>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004fa6:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004fa8:	4a0c      	ldr	r2, [pc, #48]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004fae:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004fb4:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004fba:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <SEGGER_SYSVIEW_Init+0x74>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20013464 	.word	0x20013464
 8004fd4:	08006150 	.word	0x08006150
 8004fd8:	20015464 	.word	0x20015464
 8004fdc:	2001546c 	.word	0x2001546c
 8004fe0:	e0001004 	.word	0xe0001004

08004fe4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004fec:	4a04      	ldr	r2, [pc, #16]	; (8005000 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6113      	str	r3, [r2, #16]
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	2001546c 	.word	0x2001546c

08005004 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800500c:	f3ef 8311 	mrs	r3, BASEPRI
 8005010:	f04f 0120 	mov.w	r1, #32
 8005014:	f381 8811 	msr	BASEPRI, r1
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	4808      	ldr	r0, [pc, #32]	; (800503c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800501c:	f7ff fdf7 	bl	8004c0e <_PreparePacket>
 8005020:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68b8      	ldr	r0, [r7, #8]
 8005028:	f7ff feca 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f383 8811 	msr	BASEPRI, r3
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	2001549c 	.word	0x2001549c

08005040 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b088      	sub	sp, #32
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
 800504e:	f04f 0120 	mov.w	r1, #32
 8005052:	f381 8811 	msr	BASEPRI, r1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	4816      	ldr	r0, [pc, #88]	; (80050b4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800505a:	f7ff fdd8 	bl	8004c0e <_PreparePacket>
 800505e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e00b      	b.n	8005086 <SEGGER_SYSVIEW_RecordU32+0x46>
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	1c59      	adds	r1, r3, #1
 8005076:	61f9      	str	r1, [r7, #28]
 8005078:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	09db      	lsrs	r3, r3, #7
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b7f      	cmp	r3, #127	; 0x7f
 800508a:	d8f0      	bhi.n	800506e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	61fa      	str	r2, [r7, #28]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6938      	ldr	r0, [r7, #16]
 80050a2:	f7ff fe8d 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f383 8811 	msr	BASEPRI, r3
}
 80050ac:	bf00      	nop
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	2001549c 	.word	0x2001549c

080050b8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050c4:	f3ef 8311 	mrs	r3, BASEPRI
 80050c8:	f04f 0120 	mov.w	r1, #32
 80050cc:	f381 8811 	msr	BASEPRI, r1
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	4825      	ldr	r0, [pc, #148]	; (8005168 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80050d4:	f7ff fd9b 	bl	8004c0e <_PreparePacket>
 80050d8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b7f      	cmp	r3, #127	; 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	e00b      	b.n	8005138 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	6279      	str	r1, [r7, #36]	; 0x24
 800512a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d8f0      	bhi.n	8005120 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	627a      	str	r2, [r7, #36]	; 0x24
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	69b8      	ldr	r0, [r7, #24]
 8005154:	f7ff fe34 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f383 8811 	msr	BASEPRI, r3
}
 800515e:	bf00      	nop
 8005160:	3730      	adds	r7, #48	; 0x30
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	2001549c 	.word	0x2001549c

0800516c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08e      	sub	sp, #56	; 0x38
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800517a:	f3ef 8311 	mrs	r3, BASEPRI
 800517e:	f04f 0120 	mov.w	r1, #32
 8005182:	f381 8811 	msr	BASEPRI, r1
 8005186:	61fb      	str	r3, [r7, #28]
 8005188:	4832      	ldr	r0, [pc, #200]	; (8005254 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800518a:	f7ff fd40 	bl	8004c0e <_PreparePacket>
 800518e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
 800519c:	e00b      	b.n	80051b6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	1c59      	adds	r1, r3, #1
 80051a6:	6379      	str	r1, [r7, #52]	; 0x34
 80051a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ba:	d8f0      	bhi.n	800519e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	637a      	str	r2, [r7, #52]	; 0x34
 80051c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d4:	e00b      	b.n	80051ee <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	09db      	lsrs	r3, r3, #7
 80051ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	2b7f      	cmp	r3, #127	; 0x7f
 80051f2:	d8f0      	bhi.n	80051d6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	e00b      	b.n	8005226 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	b2da      	uxtb	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	6279      	str	r1, [r7, #36]	; 0x24
 8005218:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	09db      	lsrs	r3, r3, #7
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2b7f      	cmp	r3, #127	; 0x7f
 800522a:	d8f0      	bhi.n	800520e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	627a      	str	r2, [r7, #36]	; 0x24
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	6979      	ldr	r1, [r7, #20]
 8005240:	69b8      	ldr	r0, [r7, #24]
 8005242:	f7ff fdbd 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f383 8811 	msr	BASEPRI, r3
}
 800524c:	bf00      	nop
 800524e:	3738      	adds	r7, #56	; 0x38
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	2001549c 	.word	0x2001549c

08005258 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b090      	sub	sp, #64	; 0x40
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005266:	f3ef 8311 	mrs	r3, BASEPRI
 800526a:	f04f 0120 	mov.w	r1, #32
 800526e:	f381 8811 	msr	BASEPRI, r1
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	4840      	ldr	r0, [pc, #256]	; (8005378 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005276:	f7ff fcca 	bl	8004c0e <_PreparePacket>
 800527a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	63bb      	str	r3, [r7, #56]	; 0x38
 8005288:	e00b      	b.n	80052a2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	b2da      	uxtb	r2, r3
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	1c59      	adds	r1, r3, #1
 8005292:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005294:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	09db      	lsrs	r3, r3, #7
 80052a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	2b7f      	cmp	r3, #127	; 0x7f
 80052a6:	d8f0      	bhi.n	800528a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	633b      	str	r3, [r7, #48]	; 0x30
 80052c0:	e00b      	b.n	80052da <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	1c59      	adds	r1, r3, #1
 80052ca:	6379      	str	r1, [r7, #52]	; 0x34
 80052cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	09db      	lsrs	r3, r3, #7
 80052d8:	633b      	str	r3, [r7, #48]	; 0x30
 80052da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052dc:	2b7f      	cmp	r3, #127	; 0x7f
 80052de:	d8f0      	bhi.n	80052c2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	637a      	str	r2, [r7, #52]	; 0x34
 80052e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f8:	e00b      	b.n	8005312 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	1c59      	adds	r1, r3, #1
 8005302:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005304:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	09db      	lsrs	r3, r3, #7
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b7f      	cmp	r3, #127	; 0x7f
 8005316:	d8f0      	bhi.n	80052fa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	e00b      	b.n	800534a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	6279      	str	r1, [r7, #36]	; 0x24
 800533c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b7f      	cmp	r3, #127	; 0x7f
 800534e:	d8f0      	bhi.n	8005332 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	627a      	str	r2, [r7, #36]	; 0x24
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	69b8      	ldr	r0, [r7, #24]
 8005366:	f7ff fd2b 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f383 8811 	msr	BASEPRI, r3
}
 8005370:	bf00      	nop
 8005372:	3740      	adds	r7, #64	; 0x40
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	2001549c 	.word	0x2001549c

0800537c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005388:	f3ef 8311 	mrs	r3, BASEPRI
 800538c:	f04f 0120 	mov.w	r1, #32
 8005390:	f381 8811 	msr	BASEPRI, r1
 8005394:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005396:	220a      	movs	r2, #10
 8005398:	4952      	ldr	r1, [pc, #328]	; (80054e4 <SEGGER_SYSVIEW_Start+0x168>)
 800539a:	2001      	movs	r0, #1
 800539c:	f7fa ff28 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80053a6:	200a      	movs	r0, #10
 80053a8:	f7ff fe2c 	bl	8005004 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053ac:	f3ef 8311 	mrs	r3, BASEPRI
 80053b0:	f04f 0120 	mov.w	r1, #32
 80053b4:	f381 8811 	msr	BASEPRI, r1
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	484b      	ldr	r0, [pc, #300]	; (80054e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80053bc:	f7ff fc27 	bl	8004c0e <_PreparePacket>
 80053c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	4b45      	ldr	r3, [pc, #276]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d0:	e00b      	b.n	80053ea <SEGGER_SYSVIEW_Start+0x6e>
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	09db      	lsrs	r3, r3, #7
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2b7f      	cmp	r3, #127	; 0x7f
 80053ee:	d8f0      	bhi.n	80053d2 <SEGGER_SYSVIEW_Start+0x56>
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
 8005404:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	e00b      	b.n	8005424 <SEGGER_SYSVIEW_Start+0xa8>
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	6279      	str	r1, [r7, #36]	; 0x24
 8005416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	623b      	str	r3, [r7, #32]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b7f      	cmp	r3, #127	; 0x7f
 8005428:	d8f0      	bhi.n	800540c <SEGGER_SYSVIEW_Start+0x90>
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	627a      	str	r2, [r7, #36]	; 0x24
 8005430:	6a3a      	ldr	r2, [r7, #32]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e00b      	b.n	800545e <SEGGER_SYSVIEW_Start+0xe2>
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1c59      	adds	r1, r3, #1
 800544e:	61f9      	str	r1, [r7, #28]
 8005450:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	09db      	lsrs	r3, r3, #7
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	2b7f      	cmp	r3, #127	; 0x7f
 8005462:	d8f0      	bhi.n	8005446 <SEGGER_SYSVIEW_Start+0xca>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	61fa      	str	r2, [r7, #28]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	b2d2      	uxtb	r2, r2
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	2302      	movs	r3, #2
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e00b      	b.n	8005496 <SEGGER_SYSVIEW_Start+0x11a>
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	6179      	str	r1, [r7, #20]
 8005488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b7f      	cmp	r3, #127	; 0x7f
 800549a:	d8f0      	bhi.n	800547e <SEGGER_SYSVIEW_Start+0x102>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	617a      	str	r2, [r7, #20]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054ac:	2218      	movs	r2, #24
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fc85 	bl	8004dc0 <_SendPacket>
      RECORD_END();
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80054bc:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <SEGGER_SYSVIEW_Start+0x164>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80054ca:	f000 f9ed 	bl	80058a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80054ce:	f000 f9b3 	bl	8005838 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80054d2:	f000 fc8b 	bl	8005dec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80054d6:	bf00      	nop
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	2001546c 	.word	0x2001546c
 80054e4:	08006178 	.word	0x08006178
 80054e8:	2001549c 	.word	0x2001549c

080054ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054f2:	f3ef 8311 	mrs	r3, BASEPRI
 80054f6:	f04f 0120 	mov.w	r1, #32
 80054fa:	f381 8811 	msr	BASEPRI, r1
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	480b      	ldr	r0, [pc, #44]	; (8005530 <SEGGER_SYSVIEW_Stop+0x44>)
 8005502:	f7ff fb84 	bl	8004c0e <_PreparePacket>
 8005506:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <SEGGER_SYSVIEW_Stop+0x48>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d007      	beq.n	8005520 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005510:	220b      	movs	r2, #11
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6838      	ldr	r0, [r7, #0]
 8005516:	f7ff fc53 	bl	8004dc0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <SEGGER_SYSVIEW_Stop+0x48>)
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f383 8811 	msr	BASEPRI, r3
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	2001549c 	.word	0x2001549c
 8005534:	2001546c 	.word	0x2001546c

08005538 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800553e:	f3ef 8311 	mrs	r3, BASEPRI
 8005542:	f04f 0120 	mov.w	r1, #32
 8005546:	f381 8811 	msr	BASEPRI, r1
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	4845      	ldr	r0, [pc, #276]	; (8005664 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800554e:	f7ff fb5e 	bl	8004c0e <_PreparePacket>
 8005552:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555c:	4b42      	ldr	r3, [pc, #264]	; (8005668 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 8005562:	e00b      	b.n	800557c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	b2da      	uxtb	r2, r3
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	1c59      	adds	r1, r3, #1
 800556c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800556e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	09db      	lsrs	r3, r3, #7
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	2b7f      	cmp	r3, #127	; 0x7f
 8005580:	d8f0      	bhi.n	8005564 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
 8005596:	4b34      	ldr	r3, [pc, #208]	; (8005668 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	e00b      	b.n	80055b6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	1c59      	adds	r1, r3, #1
 80055a6:	6279      	str	r1, [r7, #36]	; 0x24
 80055a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	09db      	lsrs	r3, r3, #7
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	2b7f      	cmp	r3, #127	; 0x7f
 80055ba:	d8f0      	bhi.n	800559e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	627a      	str	r2, [r7, #36]	; 0x24
 80055c2:	6a3a      	ldr	r2, [r7, #32]
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	e00b      	b.n	80055f0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	61f9      	str	r1, [r7, #28]
 80055e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	09db      	lsrs	r3, r3, #7
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b7f      	cmp	r3, #127	; 0x7f
 80055f4:	d8f0      	bhi.n	80055d8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	61fa      	str	r2, [r7, #28]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	2302      	movs	r3, #2
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e00b      	b.n	8005628 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	6179      	str	r1, [r7, #20]
 800561a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b7f      	cmp	r3, #127	; 0x7f
 800562c:	d8f0      	bhi.n	8005610 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	617a      	str	r2, [r7, #20]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800563e:	2218      	movs	r2, #24
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f7ff fbbc 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	4798      	blx	r3
  }
}
 800565c:	bf00      	nop
 800565e:	3730      	adds	r7, #48	; 0x30
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	2001549c 	.word	0x2001549c
 8005668:	2001546c 	.word	0x2001546c

0800566c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b092      	sub	sp, #72	; 0x48
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005674:	f3ef 8311 	mrs	r3, BASEPRI
 8005678:	f04f 0120 	mov.w	r1, #32
 800567c:	f381 8811 	msr	BASEPRI, r1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	486b      	ldr	r0, [pc, #428]	; (8005830 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005684:	f7ff fac3 	bl	8004c0e <_PreparePacket>
 8005688:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	647b      	str	r3, [r7, #68]	; 0x44
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b67      	ldr	r3, [pc, #412]	; (8005834 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
 80056a0:	e00b      	b.n	80056ba <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80056a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	6479      	str	r1, [r7, #68]	; 0x44
 80056ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056bc:	2b7f      	cmp	r3, #127	; 0x7f
 80056be:	d8f0      	bhi.n	80056a2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	647a      	str	r2, [r7, #68]	; 0x44
 80056c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056da:	e00b      	b.n	80056f4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	1c59      	adds	r1, r3, #1
 80056e4:	63f9      	str	r1, [r7, #60]	; 0x3c
 80056e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	09db      	lsrs	r3, r3, #7
 80056f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	2b7f      	cmp	r3, #127	; 0x7f
 80056f8:	d8f0      	bhi.n	80056dc <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	1c5a      	adds	r2, r3, #1
 80056fe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005708:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	4619      	mov	r1, r3
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff fa2e 	bl	8004b74 <_EncodeStr>
 8005718:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800571a:	2209      	movs	r2, #9
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	6938      	ldr	r0, [r7, #16]
 8005720:	f7ff fb4e 	bl	8004dc0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	637b      	str	r3, [r7, #52]	; 0x34
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b40      	ldr	r3, [pc, #256]	; (8005834 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	089b      	lsrs	r3, r3, #2
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
 800573a:	e00b      	b.n	8005754 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	6379      	str	r1, [r7, #52]	; 0x34
 8005746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	09db      	lsrs	r3, r3, #7
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	2b7f      	cmp	r3, #127	; 0x7f
 8005758:	d8f0      	bhi.n	800573c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 800575a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	637a      	str	r2, [r7, #52]	; 0x34
 8005760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
 8005774:	e00b      	b.n	800578e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	b2da      	uxtb	r2, r3
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	1c59      	adds	r1, r3, #1
 800577e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005780:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	2b7f      	cmp	r3, #127	; 0x7f
 8005792:	d8f0      	bhi.n	8005776 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	62fa      	str	r2, [r7, #44]	; 0x2c
 800579a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	e00b      	b.n	80057c8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	6279      	str	r1, [r7, #36]	; 0x24
 80057ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	09db      	lsrs	r3, r3, #7
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	2b7f      	cmp	r3, #127	; 0x7f
 80057cc:	d8f0      	bhi.n	80057b0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	627a      	str	r2, [r7, #36]	; 0x24
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	2300      	movs	r3, #0
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	e00b      	b.n	8005800 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	61f9      	str	r1, [r7, #28]
 80057f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	09db      	lsrs	r3, r3, #7
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b7f      	cmp	r3, #127	; 0x7f
 8005804:	d8f0      	bhi.n	80057e8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	61fa      	str	r2, [r7, #28]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005816:	2215      	movs	r2, #21
 8005818:	68f9      	ldr	r1, [r7, #12]
 800581a:	6938      	ldr	r0, [r7, #16]
 800581c:	f7ff fad0 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f383 8811 	msr	BASEPRI, r3
}
 8005826:	bf00      	nop
 8005828:	3748      	adds	r7, #72	; 0x48
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2001549c 	.word	0x2001549c
 8005834:	2001546c 	.word	0x2001546c

08005838 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800584e:	4b03      	ldr	r3, [pc, #12]	; (800585c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4798      	blx	r3
  }
}
 8005856:	bf00      	nop
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2001546c 	.word	0x2001546c

08005860 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	480b      	ldr	r0, [pc, #44]	; (80058a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005878:	f7ff f9c9 	bl	8004c0e <_PreparePacket>
 800587c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	6938      	ldr	r0, [r7, #16]
 8005884:	f7ff f976 	bl	8004b74 <_EncodeStr>
 8005888:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800588a:	220e      	movs	r2, #14
 800588c:	68f9      	ldr	r1, [r7, #12]
 800588e:	6938      	ldr	r0, [r7, #16]
 8005890:	f7ff fa96 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f383 8811 	msr	BASEPRI, r3
}
 800589a:	bf00      	nop
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	2001549c 	.word	0x2001549c

080058a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <SEGGER_SYSVIEW_RecordSystime+0x42>
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d014      	beq.n	80058ea <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4798      	blx	r3
 80058c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80058cc:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80058ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	f04f 0400 	mov.w	r4, #0
 80058da:	0013      	movs	r3, r2
 80058dc:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80058de:	461a      	mov	r2, r3
 80058e0:	4601      	mov	r1, r0
 80058e2:	200d      	movs	r0, #13
 80058e4:	f7ff fbe8 	bl	80050b8 <SEGGER_SYSVIEW_RecordU32x2>
 80058e8:	e005      	b.n	80058f6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4619      	mov	r1, r3
 80058f0:	200c      	movs	r0, #12
 80058f2:	f7ff fba5 	bl	8005040 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
 80058fe:	bf00      	nop
 8005900:	2001546c 	.word	0x2001546c
 8005904:	e0001004 	.word	0xe0001004

08005908 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800590e:	f3ef 8311 	mrs	r3, BASEPRI
 8005912:	f04f 0120 	mov.w	r1, #32
 8005916:	f381 8811 	msr	BASEPRI, r1
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	4819      	ldr	r0, [pc, #100]	; (8005984 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800591e:	f7ff f976 	bl	8004c0e <_PreparePacket>
 8005922:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005928:	4b17      	ldr	r3, [pc, #92]	; (8005988 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005930:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e00b      	b.n	8005954 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1c59      	adds	r1, r3, #1
 8005944:	6179      	str	r1, [r7, #20]
 8005946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	09db      	lsrs	r3, r3, #7
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b7f      	cmp	r3, #127	; 0x7f
 8005958:	d8f0      	bhi.n	800593c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	617a      	str	r2, [r7, #20]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800596a:	2202      	movs	r2, #2
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f7ff fa26 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f383 8811 	msr	BASEPRI, r3
}
 800597a:	bf00      	nop
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2001549c 	.word	0x2001549c
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005992:	f3ef 8311 	mrs	r3, BASEPRI
 8005996:	f04f 0120 	mov.w	r1, #32
 800599a:	f381 8811 	msr	BASEPRI, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	4807      	ldr	r0, [pc, #28]	; (80059c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80059a2:	f7ff f934 	bl	8004c0e <_PreparePacket>
 80059a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80059a8:	2203      	movs	r2, #3
 80059aa:	6839      	ldr	r1, [r7, #0]
 80059ac:	6838      	ldr	r0, [r7, #0]
 80059ae:	f7ff fa07 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f383 8811 	msr	BASEPRI, r3
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2001549c 	.word	0x2001549c

080059c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059ca:	f3ef 8311 	mrs	r3, BASEPRI
 80059ce:	f04f 0120 	mov.w	r1, #32
 80059d2:	f381 8811 	msr	BASEPRI, r1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	4807      	ldr	r0, [pc, #28]	; (80059f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80059da:	f7ff f918 	bl	8004c0e <_PreparePacket>
 80059de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80059e0:	2212      	movs	r2, #18
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6838      	ldr	r0, [r7, #0]
 80059e6:	f7ff f9eb 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f383 8811 	msr	BASEPRI, r3
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	2001549c 	.word	0x2001549c

080059fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005a02:	f3ef 8311 	mrs	r3, BASEPRI
 8005a06:	f04f 0120 	mov.w	r1, #32
 8005a0a:	f381 8811 	msr	BASEPRI, r1
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	4807      	ldr	r0, [pc, #28]	; (8005a30 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005a12:	f7ff f8fc 	bl	8004c0e <_PreparePacket>
 8005a16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005a18:	2211      	movs	r2, #17
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6838      	ldr	r0, [r7, #0]
 8005a1e:	f7ff f9cf 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f383 8811 	msr	BASEPRI, r3
}
 8005a28:	bf00      	nop
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	2001549c 	.word	0x2001549c

08005a34 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a40:	f04f 0120 	mov.w	r1, #32
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	481a      	ldr	r0, [pc, #104]	; (8005ab4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005a4c:	f7ff f8df 	bl	8004c0e <_PreparePacket>
 8005a50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a56:	4b18      	ldr	r3, [pc, #96]	; (8005ab8 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	e00b      	b.n	8005a84 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	1c59      	adds	r1, r3, #1
 8005a74:	61f9      	str	r1, [r7, #28]
 8005a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	09db      	lsrs	r3, r3, #7
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b7f      	cmp	r3, #127	; 0x7f
 8005a88:	d8f0      	bhi.n	8005a6c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	61fa      	str	r2, [r7, #28]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f7ff f98e 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f383 8811 	msr	BASEPRI, r3
}
 8005aaa:	bf00      	nop
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2001549c 	.word	0x2001549c
 8005ab8:	2001546c 	.word	0x2001546c

08005abc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	f04f 0120 	mov.w	r1, #32
 8005acc:	f381 8811 	msr	BASEPRI, r1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	481a      	ldr	r0, [pc, #104]	; (8005b3c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ad4:	f7ff f89b 	bl	8004c0e <_PreparePacket>
 8005ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ade:	4b18      	ldr	r3, [pc, #96]	; (8005b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e00b      	b.n	8005b0c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	61f9      	str	r1, [r7, #28]
 8005afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	09db      	lsrs	r3, r3, #7
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b10:	d8f0      	bhi.n	8005af4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	61fa      	str	r2, [r7, #28]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005b22:	2204      	movs	r2, #4
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	6938      	ldr	r0, [r7, #16]
 8005b28:	f7ff f94a 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f383 8811 	msr	BASEPRI, r3
}
 8005b32:	bf00      	nop
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2001549c 	.word	0x2001549c
 8005b40:	2001546c 	.word	0x2001546c

08005b44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005b50:	f04f 0120 	mov.w	r1, #32
 8005b54:	f381 8811 	msr	BASEPRI, r1
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	481a      	ldr	r0, [pc, #104]	; (8005bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005b5c:	f7ff f857 	bl	8004c0e <_PreparePacket>
 8005b60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b66:	4b18      	ldr	r3, [pc, #96]	; (8005bc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	089b      	lsrs	r3, r3, #2
 8005b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e00b      	b.n	8005b94 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	61f9      	str	r1, [r7, #28]
 8005b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b7f      	cmp	r3, #127	; 0x7f
 8005b98:	d8f0      	bhi.n	8005b7c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	61fa      	str	r2, [r7, #28]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	b2d2      	uxtb	r2, r2
 8005ba4:	701a      	strb	r2, [r3, #0]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005baa:	2206      	movs	r2, #6
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	6938      	ldr	r0, [r7, #16]
 8005bb0:	f7ff f906 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f383 8811 	msr	BASEPRI, r3
}
 8005bba:	bf00      	nop
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	2001549c 	.word	0x2001549c
 8005bc8:	2001546c 	.word	0x2001546c

08005bcc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bda:	f04f 0120 	mov.w	r1, #32
 8005bde:	f381 8811 	msr	BASEPRI, r1
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	4827      	ldr	r0, [pc, #156]	; (8005c84 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005be6:	f7ff f812 	bl	8004c0e <_PreparePacket>
 8005bea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	e00b      	b.n	8005c1e <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	09db      	lsrs	r3, r3, #7
 8005c1c:	623b      	str	r3, [r7, #32]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	2b7f      	cmp	r3, #127	; 0x7f
 8005c22:	d8f0      	bhi.n	8005c06 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	61fb      	str	r3, [r7, #28]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	61bb      	str	r3, [r7, #24]
 8005c3c:	e00b      	b.n	8005c56 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	1c59      	adds	r1, r3, #1
 8005c46:	61f9      	str	r1, [r7, #28]
 8005c48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5a:	d8f0      	bhi.n	8005c3e <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	61fa      	str	r2, [r7, #28]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005c6c:	2207      	movs	r2, #7
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	6938      	ldr	r0, [r7, #16]
 8005c72:	f7ff f8a5 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f383 8811 	msr	BASEPRI, r3
}
 8005c7c:	bf00      	nop
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2001549c 	.word	0x2001549c
 8005c88:	2001546c 	.word	0x2001546c

08005c8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005c94:	4b05      	ldr	r3, [pc, #20]	; (8005cac <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	089b      	lsrs	r3, r3, #2
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	2001546c 	.word	0x2001546c

08005cb0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	; 0x30
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005cba:	4b3b      	ldr	r3, [pc, #236]	; (8005da8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d06d      	beq.n	8005d9e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005cc2:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005cc8:	2300      	movs	r3, #0
 8005cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ccc:	e008      	b.n	8005ce0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	3301      	adds	r3, #1
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3f2      	bcc.n	8005cce <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ce8:	e000      	b.n	8005cec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005cea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d055      	beq.n	8005d9e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf6:	f04f 0120 	mov.w	r1, #32
 8005cfa:	f381 8811 	msr	BASEPRI, r1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	482a      	ldr	r0, [pc, #168]	; (8005dac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005d02:	f7fe ff84 	bl	8004c0e <_PreparePacket>
 8005d06:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	623b      	str	r3, [r7, #32]
 8005d14:	e00b      	b.n	8005d2e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	1c59      	adds	r1, r3, #1
 8005d1e:	6279      	str	r1, [r7, #36]	; 0x24
 8005d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	09db      	lsrs	r3, r3, #7
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	2b7f      	cmp	r3, #127	; 0x7f
 8005d32:	d8f0      	bhi.n	8005d16 <SEGGER_SYSVIEW_SendModule+0x66>
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	627a      	str	r2, [r7, #36]	; 0x24
 8005d3a:	6a3a      	ldr	r2, [r7, #32]
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e00b      	b.n	8005d68 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	61f9      	str	r1, [r7, #28]
 8005d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	09db      	lsrs	r3, r3, #7
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6c:	d8f0      	bhi.n	8005d50 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	61fa      	str	r2, [r7, #28]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fe fef4 	bl	8004b74 <_EncodeStr>
 8005d8c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005d8e:	2216      	movs	r2, #22
 8005d90:	68f9      	ldr	r1, [r7, #12]
 8005d92:	6938      	ldr	r0, [r7, #16]
 8005d94:	f7ff f814 	bl	8004dc0 <_SendPacket>
      RECORD_END();
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005d9e:	bf00      	nop
 8005da0:	3730      	adds	r7, #48	; 0x30
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20015494 	.word	0x20015494
 8005dac:	2001549c 	.word	0x2001549c

08005db0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00f      	beq.n	8005dde <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f2      	bne.n	8005dc4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005dde:	bf00      	nop
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20015494 	.word	0x20015494

08005dec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005df2:	f3ef 8311 	mrs	r3, BASEPRI
 8005df6:	f04f 0120 	mov.w	r1, #32
 8005dfa:	f381 8811 	msr	BASEPRI, r1
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	4817      	ldr	r0, [pc, #92]	; (8005e60 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005e02:	f7fe ff04 	bl	8004c0e <_PreparePacket>
 8005e06:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e00b      	b.n	8005e30 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	6179      	str	r1, [r7, #20]
 8005e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	d8f0      	bhi.n	8005e18 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	617a      	str	r2, [r7, #20]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e46:	221b      	movs	r2, #27
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	68b8      	ldr	r0, [r7, #8]
 8005e4c:	f7fe ffb8 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f383 8811 	msr	BASEPRI, r3
}
 8005e56:	bf00      	nop
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2001549c 	.word	0x2001549c
 8005e64:	20015498 	.word	0x20015498

08005e68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e70:	f3ef 8311 	mrs	r3, BASEPRI
 8005e74:	f04f 0120 	mov.w	r1, #32
 8005e78:	f381 8811 	msr	BASEPRI, r1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	4827      	ldr	r0, [pc, #156]	; (8005f1c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e80:	f7fe fec5 	bl	8004c0e <_PreparePacket>
 8005e84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6938      	ldr	r0, [r7, #16]
 8005e8c:	f7fe fe72 	bl	8004b74 <_EncodeStr>
 8005e90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
 8005e96:	2301      	movs	r3, #1
 8005e98:	623b      	str	r3, [r7, #32]
 8005e9a:	e00b      	b.n	8005eb4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8005ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	09db      	lsrs	r3, r3, #7
 8005eb2:	623b      	str	r3, [r7, #32]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb8:	d8f0      	bhi.n	8005e9c <SEGGER_SYSVIEW_Warn+0x34>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8005ec0:	6a3a      	ldr	r2, [r7, #32]
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e00b      	b.n	8005eec <SEGGER_SYSVIEW_Warn+0x84>
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	61f9      	str	r1, [r7, #28]
 8005ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	09db      	lsrs	r3, r3, #7
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef0:	d8f0      	bhi.n	8005ed4 <SEGGER_SYSVIEW_Warn+0x6c>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	61fa      	str	r2, [r7, #28]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f02:	221a      	movs	r2, #26
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	6938      	ldr	r0, [r7, #16]
 8005f08:	f7fe ff5a 	bl	8004dc0 <_SendPacket>
  RECORD_END();
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f383 8811 	msr	BASEPRI, r3
}
 8005f12:	bf00      	nop
 8005f14:	3728      	adds	r7, #40	; 0x28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2001549c 	.word	0x2001549c

08005f20 <__libc_init_array>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	4e0d      	ldr	r6, [pc, #52]	; (8005f58 <__libc_init_array+0x38>)
 8005f24:	4c0d      	ldr	r4, [pc, #52]	; (8005f5c <__libc_init_array+0x3c>)
 8005f26:	1ba4      	subs	r4, r4, r6
 8005f28:	10a4      	asrs	r4, r4, #2
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	42a5      	cmp	r5, r4
 8005f2e:	d109      	bne.n	8005f44 <__libc_init_array+0x24>
 8005f30:	4e0b      	ldr	r6, [pc, #44]	; (8005f60 <__libc_init_array+0x40>)
 8005f32:	4c0c      	ldr	r4, [pc, #48]	; (8005f64 <__libc_init_array+0x44>)
 8005f34:	f000 f83a 	bl	8005fac <_init>
 8005f38:	1ba4      	subs	r4, r4, r6
 8005f3a:	10a4      	asrs	r4, r4, #2
 8005f3c:	2500      	movs	r5, #0
 8005f3e:	42a5      	cmp	r5, r4
 8005f40:	d105      	bne.n	8005f4e <__libc_init_array+0x2e>
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f48:	4798      	blx	r3
 8005f4a:	3501      	adds	r5, #1
 8005f4c:	e7ee      	b.n	8005f2c <__libc_init_array+0xc>
 8005f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f52:	4798      	blx	r3
 8005f54:	3501      	adds	r5, #1
 8005f56:	e7f2      	b.n	8005f3e <__libc_init_array+0x1e>
 8005f58:	0800618c 	.word	0x0800618c
 8005f5c:	0800618c 	.word	0x0800618c
 8005f60:	0800618c 	.word	0x0800618c
 8005f64:	08006190 	.word	0x08006190

08005f68 <memcmp>:
 8005f68:	b530      	push	{r4, r5, lr}
 8005f6a:	2400      	movs	r4, #0
 8005f6c:	42a2      	cmp	r2, r4
 8005f6e:	d101      	bne.n	8005f74 <memcmp+0xc>
 8005f70:	2000      	movs	r0, #0
 8005f72:	e007      	b.n	8005f84 <memcmp+0x1c>
 8005f74:	5d03      	ldrb	r3, [r0, r4]
 8005f76:	3401      	adds	r4, #1
 8005f78:	190d      	adds	r5, r1, r4
 8005f7a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	d0f4      	beq.n	8005f6c <memcmp+0x4>
 8005f82:	1b58      	subs	r0, r3, r5
 8005f84:	bd30      	pop	{r4, r5, pc}

08005f86 <memcpy>:
 8005f86:	b510      	push	{r4, lr}
 8005f88:	1e43      	subs	r3, r0, #1
 8005f8a:	440a      	add	r2, r1
 8005f8c:	4291      	cmp	r1, r2
 8005f8e:	d100      	bne.n	8005f92 <memcpy+0xc>
 8005f90:	bd10      	pop	{r4, pc}
 8005f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f9a:	e7f7      	b.n	8005f8c <memcpy+0x6>

08005f9c <memset>:
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memset+0xa>
 8005fa4:	4770      	bx	lr
 8005fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005faa:	e7f9      	b.n	8005fa0 <memset+0x4>

08005fac <_init>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_fini>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr
