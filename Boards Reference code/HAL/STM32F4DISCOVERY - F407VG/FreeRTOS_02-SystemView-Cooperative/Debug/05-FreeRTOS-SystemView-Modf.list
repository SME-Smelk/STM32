
05-FreeRTOS-SystemView-Modf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f54  08004f54  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f5c  08004f5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015664  20000010  08004f74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015674  08004f74  00025674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d2a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d5  00000000  00000000  00034d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa8  00000000  00000000  00037740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e40  00000000  00000000  000386e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002211c  00000000  00000000  00039528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012795  00000000  00000000  0005b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce7df  00000000  00000000  0006ddd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fec  00000000  00000000  0013c634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004dcc 	.word	0x08004dcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004dcc 	.word	0x08004dcc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	200155cc 	.word	0x200155cc

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b972 	b.w	8000588 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9e08      	ldr	r6, [sp, #32]
 80002c2:	4604      	mov	r4, r0
 80002c4:	4688      	mov	r8, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14b      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4615      	mov	r5, r2
 80002ce:	d967      	bls.n	80003a0 <__udivmoddi4+0xe4>
 80002d0:	fab2 f282 	clz	r2, r2
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0720 	rsb	r7, r2, #32
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	fa20 f707 	lsr.w	r7, r0, r7
 80002e2:	4095      	lsls	r5, r2
 80002e4:	ea47 0803 	orr.w	r8, r7, r3
 80002e8:	4094      	lsls	r4, r2
 80002ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ee:	0c23      	lsrs	r3, r4, #16
 80002f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f4:	fa1f fc85 	uxth.w	ip, r5
 80002f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000300:	fb07 f10c 	mul.w	r1, r7, ip
 8000304:	4299      	cmp	r1, r3
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x60>
 8000308:	18eb      	adds	r3, r5, r3
 800030a:	f107 30ff 	add.w	r0, r7, #4294967295
 800030e:	f080 811b 	bcs.w	8000548 <__udivmoddi4+0x28c>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 8118 	bls.w	8000548 <__udivmoddi4+0x28c>
 8000318:	3f02      	subs	r7, #2
 800031a:	442b      	add	r3, r5
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0fe 	udiv	r0, r3, lr
 8000324:	fb0e 3310 	mls	r3, lr, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000330:	45a4      	cmp	ip, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x290>
 800033e:	45a4      	cmp	ip, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x290>
 8000344:	3802      	subs	r0, #2
 8000346:	442c      	add	r4, r5
 8000348:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800034c:	eba4 040c 	sub.w	r4, r4, ip
 8000350:	2700      	movs	r7, #0
 8000352:	b11e      	cbz	r6, 800035c <__udivmoddi4+0xa0>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c6 4300 	strd	r4, r3, [r6]
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xbe>
 8000366:	2e00      	cmp	r6, #0
 8000368:	f000 80eb 	beq.w	8000542 <__udivmoddi4+0x286>
 800036c:	2700      	movs	r7, #0
 800036e:	e9c6 0100 	strd	r0, r1, [r6]
 8000372:	4638      	mov	r0, r7
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	2f00      	cmp	r7, #0
 8000380:	d147      	bne.n	8000412 <__udivmoddi4+0x156>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd0>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	4698      	mov	r8, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa0>
 800039a:	e9c6 4800 	strd	r4, r8, [r6]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa0>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xe8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 808f 	bne.w	80004cc <__udivmoddi4+0x210>
 80003ae:	1b49      	subs	r1, r1, r5
 80003b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b4:	fa1f f885 	uxth.w	r8, r5
 80003b8:	2701      	movs	r7, #1
 80003ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80003be:	0c23      	lsrs	r3, r4, #16
 80003c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c8:	fb08 f10c 	mul.w	r1, r8, ip
 80003cc:	4299      	cmp	r1, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d0:	18eb      	adds	r3, r5, r3
 80003d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x122>
 80003d8:	4299      	cmp	r1, r3
 80003da:	f200 80cd 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 80003de:	4684      	mov	ip, r0
 80003e0:	1a59      	subs	r1, r3, r1
 80003e2:	b2a3      	uxth	r3, r4
 80003e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	fb08 f800 	mul.w	r8, r8, r0
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x14c>
 80003f8:	192c      	adds	r4, r5, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14a>
 8000400:	45a0      	cmp	r8, r4
 8000402:	f200 80b6 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 8000406:	4618      	mov	r0, r3
 8000408:	eba4 0408 	sub.w	r4, r4, r8
 800040c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000410:	e79f      	b.n	8000352 <__udivmoddi4+0x96>
 8000412:	f1c7 0c20 	rsb	ip, r7, #32
 8000416:	40bb      	lsls	r3, r7
 8000418:	fa22 fe0c 	lsr.w	lr, r2, ip
 800041c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000420:	fa01 f407 	lsl.w	r4, r1, r7
 8000424:	fa20 f50c 	lsr.w	r5, r0, ip
 8000428:	fa21 f30c 	lsr.w	r3, r1, ip
 800042c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000430:	4325      	orrs	r5, r4
 8000432:	fbb3 f9f8 	udiv	r9, r3, r8
 8000436:	0c2c      	lsrs	r4, r5, #16
 8000438:	fb08 3319 	mls	r3, r8, r9, r3
 800043c:	fa1f fa8e 	uxth.w	sl, lr
 8000440:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000444:	fb09 f40a 	mul.w	r4, r9, sl
 8000448:	429c      	cmp	r4, r3
 800044a:	fa02 f207 	lsl.w	r2, r2, r7
 800044e:	fa00 f107 	lsl.w	r1, r0, r7
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000454:	eb1e 0303 	adds.w	r3, lr, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	f080 8087 	bcs.w	800056e <__udivmoddi4+0x2b2>
 8000460:	429c      	cmp	r4, r3
 8000462:	f240 8084 	bls.w	800056e <__udivmoddi4+0x2b2>
 8000466:	f1a9 0902 	sub.w	r9, r9, #2
 800046a:	4473      	add	r3, lr
 800046c:	1b1b      	subs	r3, r3, r4
 800046e:	b2ad      	uxth	r5, r5
 8000470:	fbb3 f0f8 	udiv	r0, r3, r8
 8000474:	fb08 3310 	mls	r3, r8, r0, r3
 8000478:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800047c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000480:	45a2      	cmp	sl, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1da>
 8000484:	eb1e 0404 	adds.w	r4, lr, r4
 8000488:	f100 33ff 	add.w	r3, r0, #4294967295
 800048c:	d26b      	bcs.n	8000566 <__udivmoddi4+0x2aa>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d969      	bls.n	8000566 <__udivmoddi4+0x2aa>
 8000492:	3802      	subs	r0, #2
 8000494:	4474      	add	r4, lr
 8000496:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	eba4 040a 	sub.w	r4, r4, sl
 80004a2:	454c      	cmp	r4, r9
 80004a4:	46c2      	mov	sl, r8
 80004a6:	464b      	mov	r3, r9
 80004a8:	d354      	bcc.n	8000554 <__udivmoddi4+0x298>
 80004aa:	d051      	beq.n	8000550 <__udivmoddi4+0x294>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d069      	beq.n	8000584 <__udivmoddi4+0x2c8>
 80004b0:	ebb1 050a 	subs.w	r5, r1, sl
 80004b4:	eb64 0403 	sbc.w	r4, r4, r3
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	40fc      	lsrs	r4, r7
 80004c0:	ea4c 0505 	orr.w	r5, ip, r5
 80004c4:	e9c6 5400 	strd	r5, r4, [r6]
 80004c8:	2700      	movs	r7, #0
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0xa0>
 80004cc:	f1c2 0320 	rsb	r3, r2, #32
 80004d0:	fa20 f703 	lsr.w	r7, r0, r3
 80004d4:	4095      	lsls	r5, r2
 80004d6:	fa01 f002 	lsl.w	r0, r1, r2
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e2:	4338      	orrs	r0, r7
 80004e4:	0c01      	lsrs	r1, r0, #16
 80004e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ea:	fa1f f885 	uxth.w	r8, r5
 80004ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f6:	fb07 f308 	mul.w	r3, r7, r8
 80004fa:	428b      	cmp	r3, r1
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x256>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f107 3cff 	add.w	ip, r7, #4294967295
 8000508:	d22f      	bcs.n	800056a <__udivmoddi4+0x2ae>
 800050a:	428b      	cmp	r3, r1
 800050c:	d92d      	bls.n	800056a <__udivmoddi4+0x2ae>
 800050e:	3f02      	subs	r7, #2
 8000510:	4429      	add	r1, r5
 8000512:	1acb      	subs	r3, r1, r3
 8000514:	b281      	uxth	r1, r0
 8000516:	fbb3 f0fe 	udiv	r0, r3, lr
 800051a:	fb0e 3310 	mls	r3, lr, r0, r3
 800051e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000522:	fb00 f308 	mul.w	r3, r0, r8
 8000526:	428b      	cmp	r3, r1
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x27e>
 800052a:	1869      	adds	r1, r5, r1
 800052c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000530:	d217      	bcs.n	8000562 <__udivmoddi4+0x2a6>
 8000532:	428b      	cmp	r3, r1
 8000534:	d915      	bls.n	8000562 <__udivmoddi4+0x2a6>
 8000536:	3802      	subs	r0, #2
 8000538:	4429      	add	r1, r5
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000540:	e73b      	b.n	80003ba <__udivmoddi4+0xfe>
 8000542:	4637      	mov	r7, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e709      	b.n	800035c <__udivmoddi4+0xa0>
 8000548:	4607      	mov	r7, r0
 800054a:	e6e7      	b.n	800031c <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x8c>
 8000550:	4541      	cmp	r1, r8
 8000552:	d2ab      	bcs.n	80004ac <__udivmoddi4+0x1f0>
 8000554:	ebb8 0a02 	subs.w	sl, r8, r2
 8000558:	eb69 020e 	sbc.w	r2, r9, lr
 800055c:	3801      	subs	r0, #1
 800055e:	4613      	mov	r3, r2
 8000560:	e7a4      	b.n	80004ac <__udivmoddi4+0x1f0>
 8000562:	4660      	mov	r0, ip
 8000564:	e7e9      	b.n	800053a <__udivmoddi4+0x27e>
 8000566:	4618      	mov	r0, r3
 8000568:	e795      	b.n	8000496 <__udivmoddi4+0x1da>
 800056a:	4667      	mov	r7, ip
 800056c:	e7d1      	b.n	8000512 <__udivmoddi4+0x256>
 800056e:	4681      	mov	r9, r0
 8000570:	e77c      	b.n	800046c <__udivmoddi4+0x1b0>
 8000572:	3802      	subs	r0, #2
 8000574:	442c      	add	r4, r5
 8000576:	e747      	b.n	8000408 <__udivmoddi4+0x14c>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	442b      	add	r3, r5
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	4638      	mov	r0, r7
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xda>
 8000584:	4637      	mov	r7, r6
 8000586:	e6e9      	b.n	800035c <__udivmoddi4+0xa0>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <USART2_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005c4:	f001 f9bc 	bl	8001940 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 f8f3 	bl	80007b8 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20015588 	.word	0x20015588
 80005dc:	40004400 	.word	0x40004400

080005e0 <UART2_write>:

void UART2_write(char data[]){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe47 	bl	800027c <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <UART2_write+0x28>)
 80005fa:	f001 f9ee 	bl	80019da <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20015588 	.word	0x20015588

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <main+0x5c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <main+0x5c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 f959 	bl	80008d4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f831 	bl	8000688 <SystemClock_Config>

	/* Configure the peripherals */
	USART2_UART_Init();
 8000626:	f7ff ffb1 	bl	800058c <USART2_UART_Init>

	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 800062a:	f002 ffff 	bl	800362c <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800062e:	f003 fdcb 	bl	80041c8 <SEGGER_SYSVIEW_Start>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(vtask1_Handler,"task1",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler1);
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <main+0x60>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2282      	movs	r2, #130	; 0x82
 800063e:	490c      	ldr	r1, [pc, #48]	; (8000670 <main+0x64>)
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x68>)
 8000642:	f001 ff47 	bl	80024d4 <xTaskCreate>
	//tarea 2
	xTaskCreate(vtask2_Handler,"task2",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler2);
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <main+0x6c>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2282      	movs	r2, #130	; 0x82
 8000652:	490a      	ldr	r1, [pc, #40]	; (800067c <main+0x70>)
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x74>)
 8000656:	f001 ff3d 	bl	80024d4 <xTaskCreate>

	/* Start Message */
	//HAL_UART_Transmit(&huart2,(uint8_t*) "FreeRTOS Init\n", sizeof("FreeRTOS Init\n"), HAL_MAX_DELAY);
	UART2_write("FreeRTOS Init\n");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x78>)
 800065c:	f7ff ffc0 	bl	80005e0 <UART2_write>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 8000660:	f002 f882 	bl	8002768 <vTaskStartScheduler>

	while (1);
 8000664:	e7fe      	b.n	8000664 <main+0x58>
 8000666:	bf00      	nop
 8000668:	e0001000 	.word	0xe0001000
 800066c:	2000002c 	.word	0x2000002c
 8000670:	08004de4 	.word	0x08004de4
 8000674:	08000749 	.word	0x08000749
 8000678:	20000030 	.word	0x20000030
 800067c:	08004dec 	.word	0x08004dec
 8000680:	08000781 	.word	0x08000781
 8000684:	08004df4 	.word	0x08004df4

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fb90 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006da:	2307      	movs	r3, #7
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fbe8 	bl	8000eb8 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ee:	f000 f863 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2105      	movs	r1, #5
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fe41 	bl	8001398 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 f84c 	bl	80007b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000724:	23c0      	movs	r3, #192	; 0xc0
 8000726:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f824 	bl	800177c <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800073a:	f000 f83d 	bl	80007b8 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3758      	adds	r7, #88	; 0x58
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <vtask1_Handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void vtask1_Handler(void *params){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	while(1){
		UART2_write("Hello-world: From Task-1\r\n");
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <vtask1_Handler+0x2c>)
 8000752:	f7ff ff45 	bl	80005e0 <UART2_write>
		//Libero CPU de tarea 1. Fuerzo cambio de contenido a la proxima tarea
		SEGGER_SYSVIEW_Print("task1 is yielding");
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <vtask1_Handler+0x30>)
 8000758:	f004 fa3a 	bl	8004bd0 <SEGGER_SYSVIEW_Print>
		traceISR_EXIT_TO_SCHEDULER();
 800075c:	f004 f858 	bl	8004810 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
		taskYIELD();
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <vtask1_Handler+0x34>)
 8000762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	f3bf 8f4f 	dsb	sy
 800076c:	f3bf 8f6f 	isb	sy
		UART2_write("Hello-world: From Task-1\r\n");
 8000770:	e7ee      	b.n	8000750 <vtask1_Handler+0x8>
 8000772:	bf00      	nop
 8000774:	08004e04 	.word	0x08004e04
 8000778:	08004e20 	.word	0x08004e20
 800077c:	e000ed04 	.word	0xe000ed04

08000780 <vtask2_Handler>:

/**
  * @brief  Function of task2.
  * @retval None
  */
void vtask2_Handler(void *params){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	while(1){
		UART2_write("Hello-world: From Task-2\r\n");
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <vtask2_Handler+0x2c>)
 800078a:	f7ff ff29 	bl	80005e0 <UART2_write>
		//Libero CPU de tarea 2. Fuerzo cambio de contenido a la proxima tarea
		SEGGER_SYSVIEW_Print("task2 is yielding");
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <vtask2_Handler+0x30>)
 8000790:	f004 fa1e 	bl	8004bd0 <SEGGER_SYSVIEW_Print>
		traceISR_EXIT_TO_SCHEDULER();
 8000794:	f004 f83c 	bl	8004810 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
		taskYIELD();
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <vtask2_Handler+0x34>)
 800079a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	f3bf 8f6f 	isb	sy
		UART2_write("Hello-world: From Task-2\r\n");
 80007a8:	e7ee      	b.n	8000788 <vtask2_Handler+0x8>
 80007aa:	bf00      	nop
 80007ac:	08004e34 	.word	0x08004e34
 80007b0:	08004e50 	.word	0x08004e50
 80007b4:	e000ed04 	.word	0xe000ed04

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f9a6 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	210f      	movs	r1, #15
 80007d4:	f06f 0001 	mvn.w	r0, #1
 80007d8:	f000 f9ab 	bl	8000b32 <HAL_NVIC_SetPriority>

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_UART_MspInit+0x84>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d12b      	bne.n	800085a <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <HAL_UART_MspInit+0x88>)
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	6413      	str	r3, [r2, #64]	; 0x40
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_UART_MspInit+0x88>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800083a:	230c      	movs	r3, #12
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084a:	2307      	movs	r3, #7
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_UART_MspInit+0x8c>)
 8000856:	f000 f995 	bl	8000b84 <HAL_GPIO_Init>

  }
}
 800085a:	bf00      	nop
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40004400 	.word	0x40004400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f86d 	bl	8000978 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800089e:	f002 fc03 	bl	80030a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x28>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x28>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SystemInit+0x28>)
 80008be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <HAL_Init+0x40>)
 80008de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <HAL_Init+0x40>)
 80008ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_Init+0x40>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_Init+0x40>)
 80008f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f90d 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000902:	200f      	movs	r0, #15
 8000904:	f000 f808 	bl	8000918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000908:	f7ff ff5d 	bl	80007c6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023c00 	.word	0x40023c00

08000918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_InitTick+0x54>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x58>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f917 	bl	8000b6a <HAL_SYSTICK_Config>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e00e      	b.n	8000964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d80a      	bhi.n	8000962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f000 f8ed 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_InitTick+0x5c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_IncTick+0x20>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x24>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_IncTick+0x24>)
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	200155c8 	.word	0x200155c8

080009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetTick+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200155c8 	.word	0x200155c8

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff47 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff5c 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffb0 	bl	8000ad8 <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e16b      	b.n	8000e78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 815a 	bne.w	8000e72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d00b      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d007      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd2:	2b11      	cmp	r3, #17
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d130      	bne.n	8000c40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c14:	2201      	movs	r2, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	f003 0201 	and.w	r2, r3, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0xfc>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	69b9      	ldr	r1, [r7, #24]
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0203 	and.w	r2, r3, #3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80b4 	beq.w	8000e72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <HAL_GPIO_Init+0x308>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a5e      	ldr	r2, [pc, #376]	; (8000e8c <HAL_GPIO_Init+0x308>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b5c      	ldr	r3, [pc, #368]	; (8000e8c <HAL_GPIO_Init+0x308>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d26:	4a5a      	ldr	r2, [pc, #360]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a51      	ldr	r2, [pc, #324]	; (8000e94 <HAL_GPIO_Init+0x310>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d02b      	beq.n	8000daa <HAL_GPIO_Init+0x226>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <HAL_GPIO_Init+0x314>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d025      	beq.n	8000da6 <HAL_GPIO_Init+0x222>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4f      	ldr	r2, [pc, #316]	; (8000e9c <HAL_GPIO_Init+0x318>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d01f      	beq.n	8000da2 <HAL_GPIO_Init+0x21e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4e      	ldr	r2, [pc, #312]	; (8000ea0 <HAL_GPIO_Init+0x31c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d019      	beq.n	8000d9e <HAL_GPIO_Init+0x21a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x216>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x324>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_GPIO_Init+0x328>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x20e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <HAL_GPIO_Init+0x32c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x20a>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e00e      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d8e:	2308      	movs	r3, #8
 8000d90:	e00c      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e00a      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d96:	2305      	movs	r3, #5
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000daa:	2300      	movs	r3, #0
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4934      	ldr	r1, [pc, #208]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dee:	4a31      	ldr	r2, [pc, #196]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000df4:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e18:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	f67f ae90 	bls.w	8000ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40021400 	.word	0x40021400
 8000eac:	40021800 	.word	0x40021800
 8000eb0:	40021c00 	.word	0x40021c00
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e25b      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d075      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ed6:	4ba3      	ldr	r3, [pc, #652]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d00c      	beq.n	8000efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee2:	4ba0      	ldr	r3, [pc, #640]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d112      	bne.n	8000f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eee:	4b9d      	ldr	r3, [pc, #628]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000efa:	d10b      	bne.n	8000f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000efc:	4b99      	ldr	r3, [pc, #612]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d05b      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x108>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d157      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e236      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1c:	d106      	bne.n	8000f2c <HAL_RCC_OscConfig+0x74>
 8000f1e:	4b91      	ldr	r3, [pc, #580]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a90      	ldr	r2, [pc, #576]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e01d      	b.n	8000f68 <HAL_RCC_OscConfig+0xb0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x98>
 8000f36:	4b8b      	ldr	r3, [pc, #556]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a8a      	ldr	r2, [pc, #552]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	4b88      	ldr	r3, [pc, #544]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a87      	ldr	r2, [pc, #540]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0xb0>
 8000f50:	4b84      	ldr	r3, [pc, #528]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a83      	ldr	r2, [pc, #524]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b81      	ldr	r3, [pc, #516]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a80      	ldr	r2, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fd16 	bl	80009a0 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fd12 	bl	80009a0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1fb      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	4b76      	ldr	r3, [pc, #472]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0xc0>
 8000f96:	e014      	b.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fd02 	bl	80009a0 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcfe 	bl	80009a0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1e7      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	4b6c      	ldr	r3, [pc, #432]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0xe8>
 8000fbe:	e000      	b.n	8000fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d063      	beq.n	8001096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fce:	4b65      	ldr	r3, [pc, #404]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fda:	4b62      	ldr	r3, [pc, #392]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d11c      	bne.n	8001020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d116      	bne.n	8001020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff2:	4b5c      	ldr	r3, [pc, #368]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d005      	beq.n	800100a <HAL_RCC_OscConfig+0x152>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d001      	beq.n	800100a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e1bb      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4952      	ldr	r1, [pc, #328]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	e03a      	b.n	8001096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d020      	beq.n	800106a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <HAL_RCC_OscConfig+0x2b0>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff fcb7 	bl	80009a0 <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001036:	f7ff fcb3 	bl	80009a0 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e19c      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	4940      	ldr	r1, [pc, #256]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
 8001068:	e015      	b.n	8001096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <HAL_RCC_OscConfig+0x2b0>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001070:	f7ff fc96 	bl	80009a0 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001078:	f7ff fc92 	bl	80009a0 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e17b      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d030      	beq.n	8001104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d016      	beq.n	80010d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_RCC_OscConfig+0x2b4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b0:	f7ff fc76 	bl	80009a0 <HAL_GetTick>
 80010b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc72 	bl	80009a0 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e15b      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f0      	beq.n	80010b8 <HAL_RCC_OscConfig+0x200>
 80010d6:	e015      	b.n	8001104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_RCC_OscConfig+0x2b4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fc5f 	bl	80009a0 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fc5b 	bl	80009a0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e144      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a0 	beq.w	8001252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10f      	bne.n	8001142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_RCC_OscConfig+0x2b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114a:	2b00      	cmp	r3, #0
 800114c:	d121      	bne.n	8001192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_RCC_OscConfig+0x2b8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_RCC_OscConfig+0x2b8>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115a:	f7ff fc21 	bl	80009a0 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	e011      	b.n	8001186 <HAL_RCC_OscConfig+0x2ce>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	42470000 	.word	0x42470000
 800116c:	42470e80 	.word	0x42470e80
 8001170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001174:	f7ff fc14 	bl	80009a0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e0fd      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b81      	ldr	r3, [pc, #516]	; (800138c <HAL_RCC_OscConfig+0x4d4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f0      	beq.n	8001174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2f0>
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 800119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6713      	str	r3, [r2, #112]	; 0x70
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x32a>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0x312>
 80011b0:	4b77      	ldr	r3, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b4:	4a76      	ldr	r2, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6713      	str	r3, [r2, #112]	; 0x70
 80011bc:	4b74      	ldr	r3, [pc, #464]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a73      	ldr	r2, [pc, #460]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0x32a>
 80011ca:	4b71      	ldr	r3, [pc, #452]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	4a70      	ldr	r2, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	6713      	str	r3, [r2, #112]	; 0x70
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011da:	4a6d      	ldr	r2, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80011dc:	f023 0304 	bic.w	r3, r3, #4
 80011e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d015      	beq.n	8001216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ea:	f7ff fbd9 	bl	80009a0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f0:	e00a      	b.n	8001208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fbd5 	bl	80009a0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001200:	4293      	cmp	r3, r2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0bc      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 800120a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ee      	beq.n	80011f2 <HAL_RCC_OscConfig+0x33a>
 8001214:	e014      	b.n	8001240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fbc3 	bl	80009a0 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121c:	e00a      	b.n	8001234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121e:	f7ff fbbf 	bl	80009a0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	f241 3288 	movw	r2, #5000	; 0x1388
 800122c:	4293      	cmp	r3, r2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e0a6      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	4b56      	ldr	r3, [pc, #344]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ee      	bne.n	800121e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001246:	4b52      	ldr	r3, [pc, #328]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 800124c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8092 	beq.w	8001380 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800125c:	4b4c      	ldr	r3, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	d05c      	beq.n	8001322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d141      	bne.n	80012f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b48      	ldr	r3, [pc, #288]	; (8001394 <HAL_RCC_OscConfig+0x4dc>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb93 	bl	80009a0 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fb8f 	bl	80009a0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e078      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001290:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	019b      	lsls	r3, r3, #6
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	3b01      	subs	r3, #1
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	4933      	ldr	r1, [pc, #204]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c6:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_RCC_OscConfig+0x4dc>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb68 	bl	80009a0 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fb64 	bl	80009a0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e04d      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x41c>
 80012f2:	e045      	b.n	8001380 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x4dc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb51 	bl	80009a0 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb4d 	bl	80009a0 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e036      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x44a>
 8001320:	e02e      	b.n	8001380 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e029      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_RCC_OscConfig+0x4d8>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	429a      	cmp	r2, r3
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d115      	bne.n	800137c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001356:	4013      	ands	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800135c:	4293      	cmp	r3, r2
 800135e:	d10d      	bne.n	800137c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d001      	beq.n	8001380 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000
 8001390:	40023800 	.word	0x40023800
 8001394:	42470060 	.word	0x42470060

08001398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e0cc      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 030f 	and.w	r3, r3, #15
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d90c      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 800140a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800140e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d044      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d119      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d003      	beq.n	8001456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001452:	2b03      	cmp	r3, #3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e067      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 0203 	bic.w	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4934      	ldr	r1, [pc, #208]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001488:	f7ff fa8a 	bl	80009a0 <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001490:	f7ff fa86 	bl	80009a0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	; 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e04f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 020c 	and.w	r2, r3, #12
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1eb      	bne.n	8001490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d20c      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	4313      	orrs	r3, r2
 800151c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4601      	mov	r1, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c0>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	fa21 f303 	lsr.w	r3, r1, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1c8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f9ea 	bl	8000918 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023c00 	.word	0x40023c00
 8001554:	40023800 	.word	0x40023800
 8001558:	08004f28 	.word	0x08004f28
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d007      	beq.n	8001596 <HAL_RCC_GetSysClockFreq+0x32>
 8001586:	2b08      	cmp	r3, #8
 8001588:	d008      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x38>
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 80b4 	bne.w	80016f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001590:	4b5e      	ldr	r3, [pc, #376]	; (800170c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001592:	60bb      	str	r3, [r7, #8]
       break;
 8001594:	e0b3      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001596:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001598:	60bb      	str	r3, [r7, #8]
      break;
 800159a:	e0b0      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a6:	4b58      	ldr	r3, [pc, #352]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d04a      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b2:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	099b      	lsrs	r3, r3, #6
 80015b8:	f04f 0400 	mov.w	r4, #0
 80015bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea03 0501 	and.w	r5, r3, r1
 80015c8:	ea04 0602 	and.w	r6, r4, r2
 80015cc:	4629      	mov	r1, r5
 80015ce:	4632      	mov	r2, r6
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f04f 0400 	mov.w	r4, #0
 80015d8:	0154      	lsls	r4, r2, #5
 80015da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015de:	014b      	lsls	r3, r1, #5
 80015e0:	4619      	mov	r1, r3
 80015e2:	4622      	mov	r2, r4
 80015e4:	1b49      	subs	r1, r1, r5
 80015e6:	eb62 0206 	sbc.w	r2, r2, r6
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f04f 0400 	mov.w	r4, #0
 80015f2:	0194      	lsls	r4, r2, #6
 80015f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015f8:	018b      	lsls	r3, r1, #6
 80015fa:	1a5b      	subs	r3, r3, r1
 80015fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001600:	f04f 0100 	mov.w	r1, #0
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	00e2      	lsls	r2, r4, #3
 800160a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800160e:	00d9      	lsls	r1, r3, #3
 8001610:	460b      	mov	r3, r1
 8001612:	4614      	mov	r4, r2
 8001614:	195b      	adds	r3, r3, r5
 8001616:	eb44 0406 	adc.w	r4, r4, r6
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	0262      	lsls	r2, r4, #9
 8001624:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001628:	0259      	lsls	r1, r3, #9
 800162a:	460b      	mov	r3, r1
 800162c:	4614      	mov	r4, r2
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	f7fe fe26 	bl	800028c <__aeabi_uldivmod>
 8001640:	4603      	mov	r3, r0
 8001642:	460c      	mov	r4, r1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e049      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	f04f 0400 	mov.w	r4, #0
 8001652:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	ea03 0501 	and.w	r5, r3, r1
 800165e:	ea04 0602 	and.w	r6, r4, r2
 8001662:	4629      	mov	r1, r5
 8001664:	4632      	mov	r2, r6
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	0154      	lsls	r4, r2, #5
 8001670:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001674:	014b      	lsls	r3, r1, #5
 8001676:	4619      	mov	r1, r3
 8001678:	4622      	mov	r2, r4
 800167a:	1b49      	subs	r1, r1, r5
 800167c:	eb62 0206 	sbc.w	r2, r2, r6
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	0194      	lsls	r4, r2, #6
 800168a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800168e:	018b      	lsls	r3, r1, #6
 8001690:	1a5b      	subs	r3, r3, r1
 8001692:	eb64 0402 	sbc.w	r4, r4, r2
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	00e2      	lsls	r2, r4, #3
 80016a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016a4:	00d9      	lsls	r1, r3, #3
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	195b      	adds	r3, r3, r5
 80016ac:	eb44 0406 	adc.w	r4, r4, r6
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	02a2      	lsls	r2, r4, #10
 80016ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016be:	0299      	lsls	r1, r3, #10
 80016c0:	460b      	mov	r3, r1
 80016c2:	4614      	mov	r4, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 0400 	mov.w	r4, #0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	f7fe fddb 	bl	800028c <__aeabi_uldivmod>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	3301      	adds	r3, #1
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	60bb      	str	r3, [r7, #8]
      break;
 80016f6:	e002      	b.n	80016fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016fa:	60bb      	str	r3, [r7, #8]
      break;
 80016fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fe:	68bb      	ldr	r3, [r7, #8]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	00f42400 	.word	0x00f42400
 8001710:	007a1200 	.word	0x007a1200

08001714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_RCC_GetHCLKFreq+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000000 	.word	0x20000000

0800172c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001730:	f7ff fff0 	bl	8001714 <HAL_RCC_GetHCLKFreq>
 8001734:	4601      	mov	r1, r0
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	0a9b      	lsrs	r3, r3, #10
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	4a03      	ldr	r2, [pc, #12]	; (8001750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	08004f38 	.word	0x08004f38

08001754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001758:	f7ff ffdc 	bl	8001714 <HAL_RCC_GetHCLKFreq>
 800175c:	4601      	mov	r1, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0b5b      	lsrs	r3, r3, #13
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800176a:	5cd3      	ldrb	r3, [r2, r3]
 800176c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	08004f38 	.word	0x08004f38

0800177c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d035      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017aa:	f7ff f8f9 	bl	80009a0 <HAL_GetTick>
 80017ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017b2:	f7ff f8f5 	bl	80009a0 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0b0      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017c4:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f0      	bne.n	80017b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	019a      	lsls	r2, r3, #6
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	071b      	lsls	r3, r3, #28
 80017dc:	4955      	ldr	r1, [pc, #340]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80017ea:	f7ff f8d9 	bl	80009a0 <HAL_GetTick>
 80017ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80017f2:	f7ff f8d5 	bl	80009a0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e090      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001804:	4b4b      	ldr	r3, [pc, #300]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8083 	beq.w	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001846:	f7ff f8ab 	bl	80009a0 <HAL_GetTick>
 800184a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7ff f8a7 	bl	80009a0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e062      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001874:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d02f      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	429a      	cmp	r2, r3
 8001888:	d028      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001892:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800189a:	4b28      	ldr	r3, [pc, #160]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d114      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80018b2:	f7ff f875 	bl	80009a0 <HAL_GetTick>
 80018b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	e00a      	b.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff f871 	bl	80009a0 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e02a      	b.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ee      	beq.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018e8:	d10d      	bne.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018fe:	490d      	ldr	r1, [pc, #52]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e005      	b.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800190c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001910:	6093      	str	r3, [r2, #8]
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	4905      	ldr	r1, [pc, #20]	; (8001934 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001920:	4313      	orrs	r3, r2
 8001922:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	42470068 	.word	0x42470068
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000
 800193c:	42470e40 	.word	0x42470e40

08001940 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e03f      	b.n	80019d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7fe ff3a 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001982:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f90b 	bl	8001ba0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af02      	add	r7, sp, #8
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4613      	mov	r3, r2
 80019e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	f040 8083 	bne.w	8001b02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_UART_Transmit+0x2e>
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e07b      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_UART_Transmit+0x40>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e074      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2221      	movs	r2, #33	; 0x21
 8001a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a30:	f7fe ffb6 	bl	80009a0 <HAL_GetTick>
 8001a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	88fa      	ldrh	r2, [r7, #6]
 8001a40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a4a:	e042      	b.n	8001ad2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a62:	d122      	bne.n	8001aaa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f84c 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e042      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d103      	bne.n	8001aa2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	e017      	b.n	8001ad2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	e013      	b.n	8001ad2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f829 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e01f      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1b7      	bne.n	8001a4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f810 	bl	8001b0c <UART_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e006      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b1c:	e02c      	b.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d028      	beq.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8001b2c:	f7fe ff38 	bl	80009a0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d21d      	bcs.n	8001b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e00f      	b.n	8001b98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4013      	ands	r3, r2
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d0c3      	beq.n	8001b1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001be2:	f023 030c 	bic.w	r3, r3, #12
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c0e:	f040 818b 	bne.w	8001f28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4ac1      	ldr	r2, [pc, #772]	; (8001f1c <UART_SetConfig+0x37c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d005      	beq.n	8001c28 <UART_SetConfig+0x88>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4abf      	ldr	r2, [pc, #764]	; (8001f20 <UART_SetConfig+0x380>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f040 80bd 	bne.w	8001da2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c28:	f7ff fd94 	bl	8001754 <HAL_RCC_GetPCLK2Freq>
 8001c2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	461d      	mov	r5, r3
 8001c32:	f04f 0600 	mov.w	r6, #0
 8001c36:	46a8      	mov	r8, r5
 8001c38:	46b1      	mov	r9, r6
 8001c3a:	eb18 0308 	adds.w	r3, r8, r8
 8001c3e:	eb49 0409 	adc.w	r4, r9, r9
 8001c42:	4698      	mov	r8, r3
 8001c44:	46a1      	mov	r9, r4
 8001c46:	eb18 0805 	adds.w	r8, r8, r5
 8001c4a:	eb49 0906 	adc.w	r9, r9, r6
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c62:	4688      	mov	r8, r1
 8001c64:	4691      	mov	r9, r2
 8001c66:	eb18 0005 	adds.w	r0, r8, r5
 8001c6a:	eb49 0106 	adc.w	r1, r9, r6
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	461d      	mov	r5, r3
 8001c74:	f04f 0600 	mov.w	r6, #0
 8001c78:	196b      	adds	r3, r5, r5
 8001c7a:	eb46 0406 	adc.w	r4, r6, r6
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	f7fe fb03 	bl	800028c <__aeabi_uldivmod>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4ba5      	ldr	r3, [pc, #660]	; (8001f24 <UART_SetConfig+0x384>)
 8001c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	f04f 0600 	mov.w	r6, #0
 8001ca0:	46a9      	mov	r9, r5
 8001ca2:	46b2      	mov	sl, r6
 8001ca4:	eb19 0309 	adds.w	r3, r9, r9
 8001ca8:	eb4a 040a 	adc.w	r4, sl, sl
 8001cac:	4699      	mov	r9, r3
 8001cae:	46a2      	mov	sl, r4
 8001cb0:	eb19 0905 	adds.w	r9, r9, r5
 8001cb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001cc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ccc:	4689      	mov	r9, r1
 8001cce:	4692      	mov	sl, r2
 8001cd0:	eb19 0005 	adds.w	r0, r9, r5
 8001cd4:	eb4a 0106 	adc.w	r1, sl, r6
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	461d      	mov	r5, r3
 8001cde:	f04f 0600 	mov.w	r6, #0
 8001ce2:	196b      	adds	r3, r5, r5
 8001ce4:	eb46 0406 	adc.w	r4, r6, r6
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	f7fe face 	bl	800028c <__aeabi_uldivmod>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <UART_SetConfig+0x384>)
 8001cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	2164      	movs	r1, #100	; 0x64
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	3332      	adds	r3, #50	; 0x32
 8001d0a:	4a86      	ldr	r2, [pc, #536]	; (8001f24 <UART_SetConfig+0x384>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	095b      	lsrs	r3, r3, #5
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d18:	4498      	add	r8, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	461d      	mov	r5, r3
 8001d1e:	f04f 0600 	mov.w	r6, #0
 8001d22:	46a9      	mov	r9, r5
 8001d24:	46b2      	mov	sl, r6
 8001d26:	eb19 0309 	adds.w	r3, r9, r9
 8001d2a:	eb4a 040a 	adc.w	r4, sl, sl
 8001d2e:	4699      	mov	r9, r3
 8001d30:	46a2      	mov	sl, r4
 8001d32:	eb19 0905 	adds.w	r9, r9, r5
 8001d36:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d4e:	4689      	mov	r9, r1
 8001d50:	4692      	mov	sl, r2
 8001d52:	eb19 0005 	adds.w	r0, r9, r5
 8001d56:	eb4a 0106 	adc.w	r1, sl, r6
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	461d      	mov	r5, r3
 8001d60:	f04f 0600 	mov.w	r6, #0
 8001d64:	196b      	adds	r3, r5, r5
 8001d66:	eb46 0406 	adc.w	r4, r6, r6
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	f7fe fa8d 	bl	800028c <__aeabi_uldivmod>
 8001d72:	4603      	mov	r3, r0
 8001d74:	460c      	mov	r4, r1
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <UART_SetConfig+0x384>)
 8001d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2164      	movs	r1, #100	; 0x64
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	3332      	adds	r3, #50	; 0x32
 8001d8c:	4a65      	ldr	r2, [pc, #404]	; (8001f24 <UART_SetConfig+0x384>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 0207 	and.w	r2, r3, #7
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4442      	add	r2, r8
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e26f      	b.n	8002282 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001da2:	f7ff fcc3 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8001da6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	461d      	mov	r5, r3
 8001dac:	f04f 0600 	mov.w	r6, #0
 8001db0:	46a8      	mov	r8, r5
 8001db2:	46b1      	mov	r9, r6
 8001db4:	eb18 0308 	adds.w	r3, r8, r8
 8001db8:	eb49 0409 	adc.w	r4, r9, r9
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	46a1      	mov	r9, r4
 8001dc0:	eb18 0805 	adds.w	r8, r8, r5
 8001dc4:	eb49 0906 	adc.w	r9, r9, r6
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001dd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001dd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ddc:	4688      	mov	r8, r1
 8001dde:	4691      	mov	r9, r2
 8001de0:	eb18 0005 	adds.w	r0, r8, r5
 8001de4:	eb49 0106 	adc.w	r1, r9, r6
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	461d      	mov	r5, r3
 8001dee:	f04f 0600 	mov.w	r6, #0
 8001df2:	196b      	adds	r3, r5, r5
 8001df4:	eb46 0406 	adc.w	r4, r6, r6
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	f7fe fa46 	bl	800028c <__aeabi_uldivmod>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <UART_SetConfig+0x384>)
 8001e08:	fba3 2302 	umull	r2, r3, r3, r2
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	461d      	mov	r5, r3
 8001e16:	f04f 0600 	mov.w	r6, #0
 8001e1a:	46a9      	mov	r9, r5
 8001e1c:	46b2      	mov	sl, r6
 8001e1e:	eb19 0309 	adds.w	r3, r9, r9
 8001e22:	eb4a 040a 	adc.w	r4, sl, sl
 8001e26:	4699      	mov	r9, r3
 8001e28:	46a2      	mov	sl, r4
 8001e2a:	eb19 0905 	adds.w	r9, r9, r5
 8001e2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e46:	4689      	mov	r9, r1
 8001e48:	4692      	mov	sl, r2
 8001e4a:	eb19 0005 	adds.w	r0, r9, r5
 8001e4e:	eb4a 0106 	adc.w	r1, sl, r6
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	461d      	mov	r5, r3
 8001e58:	f04f 0600 	mov.w	r6, #0
 8001e5c:	196b      	adds	r3, r5, r5
 8001e5e:	eb46 0406 	adc.w	r4, r6, r6
 8001e62:	461a      	mov	r2, r3
 8001e64:	4623      	mov	r3, r4
 8001e66:	f7fe fa11 	bl	800028c <__aeabi_uldivmod>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <UART_SetConfig+0x384>)
 8001e72:	fba3 1302 	umull	r1, r3, r3, r2
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2164      	movs	r1, #100	; 0x64
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	3332      	adds	r3, #50	; 0x32
 8001e84:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <UART_SetConfig+0x384>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e92:	4498      	add	r8, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	461d      	mov	r5, r3
 8001e98:	f04f 0600 	mov.w	r6, #0
 8001e9c:	46a9      	mov	r9, r5
 8001e9e:	46b2      	mov	sl, r6
 8001ea0:	eb19 0309 	adds.w	r3, r9, r9
 8001ea4:	eb4a 040a 	adc.w	r4, sl, sl
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	46a2      	mov	sl, r4
 8001eac:	eb19 0905 	adds.w	r9, r9, r5
 8001eb0:	eb4a 0a06 	adc.w	sl, sl, r6
 8001eb4:	f04f 0100 	mov.w	r1, #0
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ec0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ec4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ec8:	4689      	mov	r9, r1
 8001eca:	4692      	mov	sl, r2
 8001ecc:	eb19 0005 	adds.w	r0, r9, r5
 8001ed0:	eb4a 0106 	adc.w	r1, sl, r6
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	461d      	mov	r5, r3
 8001eda:	f04f 0600 	mov.w	r6, #0
 8001ede:	196b      	adds	r3, r5, r5
 8001ee0:	eb46 0406 	adc.w	r4, r6, r6
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	f7fe f9d0 	bl	800028c <__aeabi_uldivmod>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <UART_SetConfig+0x384>)
 8001ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	3332      	adds	r3, #50	; 0x32
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <UART_SetConfig+0x384>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	f003 0207 	and.w	r2, r3, #7
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4442      	add	r2, r8
 8001f18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f1a:	e1b2      	b.n	8002282 <UART_SetConfig+0x6e2>
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
 8001f24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4ad7      	ldr	r2, [pc, #860]	; (800228c <UART_SetConfig+0x6ec>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d005      	beq.n	8001f3e <UART_SetConfig+0x39e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4ad6      	ldr	r2, [pc, #856]	; (8002290 <UART_SetConfig+0x6f0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	f040 80d1 	bne.w	80020e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f3e:	f7ff fc09 	bl	8001754 <HAL_RCC_GetPCLK2Freq>
 8001f42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	469a      	mov	sl, r3
 8001f48:	f04f 0b00 	mov.w	fp, #0
 8001f4c:	46d0      	mov	r8, sl
 8001f4e:	46d9      	mov	r9, fp
 8001f50:	eb18 0308 	adds.w	r3, r8, r8
 8001f54:	eb49 0409 	adc.w	r4, r9, r9
 8001f58:	4698      	mov	r8, r3
 8001f5a:	46a1      	mov	r9, r4
 8001f5c:	eb18 080a 	adds.w	r8, r8, sl
 8001f60:	eb49 090b 	adc.w	r9, r9, fp
 8001f64:	f04f 0100 	mov.w	r1, #0
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f78:	4688      	mov	r8, r1
 8001f7a:	4691      	mov	r9, r2
 8001f7c:	eb1a 0508 	adds.w	r5, sl, r8
 8001f80:	eb4b 0609 	adc.w	r6, fp, r9
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	f04f 0400 	mov.w	r4, #0
 8001f96:	0094      	lsls	r4, r2, #2
 8001f98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f9c:	008b      	lsls	r3, r1, #2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	4631      	mov	r1, r6
 8001fa6:	f7fe f971 	bl	800028c <__aeabi_uldivmod>
 8001faa:	4603      	mov	r3, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4bb8      	ldr	r3, [pc, #736]	; (8002294 <UART_SetConfig+0x6f4>)
 8001fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	469b      	mov	fp, r3
 8001fc0:	f04f 0c00 	mov.w	ip, #0
 8001fc4:	46d9      	mov	r9, fp
 8001fc6:	46e2      	mov	sl, ip
 8001fc8:	eb19 0309 	adds.w	r3, r9, r9
 8001fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	46a2      	mov	sl, r4
 8001fd4:	eb19 090b 	adds.w	r9, r9, fp
 8001fd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ff0:	4689      	mov	r9, r1
 8001ff2:	4692      	mov	sl, r2
 8001ff4:	eb1b 0509 	adds.w	r5, fp, r9
 8001ff8:	eb4c 060a 	adc.w	r6, ip, sl
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4619      	mov	r1, r3
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	f04f 0400 	mov.w	r4, #0
 800200e:	0094      	lsls	r4, r2, #2
 8002010:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002014:	008b      	lsls	r3, r1, #2
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	4628      	mov	r0, r5
 800201c:	4631      	mov	r1, r6
 800201e:	f7fe f935 	bl	800028c <__aeabi_uldivmod>
 8002022:	4603      	mov	r3, r0
 8002024:	460c      	mov	r4, r1
 8002026:	461a      	mov	r2, r3
 8002028:	4b9a      	ldr	r3, [pc, #616]	; (8002294 <UART_SetConfig+0x6f4>)
 800202a:	fba3 1302 	umull	r1, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2164      	movs	r1, #100	; 0x64
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	3332      	adds	r3, #50	; 0x32
 800203c:	4a95      	ldr	r2, [pc, #596]	; (8002294 <UART_SetConfig+0x6f4>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002048:	4498      	add	r8, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	469b      	mov	fp, r3
 800204e:	f04f 0c00 	mov.w	ip, #0
 8002052:	46d9      	mov	r9, fp
 8002054:	46e2      	mov	sl, ip
 8002056:	eb19 0309 	adds.w	r3, r9, r9
 800205a:	eb4a 040a 	adc.w	r4, sl, sl
 800205e:	4699      	mov	r9, r3
 8002060:	46a2      	mov	sl, r4
 8002062:	eb19 090b 	adds.w	r9, r9, fp
 8002066:	eb4a 0a0c 	adc.w	sl, sl, ip
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800207a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800207e:	4689      	mov	r9, r1
 8002080:	4692      	mov	sl, r2
 8002082:	eb1b 0509 	adds.w	r5, fp, r9
 8002086:	eb4c 060a 	adc.w	r6, ip, sl
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	f04f 0300 	mov.w	r3, #0
 8002098:	f04f 0400 	mov.w	r4, #0
 800209c:	0094      	lsls	r4, r2, #2
 800209e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020a2:	008b      	lsls	r3, r1, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4623      	mov	r3, r4
 80020a8:	4628      	mov	r0, r5
 80020aa:	4631      	mov	r1, r6
 80020ac:	f7fe f8ee 	bl	800028c <__aeabi_uldivmod>
 80020b0:	4603      	mov	r3, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b77      	ldr	r3, [pc, #476]	; (8002294 <UART_SetConfig+0x6f4>)
 80020b8:	fba3 1302 	umull	r1, r3, r3, r2
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	2164      	movs	r1, #100	; 0x64
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	3332      	adds	r3, #50	; 0x32
 80020ca:	4a72      	ldr	r2, [pc, #456]	; (8002294 <UART_SetConfig+0x6f4>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4442      	add	r2, r8
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	e0d0      	b.n	8002282 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80020e0:	f7ff fb24 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 80020e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	469a      	mov	sl, r3
 80020ea:	f04f 0b00 	mov.w	fp, #0
 80020ee:	46d0      	mov	r8, sl
 80020f0:	46d9      	mov	r9, fp
 80020f2:	eb18 0308 	adds.w	r3, r8, r8
 80020f6:	eb49 0409 	adc.w	r4, r9, r9
 80020fa:	4698      	mov	r8, r3
 80020fc:	46a1      	mov	r9, r4
 80020fe:	eb18 080a 	adds.w	r8, r8, sl
 8002102:	eb49 090b 	adc.w	r9, r9, fp
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002112:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002116:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800211a:	4688      	mov	r8, r1
 800211c:	4691      	mov	r9, r2
 800211e:	eb1a 0508 	adds.w	r5, sl, r8
 8002122:	eb4b 0609 	adc.w	r6, fp, r9
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	0094      	lsls	r4, r2, #2
 800213a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800213e:	008b      	lsls	r3, r1, #2
 8002140:	461a      	mov	r2, r3
 8002142:	4623      	mov	r3, r4
 8002144:	4628      	mov	r0, r5
 8002146:	4631      	mov	r1, r6
 8002148:	f7fe f8a0 	bl	800028c <__aeabi_uldivmod>
 800214c:	4603      	mov	r3, r0
 800214e:	460c      	mov	r4, r1
 8002150:	461a      	mov	r2, r3
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <UART_SetConfig+0x6f4>)
 8002154:	fba3 2302 	umull	r2, r3, r3, r2
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	469b      	mov	fp, r3
 8002162:	f04f 0c00 	mov.w	ip, #0
 8002166:	46d9      	mov	r9, fp
 8002168:	46e2      	mov	sl, ip
 800216a:	eb19 0309 	adds.w	r3, r9, r9
 800216e:	eb4a 040a 	adc.w	r4, sl, sl
 8002172:	4699      	mov	r9, r3
 8002174:	46a2      	mov	sl, r4
 8002176:	eb19 090b 	adds.w	r9, r9, fp
 800217a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800218a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800218e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002192:	4689      	mov	r9, r1
 8002194:	4692      	mov	sl, r2
 8002196:	eb1b 0509 	adds.w	r5, fp, r9
 800219a:	eb4c 060a 	adc.w	r6, ip, sl
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f04f 0400 	mov.w	r4, #0
 80021b0:	0094      	lsls	r4, r2, #2
 80021b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021b6:	008b      	lsls	r3, r1, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4623      	mov	r3, r4
 80021bc:	4628      	mov	r0, r5
 80021be:	4631      	mov	r1, r6
 80021c0:	f7fe f864 	bl	800028c <__aeabi_uldivmod>
 80021c4:	4603      	mov	r3, r0
 80021c6:	460c      	mov	r4, r1
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <UART_SetConfig+0x6f4>)
 80021cc:	fba3 1302 	umull	r1, r3, r3, r2
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	2164      	movs	r1, #100	; 0x64
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <UART_SetConfig+0x6f4>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ea:	4498      	add	r8, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	469b      	mov	fp, r3
 80021f0:	f04f 0c00 	mov.w	ip, #0
 80021f4:	46d9      	mov	r9, fp
 80021f6:	46e2      	mov	sl, ip
 80021f8:	eb19 0309 	adds.w	r3, r9, r9
 80021fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002200:	4699      	mov	r9, r3
 8002202:	46a2      	mov	sl, r4
 8002204:	eb19 090b 	adds.w	r9, r9, fp
 8002208:	eb4a 0a0c 	adc.w	sl, sl, ip
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800221c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002220:	4689      	mov	r9, r1
 8002222:	4692      	mov	sl, r2
 8002224:	eb1b 0509 	adds.w	r5, fp, r9
 8002228:	eb4c 060a 	adc.w	r6, ip, sl
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0094      	lsls	r4, r2, #2
 8002240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002244:	008b      	lsls	r3, r1, #2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	4628      	mov	r0, r5
 800224c:	4631      	mov	r1, r6
 800224e:	f7fe f81d 	bl	800028c <__aeabi_uldivmod>
 8002252:	4603      	mov	r3, r0
 8002254:	460c      	mov	r4, r1
 8002256:	461a      	mov	r2, r3
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <UART_SetConfig+0x6f4>)
 800225a:	fba3 1302 	umull	r1, r3, r3, r2
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2164      	movs	r1, #100	; 0x64
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	3332      	adds	r3, #50	; 0x32
 800226c:	4a09      	ldr	r2, [pc, #36]	; (8002294 <UART_SetConfig+0x6f4>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	f003 020f 	and.w	r2, r3, #15
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4442      	add	r2, r8
 800227e:	609a      	str	r2, [r3, #8]
}
 8002280:	e7ff      	b.n	8002282 <UART_SetConfig+0x6e2>
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800228c:	40011000 	.word	0x40011000
 8002290:	40011400 	.word	0x40011400
 8002294:	51eb851f 	.word	0x51eb851f

08002298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800229a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800229e:	490e      	ldr	r1, [pc, #56]	; (80022d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <LoopForever+0xe>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022b4:	4c0b      	ldr	r4, [pc, #44]	; (80022e4 <LoopForever+0x16>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022c2:	f7fe faf1 	bl	80008a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80022c6:	f002 fd3b 	bl	8004d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ca:	f7fe f99f 	bl	800060c <main>

080022ce <LoopForever>:

LoopForever:
    b LoopForever
 80022ce:	e7fe      	b.n	80022ce <LoopForever>
  ldr   r0, =_estack
 80022d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80022dc:	08004f64 	.word	0x08004f64
  ldr r2, =_sbss
 80022e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80022e4:	20015674 	.word	0x20015674

080022e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>

080022ea <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <vApplicationGetIdleTaskMemory+0x2c>)
 8002308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <vApplicationGetIdleTaskMemory+0x30>)
 800230e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2282      	movs	r2, #130	; 0x82
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000034 	.word	0x20000034
 8002328:	2000008c 	.word	0x2000008c

0800232c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0208 	add.w	r2, r3, #8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f04f 32ff 	mov.w	r2, #4294967295
 8002344:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f103 0208 	add.w	r2, r3, #8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 0208 	add.w	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6892      	ldr	r2, [r2, #8]
 80023e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6852      	ldr	r2, [r2, #4]
 80023ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d103      	bne.n	8002402 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1e5a      	subs	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08e      	sub	sp, #56	; 0x38
 8002426:	af04      	add	r7, sp, #16
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	e7fe      	b.n	8002448 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <xTaskCreateStatic+0x42>
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e7fe      	b.n	8002462 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002464:	2358      	movs	r3, #88	; 0x58
 8002466:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b58      	cmp	r3, #88	; 0x58
 800246c:	d009      	beq.n	8002482 <xTaskCreateStatic+0x60>
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	e7fe      	b.n	8002480 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01e      	beq.n	80024c6 <xTaskCreateStatic+0xa4>
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01b      	beq.n	80024c6 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002496:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80024a0:	2300      	movs	r3, #0
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68b9      	ldr	r1, [r7, #8]
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f850 	bl	800255e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024c0:	f000 f8d4 	bl	800266c <prvAddNewTaskToReadyList>
 80024c4:	e001      	b.n	80024ca <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80024ca:	697b      	ldr	r3, [r7, #20]
	}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3728      	adds	r7, #40	; 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af04      	add	r7, sp, #16
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 feb7 	bl	800325c <pvPortMalloc>
 80024ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00e      	beq.n	8002514 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80024f6:	2058      	movs	r0, #88	; 0x58
 80024f8:	f000 feb0 	bl	800325c <pvPortMalloc>
 80024fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
 800250a:	e005      	b.n	8002518 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f000 ff6b 	bl	80033e8 <vPortFree>
 8002512:	e001      	b.n	8002518 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d017      	beq.n	800254e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	2300      	movs	r3, #0
 800252a:	9303      	str	r3, [sp, #12]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68b9      	ldr	r1, [r7, #8]
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f80e 	bl	800255e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002542:	69f8      	ldr	r0, [r7, #28]
 8002544:	f000 f892 	bl	800266c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002548:	2301      	movs	r3, #1
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e002      	b.n	8002554 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002554:	69bb      	ldr	r3, [r7, #24]
	}
 8002556:	4618      	mov	r0, r3
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b088      	sub	sp, #32
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	21a5      	movs	r1, #165	; 0xa5
 8002578:	f002 fc20 	bl	8004dbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002586:	3b01      	subs	r3, #1
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f023 0307 	bic.w	r3, r3, #7
 8002594:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <prvInitialiseNewTask+0x56>
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e7fe      	b.n	80025b2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	e012      	b.n	80025e0 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	7819      	ldrb	r1, [r3, #0]
 80025c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	3334      	adds	r3, #52	; 0x34
 80025ca:	460a      	mov	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d9e9      	bls.n	80025ba <prvInitialiseNewTask+0x5c>
 80025e6:	e000      	b.n	80025ea <prvInitialiseNewTask+0x8c>
		{
			break;
 80025e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d901      	bls.n	80025fc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025f8:	2304      	movs	r3, #4
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002606:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	2200      	movs	r2, #0
 800260c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	3304      	adds	r3, #4
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff feaa 	bl	800236c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	3318      	adds	r3, #24
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fea5 	bl	800236c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	f1c3 0205 	rsb	r2, r3, #5
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	2200      	movs	r2, #0
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	69b8      	ldr	r0, [r7, #24]
 800264c:	f000 fb7a 	bl	8002d44 <pxPortInitialiseStack>
 8002650:	4602      	mov	r2, r0
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002662:	bf00      	nop
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af02      	add	r7, sp, #8
 8002672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002674:	f000 fc8a 	bl	8002f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002678:	4b35      	ldr	r3, [pc, #212]	; (8002750 <prvAddNewTaskToReadyList+0xe4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	4a34      	ldr	r2, [pc, #208]	; (8002750 <prvAddNewTaskToReadyList+0xe4>)
 8002680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <prvAddNewTaskToReadyList+0xe8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800268a:	4a32      	ldr	r2, [pc, #200]	; (8002754 <prvAddNewTaskToReadyList+0xe8>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <prvAddNewTaskToReadyList+0xe4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d110      	bne.n	80026ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002698:	f000 fa94 	bl	8002bc4 <prvInitialiseTaskLists>
 800269c:	e00d      	b.n	80026ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <prvAddNewTaskToReadyList+0xec>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026a6:	4b2b      	ldr	r3, [pc, #172]	; (8002754 <prvAddNewTaskToReadyList+0xe8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d802      	bhi.n	80026ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <prvAddNewTaskToReadyList+0xe8>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <prvAddNewTaskToReadyList+0xf0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <prvAddNewTaskToReadyList+0xf0>)
 80026c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <prvAddNewTaskToReadyList+0xf0>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d016      	beq.n	8002700 <prvAddNewTaskToReadyList+0x94>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 f8d3 	bl	8004880 <SEGGER_SYSVIEW_OnTaskCreate>
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	461d      	mov	r5, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461c      	mov	r4, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	1ae3      	subs	r3, r4, r3
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	462b      	mov	r3, r5
 80026fc:	f001 f836 	bl	800376c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 f944 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <prvAddNewTaskToReadyList+0xf4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4313      	orrs	r3, r2
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <prvAddNewTaskToReadyList+0xf4>)
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <prvAddNewTaskToReadyList+0xf8>)
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f7ff fe28 	bl	8002386 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002736:	f000 fc57 	bl	8002fe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <prvAddNewTaskToReadyList+0xec>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <prvAddNewTaskToReadyList+0xda>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <prvAddNewTaskToReadyList+0xe8>)
 8002744:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bdb0      	pop	{r4, r5, r7, pc}
 800274e:	bf00      	nop
 8002750:	2000036c 	.word	0x2000036c
 8002754:	20000294 	.word	0x20000294
 8002758:	20000378 	.word	0x20000378
 800275c:	20000388 	.word	0x20000388
 8002760:	20000374 	.word	0x20000374
 8002764:	20000298 	.word	0x20000298

08002768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002776:	463a      	mov	r2, r7
 8002778:	1d39      	adds	r1, r7, #4
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fdba 	bl	80022f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002784:	6839      	ldr	r1, [r7, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	9202      	str	r2, [sp, #8]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2300      	movs	r3, #0
 8002794:	460a      	mov	r2, r1
 8002796:	491d      	ldr	r1, [pc, #116]	; (800280c <vTaskStartScheduler+0xa4>)
 8002798:	481d      	ldr	r0, [pc, #116]	; (8002810 <vTaskStartScheduler+0xa8>)
 800279a:	f7ff fe42 	bl	8002422 <xTaskCreateStatic>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <vTaskStartScheduler+0xac>)
 80027a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <vTaskStartScheduler+0xac>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80027ac:	2301      	movs	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e001      	b.n	80027b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d115      	bne.n	80027e8 <vTaskStartScheduler+0x80>
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <vTaskStartScheduler+0xb0>)
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295
 80027d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <vTaskStartScheduler+0xb4>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <vTaskStartScheduler+0xb8>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80027e2:	f000 fb35 	bl	8002e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80027e6:	e00d      	b.n	8002804 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ee:	d109      	bne.n	8002804 <vTaskStartScheduler+0x9c>
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e7fe      	b.n	8002802 <vTaskStartScheduler+0x9a>
}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08004e64 	.word	0x08004e64
 8002810:	08002ba1 	.word	0x08002ba1
 8002814:	20000390 	.word	0x20000390
 8002818:	2000038c 	.word	0x2000038c
 800281c:	20000378 	.word	0x20000378
 8002820:	20000370 	.word	0x20000370

08002824 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <vTaskSuspendAll+0x18>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	4a03      	ldr	r2, [pc, #12]	; (800283c <vTaskSuspendAll+0x18>)
 8002830:	6013      	str	r3, [r2, #0]
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	20000394 	.word	0x20000394

08002840 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800284a:	2300      	movs	r3, #0
 800284c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <xTaskResumeAll+0x104>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <xTaskResumeAll+0x2a>
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	e7fe      	b.n	8002868 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800286a:	f000 fb8f 	bl	8002f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <xTaskResumeAll+0x104>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <xTaskResumeAll+0x104>)
 8002876:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002878:	4b32      	ldr	r3, [pc, #200]	; (8002944 <xTaskResumeAll+0x104>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d159      	bne.n	8002934 <xTaskResumeAll+0xf4>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <xTaskResumeAll+0x108>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d055      	beq.n	8002934 <xTaskResumeAll+0xf4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002888:	e032      	b.n	80028f0 <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <xTaskResumeAll+0x10c>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3318      	adds	r3, #24
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fd99 	bl	80023ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3304      	adds	r3, #4
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fd94 	bl	80023ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f002 f871 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	2201      	movs	r2, #1
 80028b4:	409a      	lsls	r2, r3
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <xTaskResumeAll+0x110>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <xTaskResumeAll+0x110>)
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <xTaskResumeAll+0x114>)
 80028ce:	441a      	add	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7ff fd55 	bl	8002386 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <xTaskResumeAll+0x118>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <xTaskResumeAll+0x11c>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <xTaskResumeAll+0x10c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1c8      	bne.n	800288a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80028fe:	f000 f9fb 	bl	8002cf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <xTaskResumeAll+0x120>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800290e:	f000 f83b 	bl	8002988 <xTaskIncrementTick>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <xTaskResumeAll+0x11c>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f1      	bne.n	800290e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <xTaskResumeAll+0x120>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <xTaskResumeAll+0x11c>)
 8002932:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002934:	f000 fb58 	bl	8002fe8 <vPortExitCritical>

	return xAlreadyYielded;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000394 	.word	0x20000394
 8002948:	2000036c 	.word	0x2000036c
 800294c:	2000032c 	.word	0x2000032c
 8002950:	20000374 	.word	0x20000374
 8002954:	20000298 	.word	0x20000298
 8002958:	20000294 	.word	0x20000294
 800295c:	20000380 	.word	0x20000380
 8002960:	2000037c 	.word	0x2000037c

08002964 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800296a:	f000 fbf3 	bl	8003154 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <xTaskGetTickCountFromISR+0x20>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002978:	683b      	ldr	r3, [r7, #0]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000370 	.word	0x20000370

08002988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002992:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <xTaskIncrementTick+0x118>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d177      	bne.n	8002a8a <xTaskIncrementTick+0x102>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <xTaskIncrementTick+0x11c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029a2:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <xTaskIncrementTick+0x11c>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11f      	bne.n	80029ee <xTaskIncrementTick+0x66>
		{
			taskSWITCH_DELAYED_LISTS();
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <xTaskIncrementTick+0x120>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <xTaskIncrementTick+0x44>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	e7fe      	b.n	80029ca <xTaskIncrementTick+0x42>
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <xTaskIncrementTick+0x120>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b36      	ldr	r3, [pc, #216]	; (8002aac <xTaskIncrementTick+0x124>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <xTaskIncrementTick+0x120>)
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <xTaskIncrementTick+0x124>)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <xTaskIncrementTick+0x128>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <xTaskIncrementTick+0x128>)
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	f000 f985 	bl	8002cf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <xTaskIncrementTick+0x12c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d34d      	bcc.n	8002a94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <xTaskIncrementTick+0x120>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <xTaskIncrementTick+0x7e>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <xTaskIncrementTick+0x80>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <xTaskIncrementTick+0x12c>)
 8002a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a12:	601a      	str	r2, [r3, #0]
					break;
 8002a14:	e03e      	b.n	8002a94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <xTaskIncrementTick+0x120>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d203      	bcs.n	8002a36 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <xTaskIncrementTick+0x12c>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]
						break;
 8002a34:	e02e      	b.n	8002a94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fcc7 	bl	80023ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fcbe 	bl	80023ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 ff9b 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	2201      	movs	r2, #1
 8002a60:	409a      	lsls	r2, r3
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <xTaskIncrementTick+0x130>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <xTaskIncrementTick+0x130>)
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4a10      	ldr	r2, [pc, #64]	; (8002abc <xTaskIncrementTick+0x134>)
 8002a7a:	441a      	add	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f7ff fc7f 	bl	8002386 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a88:	e7b6      	b.n	80029f8 <xTaskIncrementTick+0x70>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <xTaskIncrementTick+0x138>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <xTaskIncrementTick+0x138>)
 8002a92:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a94:	697b      	ldr	r3, [r7, #20]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000394 	.word	0x20000394
 8002aa4:	20000370 	.word	0x20000370
 8002aa8:	20000324 	.word	0x20000324
 8002aac:	20000328 	.word	0x20000328
 8002ab0:	20000384 	.word	0x20000384
 8002ab4:	2000038c 	.word	0x2000038c
 8002ab8:	20000374 	.word	0x20000374
 8002abc:	20000298 	.word	0x20000298
 8002ac0:	2000037c 	.word	0x2000037c

08002ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <vTaskSwitchContext+0xc4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <vTaskSwitchContext+0xc8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ad8:	e051      	b.n	8002b7e <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <vTaskSwitchContext+0xc8>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <vTaskSwitchContext+0xcc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f1c3 031f 	rsb	r3, r3, #31
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4927      	ldr	r1, [pc, #156]	; (8002b94 <vTaskSwitchContext+0xd0>)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e7fe      	b.n	8002b1c <vTaskSwitchContext+0x58>
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <vTaskSwitchContext+0xd0>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d104      	bne.n	8002b4e <vTaskSwitchContext+0x8a>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <vTaskSwitchContext+0xd4>)
 8002b56:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <vTaskSwitchContext+0xd4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3334      	adds	r3, #52	; 0x34
 8002b5e:	2205      	movs	r2, #5
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <vTaskSwitchContext+0xd8>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 f910 	bl	8004d88 <memcmp>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <vTaskSwitchContext+0xb6>
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <vTaskSwitchContext+0xd4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fec8 	bl	8004908 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b78:	e001      	b.n	8002b7e <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8002b7a:	f001 fe65 	bl	8004848 <SEGGER_SYSVIEW_OnIdle>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000394 	.word	0x20000394
 8002b8c:	20000380 	.word	0x20000380
 8002b90:	20000374 	.word	0x20000374
 8002b94:	20000298 	.word	0x20000298
 8002b98:	20000294 	.word	0x20000294
 8002b9c:	08004e64 	.word	0x08004e64

08002ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ba8:	f000 f84c 	bl	8002c44 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <prvIdleTask+0x20>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002bbc:	e7f4      	b.n	8002ba8 <prvIdleTask+0x8>
 8002bbe:	bf00      	nop
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	e00c      	b.n	8002bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <prvInitialiseTaskLists+0x60>)
 8002bdc:	4413      	add	r3, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fba4 	bl	800232c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3301      	adds	r3, #1
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d9ef      	bls.n	8002bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <prvInitialiseTaskLists+0x64>)
 8002bf2:	f7ff fb9b 	bl	800232c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <prvInitialiseTaskLists+0x68>)
 8002bf8:	f7ff fb98 	bl	800232c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bfc:	480c      	ldr	r0, [pc, #48]	; (8002c30 <prvInitialiseTaskLists+0x6c>)
 8002bfe:	f7ff fb95 	bl	800232c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002c02:	480c      	ldr	r0, [pc, #48]	; (8002c34 <prvInitialiseTaskLists+0x70>)
 8002c04:	f7ff fb92 	bl	800232c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002c08:	480b      	ldr	r0, [pc, #44]	; (8002c38 <prvInitialiseTaskLists+0x74>)
 8002c0a:	f7ff fb8f 	bl	800232c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <prvInitialiseTaskLists+0x78>)
 8002c10:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <prvInitialiseTaskLists+0x64>)
 8002c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <prvInitialiseTaskLists+0x7c>)
 8002c16:	4a05      	ldr	r2, [pc, #20]	; (8002c2c <prvInitialiseTaskLists+0x68>)
 8002c18:	601a      	str	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000298 	.word	0x20000298
 8002c28:	200002fc 	.word	0x200002fc
 8002c2c:	20000310 	.word	0x20000310
 8002c30:	2000032c 	.word	0x2000032c
 8002c34:	20000340 	.word	0x20000340
 8002c38:	20000358 	.word	0x20000358
 8002c3c:	20000324 	.word	0x20000324
 8002c40:	20000328 	.word	0x20000328

08002c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c4a:	e019      	b.n	8002c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c4c:	f000 f99e 	bl	8002f8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <prvCheckTasksWaitingTermination+0x4c>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fbb6 	bl	80023ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <prvCheckTasksWaitingTermination+0x50>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <prvCheckTasksWaitingTermination+0x50>)
 8002c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <prvCheckTasksWaitingTermination+0x54>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <prvCheckTasksWaitingTermination+0x54>)
 8002c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c76:	f000 f9b7 	bl	8002fe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f80e 	bl	8002c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <prvCheckTasksWaitingTermination+0x54>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e1      	bne.n	8002c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000340 	.word	0x20000340
 8002c94:	2000036c 	.word	0x2000036c
 8002c98:	20000354 	.word	0x20000354

08002c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb98 	bl	80033e8 <vPortFree>
				vPortFree( pxTCB );
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fb95 	bl	80033e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002cbe:	e017      	b.n	8002cf0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d103      	bne.n	8002cd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fb8c 	bl	80033e8 <vPortFree>
	}
 8002cd0:	e00e      	b.n	8002cf0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d009      	beq.n	8002cf0 <prvDeleteTCB+0x54>
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e7fe      	b.n	8002cee <prvDeleteTCB+0x52>
	}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <prvResetNextTaskUnblockTime+0x44>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <prvResetNextTaskUnblockTime+0x14>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <prvResetNextTaskUnblockTime+0x16>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <prvResetNextTaskUnblockTime+0x48>)
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002d1a:	e008      	b.n	8002d2e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <prvResetNextTaskUnblockTime+0x44>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <prvResetNextTaskUnblockTime+0x48>)
 8002d2c:	6013      	str	r3, [r2, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000324 	.word	0x20000324
 8002d40:	2000038c 	.word	0x2000038c

08002d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3b04      	subs	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b04      	subs	r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 0201 	bic.w	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b04      	subs	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d74:	4a0c      	ldr	r2, [pc, #48]	; (8002da8 <pxPortInitialiseStack+0x64>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3b14      	subs	r3, #20
 8002d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3b04      	subs	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f06f 0202 	mvn.w	r2, #2
 8002d92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b20      	subs	r3, #32
 8002d98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	08002dad 	.word	0x08002dad

08002dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <prvTaskExitError+0x50>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d009      	beq.n	8002dd4 <prvTaskExitError+0x28>
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e7fe      	b.n	8002dd2 <prvTaskExitError+0x26>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002de6:	bf00      	nop
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0fc      	beq.n	8002de8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	2000000c 	.word	0x2000000c

08002e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <pxCurrentTCBConst2>)
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	6808      	ldr	r0, [r1, #0]
 8002e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e0a:	f380 8809 	msr	PSP, r0
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f04f 0000 	mov.w	r0, #0
 8002e16:	f380 8811 	msr	BASEPRI, r0
 8002e1a:	4770      	bx	lr
 8002e1c:	f3af 8000 	nop.w

08002e20 <pxCurrentTCBConst2>:
 8002e20:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop

08002e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e28:	4808      	ldr	r0, [pc, #32]	; (8002e4c <prvPortStartFirstTask+0x24>)
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	6800      	ldr	r0, [r0, #0]
 8002e2e:	f380 8808 	msr	MSP, r0
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8814 	msr	CONTROL, r0
 8002e3a:	b662      	cpsie	i
 8002e3c:	b661      	cpsie	f
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	df00      	svc	0
 8002e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e4a:	bf00      	nop
 8002e4c:	e000ed08 	.word	0xe000ed08

08002e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <xPortStartScheduler+0x118>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a44      	ldr	r2, [pc, #272]	; (8002f6c <xPortStartScheduler+0x11c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d109      	bne.n	8002e74 <xPortStartScheduler+0x24>
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e7fe      	b.n	8002e72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e74:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <xPortStartScheduler+0x118>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <xPortStartScheduler+0x120>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d109      	bne.n	8002e92 <xPortStartScheduler+0x42>
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e7fe      	b.n	8002e90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e92:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <xPortStartScheduler+0x124>)
 8002e94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	22ff      	movs	r2, #255	; 0xff
 8002ea2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <xPortStartScheduler+0x128>)
 8002eb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002ebc:	2207      	movs	r2, #7
 8002ebe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ec0:	e009      	b.n	8002ed6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002eca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d0ef      	beq.n	8002ec2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d009      	beq.n	8002f02 <xPortStartScheduler+0xb2>
 8002eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	e7fe      	b.n	8002f00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002f0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f14:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <xPortStartScheduler+0x12c>)
 8002f16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <xPortStartScheduler+0x130>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <xPortStartScheduler+0x130>)
 8002f26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <xPortStartScheduler+0x130>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <xPortStartScheduler+0x130>)
 8002f32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f38:	f000 f8de 	bl	80030f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <xPortStartScheduler+0x134>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f42:	f000 f8fd 	bl	8003140 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <xPortStartScheduler+0x138>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <xPortStartScheduler+0x138>)
 8002f4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f52:	f7ff ff69 	bl	8002e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f56:	f7ff fdb5 	bl	8002ac4 <vTaskSwitchContext>
	prvTaskExitError();
 8002f5a:	f7ff ff27 	bl	8002dac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	e000ed00 	.word	0xe000ed00
 8002f6c:	410fc271 	.word	0x410fc271
 8002f70:	410fc270 	.word	0x410fc270
 8002f74:	e000e400 	.word	0xe000e400
 8002f78:	20000398 	.word	0x20000398
 8002f7c:	2000039c 	.word	0x2000039c
 8002f80:	e000ed20 	.word	0xe000ed20
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	e000ef34 	.word	0xe000ef34

08002f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <vPortEnterCritical+0x54>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <vPortEnterCritical+0x54>)
 8002fac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <vPortEnterCritical+0x54>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d10e      	bne.n	8002fd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <vPortEnterCritical+0x58>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <vPortEnterCritical+0x48>
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	e7fe      	b.n	8002fd2 <vPortEnterCritical+0x46>
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <vPortExitCritical+0x4c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <vPortExitCritical+0x22>
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	e7fe      	b.n	8003008 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <vPortExitCritical+0x4c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a08      	ldr	r2, [pc, #32]	; (8003034 <vPortExitCritical+0x4c>)
 8003012:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003014:	4b07      	ldr	r3, [pc, #28]	; (8003034 <vPortExitCritical+0x4c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <vPortExitCritical+0x3e>
 800301c:	2300      	movs	r3, #0
 800301e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	2000000c 	.word	0x2000000c
	...

08003040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003040:	f3ef 8009 	mrs	r0, PSP
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <pxCurrentTCBConst>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f01e 0f10 	tst.w	lr, #16
 8003050:	bf08      	it	eq
 8003052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305a:	6010      	str	r0, [r2, #0]
 800305c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003064:	f380 8811 	msr	BASEPRI, r0
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f7ff fd28 	bl	8002ac4 <vTaskSwitchContext>
 8003074:	f04f 0000 	mov.w	r0, #0
 8003078:	f380 8811 	msr	BASEPRI, r0
 800307c:	bc09      	pop	{r0, r3}
 800307e:	6819      	ldr	r1, [r3, #0]
 8003080:	6808      	ldr	r0, [r1, #0]
 8003082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003086:	f01e 0f10 	tst.w	lr, #16
 800308a:	bf08      	it	eq
 800308c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003090:	f380 8809 	msr	PSP, r0
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	f3af 8000 	nop.w

080030a0 <pxCurrentTCBConst>:
 80030a0:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop

080030a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80030c0:	f001 fb48 	bl	8004754 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030c4:	f7ff fc60 	bl	8002988 <xTaskIncrementTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80030ce:	f001 fb9f 	bl	8004810 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <xPortSysTickHandler+0x4c>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e001      	b.n	80030e0 <xPortSysTickHandler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80030dc:	f001 fb7c 	bl	80047d8 <SEGGER_SYSVIEW_RecordExitISR>
 80030e0:	2300      	movs	r3, #0
 80030e2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <vPortSetupTimerInterrupt+0x34>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <vPortSetupTimerInterrupt+0x38>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <vPortSetupTimerInterrupt+0x3c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <vPortSetupTimerInterrupt+0x40>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	4a09      	ldr	r2, [pc, #36]	; (800313c <vPortSetupTimerInterrupt+0x44>)
 8003116:	3b01      	subs	r3, #1
 8003118:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <vPortSetupTimerInterrupt+0x34>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010
 8003130:	e000e018 	.word	0xe000e018
 8003134:	20000000 	.word	0x20000000
 8003138:	10624dd3 	.word	0x10624dd3
 800313c:	e000e014 	.word	0xe000e014

08003140 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003140:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003150 <vPortEnableVFP+0x10>
 8003144:	6801      	ldr	r1, [r0, #0]
 8003146:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800314a:	6001      	str	r1, [r0, #0]
 800314c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800314e:	bf00      	nop
 8003150:	e000ed88 	.word	0xe000ed88

08003154 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 800315a:	f000 f839 	bl	80031d0 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800315e:	f3ef 8305 	mrs	r3, IPSR
 8003162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	d913      	bls.n	8003192 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <vPortValidateInterruptPriority+0x6c>)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003174:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <vPortValidateInterruptPriority+0x70>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	7afa      	ldrb	r2, [r7, #11]
 800317a:	429a      	cmp	r2, r3
 800317c:	d209      	bcs.n	8003192 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	e7fe      	b.n	8003190 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <vPortValidateInterruptPriority+0x74>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <vPortValidateInterruptPriority+0x78>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d909      	bls.n	80031b6 <vPortValidateInterruptPriority+0x62>
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	e7fe      	b.n	80031b4 <vPortValidateInterruptPriority+0x60>
	}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e3f0 	.word	0xe000e3f0
 80031c4:	20000398 	.word	0x20000398
 80031c8:	e000ed0c 	.word	0xe000ed0c
 80031cc:	2000039c 	.word	0x2000039c

080031d0 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <vSetVarulMaxPRIGROUPValue+0x84>)
 80031d8:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 80031ea:	2207      	movs	r2, #7
 80031ec:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031ee:	e009      	b.n	8003204 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 80031f8:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d0ef      	beq.n	80031f0 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1c3 0307 	rsb	r3, r3, #7
 8003218:	2b04      	cmp	r3, #4
 800321a:	d009      	beq.n	8003230 <vSetVarulMaxPRIGROUPValue+0x60>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	e7fe      	b.n	800322e <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003238:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <vSetVarulMaxPRIGROUPValue+0x88>)
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e400 	.word	0xe000e400
 8003258:	2000039c 	.word	0x2000039c

0800325c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003268:	f7ff fadc 	bl	8002824 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <pvPortMalloc+0x178>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003274:	f000 f910 	bl	8003498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <pvPortMalloc+0x17c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 808c 	bne.w	800339e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800328c:	2208      	movs	r2, #8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	2b00      	cmp	r3, #0
 800329c:	d013      	beq.n	80032c6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f023 0307 	bic.w	r3, r3, #7
 80032a4:	3308      	adds	r3, #8
 80032a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <pvPortMalloc+0x6a>
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e7fe      	b.n	80032c4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d068      	beq.n	800339e <pvPortMalloc+0x142>
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <pvPortMalloc+0x180>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d863      	bhi.n	800339e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <pvPortMalloc+0x184>)
 80032d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <pvPortMalloc+0x184>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032e0:	e004      	b.n	80032ec <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d903      	bls.n	80032fe <pvPortMalloc+0xa2>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f1      	bne.n	80032e2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <pvPortMalloc+0x178>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	429a      	cmp	r2, r3
 8003306:	d04a      	beq.n	800339e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2208      	movs	r2, #8
 800330e:	4413      	add	r3, r2
 8003310:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad2      	subs	r2, r2, r3
 8003322:	2308      	movs	r3, #8
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	429a      	cmp	r2, r3
 8003328:	d91e      	bls.n	8003368 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4413      	add	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <pvPortMalloc+0xf4>
 800333c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	e7fe      	b.n	800334e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003362:	69b8      	ldr	r0, [r7, #24]
 8003364:	f000 f8fa 	bl	800355c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <pvPortMalloc+0x180>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	4a1a      	ldr	r2, [pc, #104]	; (80033dc <pvPortMalloc+0x180>)
 8003374:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <pvPortMalloc+0x180>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <pvPortMalloc+0x188>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d203      	bcs.n	800338a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <pvPortMalloc+0x180>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <pvPortMalloc+0x188>)
 8003388:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <pvPortMalloc+0x17c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	431a      	orrs	r2, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800339e:	f7ff fa4f 	bl	8002840 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80033a8:	f7fe ff9f 	bl	80022ea <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <pvPortMalloc+0x16e>
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e7fe      	b.n	80033c8 <pvPortMalloc+0x16c>
	return pvReturn;
 80033ca:	69fb      	ldr	r3, [r7, #28]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20012fa8 	.word	0x20012fa8
 80033d8:	20012fb4 	.word	0x20012fb4
 80033dc:	20012fac 	.word	0x20012fac
 80033e0:	20012fa0 	.word	0x20012fa0
 80033e4:	20012fb0 	.word	0x20012fb0

080033e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d046      	beq.n	8003488 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033fa:	2308      	movs	r3, #8
 80033fc:	425b      	negs	r3, r3
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4413      	add	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4b20      	ldr	r3, [pc, #128]	; (8003490 <vPortFree+0xa8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <vPortFree+0x42>
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e7fe      	b.n	8003428 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <vPortFree+0x5e>
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	e7fe      	b.n	8003444 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <vPortFree+0xa8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d019      	beq.n	8003488 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d115      	bne.n	8003488 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <vPortFree+0xa8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800346c:	f7ff f9da 	bl	8002824 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	4b07      	ldr	r3, [pc, #28]	; (8003494 <vPortFree+0xac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4413      	add	r3, r2
 800347a:	4a06      	ldr	r2, [pc, #24]	; (8003494 <vPortFree+0xac>)
 800347c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800347e:	6938      	ldr	r0, [r7, #16]
 8003480:	f000 f86c 	bl	800355c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003484:	f7ff f9dc 	bl	8002840 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003488:	bf00      	nop
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20012fb4 	.word	0x20012fb4
 8003494:	20012fac 	.word	0x20012fac

08003498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800349e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80034a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <prvHeapInit+0xac>)
 80034a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3307      	adds	r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <prvHeapInit+0xac>)
 80034c8:	4413      	add	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <prvHeapInit+0xb0>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <prvHeapInit+0xb0>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034e4:	2208      	movs	r2, #8
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0307 	bic.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <prvHeapInit+0xb4>)
 80034f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <prvHeapInit+0xb4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <prvHeapInit+0xb4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <prvHeapInit+0xb4>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <prvHeapInit+0xb8>)
 8003526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a09      	ldr	r2, [pc, #36]	; (8003554 <prvHeapInit+0xbc>)
 800352e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <prvHeapInit+0xc0>)
 8003532:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	200003a0 	.word	0x200003a0
 8003548:	20012fa0 	.word	0x20012fa0
 800354c:	20012fa8 	.word	0x20012fa8
 8003550:	20012fb0 	.word	0x20012fb0
 8003554:	20012fac 	.word	0x20012fac
 8003558:	20012fb4 	.word	0x20012fb4

0800355c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <prvInsertBlockIntoFreeList+0xac>)
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e002      	b.n	8003570 <prvInsertBlockIntoFreeList+0x14>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	429a      	cmp	r2, r3
 8003578:	d8f7      	bhi.n	800356a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d108      	bne.n	800359e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	441a      	add	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	441a      	add	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d118      	bne.n	80035e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <prvInsertBlockIntoFreeList+0xb0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d00d      	beq.n	80035da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	441a      	add	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e008      	b.n	80035ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035da:	4b0c      	ldr	r3, [pc, #48]	; (800360c <prvInsertBlockIntoFreeList+0xb0>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e003      	b.n	80035ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d002      	beq.n	80035fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20012fa0 	.word	0x20012fa0
 800360c:	20012fa8 	.word	0x20012fa8

08003610 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003614:	4803      	ldr	r0, [pc, #12]	; (8003624 <_cbSendSystemDesc+0x14>)
 8003616:	f001 f849 	bl	80046ac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800361a:	4803      	ldr	r0, [pc, #12]	; (8003628 <_cbSendSystemDesc+0x18>)
 800361c:	f001 f846 	bl	80046ac <SEGGER_SYSVIEW_SendSysDesc>
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}
 8003624:	08004e6c 	.word	0x08004e6c
 8003628:	08004ea0 	.word	0x08004ea0

0800362c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <SEGGER_SYSVIEW_Conf+0x20>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SEGGER_SYSVIEW_Conf+0x20>)
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <SEGGER_SYSVIEW_Conf+0x24>)
 800363a:	4a06      	ldr	r2, [pc, #24]	; (8003654 <SEGGER_SYSVIEW_Conf+0x28>)
 800363c:	f000 fcc2 	bl	8003fc4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003640:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003644:	f000 fcfc 	bl	8004040 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000000 	.word	0x20000000
 8003650:	08003611 	.word	0x08003611
 8003654:	08004f40 	.word	0x08004f40

08003658 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	e034      	b.n	80036ce <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003664:	491e      	ldr	r1, [pc, #120]	; (80036e0 <_cbSendTaskList+0x88>)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <_cbSendTaskList+0x88>)
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3304      	adds	r3, #4
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	4916      	ldr	r1, [pc, #88]	; (80036e0 <_cbSendTaskList+0x88>)
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3308      	adds	r3, #8
 8003696:	681d      	ldr	r5, [r3, #0]
 8003698:	4911      	ldr	r1, [pc, #68]	; (80036e0 <_cbSendTaskList+0x88>)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	330c      	adds	r3, #12
 80036a8:	681e      	ldr	r6, [r3, #0]
 80036aa:	490d      	ldr	r1, [pc, #52]	; (80036e0 <_cbSendTaskList+0x88>)
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3310      	adds	r3, #16
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4633      	mov	r3, r6
 80036c0:	462a      	mov	r2, r5
 80036c2:	4621      	mov	r1, r4
 80036c4:	f000 f8ba 	bl	800383c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3301      	adds	r3, #1
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <_cbSendTaskList+0x8c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d3c5      	bcc.n	8003664 <_cbSendTaskList+0xc>
  }
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e0:	20012fb8 	.word	0x20012fb8
 80036e4:	20013058 	.word	0x20013058

080036e8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80036ee:	f7ff f939 	bl	8002964 <xTaskGetTickCountFromISR>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 80036fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003700:	184b      	adds	r3, r1, r1
 8003702:	eb42 0402 	adc.w	r4, r2, r2
 8003706:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= 1000;
 800370a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800370e:	462b      	mov	r3, r5
 8003710:	4634      	mov	r4, r6
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	0162      	lsls	r2, r4, #5
 800371c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003720:	0159      	lsls	r1, r3, #5
 8003722:	460b      	mov	r3, r1
 8003724:	4614      	mov	r4, r2
 8003726:	1b5b      	subs	r3, r3, r5
 8003728:	eb64 0406 	sbc.w	r4, r4, r6
 800372c:	f04f 0100 	mov.w	r1, #0
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	00a2      	lsls	r2, r4, #2
 8003736:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800373a:	0099      	lsls	r1, r3, #2
 800373c:	460b      	mov	r3, r1
 800373e:	4614      	mov	r4, r2
 8003740:	195b      	adds	r3, r3, r5
 8003742:	eb44 0406 	adc.w	r4, r4, r6
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	00e2      	lsls	r2, r4, #3
 8003750:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003754:	00d9      	lsls	r1, r3, #3
 8003756:	460b      	mov	r3, r1
 8003758:	4614      	mov	r4, r2
 800375a:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800375e:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003762:	4618      	mov	r0, r3
 8003764:	4621      	mov	r1, r4
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800376c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800377a:	2205      	movs	r2, #5
 800377c:	492b      	ldr	r1, [pc, #172]	; (800382c <SYSVIEW_AddTask+0xc0>)
 800377e:	68b8      	ldr	r0, [r7, #8]
 8003780:	f001 fb02 	bl	8004d88 <memcmp>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04b      	beq.n	8003822 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b07      	cmp	r3, #7
 8003790:	d903      	bls.n	800379a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003792:	4828      	ldr	r0, [pc, #160]	; (8003834 <SYSVIEW_AddTask+0xc8>)
 8003794:	f001 fa78 	bl	8004c88 <SEGGER_SYSVIEW_Warn>
    return;
 8003798:	e044      	b.n	8003824 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800379a:	4b25      	ldr	r3, [pc, #148]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4926      	ldr	r1, [pc, #152]	; (8003838 <SYSVIEW_AddTask+0xcc>)
 80037a0:	4613      	mov	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4921      	ldr	r1, [pc, #132]	; (8003838 <SYSVIEW_AddTask+0xcc>)
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3304      	adds	r3, #4
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	491b      	ldr	r1, [pc, #108]	; (8003838 <SYSVIEW_AddTask+0xcc>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	3308      	adds	r3, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4916      	ldr	r1, [pc, #88]	; (8003838 <SYSVIEW_AddTask+0xcc>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	330c      	adds	r3, #12
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4910      	ldr	r1, [pc, #64]	; (8003838 <SYSVIEW_AddTask+0xcc>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3310      	adds	r3, #16
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3301      	adds	r3, #1
 800380c:	4a08      	ldr	r2, [pc, #32]	; (8003830 <SYSVIEW_AddTask+0xc4>)
 800380e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f80e 	bl	800383c <SYSVIEW_SendTaskInfo>
 8003820:	e000      	b.n	8003824 <SYSVIEW_AddTask+0xb8>
    return;
 8003822:	bf00      	nop

}
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	08004eb0 	.word	0x08004eb0
 8003830:	20013058 	.word	0x20013058
 8003834:	08004eb8 	.word	0x08004eb8
 8003838:	20012fb8 	.word	0x20012fb8

0800383c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800384a:	f107 0314 	add.w	r3, r7, #20
 800384e:	2214      	movs	r2, #20
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 fab2 	bl	8004dbc <memset>
  TaskInfo.TaskID     = TaskID;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fe21 	bl	80044b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003876:	bf00      	nop
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <_DoInit+0x8c>)
 8003888:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2203      	movs	r2, #3
 8003894:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <_DoInit+0x90>)
 800389a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <_DoInit+0x94>)
 80038a0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038a8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <_DoInit+0x90>)
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_DoInit+0x98>)
 80038c6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2210      	movs	r2, #16
 80038cc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3307      	adds	r3, #7
 80038e4:	4a0d      	ldr	r2, [pc, #52]	; (800391c <_DoInit+0x9c>)
 80038e6:	6810      	ldr	r0, [r2, #0]
 80038e8:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <_DoInit+0xa0>)
 80038ee:	6810      	ldr	r0, [r2, #0]
 80038f0:	6018      	str	r0, [r3, #0]
 80038f2:	8891      	ldrh	r1, [r2, #4]
 80038f4:	7992      	ldrb	r2, [r2, #6]
 80038f6:	8099      	strh	r1, [r3, #4]
 80038f8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	719a      	strb	r2, [r3, #6]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	200155cc 	.word	0x200155cc
 8003910:	08004f08 	.word	0x08004f08
 8003914:	2001305c 	.word	0x2001305c
 8003918:	2001345c 	.word	0x2001345c
 800391c:	08004f14 	.word	0x08004f14
 8003920:	08004f18 	.word	0x08004f18

08003924 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003930:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <SEGGER_RTT_ReadNoLock+0x100>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <SEGGER_RTT_ReadNoLock+0x18>
 8003938:	f7ff ffa2 	bl	8003880 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	3360      	adds	r3, #96	; 0x60
 8003948:	4a36      	ldr	r2, [pc, #216]	; (8003a24 <SEGGER_RTT_ReadNoLock+0x100>)
 800394a:	4413      	add	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	429a      	cmp	r2, r3
 8003968:	d92a      	bls.n	80039c0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4293      	cmp	r3, r2
 800397a:	bf28      	it	cs
 800397c:	4613      	movcs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	4413      	add	r3, r2
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4619      	mov	r1, r3
 800398c:	69f8      	ldr	r0, [r7, #28]
 800398e:	f001 fa0a 	bl	8004da6 <memcpy>
    NumBytesRead += NumBytesRem;
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d101      	bne.n	80039c0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	bf28      	it	cs
 80039d0:	4613      	movcs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	4413      	add	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4619      	mov	r1, r3
 80039e6:	69f8      	ldr	r0, [r7, #28]
 80039e8:	f001 f9dd 	bl	8004da6 <memcpy>
    NumBytesRead += NumBytesRem;
 80039ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200155cc 	.word	0x200155cc

08003a28 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003a36:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003a3e:	f7ff ff1f 	bl	8003880 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003a42:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d24c      	bcs.n	8003ae8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a52:	f04f 0120 	mov.w	r1, #32
 8003a56:	f381 8811 	msr	BASEPRI, r1
 8003a5a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d032      	beq.n	8003ac8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003a62:	4925      	ldr	r1, [pc, #148]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003a76:	4920      	ldr	r1, [pc, #128]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	3304      	adds	r3, #4
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a8c:	491a      	ldr	r1, [pc, #104]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	440b      	add	r3, r1
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003aa0:	4915      	ldr	r1, [pc, #84]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	440b      	add	r3, r1
 8003aae:	3328      	adds	r3, #40	; 0x28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003ab4:	4910      	ldr	r1, [pc, #64]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003ac8:	490b      	ldr	r1, [pc, #44]	; (8003af8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	332c      	adds	r3, #44	; 0x2c
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e002      	b.n	8003aee <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003aee:	697b      	ldr	r3, [r7, #20]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200155cc 	.word	0x200155cc

08003afc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003b12:	f7ff feb5 	bl	8003880 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d24b      	bcs.n	8003bba <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003b22:	f3ef 8311 	mrs	r3, BASEPRI
 8003b26:	f04f 0120 	mov.w	r1, #32
 8003b2a:	f381 8811 	msr	BASEPRI, r1
 8003b2e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d031      	beq.n	8003b9a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003b36:	4925      	ldr	r1, [pc, #148]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	440b      	add	r3, r1
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003b4a:	4920      	ldr	r1, [pc, #128]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	440b      	add	r3, r1
 8003b58:	3364      	adds	r3, #100	; 0x64
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003b5e:	491b      	ldr	r1, [pc, #108]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3368      	adds	r3, #104	; 0x68
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003b72:	4916      	ldr	r1, [pc, #88]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	440b      	add	r3, r1
 8003b80:	3370      	adds	r3, #112	; 0x70
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003b86:	4911      	ldr	r1, [pc, #68]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	336c      	adds	r3, #108	; 0x6c
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003b9a:	490c      	ldr	r1, [pc, #48]	; (8003bcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3374      	adds	r3, #116	; 0x74
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	e002      	b.n	8003bc0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200155cc 	.word	0x200155cc

08003bd0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003be0:	e002      	b.n	8003be8 <_EncodeStr+0x18>
    Len++;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f6      	bne.n	8003be2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d901      	bls.n	8003c00 <_EncodeStr+0x30>
    Len = Limit;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2bfe      	cmp	r3, #254	; 0xfe
 8003c04:	d806      	bhi.n	8003c14 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	60fa      	str	r2, [r7, #12]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e011      	b.n	8003c38 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	60fa      	str	r2, [r7, #12]
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	60fa      	str	r2, [r7, #12]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	0a19      	lsrs	r1, r3, #8
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	60fa      	str	r2, [r7, #12]
 8003c34:	b2ca      	uxtb	r2, r1
 8003c36:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c3c:	e00a      	b.n	8003c54 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	1c53      	adds	r3, r2, #1
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	60f9      	str	r1, [r7, #12]
 8003c4a:	7812      	ldrb	r2, [r2, #0]
 8003c4c:	701a      	strb	r2, [r3, #0]
    n++;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d3f0      	bcc.n	8003c3e <_EncodeStr+0x6e>
  }
  return pPayload;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3304      	adds	r3, #4
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c88:	1cfb      	adds	r3, r7, #3
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f7ff fe48 	bl	8003924 <SEGGER_RTT_ReadNoLock>
 8003c94:	4603      	mov	r3, r0
 8003c96:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	dd44      	ble.n	8003d28 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d01a      	beq.n	8003cda <_HandleIncomingPacket+0x58>
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	dc06      	bgt.n	8003cb6 <_HandleIncomingPacket+0x34>
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d010      	beq.n	8003cce <_HandleIncomingPacket+0x4c>
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	dc11      	bgt.n	8003cd4 <_HandleIncomingPacket+0x52>
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d009      	beq.n	8003cc8 <_HandleIncomingPacket+0x46>
 8003cb4:	e02d      	b.n	8003d12 <_HandleIncomingPacket+0x90>
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d015      	beq.n	8003ce6 <_HandleIncomingPacket+0x64>
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	db10      	blt.n	8003ce0 <_HandleIncomingPacket+0x5e>
 8003cbe:	2b07      	cmp	r3, #7
 8003cc0:	d014      	beq.n	8003cec <_HandleIncomingPacket+0x6a>
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d015      	beq.n	8003cf2 <_HandleIncomingPacket+0x70>
 8003cc6:	e024      	b.n	8003d12 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003cc8:	f000 fa7e 	bl	80041c8 <SEGGER_SYSVIEW_Start>
      break;
 8003ccc:	e031      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003cce:	f000 fb33 	bl	8004338 <SEGGER_SYSVIEW_Stop>
      break;
 8003cd2:	e02e      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003cd4:	f000 fd0e 	bl	80046f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003cd8:	e02b      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003cda:	f000 fcd3 	bl	8004684 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003cde:	e028      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ce0:	f000 fb50 	bl	8004384 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ce4:	e025      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ce6:	f000 ff35 	bl	8004b54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003cea:	e022      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003cec:	f000 ff14 	bl	8004b18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003cf0:	e01f      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cf2:	1cfb      	adds	r3, r7, #3
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f7ff fe13 	bl	8003924 <SEGGER_RTT_ReadNoLock>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	dd11      	ble.n	8003d2c <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fe84 	bl	8004a18 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d10:	e00c      	b.n	8003d2c <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	b25b      	sxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da0a      	bge.n	8003d30 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d1a:	1cfb      	adds	r3, r7, #3
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4619      	mov	r1, r3
 8003d20:	2001      	movs	r0, #1
 8003d22:	f7ff fdff 	bl	8003924 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d26:	e003      	b.n	8003d30 <_HandleIncomingPacket+0xae>
    }
  }
 8003d28:	bf00      	nop
 8003d2a:	e002      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
      break;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <_HandleIncomingPacket+0xb0>
      break;
 8003d30:	bf00      	nop
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003d42:	2301      	movs	r3, #1
 8003d44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003d46:	1d3b      	adds	r3, r7, #4
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d56:	e00b      	b.n	8003d70 <_TrySendOverflowPacket+0x34>
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	09db      	lsrs	r3, r3, #7
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	2b7f      	cmp	r3, #127	; 0x7f
 8003d74:	d8f0      	bhi.n	8003d58 <_TrySendOverflowPacket+0x1c>
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <_TrySendOverflowPacket+0xdc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d8c:	4b21      	ldr	r3, [pc, #132]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	e00b      	b.n	8003db8 <_TrySendOverflowPacket+0x7c>
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1c59      	adds	r1, r3, #1
 8003da8:	6279      	str	r1, [r7, #36]	; 0x24
 8003daa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	09db      	lsrs	r3, r3, #7
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b7f      	cmp	r3, #127	; 0x7f
 8003dbc:	d8f0      	bhi.n	8003da0 <_TrySendOverflowPacket+0x64>
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f7fc fa08 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003de0:	4603      	mov	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e004      	b.n	8003e08 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a03      	ldr	r2, [pc, #12]	; (8003e14 <_TrySendOverflowPacket+0xd8>)
 8003e06:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3730      	adds	r7, #48	; 0x30
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20015474 	.word	0x20015474
 8003e18:	e0001004 	.word	0xe0001004

08003e1c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e28:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <_SendPacket+0x19c>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d010      	beq.n	8003e52 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e30:	4b61      	ldr	r3, [pc, #388]	; (8003fb8 <_SendPacket+0x19c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a1 	beq.w	8003f7c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <_SendPacket+0x19c>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d109      	bne.n	8003e56 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003e42:	f7ff ff7b 	bl	8003d3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003e46:	4b5c      	ldr	r3, [pc, #368]	; (8003fb8 <_SendPacket+0x19c>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	f040 8098 	bne.w	8003f80 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8003e50:	e001      	b.n	8003e56 <_SendPacket+0x3a>
    goto Send;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <_SendPacket+0x3c>
Send:
 8003e56:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b1f      	cmp	r3, #31
 8003e5c:	d809      	bhi.n	8003e72 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <_SendPacket+0x19c>)
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f040 8089 	bne.w	8003f84 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b17      	cmp	r3, #23
 8003e76:	d807      	bhi.n	8003e88 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	e03d      	b.n	8003f04 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b7f      	cmp	r3, #127	; 0x7f
 8003e94:	d912      	bls.n	8003ebc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	09da      	lsrs	r2, r3, #7
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	3a01      	subs	r2, #1
 8003eae:	60fa      	str	r2, [r7, #12]
 8003eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e006      	b.n	8003eca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ece:	d912      	bls.n	8003ef6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	09da      	lsrs	r2, r3, #7
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	60fa      	str	r2, [r7, #12]
 8003eea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	701a      	strb	r2, [r3, #0]
 8003ef4:	e006      	b.n	8003f04 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <_SendPacket+0x1a0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <_SendPacket+0x19c>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	e00b      	b.n	8003f36 <_SendPacket+0x11a>
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	1c59      	adds	r1, r3, #1
 8003f26:	6279      	str	r1, [r7, #36]	; 0x24
 8003f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	09db      	lsrs	r3, r3, #7
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2b7f      	cmp	r3, #127	; 0x7f
 8003f3a:	d8f0      	bhi.n	8003f1e <_SendPacket+0x102>
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	627a      	str	r2, [r7, #36]	; 0x24
 8003f42:	6a3a      	ldr	r2, [r7, #32]
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	2001      	movs	r0, #1
 8003f58:	f7fc f94a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <_SendPacket+0x19c>)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	60d3      	str	r3, [r2, #12]
 8003f6c:	e00b      	b.n	8003f86 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <_SendPacket+0x19c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <_SendPacket+0x19c>)
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e004      	b.n	8003f86 <_SendPacket+0x16a>
    goto SendDone;
 8003f7c:	bf00      	nop
 8003f7e:	e002      	b.n	8003f86 <_SendPacket+0x16a>
      goto SendDone;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <_SendPacket+0x16a>
      goto SendDone;
 8003f84:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003f86:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <_SendPacket+0x1a4>)
 8003f88:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <_SendPacket+0x1a4>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d00b      	beq.n	8003fae <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <_SendPacket+0x19c>)
 8003f98:	789b      	ldrb	r3, [r3, #2]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <_SendPacket+0x19c>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003fa4:	f7ff fe6d 	bl	8003c82 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <_SendPacket+0x19c>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003fae:	bf00      	nop
 8003fb0:	3728      	adds	r7, #40	; 0x28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20015474 	.word	0x20015474
 8003fbc:	e0001004 	.word	0xe0001004
 8003fc0:	200155cc 	.word	0x200155cc

08003fc4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fda:	4a14      	ldr	r2, [pc, #80]	; (800402c <SEGGER_SYSVIEW_Init+0x68>)
 8003fdc:	4914      	ldr	r1, [pc, #80]	; (8004030 <SEGGER_SYSVIEW_Init+0x6c>)
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7ff fd22 	bl	8003a28 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2308      	movs	r3, #8
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <SEGGER_SYSVIEW_Init+0x70>)
 8003fec:	4910      	ldr	r1, [pc, #64]	; (8004030 <SEGGER_SYSVIEW_Init+0x6c>)
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f7ff fd84 	bl	8003afc <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 8003ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ffa:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <SEGGER_SYSVIEW_Init+0x78>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 8004002:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <SEGGER_SYSVIEW_Init+0x74>)
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2001346c 	.word	0x2001346c
 8004030:	08004f20 	.word	0x08004f20
 8004034:	2001546c 	.word	0x2001546c
 8004038:	20015474 	.word	0x20015474
 800403c:	e0001004 	.word	0xe0001004

08004040 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6113      	str	r3, [r2, #16]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20015474 	.word	0x20015474

08004060 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004068:	f3ef 8311 	mrs	r3, BASEPRI
 800406c:	f04f 0120 	mov.w	r1, #32
 8004070:	f381 8811 	msr	BASEPRI, r1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4808      	ldr	r0, [pc, #32]	; (8004098 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004078:	f7ff fdf7 	bl	8003c6a <_PreparePacket>
 800407c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	68b8      	ldr	r0, [r7, #8]
 8004084:	f7ff feca 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200154a4 	.word	0x200154a4

0800409c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b088      	sub	sp, #32
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040a6:	f3ef 8311 	mrs	r3, BASEPRI
 80040aa:	f04f 0120 	mov.w	r1, #32
 80040ae:	f381 8811 	msr	BASEPRI, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	4816      	ldr	r0, [pc, #88]	; (8004110 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80040b6:	f7ff fdd8 	bl	8003c6a <_PreparePacket>
 80040ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	61fb      	str	r3, [r7, #28]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	e00b      	b.n	80040e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	61f9      	str	r1, [r7, #28]
 80040d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	09db      	lsrs	r3, r3, #7
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b7f      	cmp	r3, #127	; 0x7f
 80040e6:	d8f0      	bhi.n	80040ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	61fa      	str	r2, [r7, #28]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	6938      	ldr	r0, [r7, #16]
 80040fe:	f7ff fe8d 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f383 8811 	msr	BASEPRI, r3
}
 8004108:	bf00      	nop
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200154a4 	.word	0x200154a4

08004114 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004120:	f3ef 8311 	mrs	r3, BASEPRI
 8004124:	f04f 0120 	mov.w	r1, #32
 8004128:	f381 8811 	msr	BASEPRI, r1
 800412c:	61fb      	str	r3, [r7, #28]
 800412e:	4825      	ldr	r0, [pc, #148]	; (80041c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004130:	f7ff fd9b 	bl	8003c6a <_PreparePacket>
 8004134:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
 8004142:	e00b      	b.n	800415c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800414e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b7f      	cmp	r3, #127	; 0x7f
 8004160:	d8f0      	bhi.n	8004144 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	e00b      	b.n	8004194 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	6279      	str	r1, [r7, #36]	; 0x24
 8004186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	09db      	lsrs	r3, r3, #7
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b7f      	cmp	r3, #127	; 0x7f
 8004198:	d8f0      	bhi.n	800417c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	627a      	str	r2, [r7, #36]	; 0x24
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6979      	ldr	r1, [r7, #20]
 80041ae:	69b8      	ldr	r0, [r7, #24]
 80041b0:	f7ff fe34 	bl	8003e1c <_SendPacket>
  RECORD_END();
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f383 8811 	msr	BASEPRI, r3
}
 80041ba:	bf00      	nop
 80041bc:	3730      	adds	r7, #48	; 0x30
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200154a4 	.word	0x200154a4

080041c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80041ce:	4b57      	ldr	r3, [pc, #348]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80041d4:	f3ef 8311 	mrs	r3, BASEPRI
 80041d8:	f04f 0120 	mov.w	r1, #32
 80041dc:	f381 8811 	msr	BASEPRI, r1
 80041e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80041e2:	220a      	movs	r2, #10
 80041e4:	4952      	ldr	r1, [pc, #328]	; (8004330 <SEGGER_SYSVIEW_Start+0x168>)
 80041e6:	2001      	movs	r0, #1
 80041e8:	f7fc f802 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7ff ff34 	bl	8004060 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80041f8:	f3ef 8311 	mrs	r3, BASEPRI
 80041fc:	f04f 0120 	mov.w	r1, #32
 8004200:	f381 8811 	msr	BASEPRI, r1
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	484b      	ldr	r0, [pc, #300]	; (8004334 <SEGGER_SYSVIEW_Start+0x16c>)
 8004208:	f7ff fd2f 	bl	8003c6a <_PreparePacket>
 800420c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	4b45      	ldr	r3, [pc, #276]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
 800421c:	e00b      	b.n	8004236 <SEGGER_SYSVIEW_Start+0x6e>
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	b2da      	uxtb	r2, r3
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	09db      	lsrs	r3, r3, #7
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2b7f      	cmp	r3, #127	; 0x7f
 800423a:	d8f0      	bhi.n	800421e <SEGGER_SYSVIEW_Start+0x56>
 800423c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	4b36      	ldr	r3, [pc, #216]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	e00b      	b.n	8004270 <SEGGER_SYSVIEW_Start+0xa8>
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	6279      	str	r1, [r7, #36]	; 0x24
 8004262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	09db      	lsrs	r3, r3, #7
 800426e:	623b      	str	r3, [r7, #32]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b7f      	cmp	r3, #127	; 0x7f
 8004274:	d8f0      	bhi.n	8004258 <SEGGER_SYSVIEW_Start+0x90>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	627a      	str	r2, [r7, #36]	; 0x24
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	e00b      	b.n	80042aa <SEGGER_SYSVIEW_Start+0xe2>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	1c59      	adds	r1, r3, #1
 800429a:	61f9      	str	r1, [r7, #28]
 800429c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	09db      	lsrs	r3, r3, #7
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b7f      	cmp	r3, #127	; 0x7f
 80042ae:	d8f0      	bhi.n	8004292 <SEGGER_SYSVIEW_Start+0xca>
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	61fa      	str	r2, [r7, #28]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	2302      	movs	r3, #2
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	e00b      	b.n	80042e2 <SEGGER_SYSVIEW_Start+0x11a>
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	6179      	str	r1, [r7, #20]
 80042d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	09db      	lsrs	r3, r3, #7
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b7f      	cmp	r3, #127	; 0x7f
 80042e6:	d8f0      	bhi.n	80042ca <SEGGER_SYSVIEW_Start+0x102>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	617a      	str	r2, [r7, #20]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80042f8:	2218      	movs	r2, #24
 80042fa:	6839      	ldr	r1, [r7, #0]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff fd8d 	bl	8003e1c <_SendPacket>
      RECORD_END();
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <SEGGER_SYSVIEW_Start+0x164>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004316:	f000 f9ed 	bl	80046f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800431a:	f000 f9b3 	bl	8004684 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800431e:	f000 fc19 	bl	8004b54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004322:	bf00      	nop
 8004324:	3730      	adds	r7, #48	; 0x30
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20015474 	.word	0x20015474
 8004330:	08004f48 	.word	0x08004f48
 8004334:	200154a4 	.word	0x200154a4

08004338 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800433e:	f3ef 8311 	mrs	r3, BASEPRI
 8004342:	f04f 0120 	mov.w	r1, #32
 8004346:	f381 8811 	msr	BASEPRI, r1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	480b      	ldr	r0, [pc, #44]	; (800437c <SEGGER_SYSVIEW_Stop+0x44>)
 800434e:	f7ff fc8c 	bl	8003c6a <_PreparePacket>
 8004352:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <SEGGER_SYSVIEW_Stop+0x48>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800435c:	220b      	movs	r2, #11
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	6838      	ldr	r0, [r7, #0]
 8004362:	f7ff fd5b 	bl	8003e1c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <SEGGER_SYSVIEW_Stop+0x48>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f383 8811 	msr	BASEPRI, r3
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200154a4 	.word	0x200154a4
 8004380:	20015474 	.word	0x20015474

08004384 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b08c      	sub	sp, #48	; 0x30
 8004388:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800438a:	f3ef 8311 	mrs	r3, BASEPRI
 800438e:	f04f 0120 	mov.w	r1, #32
 8004392:	f381 8811 	msr	BASEPRI, r1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	4845      	ldr	r0, [pc, #276]	; (80044b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800439a:	f7ff fc66 	bl	8003c6a <_PreparePacket>
 800439e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a8:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	e00b      	b.n	80043c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b7f      	cmp	r3, #127	; 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	4b34      	ldr	r3, [pc, #208]	; (80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	e00b      	b.n	8004402 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	6279      	str	r1, [r7, #36]	; 0x24
 80043f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	09db      	lsrs	r3, r3, #7
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	2b7f      	cmp	r3, #127	; 0x7f
 8004406:	d8f0      	bhi.n	80043ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	627a      	str	r2, [r7, #36]	; 0x24
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	e00b      	b.n	800443c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	b2da      	uxtb	r2, r3
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	1c59      	adds	r1, r3, #1
 800442c:	61f9      	str	r1, [r7, #28]
 800442e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	09db      	lsrs	r3, r3, #7
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b7f      	cmp	r3, #127	; 0x7f
 8004440:	d8f0      	bhi.n	8004424 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	61fa      	str	r2, [r7, #28]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	2302      	movs	r3, #2
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e00b      	b.n	8004474 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	6179      	str	r1, [r7, #20]
 8004466:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	09db      	lsrs	r3, r3, #7
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b7f      	cmp	r3, #127	; 0x7f
 8004478:	d8f0      	bhi.n	800445c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	617a      	str	r2, [r7, #20]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800448a:	2218      	movs	r2, #24
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	68b8      	ldr	r0, [r7, #8]
 8004490:	f7ff fcc4 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	4798      	blx	r3
  }
}
 80044a8:	bf00      	nop
 80044aa:	3730      	adds	r7, #48	; 0x30
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	200154a4 	.word	0x200154a4
 80044b4:	20015474 	.word	0x20015474

080044b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b092      	sub	sp, #72	; 0x48
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80044c0:	f3ef 8311 	mrs	r3, BASEPRI
 80044c4:	f04f 0120 	mov.w	r1, #32
 80044c8:	f381 8811 	msr	BASEPRI, r1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	486b      	ldr	r0, [pc, #428]	; (800467c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80044d0:	f7ff fbcb 	bl	8003c6a <_PreparePacket>
 80044d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	647b      	str	r3, [r7, #68]	; 0x44
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b67      	ldr	r3, [pc, #412]	; (8004680 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	643b      	str	r3, [r7, #64]	; 0x40
 80044ec:	e00b      	b.n	8004506 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80044ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f4:	1c59      	adds	r1, r3, #1
 80044f6:	6479      	str	r1, [r7, #68]	; 0x44
 80044f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004502:	09db      	lsrs	r3, r3, #7
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	2b7f      	cmp	r3, #127	; 0x7f
 800450a:	d8f0      	bhi.n	80044ee <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	647a      	str	r2, [r7, #68]	; 0x44
 8004512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	63bb      	str	r3, [r7, #56]	; 0x38
 8004526:	e00b      	b.n	8004540 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	2b7f      	cmp	r3, #127	; 0x7f
 8004544:	d8f0      	bhi.n	8004528 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800454c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff fb36 	bl	8003bd0 <_EncodeStr>
 8004564:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004566:	2209      	movs	r2, #9
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	6938      	ldr	r0, [r7, #16]
 800456c:	f7ff fc56 	bl	8003e1c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b40      	ldr	r3, [pc, #256]	; (8004680 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
 8004586:	e00b      	b.n	80045a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	b2da      	uxtb	r2, r3
 800458c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	6379      	str	r1, [r7, #52]	; 0x34
 8004592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	09db      	lsrs	r3, r3, #7
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2b7f      	cmp	r3, #127	; 0x7f
 80045a4:	d8f0      	bhi.n	8004588 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	637a      	str	r2, [r7, #52]	; 0x34
 80045ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c0:	e00b      	b.n	80045da <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	1c59      	adds	r1, r3, #1
 80045ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	09db      	lsrs	r3, r3, #7
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045dc:	2b7f      	cmp	r3, #127	; 0x7f
 80045de:	d8f0      	bhi.n	80045c2 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80045e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	e00b      	b.n	8004614 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	6279      	str	r1, [r7, #36]	; 0x24
 8004606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	09db      	lsrs	r3, r3, #7
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	2b7f      	cmp	r3, #127	; 0x7f
 8004618:	d8f0      	bhi.n	80045fc <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	627a      	str	r2, [r7, #36]	; 0x24
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e00b      	b.n	800464c <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	61f9      	str	r1, [r7, #28]
 800463e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	09db      	lsrs	r3, r3, #7
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b7f      	cmp	r3, #127	; 0x7f
 8004650:	d8f0      	bhi.n	8004634 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	61fa      	str	r2, [r7, #28]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004662:	2215      	movs	r2, #21
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	6938      	ldr	r0, [r7, #16]
 8004668:	f7ff fbd8 	bl	8003e1c <_SendPacket>
  RECORD_END();
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f383 8811 	msr	BASEPRI, r3
}
 8004672:	bf00      	nop
 8004674:	3748      	adds	r7, #72	; 0x48
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200154a4 	.word	0x200154a4
 8004680:	20015474 	.word	0x20015474

08004684 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800469a:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4798      	blx	r3
  }
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20015474 	.word	0x20015474

080046ac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046b4:	f3ef 8311 	mrs	r3, BASEPRI
 80046b8:	f04f 0120 	mov.w	r1, #32
 80046bc:	f381 8811 	msr	BASEPRI, r1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	480b      	ldr	r0, [pc, #44]	; (80046f0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80046c4:	f7ff fad1 	bl	8003c6a <_PreparePacket>
 80046c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f7ff fa7e 	bl	8003bd0 <_EncodeStr>
 80046d4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80046d6:	220e      	movs	r2, #14
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f7ff fb9e 	bl	8003e1c <_SendPacket>
  RECORD_END();
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f383 8811 	msr	BASEPRI, r3
}
 80046e6:	bf00      	nop
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200154a4 	.word	0x200154a4

080046f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d019      	beq.n	8004736 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004702:	4b12      	ldr	r3, [pc, #72]	; (800474c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4798      	blx	r3
 8004714:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004718:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800471a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	f04f 0400 	mov.w	r4, #0
 8004726:	0013      	movs	r3, r2
 8004728:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800472a:	461a      	mov	r2, r3
 800472c:	4601      	mov	r1, r0
 800472e:	200d      	movs	r0, #13
 8004730:	f7ff fcf0 	bl	8004114 <SEGGER_SYSVIEW_RecordU32x2>
 8004734:	e005      	b.n	8004742 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	200c      	movs	r0, #12
 800473e:	f7ff fcad 	bl	800409c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop
 800474c:	20015474 	.word	0x20015474
 8004750:	e0001004 	.word	0xe0001004

08004754 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800475a:	f3ef 8311 	mrs	r3, BASEPRI
 800475e:	f04f 0120 	mov.w	r1, #32
 8004762:	f381 8811 	msr	BASEPRI, r1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	4819      	ldr	r0, [pc, #100]	; (80047d0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800476a:	f7ff fa7e 	bl	8003c6a <_PreparePacket>
 800476e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e00b      	b.n	80047a0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1c59      	adds	r1, r3, #1
 8004790:	6179      	str	r1, [r7, #20]
 8004792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	09db      	lsrs	r3, r3, #7
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b7f      	cmp	r3, #127	; 0x7f
 80047a4:	d8f0      	bhi.n	8004788 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	617a      	str	r2, [r7, #20]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80047b6:	2202      	movs	r2, #2
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	68b8      	ldr	r0, [r7, #8]
 80047bc:	f7ff fb2e 	bl	8003e1c <_SendPacket>
  RECORD_END();
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f383 8811 	msr	BASEPRI, r3
}
 80047c6:	bf00      	nop
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200154a4 	.word	0x200154a4
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047de:	f3ef 8311 	mrs	r3, BASEPRI
 80047e2:	f04f 0120 	mov.w	r1, #32
 80047e6:	f381 8811 	msr	BASEPRI, r1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	4807      	ldr	r0, [pc, #28]	; (800480c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80047ee:	f7ff fa3c 	bl	8003c6a <_PreparePacket>
 80047f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80047f4:	2203      	movs	r2, #3
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6838      	ldr	r0, [r7, #0]
 80047fa:	f7ff fb0f 	bl	8003e1c <_SendPacket>
  RECORD_END();
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f383 8811 	msr	BASEPRI, r3
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	200154a4 	.word	0x200154a4

08004810 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004816:	f3ef 8311 	mrs	r3, BASEPRI
 800481a:	f04f 0120 	mov.w	r1, #32
 800481e:	f381 8811 	msr	BASEPRI, r1
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004826:	f7ff fa20 	bl	8003c6a <_PreparePacket>
 800482a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800482c:	2212      	movs	r2, #18
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6838      	ldr	r0, [r7, #0]
 8004832:	f7ff faf3 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f383 8811 	msr	BASEPRI, r3
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200154a4 	.word	0x200154a4

08004848 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800484e:	f3ef 8311 	mrs	r3, BASEPRI
 8004852:	f04f 0120 	mov.w	r1, #32
 8004856:	f381 8811 	msr	BASEPRI, r1
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	4807      	ldr	r0, [pc, #28]	; (800487c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800485e:	f7ff fa04 	bl	8003c6a <_PreparePacket>
 8004862:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004864:	2211      	movs	r2, #17
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f7ff fad7 	bl	8003e1c <_SendPacket>
  RECORD_END();
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f383 8811 	msr	BASEPRI, r3
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	200154a4 	.word	0x200154a4

08004880 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004888:	f3ef 8311 	mrs	r3, BASEPRI
 800488c:	f04f 0120 	mov.w	r1, #32
 8004890:	f381 8811 	msr	BASEPRI, r1
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	481a      	ldr	r0, [pc, #104]	; (8004900 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004898:	f7ff f9e7 	bl	8003c6a <_PreparePacket>
 800489c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	e00b      	b.n	80048d0 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	61f9      	str	r1, [r7, #28]
 80048c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b7f      	cmp	r3, #127	; 0x7f
 80048d4:	d8f0      	bhi.n	80048b8 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	61fa      	str	r2, [r7, #28]
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80048e6:	2208      	movs	r2, #8
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	6938      	ldr	r0, [r7, #16]
 80048ec:	f7ff fa96 	bl	8003e1c <_SendPacket>
  RECORD_END();
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f383 8811 	msr	BASEPRI, r3
}
 80048f6:	bf00      	nop
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200154a4 	.word	0x200154a4
 8004904:	20015474 	.word	0x20015474

08004908 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	f04f 0120 	mov.w	r1, #32
 8004918:	f381 8811 	msr	BASEPRI, r1
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	481a      	ldr	r0, [pc, #104]	; (8004988 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004920:	f7ff f9a3 	bl	8003c6a <_PreparePacket>
 8004924:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800492a:	4b18      	ldr	r3, [pc, #96]	; (800498c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	089b      	lsrs	r3, r3, #2
 8004934:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e00b      	b.n	8004958 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	61f9      	str	r1, [r7, #28]
 800494a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	09db      	lsrs	r3, r3, #7
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b7f      	cmp	r3, #127	; 0x7f
 800495c:	d8f0      	bhi.n	8004940 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	61fa      	str	r2, [r7, #28]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800496e:	2204      	movs	r2, #4
 8004970:	68f9      	ldr	r1, [r7, #12]
 8004972:	6938      	ldr	r0, [r7, #16]
 8004974:	f7ff fa52 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f383 8811 	msr	BASEPRI, r3
}
 800497e:	bf00      	nop
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200154a4 	.word	0x200154a4
 800498c:	20015474 	.word	0x20015474

08004990 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004998:	f3ef 8311 	mrs	r3, BASEPRI
 800499c:	f04f 0120 	mov.w	r1, #32
 80049a0:	f381 8811 	msr	BASEPRI, r1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	481a      	ldr	r0, [pc, #104]	; (8004a10 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80049a8:	f7ff f95f 	bl	8003c6a <_PreparePacket>
 80049ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	e00b      	b.n	80049e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	1c59      	adds	r1, r3, #1
 80049d0:	61f9      	str	r1, [r7, #28]
 80049d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	09db      	lsrs	r3, r3, #7
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b7f      	cmp	r3, #127	; 0x7f
 80049e4:	d8f0      	bhi.n	80049c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	61fa      	str	r2, [r7, #28]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80049f6:	2206      	movs	r2, #6
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	6938      	ldr	r0, [r7, #16]
 80049fc:	f7ff fa0e 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f383 8811 	msr	BASEPRI, r3
}
 8004a06:	bf00      	nop
 8004a08:	3720      	adds	r7, #32
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200154a4 	.word	0x200154a4
 8004a14:	20015474 	.word	0x20015474

08004a18 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	; 0x30
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004a22:	4b3b      	ldr	r3, [pc, #236]	; (8004b10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d06d      	beq.n	8004b06 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004a30:	2300      	movs	r3, #0
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a34:	e008      	b.n	8004a48 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	3301      	adds	r3, #1
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d3f2      	bcc.n	8004a36 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004a50:	e000      	b.n	8004a54 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004a52:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d055      	beq.n	8004b06 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5e:	f04f 0120 	mov.w	r1, #32
 8004a62:	f381 8811 	msr	BASEPRI, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	482a      	ldr	r0, [pc, #168]	; (8004b14 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004a6a:	f7ff f8fe 	bl	8003c6a <_PreparePacket>
 8004a6e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	623b      	str	r3, [r7, #32]
 8004a7c:	e00b      	b.n	8004a96 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	1c59      	adds	r1, r3, #1
 8004a86:	6279      	str	r1, [r7, #36]	; 0x24
 8004a88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	09db      	lsrs	r3, r3, #7
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9a:	d8f0      	bhi.n	8004a7e <SEGGER_SYSVIEW_SendModule+0x66>
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	627a      	str	r2, [r7, #36]	; 0x24
 8004aa2:	6a3a      	ldr	r2, [r7, #32]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e00b      	b.n	8004ad0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	61f9      	str	r1, [r7, #28]
 8004ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	09db      	lsrs	r3, r3, #7
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad4:	d8f0      	bhi.n	8004ab8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	61fa      	str	r2, [r7, #28]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2280      	movs	r2, #128	; 0x80
 8004aec:	4619      	mov	r1, r3
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff f86e 	bl	8003bd0 <_EncodeStr>
 8004af4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004af6:	2216      	movs	r2, #22
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	6938      	ldr	r0, [r7, #16]
 8004afc:	f7ff f98e 	bl	8003e1c <_SendPacket>
      RECORD_END();
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004b06:	bf00      	nop
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2001549c 	.word	0x2001549c
 8004b14:	200154a4 	.word	0x200154a4

08004b18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00f      	beq.n	8004b46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f2      	bne.n	8004b2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2001549c 	.word	0x2001549c

08004b54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5e:	f04f 0120 	mov.w	r1, #32
 8004b62:	f381 8811 	msr	BASEPRI, r1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	4817      	ldr	r0, [pc, #92]	; (8004bc8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004b6a:	f7ff f87e 	bl	8003c6a <_PreparePacket>
 8004b6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	6179      	str	r1, [r7, #20]
 8004b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	617a      	str	r2, [r7, #20]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004bae:	221b      	movs	r2, #27
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	68b8      	ldr	r0, [r7, #8]
 8004bb4:	f7ff f932 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200154a4 	.word	0x200154a4
 8004bcc:	200154a0 	.word	0x200154a0

08004bd0 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bdc:	f04f 0120 	mov.w	r1, #32
 8004be0:	f381 8811 	msr	BASEPRI, r1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	4827      	ldr	r0, [pc, #156]	; (8004c84 <SEGGER_SYSVIEW_Print+0xb4>)
 8004be8:	f7ff f83f 	bl	8003c6a <_PreparePacket>
 8004bec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f7fe ffec 	bl	8003bd0 <_EncodeStr>
 8004bf8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	2300      	movs	r3, #0
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	e00b      	b.n	8004c1c <SEGGER_SYSVIEW_Print+0x4c>
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	09db      	lsrs	r3, r3, #7
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c20:	d8f0      	bhi.n	8004c04 <SEGGER_SYSVIEW_Print+0x34>
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	627a      	str	r2, [r7, #36]	; 0x24
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e00b      	b.n	8004c54 <SEGGER_SYSVIEW_Print+0x84>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	61f9      	str	r1, [r7, #28]
 8004c46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	09db      	lsrs	r3, r3, #7
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b7f      	cmp	r3, #127	; 0x7f
 8004c58:	d8f0      	bhi.n	8004c3c <SEGGER_SYSVIEW_Print+0x6c>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	61fa      	str	r2, [r7, #28]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c6a:	221a      	movs	r2, #26
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	6938      	ldr	r0, [r7, #16]
 8004c70:	f7ff f8d4 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f383 8811 	msr	BASEPRI, r3
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200154a4 	.word	0x200154a4

08004c88 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c90:	f3ef 8311 	mrs	r3, BASEPRI
 8004c94:	f04f 0120 	mov.w	r1, #32
 8004c98:	f381 8811 	msr	BASEPRI, r1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	4827      	ldr	r0, [pc, #156]	; (8004d3c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004ca0:	f7fe ffe3 	bl	8003c6a <_PreparePacket>
 8004ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	6938      	ldr	r0, [r7, #16]
 8004cac:	f7fe ff90 	bl	8003bd0 <_EncodeStr>
 8004cb0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	e00b      	b.n	8004cd4 <SEGGER_SYSVIEW_Warn+0x4c>
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd8:	d8f0      	bhi.n	8004cbc <SEGGER_SYSVIEW_Warn+0x34>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	627a      	str	r2, [r7, #36]	; 0x24
 8004ce0:	6a3a      	ldr	r2, [r7, #32]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	61fb      	str	r3, [r7, #28]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e00b      	b.n	8004d0c <SEGGER_SYSVIEW_Warn+0x84>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	61f9      	str	r1, [r7, #28]
 8004cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	09db      	lsrs	r3, r3, #7
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d10:	d8f0      	bhi.n	8004cf4 <SEGGER_SYSVIEW_Warn+0x6c>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	61fa      	str	r2, [r7, #28]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004d22:	221a      	movs	r2, #26
 8004d24:	68f9      	ldr	r1, [r7, #12]
 8004d26:	6938      	ldr	r0, [r7, #16]
 8004d28:	f7ff f878 	bl	8003e1c <_SendPacket>
  RECORD_END();
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f383 8811 	msr	BASEPRI, r3
}
 8004d32:	bf00      	nop
 8004d34:	3728      	adds	r7, #40	; 0x28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200154a4 	.word	0x200154a4

08004d40 <__libc_init_array>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0d      	ldr	r6, [pc, #52]	; (8004d78 <__libc_init_array+0x38>)
 8004d44:	4c0d      	ldr	r4, [pc, #52]	; (8004d7c <__libc_init_array+0x3c>)
 8004d46:	1ba4      	subs	r4, r4, r6
 8004d48:	10a4      	asrs	r4, r4, #2
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	42a5      	cmp	r5, r4
 8004d4e:	d109      	bne.n	8004d64 <__libc_init_array+0x24>
 8004d50:	4e0b      	ldr	r6, [pc, #44]	; (8004d80 <__libc_init_array+0x40>)
 8004d52:	4c0c      	ldr	r4, [pc, #48]	; (8004d84 <__libc_init_array+0x44>)
 8004d54:	f000 f83a 	bl	8004dcc <_init>
 8004d58:	1ba4      	subs	r4, r4, r6
 8004d5a:	10a4      	asrs	r4, r4, #2
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	42a5      	cmp	r5, r4
 8004d60:	d105      	bne.n	8004d6e <__libc_init_array+0x2e>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d68:	4798      	blx	r3
 8004d6a:	3501      	adds	r5, #1
 8004d6c:	e7ee      	b.n	8004d4c <__libc_init_array+0xc>
 8004d6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d72:	4798      	blx	r3
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7f2      	b.n	8004d5e <__libc_init_array+0x1e>
 8004d78:	08004f5c 	.word	0x08004f5c
 8004d7c:	08004f5c 	.word	0x08004f5c
 8004d80:	08004f5c 	.word	0x08004f5c
 8004d84:	08004f60 	.word	0x08004f60

08004d88 <memcmp>:
 8004d88:	b530      	push	{r4, r5, lr}
 8004d8a:	2400      	movs	r4, #0
 8004d8c:	42a2      	cmp	r2, r4
 8004d8e:	d101      	bne.n	8004d94 <memcmp+0xc>
 8004d90:	2000      	movs	r0, #0
 8004d92:	e007      	b.n	8004da4 <memcmp+0x1c>
 8004d94:	5d03      	ldrb	r3, [r0, r4]
 8004d96:	3401      	adds	r4, #1
 8004d98:	190d      	adds	r5, r1, r4
 8004d9a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004d9e:	42ab      	cmp	r3, r5
 8004da0:	d0f4      	beq.n	8004d8c <memcmp+0x4>
 8004da2:	1b58      	subs	r0, r3, r5
 8004da4:	bd30      	pop	{r4, r5, pc}

08004da6 <memcpy>:
 8004da6:	b510      	push	{r4, lr}
 8004da8:	1e43      	subs	r3, r0, #1
 8004daa:	440a      	add	r2, r1
 8004dac:	4291      	cmp	r1, r2
 8004dae:	d100      	bne.n	8004db2 <memcpy+0xc>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dba:	e7f7      	b.n	8004dac <memcpy+0x6>

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <_init>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr

08004dd8 <_fini>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr
