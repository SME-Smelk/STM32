
07-FreeRTOS-Led-ButtonIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005058  08005058  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005060  08005060  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005064  08005064  00015064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017660  20000010  08005078  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017670  08005078  00027670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152ea  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a08  00000000  00000000  0003532a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00037d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e50  00000000  00000000  00038cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000223c2  00000000  00000000  00039b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000138fd  00000000  00000000  0005bf02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce8bc  00000000  00000000  0006f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  0013e138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f1c 	.word	0x08004f1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004f1c 	.word	0x08004f1c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0080 	ldr.w	r0, [pc, #128]	; 8000278 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d32e      	bcc.n	800026a <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d312      	bcc.n	800023c <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000234:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000236:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023a:	4770      	bx	lr

0800023c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800023c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800023e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000240:	d317      	bcc.n	8000272 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000242:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000244:	1b12      	subs	r2, r2, r4

08000246 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 8000246:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024a:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 800024e:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000250:	d1f9      	bne.n	8000246 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000252:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000254:	d005      	beq.n	8000262 <_No2ChunkNeeded>

08000256 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 8000256:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025a:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800025e:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000260:	d1f9      	bne.n	8000256 <_LoopCopyAfterWrapAround>

08000262 <_No2ChunkNeeded>:
_No2ChunkNeeded:
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 8000262:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 8000264:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000268:	4770      	bx	lr

0800026a <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 800026a:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 800026c:	3801      	subs	r0, #1
        CMP      R0,R2
 800026e:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000270:	d2d1      	bcs.n	8000216 <_Case4>

08000272 <_Case3>:
_Case3:
        MOVS     R0,#+0
 8000272:	2000      	movs	r0, #0
        POP      {R4-R7}
 8000274:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 8000276:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000278:	200175c8 	.word	0x200175c8

0800027c <strlen>:
 800027c:	4603      	mov	r3, r0
 800027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000282:	2a00      	cmp	r2, #0
 8000284:	d1fb      	bne.n	800027e <strlen+0x2>
 8000286:	1a18      	subs	r0, r3, r0
 8000288:	3801      	subs	r0, #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b972 	b.w	8000588 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9e08      	ldr	r6, [sp, #32]
 80002c2:	4604      	mov	r4, r0
 80002c4:	4688      	mov	r8, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14b      	bne.n	8000362 <__udivmoddi4+0xa6>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4615      	mov	r5, r2
 80002ce:	d967      	bls.n	80003a0 <__udivmoddi4+0xe4>
 80002d0:	fab2 f282 	clz	r2, r2
 80002d4:	b14a      	cbz	r2, 80002ea <__udivmoddi4+0x2e>
 80002d6:	f1c2 0720 	rsb	r7, r2, #32
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	fa20 f707 	lsr.w	r7, r0, r7
 80002e2:	4095      	lsls	r5, r2
 80002e4:	ea47 0803 	orr.w	r8, r7, r3
 80002e8:	4094      	lsls	r4, r2
 80002ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002ee:	0c23      	lsrs	r3, r4, #16
 80002f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f4:	fa1f fc85 	uxth.w	ip, r5
 80002f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80002fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000300:	fb07 f10c 	mul.w	r1, r7, ip
 8000304:	4299      	cmp	r1, r3
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0x60>
 8000308:	18eb      	adds	r3, r5, r3
 800030a:	f107 30ff 	add.w	r0, r7, #4294967295
 800030e:	f080 811b 	bcs.w	8000548 <__udivmoddi4+0x28c>
 8000312:	4299      	cmp	r1, r3
 8000314:	f240 8118 	bls.w	8000548 <__udivmoddi4+0x28c>
 8000318:	3f02      	subs	r7, #2
 800031a:	442b      	add	r3, r5
 800031c:	1a5b      	subs	r3, r3, r1
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb3 f0fe 	udiv	r0, r3, lr
 8000324:	fb0e 3310 	mls	r3, lr, r0, r3
 8000328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000330:	45a4      	cmp	ip, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x8c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 8107 	bcs.w	800054c <__udivmoddi4+0x290>
 800033e:	45a4      	cmp	ip, r4
 8000340:	f240 8104 	bls.w	800054c <__udivmoddi4+0x290>
 8000344:	3802      	subs	r0, #2
 8000346:	442c      	add	r4, r5
 8000348:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800034c:	eba4 040c 	sub.w	r4, r4, ip
 8000350:	2700      	movs	r7, #0
 8000352:	b11e      	cbz	r6, 800035c <__udivmoddi4+0xa0>
 8000354:	40d4      	lsrs	r4, r2
 8000356:	2300      	movs	r3, #0
 8000358:	e9c6 4300 	strd	r4, r3, [r6]
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	428b      	cmp	r3, r1
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0xbe>
 8000366:	2e00      	cmp	r6, #0
 8000368:	f000 80eb 	beq.w	8000542 <__udivmoddi4+0x286>
 800036c:	2700      	movs	r7, #0
 800036e:	e9c6 0100 	strd	r0, r1, [r6]
 8000372:	4638      	mov	r0, r7
 8000374:	4639      	mov	r1, r7
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	fab3 f783 	clz	r7, r3
 800037e:	2f00      	cmp	r7, #0
 8000380:	d147      	bne.n	8000412 <__udivmoddi4+0x156>
 8000382:	428b      	cmp	r3, r1
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xd0>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb61 0303 	sbc.w	r3, r1, r3
 8000392:	2001      	movs	r0, #1
 8000394:	4698      	mov	r8, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e0      	beq.n	800035c <__udivmoddi4+0xa0>
 800039a:	e9c6 4800 	strd	r4, r8, [r6]
 800039e:	e7dd      	b.n	800035c <__udivmoddi4+0xa0>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xe8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f282 	clz	r2, r2
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	f040 808f 	bne.w	80004cc <__udivmoddi4+0x210>
 80003ae:	1b49      	subs	r1, r1, r5
 80003b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b4:	fa1f f885 	uxth.w	r8, r5
 80003b8:	2701      	movs	r7, #1
 80003ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80003be:	0c23      	lsrs	r3, r4, #16
 80003c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c8:	fb08 f10c 	mul.w	r1, r8, ip
 80003cc:	4299      	cmp	r1, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d0:	18eb      	adds	r3, r5, r3
 80003d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x122>
 80003d8:	4299      	cmp	r1, r3
 80003da:	f200 80cd 	bhi.w	8000578 <__udivmoddi4+0x2bc>
 80003de:	4684      	mov	ip, r0
 80003e0:	1a59      	subs	r1, r3, r1
 80003e2:	b2a3      	uxth	r3, r4
 80003e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	fb08 f800 	mul.w	r8, r8, r0
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x14c>
 80003f8:	192c      	adds	r4, r5, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14a>
 8000400:	45a0      	cmp	r8, r4
 8000402:	f200 80b6 	bhi.w	8000572 <__udivmoddi4+0x2b6>
 8000406:	4618      	mov	r0, r3
 8000408:	eba4 0408 	sub.w	r4, r4, r8
 800040c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000410:	e79f      	b.n	8000352 <__udivmoddi4+0x96>
 8000412:	f1c7 0c20 	rsb	ip, r7, #32
 8000416:	40bb      	lsls	r3, r7
 8000418:	fa22 fe0c 	lsr.w	lr, r2, ip
 800041c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000420:	fa01 f407 	lsl.w	r4, r1, r7
 8000424:	fa20 f50c 	lsr.w	r5, r0, ip
 8000428:	fa21 f30c 	lsr.w	r3, r1, ip
 800042c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000430:	4325      	orrs	r5, r4
 8000432:	fbb3 f9f8 	udiv	r9, r3, r8
 8000436:	0c2c      	lsrs	r4, r5, #16
 8000438:	fb08 3319 	mls	r3, r8, r9, r3
 800043c:	fa1f fa8e 	uxth.w	sl, lr
 8000440:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000444:	fb09 f40a 	mul.w	r4, r9, sl
 8000448:	429c      	cmp	r4, r3
 800044a:	fa02 f207 	lsl.w	r2, r2, r7
 800044e:	fa00 f107 	lsl.w	r1, r0, r7
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000454:	eb1e 0303 	adds.w	r3, lr, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	f080 8087 	bcs.w	800056e <__udivmoddi4+0x2b2>
 8000460:	429c      	cmp	r4, r3
 8000462:	f240 8084 	bls.w	800056e <__udivmoddi4+0x2b2>
 8000466:	f1a9 0902 	sub.w	r9, r9, #2
 800046a:	4473      	add	r3, lr
 800046c:	1b1b      	subs	r3, r3, r4
 800046e:	b2ad      	uxth	r5, r5
 8000470:	fbb3 f0f8 	udiv	r0, r3, r8
 8000474:	fb08 3310 	mls	r3, r8, r0, r3
 8000478:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800047c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000480:	45a2      	cmp	sl, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1da>
 8000484:	eb1e 0404 	adds.w	r4, lr, r4
 8000488:	f100 33ff 	add.w	r3, r0, #4294967295
 800048c:	d26b      	bcs.n	8000566 <__udivmoddi4+0x2aa>
 800048e:	45a2      	cmp	sl, r4
 8000490:	d969      	bls.n	8000566 <__udivmoddi4+0x2aa>
 8000492:	3802      	subs	r0, #2
 8000494:	4474      	add	r4, lr
 8000496:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	eba4 040a 	sub.w	r4, r4, sl
 80004a2:	454c      	cmp	r4, r9
 80004a4:	46c2      	mov	sl, r8
 80004a6:	464b      	mov	r3, r9
 80004a8:	d354      	bcc.n	8000554 <__udivmoddi4+0x298>
 80004aa:	d051      	beq.n	8000550 <__udivmoddi4+0x294>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d069      	beq.n	8000584 <__udivmoddi4+0x2c8>
 80004b0:	ebb1 050a 	subs.w	r5, r1, sl
 80004b4:	eb64 0403 	sbc.w	r4, r4, r3
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	40fc      	lsrs	r4, r7
 80004c0:	ea4c 0505 	orr.w	r5, ip, r5
 80004c4:	e9c6 5400 	strd	r5, r4, [r6]
 80004c8:	2700      	movs	r7, #0
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0xa0>
 80004cc:	f1c2 0320 	rsb	r3, r2, #32
 80004d0:	fa20 f703 	lsr.w	r7, r0, r3
 80004d4:	4095      	lsls	r5, r2
 80004d6:	fa01 f002 	lsl.w	r0, r1, r2
 80004da:	fa21 f303 	lsr.w	r3, r1, r3
 80004de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e2:	4338      	orrs	r0, r7
 80004e4:	0c01      	lsrs	r1, r0, #16
 80004e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ea:	fa1f f885 	uxth.w	r8, r5
 80004ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f6:	fb07 f308 	mul.w	r3, r7, r8
 80004fa:	428b      	cmp	r3, r1
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x256>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f107 3cff 	add.w	ip, r7, #4294967295
 8000508:	d22f      	bcs.n	800056a <__udivmoddi4+0x2ae>
 800050a:	428b      	cmp	r3, r1
 800050c:	d92d      	bls.n	800056a <__udivmoddi4+0x2ae>
 800050e:	3f02      	subs	r7, #2
 8000510:	4429      	add	r1, r5
 8000512:	1acb      	subs	r3, r1, r3
 8000514:	b281      	uxth	r1, r0
 8000516:	fbb3 f0fe 	udiv	r0, r3, lr
 800051a:	fb0e 3310 	mls	r3, lr, r0, r3
 800051e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000522:	fb00 f308 	mul.w	r3, r0, r8
 8000526:	428b      	cmp	r3, r1
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x27e>
 800052a:	1869      	adds	r1, r5, r1
 800052c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000530:	d217      	bcs.n	8000562 <__udivmoddi4+0x2a6>
 8000532:	428b      	cmp	r3, r1
 8000534:	d915      	bls.n	8000562 <__udivmoddi4+0x2a6>
 8000536:	3802      	subs	r0, #2
 8000538:	4429      	add	r1, r5
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000540:	e73b      	b.n	80003ba <__udivmoddi4+0xfe>
 8000542:	4637      	mov	r7, r6
 8000544:	4630      	mov	r0, r6
 8000546:	e709      	b.n	800035c <__udivmoddi4+0xa0>
 8000548:	4607      	mov	r7, r0
 800054a:	e6e7      	b.n	800031c <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fb      	b.n	8000348 <__udivmoddi4+0x8c>
 8000550:	4541      	cmp	r1, r8
 8000552:	d2ab      	bcs.n	80004ac <__udivmoddi4+0x1f0>
 8000554:	ebb8 0a02 	subs.w	sl, r8, r2
 8000558:	eb69 020e 	sbc.w	r2, r9, lr
 800055c:	3801      	subs	r0, #1
 800055e:	4613      	mov	r3, r2
 8000560:	e7a4      	b.n	80004ac <__udivmoddi4+0x1f0>
 8000562:	4660      	mov	r0, ip
 8000564:	e7e9      	b.n	800053a <__udivmoddi4+0x27e>
 8000566:	4618      	mov	r0, r3
 8000568:	e795      	b.n	8000496 <__udivmoddi4+0x1da>
 800056a:	4667      	mov	r7, ip
 800056c:	e7d1      	b.n	8000512 <__udivmoddi4+0x256>
 800056e:	4681      	mov	r9, r0
 8000570:	e77c      	b.n	800046c <__udivmoddi4+0x1b0>
 8000572:	3802      	subs	r0, #2
 8000574:	442c      	add	r4, r5
 8000576:	e747      	b.n	8000408 <__udivmoddi4+0x14c>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	442b      	add	r3, r5
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	4638      	mov	r0, r7
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xda>
 8000584:	4637      	mov	r7, r6
 8000586:	e6e9      	b.n	800035c <__udivmoddi4+0xa0>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <USART2_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <USART2_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <USART2_UART_Init+0x4c>)
 80005c4:	f001 fa7c 	bl	8001ac0 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f000 f94b 	bl	8000868 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20017584 	.word	0x20017584
 80005dc:	40004400 	.word	0x40004400

080005e0 <UART2_write>:

void UART2_write(char data[]){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) data, strlen(data), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe47 	bl	800027c <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <UART2_write+0x28>)
 80005fa:	f001 faae 	bl	8001b5a <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20017584 	.word	0x20017584

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af02      	add	r7, sp, #8
	//Habilito el contador de ciclo DWT
	DWT->CTRL |= (1<<0);
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0x4c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <main+0x4c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800061e:	f000 f9bb 	bl	8000998 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000622:	f000 f821 	bl	8000668 <SystemClock_Config>

	/* Configure the peripherals */
	GPIO_Init();
 8000626:	f000 f87f 	bl	8000728 <GPIO_Init>
	USART2_UART_Init();
 800062a:	f7ff ffaf 	bl	800058c <USART2_UART_Init>


	/* Configure the system clock */
	SEGGER_SYSVIEW_Conf();
 800062e:	f003 f907 	bl	8003840 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000632:	f003 fecd 	bl	80043d0 <SEGGER_SYSVIEW_Start>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(task_Greenled_handler,"Led",configMINIMAL_STACK_SIZE,NULL,1,NULL);
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2301      	movs	r3, #1
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2282      	movs	r2, #130	; 0x82
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <main+0x50>)
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x54>)
 8000646:	f002 f805 	bl	8002654 <xTaskCreate>

	/* Start Message */
	//HAL_UART_Transmit(&huart2,(uint8_t*) "FreeRTOS Init\n", sizeof("FreeRTOS Init\n"), HAL_MAX_DELAY);
	UART2_write("FreeRTOS Init\n");
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <main+0x58>)
 800064c:	f7ff ffc8 	bl	80005e0 <UART2_write>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 8000650:	f002 f958 	bl	8002904 <vTaskStartScheduler>

	while (1);
 8000654:	e7fe      	b.n	8000654 <main+0x48>
 8000656:	bf00      	nop
 8000658:	e0001000 	.word	0xe0001000
 800065c:	08004f34 	.word	0x08004f34
 8000660:	080007e5 	.word	0x080007e5
 8000664:	08004f38 	.word	0x08004f38

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b096      	sub	sp, #88	; 0x58
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fc48 	bl	8004f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fcb8 	bl	8001038 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006ce:	f000 f8cb 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2105      	movs	r1, #5
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ff11 	bl	8001518 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 f8b4 	bl	8000868 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000704:	23c0      	movs	r3, #192	; 0xc0
 8000706:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f8f4 	bl	80018fc <HAL_RCCEx_PeriphCLKConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800071a:	f000 f8a5 	bl	8000868 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3758      	adds	r7, #88	; 0x58
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <GPIO_Init>:

/**
  * @brief  Function of gpio init.
  * @retval None
  */
void GPIO_Init(void){
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <GPIO_Init+0xac>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <GPIO_Init+0xac>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <GPIO_Init+0xac>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <GPIO_Init+0xac>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <GPIO_Init+0xac>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <GPIO_Init+0xac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]


/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <GPIO_Init+0xb0>)
 800077e:	f000 fc29 	bl	8000fd4 <HAL_GPIO_WritePin>

/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = LED_GREEN_PIN;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(LED_GREEN_PORT, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <GPIO_Init+0xb0>)
 800079c:	f000 fa80 	bl	8000ca0 <HAL_GPIO_Init>

/*Configure GPIO pins LED: LED_GREEN_PIN */
/*Configure GPIO pins LED: LED_GREEN_PIN */
GPIO_InitStruct.Pin = BUTTON_PIN;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <GPIO_Init+0xb4>)
 80007a6:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	4619      	mov	r1, r3
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <GPIO_Init+0xb8>)
 80007b8:	f000 fa72 	bl	8000ca0 <HAL_GPIO_Init>



/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2006      	movs	r0, #6
 80007c2:	f000 fa36 	bl	8000c32 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c6:	2006      	movs	r0, #6
 80007c8:	f000 fa4f 	bl	8000c6a <HAL_NVIC_EnableIRQ>

}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	10110000 	.word	0x10110000
 80007e0:	40020000 	.word	0x40020000

080007e4 <task_Greenled_handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void task_Greenled_handler(void *params){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	while(1){


		if(button_state == BUTTON_PRESSED){
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <task_Greenled_handler+0x48>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d109      	bne.n	8000808 <task_Greenled_handler+0x24>
			//Turn on the led
			HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <task_Greenled_handler+0x4c>)
 80007fc:	f000 fbea 	bl	8000fd4 <HAL_GPIO_WritePin>
			UART2_write("LEDGREEN: ON\r\n");
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <task_Greenled_handler+0x50>)
 8000802:	f7ff feed 	bl	80005e0 <UART2_write>
 8000806:	e008      	b.n	800081a <task_Greenled_handler+0x36>
		}else{
			//Turn off the led
			HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <task_Greenled_handler+0x4c>)
 8000810:	f000 fbe0 	bl	8000fd4 <HAL_GPIO_WritePin>
			UART2_write("LEDGREEN: OFF\r\n");
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <task_Greenled_handler+0x54>)
 8000816:	f7ff fee3 	bl	80005e0 <UART2_write>
		}
		taskYIELD();
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <task_Greenled_handler+0x58>)
 800081c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	f3bf 8f4f 	dsb	sy
 8000826:	f3bf 8f6f 	isb	sy
		if(button_state == BUTTON_PRESSED){
 800082a:	e7df      	b.n	80007ec <task_Greenled_handler+0x8>
 800082c:	2000002c 	.word	0x2000002c
 8000830:	40020c00 	.word	0x40020c00
 8000834:	08004f48 	.word	0x08004f48
 8000838:	08004f58 	.word	0x08004f58
 800083c:	e000ed04 	.word	0xe000ed04

08000840 <HAL_GPIO_EXTI_Callback>:
	}
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	80fb      	strh	r3, [r7, #6]

	button_state^=1;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_GPIO_EXTI_Callback+0x24>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f083 0301 	eor.w	r3, r3, #1
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GPIO_EXTI_Callback+0x24>)
 8000856:	701a      	strb	r2, [r3, #0]

}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	2000002c 	.word	0x2000002c

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0

	/*Group Interrupt*/
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f9ce 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	210f      	movs	r1, #15
 8000884:	f06f 0001 	mvn.w	r0, #1
 8000888:	f000 f9d3 	bl	8000c32 <HAL_NVIC_SetPriority>

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_UART_MspInit>:

/**
  * Initializes the UART MSP.
  */
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a19      	ldr	r2, [pc, #100]	; (8000914 <HAL_UART_MspInit+0x84>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d12b      	bne.n	800090a <HAL_UART_MspInit+0x7a>
  {

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008ea:	230c      	movs	r3, #12
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fa:	2307      	movs	r3, #7
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <HAL_UART_MspInit+0x8c>)
 8000906:	f000 f9cb 	bl	8000ca0 <HAL_GPIO_Init>

  }
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40004400 	.word	0x40004400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000

08000920 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094a:	f000 f877 	bl	8000a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800094e:	f002 fcb3 	bl	80032b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <EXTI0_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI0_IRQHandler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  traceISR_ENTER();
 800095a:	f003 ffff 	bl	800495c <SEGGER_SYSVIEW_RecordEnterISR>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_PIN);
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fb52 	bl	8001008 <HAL_GPIO_EXTI_IRQHandler>
  traceISR_EXIT();
 8000964:	f004 f83c 	bl	80049e0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <SystemInit+0x28>)
 8000972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <SystemInit+0x28>)
 8000978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800097c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SystemInit+0x28>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000986:	609a      	str	r2, [r3, #8]
#endif
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f92b 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff ff53 	bl	8000876 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f943 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f90b 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	200175c4 	.word	0x200175c4

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200175c4 	.word	0x200175c4

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	; (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
 8000cba:	e16b      	b.n	8000f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 815a 	bne.w	8000f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00b      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d007      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cee:	2b11      	cmp	r3, #17
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0xfc>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	69b9      	ldr	r1, [r7, #24]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f000 80b4 	beq.w	8000f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a5e      	ldr	r2, [pc, #376]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b5c      	ldr	r3, [pc, #368]	; (8000fa8 <HAL_GPIO_Init+0x308>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e42:	4a5a      	ldr	r2, [pc, #360]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	089b      	lsrs	r3, r3, #2
 8000e48:	3302      	adds	r3, #2
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a51      	ldr	r2, [pc, #324]	; (8000fb0 <HAL_GPIO_Init+0x310>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x226>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <HAL_GPIO_Init+0x314>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x222>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <HAL_GPIO_Init+0x318>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x21e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4e      	ldr	r2, [pc, #312]	; (8000fbc <HAL_GPIO_Init+0x31c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4d      	ldr	r2, [pc, #308]	; (8000fc0 <HAL_GPIO_Init+0x320>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x324>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4b      	ldr	r2, [pc, #300]	; (8000fc8 <HAL_GPIO_Init+0x328>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <HAL_GPIO_Init+0x32c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20a>
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	e00e      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eaa:	2308      	movs	r3, #8
 8000eac:	e00c      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eae:	2306      	movs	r3, #6
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e008      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e006      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e004      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e002      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_Init+0x228>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	f002 0203 	and.w	r2, r2, #3
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	4093      	lsls	r3, r2
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed8:	4934      	ldr	r1, [pc, #208]	; (8000fac <HAL_GPIO_Init+0x30c>)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ee6:	4b3a      	ldr	r3, [pc, #232]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f0a:	4a31      	ldr	r2, [pc, #196]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f10:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f34:	4a26      	ldr	r2, [pc, #152]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_GPIO_Init+0x330>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	f67f ae90 	bls.w	8000cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3724      	adds	r7, #36	; 0x24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40021400 	.word	0x40021400
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	40021c00 	.word	0x40021c00
 8000fd0:	40013c00 	.word	0x40013c00

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fc0a 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e25b      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001056:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b04      	cmp	r3, #4
 8001060:	d00c      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106a:	2b08      	cmp	r3, #8
 800106c:	d112      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4b9d      	ldr	r3, [pc, #628]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e236      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b8b      	ldr	r3, [pc, #556]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a8a      	ldr	r2, [pc, #552]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a87      	ldr	r2, [pc, #540]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b84      	ldr	r3, [pc, #528]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a80      	ldr	r2, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcb8 	bl	8000a64 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcb4 	bl	8000a64 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1fb      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fca4 	bl	8000a64 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fca0 	bl	8000a64 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1e7      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1bb      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4952      	ldr	r1, [pc, #328]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_RCC_OscConfig+0x2b0>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc59 	bl	8000a64 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc55 	bl	8000a64 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e19c      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b43      	ldr	r3, [pc, #268]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4940      	ldr	r1, [pc, #256]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_RCC_OscConfig+0x2b0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc38 	bl	8000a64 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc34 	bl	8000a64 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e17b      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d030      	beq.n	8001284 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d016      	beq.n	8001258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x2b4>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff fc18 	bl	8000a64 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc14 	bl	8000a64 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e15b      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
 8001256:	e015      	b.n	8001284 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <HAL_RCC_OscConfig+0x2b4>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fc01 	bl	8000a64 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fbfd 	bl	8000a64 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e144      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f0      	bne.n	8001266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80a0 	beq.w	80013d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10f      	bne.n	80012c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012be:	2301      	movs	r3, #1
 80012c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCC_OscConfig+0x2b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d121      	bne.n	8001312 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_RCC_OscConfig+0x2b8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_RCC_OscConfig+0x2b8>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012da:	f7ff fbc3 	bl	8000a64 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e0:	e011      	b.n	8001306 <HAL_RCC_OscConfig+0x2ce>
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	42470000 	.word	0x42470000
 80012ec:	42470e80 	.word	0x42470e80
 80012f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f4:	f7ff fbb6 	bl	8000a64 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0fd      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x4d4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d106      	bne.n	8001328 <HAL_RCC_OscConfig+0x2f0>
 800131a:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	4a7c      	ldr	r2, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6713      	str	r3, [r2, #112]	; 0x70
 8001326:	e01c      	b.n	8001362 <HAL_RCC_OscConfig+0x32a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d10c      	bne.n	800134a <HAL_RCC_OscConfig+0x312>
 8001330:	4b77      	ldr	r3, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a76      	ldr	r2, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	4b74      	ldr	r3, [pc, #464]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a73      	ldr	r2, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	e00b      	b.n	8001362 <HAL_RCC_OscConfig+0x32a>
 800134a:	4b71      	ldr	r3, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	4a70      	ldr	r2, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
 8001356:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a6d      	ldr	r2, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 800135c:	f023 0304 	bic.w	r3, r3, #4
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d015      	beq.n	8001396 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136a:	f7ff fb7b 	bl	8000a64 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fb77 	bl	8000a64 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0bc      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ee      	beq.n	8001372 <HAL_RCC_OscConfig+0x33a>
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fb65 	bl	8000a64 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fb61 	bl	8000a64 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0a6      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ee      	bne.n	800139e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a51      	ldr	r2, [pc, #324]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 80013cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8092 	beq.w	8001500 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d05c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d141      	bne.n	8001474 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <HAL_RCC_OscConfig+0x4dc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff fb35 	bl	8000a64 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fb31 	bl	8000a64 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e078      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69da      	ldr	r2, [r3, #28]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	019b      	lsls	r3, r3, #6
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	3b01      	subs	r3, #1
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	4933      	ldr	r1, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001446:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_RCC_OscConfig+0x4dc>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb0a 	bl	8000a64 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001454:	f7ff fb06 	bl	8000a64 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e04d      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x41c>
 8001472:	e045      	b.n	8001500 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_RCC_OscConfig+0x4dc>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff faf3 	bl	8000a64 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff faef 	bl	8000a64 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e036      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1f0      	bne.n	8001482 <HAL_RCC_OscConfig+0x44a>
 80014a0:	e02e      	b.n	8001500 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e029      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d11c      	bne.n	80014fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d115      	bne.n	80014fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014d6:	4013      	ands	r3, r2
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014dc:	4293      	cmp	r3, r2
 80014de:	d10d      	bne.n	80014fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000
 8001510:	40023800 	.word	0x40023800
 8001514:	42470060 	.word	0x42470060

08001518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0cc      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d90c      	bls.n	8001554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b65      	ldr	r3, [pc, #404]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e0b8      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d020      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800158e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	494d      	ldr	r1, [pc, #308]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d044      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e07f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e06f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e067      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4934      	ldr	r1, [pc, #208]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	4313      	orrs	r3, r2
 8001606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fa2c 	bl	8000a64 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa28 	bl	8000a64 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e04f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d20c      	bcs.n	8001660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e032      	b.n	80016c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4916      	ldr	r1, [pc, #88]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	490e      	ldr	r1, [pc, #56]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800169e:	f000 f821 	bl	80016e4 <HAL_RCC_GetSysClockFreq>
 80016a2:	4601      	mov	r1, r0
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	fa21 f303 	lsr.w	r3, r1, r3
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f98c 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00
 80016d4:	40023800 	.word	0x40023800
 80016d8:	0800502c 	.word	0x0800502c
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fa:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b04      	cmp	r3, #4
 8001704:	d007      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x32>
 8001706:	2b08      	cmp	r3, #8
 8001708:	d008      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x38>
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 80b4 	bne.w	8001878 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001712:	60bb      	str	r3, [r7, #8]
       break;
 8001714:	e0b3      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001716:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001718:	60bb      	str	r3, [r7, #8]
      break;
 800171a:	e0b0      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171c:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001726:	4b58      	ldr	r3, [pc, #352]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d04a      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b55      	ldr	r3, [pc, #340]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	ea03 0501 	and.w	r5, r3, r1
 8001748:	ea04 0602 	and.w	r6, r4, r2
 800174c:	4629      	mov	r1, r5
 800174e:	4632      	mov	r2, r6
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4619      	mov	r1, r3
 8001762:	4622      	mov	r2, r4
 8001764:	1b49      	subs	r1, r1, r5
 8001766:	eb62 0206 	sbc.w	r2, r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0194      	lsls	r4, r2, #6
 8001774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	eb64 0402 	sbc.w	r4, r4, r2
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	195b      	adds	r3, r3, r5
 8001796:	eb44 0406 	adc.w	r4, r4, r6
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	0262      	lsls	r2, r4, #9
 80017a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017a8:	0259      	lsls	r1, r3, #9
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7fe fd66 	bl	800028c <__aeabi_uldivmod>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e049      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	ea03 0501 	and.w	r5, r3, r1
 80017de:	ea04 0602 	and.w	r6, r4, r2
 80017e2:	4629      	mov	r1, r5
 80017e4:	4632      	mov	r2, r6
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	0154      	lsls	r4, r2, #5
 80017f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017f4:	014b      	lsls	r3, r1, #5
 80017f6:	4619      	mov	r1, r3
 80017f8:	4622      	mov	r2, r4
 80017fa:	1b49      	subs	r1, r1, r5
 80017fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	0194      	lsls	r4, r2, #6
 800180a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	1a5b      	subs	r3, r3, r1
 8001812:	eb64 0402 	sbc.w	r4, r4, r2
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	00e2      	lsls	r2, r4, #3
 8001820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001824:	00d9      	lsls	r1, r3, #3
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	195b      	adds	r3, r3, r5
 800182c:	eb44 0406 	adc.w	r4, r4, r6
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	02a2      	lsls	r2, r4, #10
 800183a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800183e:	0299      	lsls	r1, r3, #10
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	461a      	mov	r2, r3
 8001850:	4623      	mov	r3, r4
 8001852:	f7fe fd1b 	bl	800028c <__aeabi_uldivmod>
 8001856:	4603      	mov	r3, r0
 8001858:	460c      	mov	r4, r1
 800185a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	60bb      	str	r3, [r7, #8]
      break;
 8001876:	e002      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800187a:	60bb      	str	r3, [r7, #8]
      break;
 800187c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800187e:	68bb      	ldr	r3, [r7, #8]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	00f42400 	.word	0x00f42400
 8001890:	007a1200 	.word	0x007a1200

08001894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018b0:	f7ff fff0 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018b4:	4601      	mov	r1, r0
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018c2:	5cd3      	ldrb	r3, [r2, r3]
 80018c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	0800503c 	.word	0x0800503c

080018d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018d8:	f7ff ffdc 	bl	8001894 <HAL_RCC_GetHCLKFreq>
 80018dc:	4601      	mov	r1, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0b5b      	lsrs	r3, r3, #13
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ea:	5cd3      	ldrb	r3, [r2, r3]
 80018ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	0800503c 	.word	0x0800503c

080018fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d105      	bne.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001920:	2b00      	cmp	r3, #0
 8001922:	d035      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800192a:	f7ff f89b 	bl	8000a64 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001932:	f7ff f897 	bl	8000a64 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0b0      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	019a      	lsls	r2, r3, #6
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	071b      	lsls	r3, r3, #28
 800195c:	4955      	ldr	r1, [pc, #340]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800195e:	4313      	orrs	r3, r2
 8001960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001964:	4b52      	ldr	r3, [pc, #328]	; (8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800196a:	f7ff f87b 	bl	8000a64 <HAL_GetTick>
 800196e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001972:	f7ff f877 	bl	8000a64 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e090      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8083 	beq.w	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	4a43      	ldr	r2, [pc, #268]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ac:	6413      	str	r3, [r2, #64]	; 0x40
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019c6:	f7ff f84d 	bl	8000a64 <HAL_GetTick>
 80019ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff f849 	bl	8000a64 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e062      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02f      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d028      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d114      	bne.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff f817 	bl	8000a64 <HAL_GetTick>
 8001a36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f813 	bl	8000a64 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e02a      	b.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a68:	d10d      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e005      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a90:	6093      	str	r3, [r2, #8]
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001a94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	42470068 	.word	0x42470068
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	42470e40 	.word	0x42470e40

08001ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e03f      	b.n	8001b52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe fed2 	bl	8000890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f90b 	bl	8001d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b088      	sub	sp, #32
 8001b5e:	af02      	add	r7, sp, #8
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	f040 8083 	bne.w	8001c82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_UART_Transmit+0x2e>
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e07b      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Transmit+0x40>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e074      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2221      	movs	r2, #33	; 0x21
 8001bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001bb0:	f7fe ff58 	bl	8000a64 <HAL_GetTick>
 8001bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001bca:	e042      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d122      	bne.n	8001c2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2200      	movs	r2, #0
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f84c 	bl	8001c8c <UART_WaitOnFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e042      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	e017      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	e013      	b.n	8001c52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f829 	bl	8001c8c <UART_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e01f      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1b7      	bne.n	8001bcc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f810 	bl	8001c8c <UART_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e006      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9c:	e02c      	b.n	8001cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d028      	beq.n	8001cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8001cac:	f7fe feda 	bl	8000a64 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d21d      	bcs.n	8001cf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001cca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e00f      	b.n	8001d18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d0c3      	beq.n	8001c9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001d62:	f023 030c 	bic.w	r3, r3, #12
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	68f9      	ldr	r1, [r7, #12]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d8e:	f040 818b 	bne.w	80020a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4ac1      	ldr	r2, [pc, #772]	; (800209c <UART_SetConfig+0x37c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d005      	beq.n	8001da8 <UART_SetConfig+0x88>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4abf      	ldr	r2, [pc, #764]	; (80020a0 <UART_SetConfig+0x380>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	f040 80bd 	bne.w	8001f22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001da8:	f7ff fd94 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 8001dac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	461d      	mov	r5, r3
 8001db2:	f04f 0600 	mov.w	r6, #0
 8001db6:	46a8      	mov	r8, r5
 8001db8:	46b1      	mov	r9, r6
 8001dba:	eb18 0308 	adds.w	r3, r8, r8
 8001dbe:	eb49 0409 	adc.w	r4, r9, r9
 8001dc2:	4698      	mov	r8, r3
 8001dc4:	46a1      	mov	r9, r4
 8001dc6:	eb18 0805 	adds.w	r8, r8, r5
 8001dca:	eb49 0906 	adc.w	r9, r9, r6
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001dda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001dde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001de2:	4688      	mov	r8, r1
 8001de4:	4691      	mov	r9, r2
 8001de6:	eb18 0005 	adds.w	r0, r8, r5
 8001dea:	eb49 0106 	adc.w	r1, r9, r6
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	461d      	mov	r5, r3
 8001df4:	f04f 0600 	mov.w	r6, #0
 8001df8:	196b      	adds	r3, r5, r5
 8001dfa:	eb46 0406 	adc.w	r4, r6, r6
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4623      	mov	r3, r4
 8001e02:	f7fe fa43 	bl	800028c <__aeabi_uldivmod>
 8001e06:	4603      	mov	r3, r0
 8001e08:	460c      	mov	r4, r1
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <UART_SetConfig+0x384>)
 8001e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	461d      	mov	r5, r3
 8001e1c:	f04f 0600 	mov.w	r6, #0
 8001e20:	46a9      	mov	r9, r5
 8001e22:	46b2      	mov	sl, r6
 8001e24:	eb19 0309 	adds.w	r3, r9, r9
 8001e28:	eb4a 040a 	adc.w	r4, sl, sl
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	46a2      	mov	sl, r4
 8001e30:	eb19 0905 	adds.w	r9, r9, r5
 8001e34:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e4c:	4689      	mov	r9, r1
 8001e4e:	4692      	mov	sl, r2
 8001e50:	eb19 0005 	adds.w	r0, r9, r5
 8001e54:	eb4a 0106 	adc.w	r1, sl, r6
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	f04f 0600 	mov.w	r6, #0
 8001e62:	196b      	adds	r3, r5, r5
 8001e64:	eb46 0406 	adc.w	r4, r6, r6
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7fe fa0e 	bl	800028c <__aeabi_uldivmod>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <UART_SetConfig+0x384>)
 8001e78:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	2164      	movs	r1, #100	; 0x64
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	3332      	adds	r3, #50	; 0x32
 8001e8a:	4a86      	ldr	r2, [pc, #536]	; (80020a4 <UART_SetConfig+0x384>)
 8001e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e98:	4498      	add	r8, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	f04f 0600 	mov.w	r6, #0
 8001ea2:	46a9      	mov	r9, r5
 8001ea4:	46b2      	mov	sl, r6
 8001ea6:	eb19 0309 	adds.w	r3, r9, r9
 8001eaa:	eb4a 040a 	adc.w	r4, sl, sl
 8001eae:	4699      	mov	r9, r3
 8001eb0:	46a2      	mov	sl, r4
 8001eb2:	eb19 0905 	adds.w	r9, r9, r5
 8001eb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ec6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001eca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4692      	mov	sl, r2
 8001ed2:	eb19 0005 	adds.w	r0, r9, r5
 8001ed6:	eb4a 0106 	adc.w	r1, sl, r6
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	461d      	mov	r5, r3
 8001ee0:	f04f 0600 	mov.w	r6, #0
 8001ee4:	196b      	adds	r3, r5, r5
 8001ee6:	eb46 0406 	adc.w	r4, r6, r6
 8001eea:	461a      	mov	r2, r3
 8001eec:	4623      	mov	r3, r4
 8001eee:	f7fe f9cd 	bl	800028c <__aeabi_uldivmod>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <UART_SetConfig+0x384>)
 8001efa:	fba3 1302 	umull	r1, r3, r3, r2
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2164      	movs	r1, #100	; 0x64
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	3332      	adds	r3, #50	; 0x32
 8001f0c:	4a65      	ldr	r2, [pc, #404]	; (80020a4 <UART_SetConfig+0x384>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	f003 0207 	and.w	r2, r3, #7
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4442      	add	r2, r8
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e26f      	b.n	8002402 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f22:	f7ff fcc3 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8001f26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	f04f 0600 	mov.w	r6, #0
 8001f30:	46a8      	mov	r8, r5
 8001f32:	46b1      	mov	r9, r6
 8001f34:	eb18 0308 	adds.w	r3, r8, r8
 8001f38:	eb49 0409 	adc.w	r4, r9, r9
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	46a1      	mov	r9, r4
 8001f40:	eb18 0805 	adds.w	r8, r8, r5
 8001f44:	eb49 0906 	adc.w	r9, r9, r6
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f5c:	4688      	mov	r8, r1
 8001f5e:	4691      	mov	r9, r2
 8001f60:	eb18 0005 	adds.w	r0, r8, r5
 8001f64:	eb49 0106 	adc.w	r1, r9, r6
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	461d      	mov	r5, r3
 8001f6e:	f04f 0600 	mov.w	r6, #0
 8001f72:	196b      	adds	r3, r5, r5
 8001f74:	eb46 0406 	adc.w	r4, r6, r6
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4623      	mov	r3, r4
 8001f7c:	f7fe f986 	bl	800028c <__aeabi_uldivmod>
 8001f80:	4603      	mov	r3, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <UART_SetConfig+0x384>)
 8001f88:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	461d      	mov	r5, r3
 8001f96:	f04f 0600 	mov.w	r6, #0
 8001f9a:	46a9      	mov	r9, r5
 8001f9c:	46b2      	mov	sl, r6
 8001f9e:	eb19 0309 	adds.w	r3, r9, r9
 8001fa2:	eb4a 040a 	adc.w	r4, sl, sl
 8001fa6:	4699      	mov	r9, r3
 8001fa8:	46a2      	mov	sl, r4
 8001faa:	eb19 0905 	adds.w	r9, r9, r5
 8001fae:	eb4a 0a06 	adc.w	sl, sl, r6
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fc6:	4689      	mov	r9, r1
 8001fc8:	4692      	mov	sl, r2
 8001fca:	eb19 0005 	adds.w	r0, r9, r5
 8001fce:	eb4a 0106 	adc.w	r1, sl, r6
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	f04f 0600 	mov.w	r6, #0
 8001fdc:	196b      	adds	r3, r5, r5
 8001fde:	eb46 0406 	adc.w	r4, r6, r6
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	f7fe f951 	bl	800028c <__aeabi_uldivmod>
 8001fea:	4603      	mov	r3, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <UART_SetConfig+0x384>)
 8001ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2164      	movs	r1, #100	; 0x64
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <UART_SetConfig+0x384>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002012:	4498      	add	r8, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	461d      	mov	r5, r3
 8002018:	f04f 0600 	mov.w	r6, #0
 800201c:	46a9      	mov	r9, r5
 800201e:	46b2      	mov	sl, r6
 8002020:	eb19 0309 	adds.w	r3, r9, r9
 8002024:	eb4a 040a 	adc.w	r4, sl, sl
 8002028:	4699      	mov	r9, r3
 800202a:	46a2      	mov	sl, r4
 800202c:	eb19 0905 	adds.w	r9, r9, r5
 8002030:	eb4a 0a06 	adc.w	sl, sl, r6
 8002034:	f04f 0100 	mov.w	r1, #0
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002048:	4689      	mov	r9, r1
 800204a:	4692      	mov	sl, r2
 800204c:	eb19 0005 	adds.w	r0, r9, r5
 8002050:	eb4a 0106 	adc.w	r1, sl, r6
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	461d      	mov	r5, r3
 800205a:	f04f 0600 	mov.w	r6, #0
 800205e:	196b      	adds	r3, r5, r5
 8002060:	eb46 0406 	adc.w	r4, r6, r6
 8002064:	461a      	mov	r2, r3
 8002066:	4623      	mov	r3, r4
 8002068:	f7fe f910 	bl	800028c <__aeabi_uldivmod>
 800206c:	4603      	mov	r3, r0
 800206e:	460c      	mov	r4, r1
 8002070:	461a      	mov	r2, r3
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <UART_SetConfig+0x384>)
 8002074:	fba3 1302 	umull	r1, r3, r3, r2
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	2164      	movs	r1, #100	; 0x64
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	3332      	adds	r3, #50	; 0x32
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <UART_SetConfig+0x384>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	f003 0207 	and.w	r2, r3, #7
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4442      	add	r2, r8
 8002098:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800209a:	e1b2      	b.n	8002402 <UART_SetConfig+0x6e2>
 800209c:	40011000 	.word	0x40011000
 80020a0:	40011400 	.word	0x40011400
 80020a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4ad7      	ldr	r2, [pc, #860]	; (800240c <UART_SetConfig+0x6ec>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d005      	beq.n	80020be <UART_SetConfig+0x39e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4ad6      	ldr	r2, [pc, #856]	; (8002410 <UART_SetConfig+0x6f0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	f040 80d1 	bne.w	8002260 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80020be:	f7ff fc09 	bl	80018d4 <HAL_RCC_GetPCLK2Freq>
 80020c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	469a      	mov	sl, r3
 80020c8:	f04f 0b00 	mov.w	fp, #0
 80020cc:	46d0      	mov	r8, sl
 80020ce:	46d9      	mov	r9, fp
 80020d0:	eb18 0308 	adds.w	r3, r8, r8
 80020d4:	eb49 0409 	adc.w	r4, r9, r9
 80020d8:	4698      	mov	r8, r3
 80020da:	46a1      	mov	r9, r4
 80020dc:	eb18 080a 	adds.w	r8, r8, sl
 80020e0:	eb49 090b 	adc.w	r9, r9, fp
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80020f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80020f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80020f8:	4688      	mov	r8, r1
 80020fa:	4691      	mov	r9, r2
 80020fc:	eb1a 0508 	adds.w	r5, sl, r8
 8002100:	eb4b 0609 	adc.w	r6, fp, r9
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4619      	mov	r1, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	f04f 0400 	mov.w	r4, #0
 8002116:	0094      	lsls	r4, r2, #2
 8002118:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800211c:	008b      	lsls	r3, r1, #2
 800211e:	461a      	mov	r2, r3
 8002120:	4623      	mov	r3, r4
 8002122:	4628      	mov	r0, r5
 8002124:	4631      	mov	r1, r6
 8002126:	f7fe f8b1 	bl	800028c <__aeabi_uldivmod>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	461a      	mov	r2, r3
 8002130:	4bb8      	ldr	r3, [pc, #736]	; (8002414 <UART_SetConfig+0x6f4>)
 8002132:	fba3 2302 	umull	r2, r3, r3, r2
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	469b      	mov	fp, r3
 8002140:	f04f 0c00 	mov.w	ip, #0
 8002144:	46d9      	mov	r9, fp
 8002146:	46e2      	mov	sl, ip
 8002148:	eb19 0309 	adds.w	r3, r9, r9
 800214c:	eb4a 040a 	adc.w	r4, sl, sl
 8002150:	4699      	mov	r9, r3
 8002152:	46a2      	mov	sl, r4
 8002154:	eb19 090b 	adds.w	r9, r9, fp
 8002158:	eb4a 0a0c 	adc.w	sl, sl, ip
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002168:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800216c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002170:	4689      	mov	r9, r1
 8002172:	4692      	mov	sl, r2
 8002174:	eb1b 0509 	adds.w	r5, fp, r9
 8002178:	eb4c 060a 	adc.w	r6, ip, sl
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4619      	mov	r1, r3
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	f04f 0400 	mov.w	r4, #0
 800218e:	0094      	lsls	r4, r2, #2
 8002190:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002194:	008b      	lsls	r3, r1, #2
 8002196:	461a      	mov	r2, r3
 8002198:	4623      	mov	r3, r4
 800219a:	4628      	mov	r0, r5
 800219c:	4631      	mov	r1, r6
 800219e:	f7fe f875 	bl	800028c <__aeabi_uldivmod>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b9a      	ldr	r3, [pc, #616]	; (8002414 <UART_SetConfig+0x6f4>)
 80021aa:	fba3 1302 	umull	r1, r3, r3, r2
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2164      	movs	r1, #100	; 0x64
 80021b2:	fb01 f303 	mul.w	r3, r1, r3
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	3332      	adds	r3, #50	; 0x32
 80021bc:	4a95      	ldr	r2, [pc, #596]	; (8002414 <UART_SetConfig+0x6f4>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c8:	4498      	add	r8, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	469b      	mov	fp, r3
 80021ce:	f04f 0c00 	mov.w	ip, #0
 80021d2:	46d9      	mov	r9, fp
 80021d4:	46e2      	mov	sl, ip
 80021d6:	eb19 0309 	adds.w	r3, r9, r9
 80021da:	eb4a 040a 	adc.w	r4, sl, sl
 80021de:	4699      	mov	r9, r3
 80021e0:	46a2      	mov	sl, r4
 80021e2:	eb19 090b 	adds.w	r9, r9, fp
 80021e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021fe:	4689      	mov	r9, r1
 8002200:	4692      	mov	sl, r2
 8002202:	eb1b 0509 	adds.w	r5, fp, r9
 8002206:	eb4c 060a 	adc.w	r6, ip, sl
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4619      	mov	r1, r3
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0094      	lsls	r4, r2, #2
 800221e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002222:	008b      	lsls	r3, r1, #2
 8002224:	461a      	mov	r2, r3
 8002226:	4623      	mov	r3, r4
 8002228:	4628      	mov	r0, r5
 800222a:	4631      	mov	r1, r6
 800222c:	f7fe f82e 	bl	800028c <__aeabi_uldivmod>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	461a      	mov	r2, r3
 8002236:	4b77      	ldr	r3, [pc, #476]	; (8002414 <UART_SetConfig+0x6f4>)
 8002238:	fba3 1302 	umull	r1, r3, r3, r2
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	2164      	movs	r1, #100	; 0x64
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	3332      	adds	r3, #50	; 0x32
 800224a:	4a72      	ldr	r2, [pc, #456]	; (8002414 <UART_SetConfig+0x6f4>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4442      	add	r2, r8
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	e0d0      	b.n	8002402 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002260:	f7ff fb24 	bl	80018ac <HAL_RCC_GetPCLK1Freq>
 8002264:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	469a      	mov	sl, r3
 800226a:	f04f 0b00 	mov.w	fp, #0
 800226e:	46d0      	mov	r8, sl
 8002270:	46d9      	mov	r9, fp
 8002272:	eb18 0308 	adds.w	r3, r8, r8
 8002276:	eb49 0409 	adc.w	r4, r9, r9
 800227a:	4698      	mov	r8, r3
 800227c:	46a1      	mov	r9, r4
 800227e:	eb18 080a 	adds.w	r8, r8, sl
 8002282:	eb49 090b 	adc.w	r9, r9, fp
 8002286:	f04f 0100 	mov.w	r1, #0
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002292:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002296:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800229a:	4688      	mov	r8, r1
 800229c:	4691      	mov	r9, r2
 800229e:	eb1a 0508 	adds.w	r5, sl, r8
 80022a2:	eb4b 0609 	adc.w	r6, fp, r9
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	0094      	lsls	r4, r2, #2
 80022ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022be:	008b      	lsls	r3, r1, #2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	4628      	mov	r0, r5
 80022c6:	4631      	mov	r1, r6
 80022c8:	f7fd ffe0 	bl	800028c <__aeabi_uldivmod>
 80022cc:	4603      	mov	r3, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b50      	ldr	r3, [pc, #320]	; (8002414 <UART_SetConfig+0x6f4>)
 80022d4:	fba3 2302 	umull	r2, r3, r3, r2
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	469b      	mov	fp, r3
 80022e2:	f04f 0c00 	mov.w	ip, #0
 80022e6:	46d9      	mov	r9, fp
 80022e8:	46e2      	mov	sl, ip
 80022ea:	eb19 0309 	adds.w	r3, r9, r9
 80022ee:	eb4a 040a 	adc.w	r4, sl, sl
 80022f2:	4699      	mov	r9, r3
 80022f4:	46a2      	mov	sl, r4
 80022f6:	eb19 090b 	adds.w	r9, r9, fp
 80022fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800230a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800230e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002312:	4689      	mov	r9, r1
 8002314:	4692      	mov	sl, r2
 8002316:	eb1b 0509 	adds.w	r5, fp, r9
 800231a:	eb4c 060a 	adc.w	r6, ip, sl
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	f04f 0400 	mov.w	r4, #0
 8002330:	0094      	lsls	r4, r2, #2
 8002332:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002336:	008b      	lsls	r3, r1, #2
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	4628      	mov	r0, r5
 800233e:	4631      	mov	r1, r6
 8002340:	f7fd ffa4 	bl	800028c <__aeabi_uldivmod>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	461a      	mov	r2, r3
 800234a:	4b32      	ldr	r3, [pc, #200]	; (8002414 <UART_SetConfig+0x6f4>)
 800234c:	fba3 1302 	umull	r1, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	2164      	movs	r1, #100	; 0x64
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	3332      	adds	r3, #50	; 0x32
 800235e:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <UART_SetConfig+0x6f4>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800236a:	4498      	add	r8, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	469b      	mov	fp, r3
 8002370:	f04f 0c00 	mov.w	ip, #0
 8002374:	46d9      	mov	r9, fp
 8002376:	46e2      	mov	sl, ip
 8002378:	eb19 0309 	adds.w	r3, r9, r9
 800237c:	eb4a 040a 	adc.w	r4, sl, sl
 8002380:	4699      	mov	r9, r3
 8002382:	46a2      	mov	sl, r4
 8002384:	eb19 090b 	adds.w	r9, r9, fp
 8002388:	eb4a 0a0c 	adc.w	sl, sl, ip
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002398:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800239c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023a0:	4689      	mov	r9, r1
 80023a2:	4692      	mov	sl, r2
 80023a4:	eb1b 0509 	adds.w	r5, fp, r9
 80023a8:	eb4c 060a 	adc.w	r6, ip, sl
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f04f 0400 	mov.w	r4, #0
 80023be:	0094      	lsls	r4, r2, #2
 80023c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023c4:	008b      	lsls	r3, r1, #2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	4628      	mov	r0, r5
 80023cc:	4631      	mov	r1, r6
 80023ce:	f7fd ff5d 	bl	800028c <__aeabi_uldivmod>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b0e      	ldr	r3, [pc, #56]	; (8002414 <UART_SetConfig+0x6f4>)
 80023da:	fba3 1302 	umull	r1, r3, r3, r2
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2164      	movs	r1, #100	; 0x64
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	3332      	adds	r3, #50	; 0x32
 80023ec:	4a09      	ldr	r2, [pc, #36]	; (8002414 <UART_SetConfig+0x6f4>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	f003 020f 	and.w	r2, r3, #15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4442      	add	r2, r8
 80023fe:	609a      	str	r2, [r3, #8]
}
 8002400:	e7ff      	b.n	8002402 <UART_SetConfig+0x6e2>
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240c:	40011000 	.word	0x40011000
 8002410:	40011400 	.word	0x40011400
 8002414:	51eb851f 	.word	0x51eb851f

08002418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800241a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002442:	f7fe fa93 	bl	800096c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002446:	f002 fd23 	bl	8004e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7fe f8df 	bl	800060c <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
  ldr   r0, =_estack
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800245c:	08005068 	.word	0x08005068
  ldr r2, =_sbss
 8002460:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002464:	20017670 	.word	0x20017670

08002468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC_IRQHandler>

0800246a <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002488:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <vApplicationGetIdleTaskMemory+0x30>)
 800248e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2282      	movs	r2, #130	; 0x82
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000030 	.word	0x20000030
 80024a8:	20000088 	.word	0x20000088

080024ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f103 0208 	add.w	r2, r3, #8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f04f 32ff 	mov.w	r2, #4294967295
 80024c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f103 0208 	add.w	r2, r3, #8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0208 	add.w	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6892      	ldr	r2, [r2, #8]
 8002564:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6852      	ldr	r2, [r2, #4]
 800256e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	d103      	bne.n	8002582 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08e      	sub	sp, #56	; 0x38
 80025a6:	af04      	add	r7, sp, #16
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	e7fe      	b.n	80025c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <xTaskCreateStatic+0x42>
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e7fe      	b.n	80025e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025e4:	2358      	movs	r3, #88	; 0x58
 80025e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b58      	cmp	r3, #88	; 0x58
 80025ec:	d009      	beq.n	8002602 <xTaskCreateStatic+0x60>
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e7fe      	b.n	8002600 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01e      	beq.n	8002646 <xTaskCreateStatic+0xa4>
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01b      	beq.n	8002646 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002616:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002620:	2300      	movs	r3, #0
 8002622:	9303      	str	r3, [sp, #12]
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f850 	bl	80026de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800263e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002640:	f000 f8d4 	bl	80027ec <prvAddNewTaskToReadyList>
 8002644:	e001      	b.n	800264a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800264a:	697b      	ldr	r3, [r7, #20]
	}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08c      	sub	sp, #48	; 0x30
 8002658:	af04      	add	r7, sp, #16
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4618      	mov	r0, r3
 800266a:	f000 ff01 	bl	8003470 <pvPortMalloc>
 800266e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00e      	beq.n	8002694 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002676:	2058      	movs	r0, #88	; 0x58
 8002678:	f000 fefa 	bl	8003470 <pvPortMalloc>
 800267c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
 800268a:	e005      	b.n	8002698 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800268c:	6978      	ldr	r0, [r7, #20]
 800268e:	f000 ffb5 	bl	80035fc <vPortFree>
 8002692:	e001      	b.n	8002698 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9303      	str	r3, [sp, #12]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f80e 	bl	80026de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026c2:	69f8      	ldr	r0, [r7, #28]
 80026c4:	f000 f892 	bl	80027ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026c8:	2301      	movs	r3, #1
 80026ca:	61bb      	str	r3, [r7, #24]
 80026cc:	e002      	b.n	80026d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026d4:	69bb      	ldr	r3, [r7, #24]
	}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b088      	sub	sp, #32
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	461a      	mov	r2, r3
 80026f6:	21a5      	movs	r1, #165	; 0xa5
 80026f8:	f002 fc08 	bl	8004f0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002706:	3b01      	subs	r3, #1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <prvInitialiseNewTask+0x56>
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e7fe      	b.n	8002732 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	e012      	b.n	8002760 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	7819      	ldrb	r1, [r3, #0]
 8002742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	3334      	adds	r3, #52	; 0x34
 800274a:	460a      	mov	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b09      	cmp	r3, #9
 8002764:	d9e9      	bls.n	800273a <prvInitialiseNewTask+0x5c>
 8002766:	e000      	b.n	800276a <prvInitialiseNewTask+0x8c>
		{
			break;
 8002768:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	2b04      	cmp	r3, #4
 8002776:	d901      	bls.n	800277c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002778:	2304      	movs	r3, #4
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002786:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	3304      	adds	r3, #4
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff feaa 	bl	80024ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	3318      	adds	r3, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fea5 	bl	80024ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	f1c3 0205 	rsb	r2, r3, #5
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	2200      	movs	r2, #0
 80027bc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	69b8      	ldr	r0, [r7, #24]
 80027cc:	f000 fbbe 	bl	8002f4c <pxPortInitialiseStack>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027ec:	b5b0      	push	{r4, r5, r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027f4:	f000 fcd2 	bl	800319c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <prvAddNewTaskToReadyList+0xfc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a3a      	ldr	r2, [pc, #232]	; (80028e8 <prvAddNewTaskToReadyList+0xfc>)
 8002800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <prvAddNewTaskToReadyList+0x100>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800280a:	4a38      	ldr	r2, [pc, #224]	; (80028ec <prvAddNewTaskToReadyList+0x100>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <prvAddNewTaskToReadyList+0xfc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d110      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002818:	f000 fad8 	bl	8002dcc <prvInitialiseTaskLists>
 800281c:	e00d      	b.n	800283a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <prvAddNewTaskToReadyList+0x104>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <prvAddNewTaskToReadyList+0x100>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	429a      	cmp	r2, r3
 8002832:	d802      	bhi.n	800283a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002834:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <prvAddNewTaskToReadyList+0x100>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <prvAddNewTaskToReadyList+0x108>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3301      	adds	r3, #1
 8002840:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <prvAddNewTaskToReadyList+0x108>)
 8002842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <prvAddNewTaskToReadyList+0x108>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <prvAddNewTaskToReadyList+0x94>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	f002 f917 	bl	8004a88 <SEGGER_SYSVIEW_OnTaskCreate>
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	461d      	mov	r5, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461c      	mov	r4, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	1ae3      	subs	r3, r4, r3
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	462b      	mov	r3, r5
 800287c:	f001 f87a 	bl	8003974 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f002 f988 	bl	8004b98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <prvAddNewTaskToReadyList+0x10c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <prvAddNewTaskToReadyList+0x10c>)
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <prvAddNewTaskToReadyList+0x110>)
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7ff fe28 	bl	8002506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028b6:	f000 fc9f 	bl	80031f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <prvAddNewTaskToReadyList+0x104>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00e      	beq.n	80028e0 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <prvAddNewTaskToReadyList+0x100>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <prvAddNewTaskToReadyList+0x114>)
 80028d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028e0:	bf00      	nop
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bdb0      	pop	{r4, r5, r7, pc}
 80028e8:	20000368 	.word	0x20000368
 80028ec:	20000290 	.word	0x20000290
 80028f0:	20000374 	.word	0x20000374
 80028f4:	20000384 	.word	0x20000384
 80028f8:	20000370 	.word	0x20000370
 80028fc:	20000294 	.word	0x20000294
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002912:	463a      	mov	r2, r7
 8002914:	1d39      	adds	r1, r7, #4
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fdac 	bl	8002478 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	9202      	str	r2, [sp, #8]
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2300      	movs	r3, #0
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2300      	movs	r3, #0
 8002930:	460a      	mov	r2, r1
 8002932:	491d      	ldr	r1, [pc, #116]	; (80029a8 <vTaskStartScheduler+0xa4>)
 8002934:	481d      	ldr	r0, [pc, #116]	; (80029ac <vTaskStartScheduler+0xa8>)
 8002936:	f7ff fe34 	bl	80025a2 <xTaskCreateStatic>
 800293a:	4602      	mov	r2, r0
 800293c:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <vTaskStartScheduler+0xac>)
 800293e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <vTaskStartScheduler+0xac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002948:	2301      	movs	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e001      	b.n	8002952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d115      	bne.n	8002984 <vTaskStartScheduler+0x80>
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <vTaskStartScheduler+0xb0>)
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <vTaskStartScheduler+0xb4>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <vTaskStartScheduler+0xb8>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800297e:	f000 fb6f 	bl	8003060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002982:	e00d      	b.n	80029a0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298a:	d109      	bne.n	80029a0 <vTaskStartScheduler+0x9c>
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e7fe      	b.n	800299e <vTaskStartScheduler+0x9a>
}
 80029a0:	bf00      	nop
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	08004f68 	.word	0x08004f68
 80029ac:	08002d9d 	.word	0x08002d9d
 80029b0:	2000038c 	.word	0x2000038c
 80029b4:	20000388 	.word	0x20000388
 80029b8:	20000374 	.word	0x20000374
 80029bc:	2000036c 	.word	0x2000036c

080029c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <vTaskSuspendAll+0x18>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <vTaskSuspendAll+0x18>)
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000390 	.word	0x20000390

080029dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <xTaskResumeAll+0x11c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <xTaskResumeAll+0x2a>
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	e7fe      	b.n	8002a04 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a06:	f000 fbc9 	bl	800319c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <xTaskResumeAll+0x11c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <xTaskResumeAll+0x11c>)
 8002a12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a14:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <xTaskResumeAll+0x11c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d165      	bne.n	8002ae8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a1c:	4b37      	ldr	r3, [pc, #220]	; (8002afc <xTaskResumeAll+0x120>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d061      	beq.n	8002ae8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a24:	e032      	b.n	8002a8c <xTaskResumeAll+0xb0>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <xTaskResumeAll+0x124>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3318      	adds	r3, #24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fd8b 	bl	800254e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fd86 	bl	800254e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 f8a7 	bl	8004b98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	2201      	movs	r2, #1
 8002a50:	409a      	lsls	r2, r3
 8002a52:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <xTaskResumeAll+0x128>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	4a2a      	ldr	r2, [pc, #168]	; (8002b04 <xTaskResumeAll+0x128>)
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4a27      	ldr	r2, [pc, #156]	; (8002b08 <xTaskResumeAll+0x12c>)
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f7ff fd47 	bl	8002506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <xTaskResumeAll+0x130>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <xTaskResumeAll+0x134>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <xTaskResumeAll+0x124>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1c8      	bne.n	8002a26 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a9a:	f000 fa31 	bl	8002f00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a9e:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <xTaskResumeAll+0x138>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002aaa:	f000 f849 	bl	8002b40 <xTaskIncrementTick>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <xTaskResumeAll+0x134>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f1      	bne.n	8002aaa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <xTaskResumeAll+0x138>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002acc:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <xTaskResumeAll+0x134>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <xTaskResumeAll+0x13c>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ae8:	f000 fb86 	bl	80031f8 <vPortExitCritical>

	return xAlreadyYielded;
 8002aec:	68bb      	ldr	r3, [r7, #8]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000390 	.word	0x20000390
 8002afc:	20000368 	.word	0x20000368
 8002b00:	20000328 	.word	0x20000328
 8002b04:	20000370 	.word	0x20000370
 8002b08:	20000294 	.word	0x20000294
 8002b0c:	20000290 	.word	0x20000290
 8002b10:	2000037c 	.word	0x2000037c
 8002b14:	20000378 	.word	0x20000378
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b22:	f000 fc21 	bl	8003368 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8002b2a:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <xTaskGetTickCountFromISR+0x20>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b30:	683b      	ldr	r3, [r7, #0]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000036c 	.word	0x2000036c

08002b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b4a:	4b52      	ldr	r3, [pc, #328]	; (8002c94 <xTaskIncrementTick+0x154>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 8090 	bne.w	8002c74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b5c:	4a4e      	ldr	r2, [pc, #312]	; (8002c98 <xTaskIncrementTick+0x158>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11f      	bne.n	8002ba8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <xTaskIncrementTick+0x46>
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	e7fe      	b.n	8002b84 <xTaskIncrementTick+0x44>
 8002b86:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <xTaskIncrementTick+0x160>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a42      	ldr	r2, [pc, #264]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4a42      	ldr	r2, [pc, #264]	; (8002ca0 <xTaskIncrementTick+0x160>)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <xTaskIncrementTick+0x164>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a40      	ldr	r2, [pc, #256]	; (8002ca4 <xTaskIncrementTick+0x164>)
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	f000 f9ac 	bl	8002f00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ba8:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <xTaskIncrementTick+0x168>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d351      	bcc.n	8002c56 <xTaskIncrementTick+0x116>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb2:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <xTaskIncrementTick+0x80>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <xTaskIncrementTick+0x82>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d004      	beq.n	8002bd0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <xTaskIncrementTick+0x168>)
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	601a      	str	r2, [r3, #0]
					break;
 8002bce:	e042      	b.n	8002c56 <xTaskIncrementTick+0x116>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bd0:	4b32      	ldr	r3, [pc, #200]	; (8002c9c <xTaskIncrementTick+0x15c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d203      	bcs.n	8002bf0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002be8:	4a2f      	ldr	r2, [pc, #188]	; (8002ca8 <xTaskIncrementTick+0x168>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
						break;
 8002bee:	e032      	b.n	8002c56 <xTaskIncrementTick+0x116>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fcaa 	bl	800254e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d004      	beq.n	8002c0c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3318      	adds	r3, #24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fca1 	bl	800254e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 ffc2 	bl	8004b98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <xTaskIncrementTick+0x16c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	4a22      	ldr	r2, [pc, #136]	; (8002cac <xTaskIncrementTick+0x16c>)
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4a1f      	ldr	r2, [pc, #124]	; (8002cb0 <xTaskIncrementTick+0x170>)
 8002c34:	441a      	add	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7ff fc62 	bl	8002506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c46:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <xTaskIncrementTick+0x174>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d3b0      	bcc.n	8002bb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002c50:	2301      	movs	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c54:	e7ad      	b.n	8002bb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <xTaskIncrementTick+0x174>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <xTaskIncrementTick+0x170>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d907      	bls.n	8002c7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e004      	b.n	8002c7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <xTaskIncrementTick+0x178>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	4a0f      	ldr	r2, [pc, #60]	; (8002cb8 <xTaskIncrementTick+0x178>)
 8002c7c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c7e:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <xTaskIncrementTick+0x17c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <xTaskIncrementTick+0x14a>
		{
			xSwitchRequired = pdTRUE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c8a:	697b      	ldr	r3, [r7, #20]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000390 	.word	0x20000390
 8002c98:	2000036c 	.word	0x2000036c
 8002c9c:	20000320 	.word	0x20000320
 8002ca0:	20000324 	.word	0x20000324
 8002ca4:	20000380 	.word	0x20000380
 8002ca8:	20000388 	.word	0x20000388
 8002cac:	20000370 	.word	0x20000370
 8002cb0:	20000294 	.word	0x20000294
 8002cb4:	20000290 	.word	0x20000290
 8002cb8:	20000378 	.word	0x20000378
 8002cbc:	2000037c 	.word	0x2000037c

08002cc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cc6:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <vTaskSwitchContext+0xc4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002cce:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <vTaskSwitchContext+0xc8>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002cd4:	e051      	b.n	8002d7a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8002cd6:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <vTaskSwitchContext+0xc8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <vTaskSwitchContext+0xcc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f1c3 031f 	rsb	r3, r3, #31
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4927      	ldr	r1, [pc, #156]	; (8002d90 <vTaskSwitchContext+0xd0>)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	e7fe      	b.n	8002d18 <vTaskSwitchContext+0x58>
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <vTaskSwitchContext+0xd0>)
 8002d26:	4413      	add	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d104      	bne.n	8002d4a <vTaskSwitchContext+0x8a>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <vTaskSwitchContext+0xd4>)
 8002d52:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <vTaskSwitchContext+0xd4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3334      	adds	r3, #52	; 0x34
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	490e      	ldr	r1, [pc, #56]	; (8002d98 <vTaskSwitchContext+0xd8>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 f8ba 	bl	8004ed8 <memcmp>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <vTaskSwitchContext+0xb6>
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <vTaskSwitchContext+0xd4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fece 	bl	8004b10 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002d74:	e001      	b.n	8002d7a <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8002d76:	f001 fe6b 	bl	8004a50 <SEGGER_SYSVIEW_OnIdle>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000390 	.word	0x20000390
 8002d88:	2000037c 	.word	0x2000037c
 8002d8c:	20000370 	.word	0x20000370
 8002d90:	20000294 	.word	0x20000294
 8002d94:	20000290 	.word	0x20000290
 8002d98:	08004f68 	.word	0x08004f68

08002d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002da4:	f000 f852 	bl	8002e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <prvIdleTask+0x28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d9f9      	bls.n	8002da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <prvIdleTask+0x2c>)
 8002db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002dc0:	e7f0      	b.n	8002da4 <prvIdleTask+0x8>
 8002dc2:	bf00      	nop
 8002dc4:	20000294 	.word	0x20000294
 8002dc8:	e000ed04 	.word	0xe000ed04

08002dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	e00c      	b.n	8002df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <prvInitialiseTaskLists+0x60>)
 8002de4:	4413      	add	r3, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fb60 	bl	80024ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3301      	adds	r3, #1
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d9ef      	bls.n	8002dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <prvInitialiseTaskLists+0x64>)
 8002dfa:	f7ff fb57 	bl	80024ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002dfe:	480d      	ldr	r0, [pc, #52]	; (8002e34 <prvInitialiseTaskLists+0x68>)
 8002e00:	f7ff fb54 	bl	80024ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <prvInitialiseTaskLists+0x6c>)
 8002e06:	f7ff fb51 	bl	80024ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e0a:	480c      	ldr	r0, [pc, #48]	; (8002e3c <prvInitialiseTaskLists+0x70>)
 8002e0c:	f7ff fb4e 	bl	80024ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <prvInitialiseTaskLists+0x74>)
 8002e12:	f7ff fb4b 	bl	80024ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <prvInitialiseTaskLists+0x78>)
 8002e18:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <prvInitialiseTaskLists+0x64>)
 8002e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <prvInitialiseTaskLists+0x7c>)
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <prvInitialiseTaskLists+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000294 	.word	0x20000294
 8002e30:	200002f8 	.word	0x200002f8
 8002e34:	2000030c 	.word	0x2000030c
 8002e38:	20000328 	.word	0x20000328
 8002e3c:	2000033c 	.word	0x2000033c
 8002e40:	20000354 	.word	0x20000354
 8002e44:	20000320 	.word	0x20000320
 8002e48:	20000324 	.word	0x20000324

08002e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e52:	e019      	b.n	8002e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e54:	f000 f9a2 	bl	800319c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <prvCheckTasksWaitingTermination+0x4c>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fb72 	bl	800254e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <prvCheckTasksWaitingTermination+0x50>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <prvCheckTasksWaitingTermination+0x50>)
 8002e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <prvCheckTasksWaitingTermination+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <prvCheckTasksWaitingTermination+0x54>)
 8002e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002e7e:	f000 f9bb 	bl	80031f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f80e 	bl	8002ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <prvCheckTasksWaitingTermination+0x54>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e1      	bne.n	8002e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	2000033c 	.word	0x2000033c
 8002e9c:	20000368 	.word	0x20000368
 8002ea0:	20000350 	.word	0x20000350

08002ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fb9e 	bl	80035fc <vPortFree>
				vPortFree( pxTCB );
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb9b 	bl	80035fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ec6:	e017      	b.n	8002ef8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d103      	bne.n	8002eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fb92 	bl	80035fc <vPortFree>
	}
 8002ed8:	e00e      	b.n	8002ef8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d009      	beq.n	8002ef8 <prvDeleteTCB+0x54>
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e7fe      	b.n	8002ef6 <prvDeleteTCB+0x52>
	}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <prvResetNextTaskUnblockTime+0x44>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <prvResetNextTaskUnblockTime+0x14>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <prvResetNextTaskUnblockTime+0x16>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <prvResetNextTaskUnblockTime+0x48>)
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f22:	e008      	b.n	8002f36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <prvResetNextTaskUnblockTime+0x44>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <prvResetNextTaskUnblockTime+0x48>)
 8002f34:	6013      	str	r3, [r2, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000320 	.word	0x20000320
 8002f48:	20000388 	.word	0x20000388

08002f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3b04      	subs	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3b04      	subs	r3, #4
 8002f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 0201 	bic.w	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3b04      	subs	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <pxPortInitialiseStack+0x64>)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b14      	subs	r3, #20
 8002f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3b04      	subs	r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f06f 0202 	mvn.w	r2, #2
 8002f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3b20      	subs	r3, #32
 8002fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	08002fb5 	.word	0x08002fb5

08002fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <prvTaskExitError+0x50>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d009      	beq.n	8002fdc <prvTaskExitError+0x28>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e7fe      	b.n	8002fda <prvTaskExitError+0x26>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002fee:	bf00      	nop
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0fc      	beq.n	8002ff0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	2000000c 	.word	0x2000000c
	...

08003010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <pxCurrentTCBConst2>)
 8003012:	6819      	ldr	r1, [r3, #0]
 8003014:	6808      	ldr	r0, [r1, #0]
 8003016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	f380 8809 	msr	PSP, r0
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f380 8811 	msr	BASEPRI, r0
 800302a:	4770      	bx	lr
 800302c:	f3af 8000 	nop.w

08003030 <pxCurrentTCBConst2>:
 8003030:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop

08003038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003038:	4808      	ldr	r0, [pc, #32]	; (800305c <prvPortStartFirstTask+0x24>)
 800303a:	6800      	ldr	r0, [r0, #0]
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	f380 8808 	msr	MSP, r0
 8003042:	f04f 0000 	mov.w	r0, #0
 8003046:	f380 8814 	msr	CONTROL, r0
 800304a:	b662      	cpsie	i
 800304c:	b661      	cpsie	f
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	df00      	svc	0
 8003058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800305a:	bf00      	nop
 800305c:	e000ed08 	.word	0xe000ed08

08003060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <xPortStartScheduler+0x118>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a44      	ldr	r2, [pc, #272]	; (800317c <xPortStartScheduler+0x11c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d109      	bne.n	8003084 <xPortStartScheduler+0x24>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	e7fe      	b.n	8003082 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <xPortStartScheduler+0x118>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <xPortStartScheduler+0x120>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d109      	bne.n	80030a2 <xPortStartScheduler+0x42>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e7fe      	b.n	80030a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030a2:	4b38      	ldr	r3, [pc, #224]	; (8003184 <xPortStartScheduler+0x124>)
 80030a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b30      	ldr	r3, [pc, #192]	; (8003188 <xPortStartScheduler+0x128>)
 80030c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030ca:	4b30      	ldr	r3, [pc, #192]	; (800318c <xPortStartScheduler+0x12c>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030d0:	e009      	b.n	80030e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <xPortStartScheduler+0x12c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	4a2c      	ldr	r2, [pc, #176]	; (800318c <xPortStartScheduler+0x12c>)
 80030da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d0ef      	beq.n	80030d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <xPortStartScheduler+0x12c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d009      	beq.n	8003112 <xPortStartScheduler+0xb2>
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	e7fe      	b.n	8003110 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <xPortStartScheduler+0x12c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <xPortStartScheduler+0x12c>)
 800311a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <xPortStartScheduler+0x12c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <xPortStartScheduler+0x12c>)
 8003126:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <xPortStartScheduler+0x130>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a16      	ldr	r2, [pc, #88]	; (8003190 <xPortStartScheduler+0x130>)
 8003136:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800313a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <xPortStartScheduler+0x130>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a13      	ldr	r2, [pc, #76]	; (8003190 <xPortStartScheduler+0x130>)
 8003142:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003146:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003148:	f000 f8e0 	bl	800330c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <xPortStartScheduler+0x134>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003152:	f000 f8ff 	bl	8003354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <xPortStartScheduler+0x138>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <xPortStartScheduler+0x138>)
 800315c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003160:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003162:	f7ff ff69 	bl	8003038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003166:	f7ff fdab 	bl	8002cc0 <vTaskSwitchContext>
	prvTaskExitError();
 800316a:	f7ff ff23 	bl	8002fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	e000ed00 	.word	0xe000ed00
 800317c:	410fc271 	.word	0x410fc271
 8003180:	410fc270 	.word	0x410fc270
 8003184:	e000e400 	.word	0xe000e400
 8003188:	20000394 	.word	0x20000394
 800318c:	20000398 	.word	0x20000398
 8003190:	e000ed20 	.word	0xe000ed20
 8003194:	2000000c 	.word	0x2000000c
 8003198:	e000ef34 	.word	0xe000ef34

0800319c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <vPortEnterCritical+0x54>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3301      	adds	r3, #1
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <vPortEnterCritical+0x54>)
 80031bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <vPortEnterCritical+0x54>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10e      	bne.n	80031e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vPortEnterCritical+0x58>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <vPortEnterCritical+0x48>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	e7fe      	b.n	80031e2 <vPortEnterCritical+0x46>
	}
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	2000000c 	.word	0x2000000c
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <vPortExitCritical+0x4c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <vPortExitCritical+0x22>
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	e7fe      	b.n	8003218 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <vPortExitCritical+0x4c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3b01      	subs	r3, #1
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <vPortExitCritical+0x4c>)
 8003222:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003224:	4b07      	ldr	r3, [pc, #28]	; (8003244 <vPortExitCritical+0x4c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <vPortExitCritical+0x3e>
 800322c:	2300      	movs	r3, #0
 800322e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000000c 	.word	0x2000000c
	...

08003250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003250:	f3ef 8009 	mrs	r0, PSP
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <pxCurrentTCBConst>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f01e 0f10 	tst.w	lr, #16
 8003260:	bf08      	it	eq
 8003262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326a:	6010      	str	r0, [r2, #0]
 800326c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003274:	f380 8811 	msr	BASEPRI, r0
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f7ff fd1e 	bl	8002cc0 <vTaskSwitchContext>
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f380 8811 	msr	BASEPRI, r0
 800328c:	bc09      	pop	{r0, r3}
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003296:	f01e 0f10 	tst.w	lr, #16
 800329a:	bf08      	it	eq
 800329c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032a0:	f380 8809 	msr	PSP, r0
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst>:
 80032b0:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80032d0:	f001 fb44 	bl	800495c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032d4:	f7ff fc34 	bl	8002b40 <xTaskIncrementTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <xPortSysTickHandler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80032de:	f001 fb9b 	bl	8004a18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <xPortSysTickHandler+0x50>)
 80032e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e003      	b.n	80032f4 <xPortSysTickHandler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 80032ec:	f001 fb78 	bl	80049e0 <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 80032f0:	f7ff fce6 	bl	8002cc0 <vTaskSwitchContext>
 80032f4:	2300      	movs	r3, #0
 80032f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <vPortSetupTimerInterrupt+0x38>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vPortSetupTimerInterrupt+0x3c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <vPortSetupTimerInterrupt+0x40>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <vPortSetupTimerInterrupt+0x44>)
 800332a:	3b01      	subs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	20000000 	.word	0x20000000
 800334c:	10624dd3 	.word	0x10624dd3
 8003350:	e000e014 	.word	0xe000e014

08003354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003364 <vPortEnableVFP+0x10>
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800335e:	6001      	str	r1, [r0, #0]
 8003360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003362:	bf00      	nop
 8003364:	e000ed88 	.word	0xe000ed88

08003368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;
	vSetVarulMaxPRIGROUPValue();
 800336e:	f000 f839 	bl	80033e4 <vSetVarulMaxPRIGROUPValue>

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003372:	f3ef 8305 	mrs	r3, IPSR
 8003376:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d913      	bls.n	80033a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800337e:	4a15      	ldr	r2, [pc, #84]	; (80033d4 <vPortValidateInterruptPriority+0x6c>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <vPortValidateInterruptPriority+0x70>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	7afa      	ldrb	r2, [r7, #11]
 800338e:	429a      	cmp	r2, r3
 8003390:	d209      	bcs.n	80033a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e7fe      	b.n	80033a4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <vPortValidateInterruptPriority+0x74>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <vPortValidateInterruptPriority+0x78>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d909      	bls.n	80033ca <vPortValidateInterruptPriority+0x62>
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	e7fe      	b.n	80033c8 <vPortValidateInterruptPriority+0x60>
	}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	e000e3f0 	.word	0xe000e3f0
 80033d8:	20000394 	.word	0x20000394
 80033dc:	e000ed0c 	.word	0xe000ed0c
 80033e0:	20000398 	.word	0x20000398

080033e4 <vSetVarulMaxPRIGROUPValue>:

#endif /* configASSERT_DEFINED */

#if( configASSERT_DEFINED == 1 )
void vSetVarulMaxPRIGROUPValue( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
	volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <vSetVarulMaxPRIGROUPValue+0x84>)
 80033ec:	60fb      	str	r3, [r7, #12]
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033fc:	4b1b      	ldr	r3, [pc, #108]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 80033fe:	2207      	movs	r2, #7
 8003400:	601a      	str	r2, [r3, #0]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003402:	e009      	b.n	8003418 <vSetVarulMaxPRIGROUPValue+0x34>
	{
		ulMaxPRIGROUPValue--;
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4a18      	ldr	r2, [pc, #96]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 800340c:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	71fb      	strb	r3, [r7, #7]
	while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b80      	cmp	r3, #128	; 0x80
 8003422:	d0ef      	beq.n	8003404 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		priority bits matches the number of priority bits actually queried
		from the hardware. */
		configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1c3 0307 	rsb	r3, r3, #7
 800342c:	2b04      	cmp	r3, #4
 800342e:	d009      	beq.n	8003444 <vSetVarulMaxPRIGROUPValue+0x60>
 8003430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	e7fe      	b.n	8003442 <vSetVarulMaxPRIGROUPValue+0x5e>
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	021b      	lsls	r3, r3, #8
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 800344c:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <vSetVarulMaxPRIGROUPValue+0x88>)
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000e400 	.word	0xe000e400
 800346c:	20000398 	.word	0x20000398

08003470 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800347c:	f7ff faa0 	bl	80029c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <pvPortMalloc+0x178>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003488:	f000 f910 	bl	80036ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <pvPortMalloc+0x17c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 808c 	bne.w	80035b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80034a0:	2208      	movs	r2, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d013      	beq.n	80034da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f023 0307 	bic.w	r3, r3, #7
 80034b8:	3308      	adds	r3, #8
 80034ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <pvPortMalloc+0x6a>
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e7fe      	b.n	80034d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d068      	beq.n	80035b2 <pvPortMalloc+0x142>
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <pvPortMalloc+0x180>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d863      	bhi.n	80035b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <pvPortMalloc+0x184>)
 80034ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <pvPortMalloc+0x184>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034f4:	e004      	b.n	8003500 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d903      	bls.n	8003512 <pvPortMalloc+0xa2>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f1      	bne.n	80034f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003512:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <pvPortMalloc+0x178>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003518:	429a      	cmp	r2, r3
 800351a:	d04a      	beq.n	80035b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2208      	movs	r2, #8
 8003522:	4413      	add	r3, r2
 8003524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	1ad2      	subs	r2, r2, r3
 8003536:	2308      	movs	r3, #8
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	429a      	cmp	r2, r3
 800353c:	d91e      	bls.n	800357c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <pvPortMalloc+0xf4>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e7fe      	b.n	8003562 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad2      	subs	r2, r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003576:	69b8      	ldr	r0, [r7, #24]
 8003578:	f000 f8fa 	bl	8003770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <pvPortMalloc+0x180>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <pvPortMalloc+0x180>)
 8003588:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <pvPortMalloc+0x180>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <pvPortMalloc+0x188>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d203      	bcs.n	800359e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <pvPortMalloc+0x180>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <pvPortMalloc+0x188>)
 800359c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <pvPortMalloc+0x17c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035b2:	f7ff fa13 	bl	80029dc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80035bc:	f7fe ff55 	bl	800246a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <pvPortMalloc+0x16e>
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e7fe      	b.n	80035dc <pvPortMalloc+0x16c>
	return pvReturn;
 80035de:	69fb      	ldr	r3, [r7, #28]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20012fa4 	.word	0x20012fa4
 80035ec:	20012fb0 	.word	0x20012fb0
 80035f0:	20012fa8 	.word	0x20012fa8
 80035f4:	20012f9c 	.word	0x20012f9c
 80035f8:	20012fac 	.word	0x20012fac

080035fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d046      	beq.n	800369c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800360e:	2308      	movs	r3, #8
 8003610:	425b      	negs	r3, r3
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4413      	add	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <vPortFree+0xa8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <vPortFree+0x42>
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e7fe      	b.n	800363c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <vPortFree+0x5e>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	e7fe      	b.n	8003658 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <vPortFree+0xa8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d019      	beq.n	800369c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d115      	bne.n	800369c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <vPortFree+0xa8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003680:	f7ff f99e 	bl	80029c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <vPortFree+0xac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4413      	add	r3, r2
 800368e:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <vPortFree+0xac>)
 8003690:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003692:	6938      	ldr	r0, [r7, #16]
 8003694:	f000 f86c 	bl	8003770 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003698:	f7ff f9a0 	bl	80029dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800369c:	bf00      	nop
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20012fb0 	.word	0x20012fb0
 80036a8:	20012fa8 	.word	0x20012fa8

080036ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036b2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036b8:	4b27      	ldr	r3, [pc, #156]	; (8003758 <prvHeapInit+0xac>)
 80036ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00c      	beq.n	80036e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3307      	adds	r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0307 	bic.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <prvHeapInit+0xac>)
 80036dc:	4413      	add	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <prvHeapInit+0xb0>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <prvHeapInit+0xb0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80036f8:	2208      	movs	r2, #8
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a15      	ldr	r2, [pc, #84]	; (8003760 <prvHeapInit+0xb4>)
 800370c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <prvHeapInit+0xb4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <prvHeapInit+0xb4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	1ad2      	subs	r2, r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <prvHeapInit+0xb4>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <prvHeapInit+0xb8>)
 800373a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <prvHeapInit+0xbc>)
 8003742:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <prvHeapInit+0xc0>)
 8003746:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	2000039c 	.word	0x2000039c
 800375c:	20012f9c 	.word	0x20012f9c
 8003760:	20012fa4 	.word	0x20012fa4
 8003764:	20012fac 	.word	0x20012fac
 8003768:	20012fa8 	.word	0x20012fa8
 800376c:	20012fb0 	.word	0x20012fb0

08003770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <prvInsertBlockIntoFreeList+0xac>)
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e002      	b.n	8003784 <prvInsertBlockIntoFreeList+0x14>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d8f7      	bhi.n	800377e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	4413      	add	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d108      	bne.n	80037b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	441a      	add	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d118      	bne.n	80037f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <prvInsertBlockIntoFreeList+0xb0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d00d      	beq.n	80037ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e008      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037ee:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <prvInsertBlockIntoFreeList+0xb0>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e003      	b.n	8003800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d002      	beq.n	800380e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20012f9c 	.word	0x20012f9c
 8003820:	20012fa4 	.word	0x20012fa4

08003824 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <_cbSendSystemDesc+0x14>)
 800382a:	f001 f843 	bl	80048b4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800382e:	4803      	ldr	r0, [pc, #12]	; (800383c <_cbSendSystemDesc+0x18>)
 8003830:	f001 f840 	bl	80048b4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	08004f70 	.word	0x08004f70
 800383c:	08004fa4 	.word	0x08004fa4

08003840 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <SEGGER_SYSVIEW_Conf+0x20>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <SEGGER_SYSVIEW_Conf+0x20>)
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <SEGGER_SYSVIEW_Conf+0x24>)
 800384e:	4a06      	ldr	r2, [pc, #24]	; (8003868 <SEGGER_SYSVIEW_Conf+0x28>)
 8003850:	f000 fcbc 	bl	80041cc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003854:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003858:	f000 fcf6 	bl	8004248 <SEGGER_SYSVIEW_SetRAMBase>
}
 800385c:	bf00      	nop
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000000 	.word	0x20000000
 8003864:	08003825 	.word	0x08003825
 8003868:	08005044 	.word	0x08005044

0800386c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386e:	b085      	sub	sp, #20
 8003870:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	e034      	b.n	80038e2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003878:	491e      	ldr	r1, [pc, #120]	; (80038f4 <_cbSendTaskList+0x88>)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	491a      	ldr	r1, [pc, #104]	; (80038f4 <_cbSendTaskList+0x88>)
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3304      	adds	r3, #4
 8003898:	681c      	ldr	r4, [r3, #0]
 800389a:	4916      	ldr	r1, [pc, #88]	; (80038f4 <_cbSendTaskList+0x88>)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3308      	adds	r3, #8
 80038aa:	681d      	ldr	r5, [r3, #0]
 80038ac:	4911      	ldr	r1, [pc, #68]	; (80038f4 <_cbSendTaskList+0x88>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	330c      	adds	r3, #12
 80038bc:	681e      	ldr	r6, [r3, #0]
 80038be:	490d      	ldr	r1, [pc, #52]	; (80038f4 <_cbSendTaskList+0x88>)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3310      	adds	r3, #16
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	4633      	mov	r3, r6
 80038d4:	462a      	mov	r2, r5
 80038d6:	4621      	mov	r1, r4
 80038d8:	f000 f8b4 	bl	8003a44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <_cbSendTaskList+0x8c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3c5      	bcc.n	8003878 <_cbSendTaskList+0xc>
  }
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f4:	20012fb4 	.word	0x20012fb4
 80038f8:	20013054 	.word	0x20013054

080038fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003902:	f7ff f90b 	bl	8002b1c <xTaskGetTickCountFromISR>
 8003906:	4603      	mov	r3, r0
 8003908:	f04f 0400 	mov.w	r4, #0
 800390c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003910:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003914:	462b      	mov	r3, r5
 8003916:	4634      	mov	r4, r6
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	0162      	lsls	r2, r4, #5
 8003922:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003926:	0159      	lsls	r1, r3, #5
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	1b5b      	subs	r3, r3, r5
 800392e:	eb64 0406 	sbc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	00a2      	lsls	r2, r4, #2
 800393c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003940:	0099      	lsls	r1, r3, #2
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	195b      	adds	r3, r3, r5
 8003948:	eb44 0406 	adc.w	r4, r4, r6
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	00e2      	lsls	r2, r4, #3
 8003956:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800395a:	00d9      	lsls	r1, r3, #3
 800395c:	460b      	mov	r3, r1
 800395e:	4614      	mov	r4, r2
 8003960:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003964:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003968:	4618      	mov	r0, r3
 800396a:	4621      	mov	r1, r4
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003974 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003982:	2205      	movs	r2, #5
 8003984:	492b      	ldr	r1, [pc, #172]	; (8003a34 <SYSVIEW_AddTask+0xc0>)
 8003986:	68b8      	ldr	r0, [r7, #8]
 8003988:	f001 faa6 	bl	8004ed8 <memcmp>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d04b      	beq.n	8003a2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b07      	cmp	r3, #7
 8003998:	d903      	bls.n	80039a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800399a:	4828      	ldr	r0, [pc, #160]	; (8003a3c <SYSVIEW_AddTask+0xc8>)
 800399c:	f001 fa1c 	bl	8004dd8 <SEGGER_SYSVIEW_Warn>
    return;
 80039a0:	e044      	b.n	8003a2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4926      	ldr	r1, [pc, #152]	; (8003a40 <SYSVIEW_AddTask+0xcc>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4921      	ldr	r1, [pc, #132]	; (8003a40 <SYSVIEW_AddTask+0xcc>)
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3304      	adds	r3, #4
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	491b      	ldr	r1, [pc, #108]	; (8003a40 <SYSVIEW_AddTask+0xcc>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3308      	adds	r3, #8
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4916      	ldr	r1, [pc, #88]	; (8003a40 <SYSVIEW_AddTask+0xcc>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	330c      	adds	r3, #12
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4910      	ldr	r1, [pc, #64]	; (8003a40 <SYSVIEW_AddTask+0xcc>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3310      	adds	r3, #16
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <SYSVIEW_AddTask+0xc4>)
 8003a16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f80e 	bl	8003a44 <SYSVIEW_SendTaskInfo>
 8003a28:	e000      	b.n	8003a2c <SYSVIEW_AddTask+0xb8>
    return;
 8003a2a:	bf00      	nop

}
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	08004fb4 	.word	0x08004fb4
 8003a38:	20013054 	.word	0x20013054
 8003a3c:	08004fbc 	.word	0x08004fbc
 8003a40:	20012fb4 	.word	0x20012fb4

08003a44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	2214      	movs	r2, #20
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 fa56 	bl	8004f0c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fe21 	bl	80046c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a7e:	bf00      	nop
 8003a80:	3728      	adds	r7, #40	; 0x28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <_DoInit+0x8c>)
 8003a90:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2203      	movs	r2, #3
 8003a96:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <_DoInit+0x90>)
 8003aa2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <_DoInit+0x94>)
 8003aa8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a14      	ldr	r2, [pc, #80]	; (8003b18 <_DoInit+0x90>)
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <_DoInit+0x98>)
 8003ace:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3307      	adds	r3, #7
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <_DoInit+0x9c>)
 8003aee:	6810      	ldr	r0, [r2, #0]
 8003af0:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <_DoInit+0xa0>)
 8003af6:	6810      	ldr	r0, [r2, #0]
 8003af8:	6018      	str	r0, [r3, #0]
 8003afa:	8891      	ldrh	r1, [r2, #4]
 8003afc:	7992      	ldrb	r2, [r2, #6]
 8003afe:	8099      	strh	r1, [r3, #4]
 8003b00:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	719a      	strb	r2, [r3, #6]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	200175c8 	.word	0x200175c8
 8003b18:	0800500c 	.word	0x0800500c
 8003b1c:	20013058 	.word	0x20013058
 8003b20:	20013458 	.word	0x20013458
 8003b24:	08005018 	.word	0x08005018
 8003b28:	0800501c 	.word	0x0800501c

08003b2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003b38:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <SEGGER_RTT_ReadNoLock+0x100>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <SEGGER_RTT_ReadNoLock+0x18>
 8003b40:	f7ff ffa2 	bl	8003a88 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	3360      	adds	r3, #96	; 0x60
 8003b50:	4a36      	ldr	r2, [pc, #216]	; (8003c2c <SEGGER_RTT_ReadNoLock+0x100>)
 8003b52:	4413      	add	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b6a:	6a3a      	ldr	r2, [r7, #32]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d92a      	bls.n	8003bc8 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	689a      	ldr	r2, [r3, #8]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf28      	it	cs
 8003b84:	4613      	movcs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	4413      	add	r3, r2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4619      	mov	r1, r3
 8003b94:	69f8      	ldr	r0, [r7, #28]
 8003b96:	f001 f9ae 	bl	8004ef6 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bb2:	6a3a      	ldr	r2, [r7, #32]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d101      	bne.n	8003bc8 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bf28      	it	cs
 8003bd8:	4613      	movcs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d018      	beq.n	8003c14 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	4413      	add	r3, r2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4619      	mov	r1, r3
 8003bee:	69f8      	ldr	r0, [r7, #28]
 8003bf0:	f001 f981 	bl	8004ef6 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4413      	add	r3, r2
 8003c02:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200175c8 	.word	0x200175c8

08003c30 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003c3e:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003c46:	f7ff ff1f 	bl	8003a88 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d24c      	bcs.n	8003cf0 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003c56:	f3ef 8311 	mrs	r3, BASEPRI
 8003c5a:	f04f 0120 	mov.w	r1, #32
 8003c5e:	f381 8811 	msr	BASEPRI, r1
 8003c62:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d032      	beq.n	8003cd0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003c6a:	4925      	ldr	r1, [pc, #148]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003c7e:	4920      	ldr	r1, [pc, #128]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3304      	adds	r3, #4
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003c94:	491a      	ldr	r1, [pc, #104]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3320      	adds	r3, #32
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003ca8:	4915      	ldr	r1, [pc, #84]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3328      	adds	r3, #40	; 0x28
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003cbc:	4910      	ldr	r1, [pc, #64]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	440b      	add	r3, r1
 8003cca:	3324      	adds	r3, #36	; 0x24
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003cd0:	490b      	ldr	r1, [pc, #44]	; (8003d00 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	332c      	adds	r3, #44	; 0x2c
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e002      	b.n	8003cf6 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003cf6:	697b      	ldr	r3, [r7, #20]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200175c8 	.word	0x200175c8

08003d04 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003d12:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003d1a:	f7ff feb5 	bl	8003a88 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d24b      	bcs.n	8003dc2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d2e:	f04f 0120 	mov.w	r1, #32
 8003d32:	f381 8811 	msr	BASEPRI, r1
 8003d36:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d031      	beq.n	8003da2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3360      	adds	r3, #96	; 0x60
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d52:	4920      	ldr	r1, [pc, #128]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	3364      	adds	r3, #100	; 0x64
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003d66:	491b      	ldr	r1, [pc, #108]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	3368      	adds	r3, #104	; 0x68
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003d7a:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3370      	adds	r3, #112	; 0x70
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8003d8e:	4911      	ldr	r1, [pc, #68]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	336c      	adds	r3, #108	; 0x6c
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8003da2:	490c      	ldr	r1, [pc, #48]	; (8003dd4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4613      	mov	r3, r2
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	3374      	adds	r3, #116	; 0x74
 8003db2:	6a3a      	ldr	r2, [r7, #32]
 8003db4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e002      	b.n	8003dc8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003dc8:	697b      	ldr	r3, [r7, #20]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200175c8 	.word	0x200175c8

08003dd8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003de8:	e002      	b.n	8003df0 <_EncodeStr+0x18>
    Len++;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	3301      	adds	r3, #1
 8003dee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f6      	bne.n	8003dea <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d901      	bls.n	8003e08 <_EncodeStr+0x30>
    Len = Limit;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e0c:	d806      	bhi.n	8003e1c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	60fa      	str	r2, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e011      	b.n	8003e40 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60fa      	str	r2, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	0a19      	lsrs	r1, r3, #8
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	60fa      	str	r2, [r7, #12]
 8003e3c:	b2ca      	uxtb	r2, r1
 8003e3e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e44:	e00a      	b.n	8003e5c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	1c53      	adds	r3, r2, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	60f9      	str	r1, [r7, #12]
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
    n++;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3f0      	bcc.n	8003e46 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e90:	1cfb      	adds	r3, r7, #3
 8003e92:	2201      	movs	r2, #1
 8003e94:	4619      	mov	r1, r3
 8003e96:	2001      	movs	r0, #1
 8003e98:	f7ff fe48 	bl	8003b2c <SEGGER_RTT_ReadNoLock>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	dd44      	ble.n	8003f30 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d01a      	beq.n	8003ee2 <_HandleIncomingPacket+0x58>
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	dc06      	bgt.n	8003ebe <_HandleIncomingPacket+0x34>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d010      	beq.n	8003ed6 <_HandleIncomingPacket+0x4c>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	dc11      	bgt.n	8003edc <_HandleIncomingPacket+0x52>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d009      	beq.n	8003ed0 <_HandleIncomingPacket+0x46>
 8003ebc:	e02d      	b.n	8003f1a <_HandleIncomingPacket+0x90>
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d015      	beq.n	8003eee <_HandleIncomingPacket+0x64>
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	db10      	blt.n	8003ee8 <_HandleIncomingPacket+0x5e>
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d014      	beq.n	8003ef4 <_HandleIncomingPacket+0x6a>
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d015      	beq.n	8003efa <_HandleIncomingPacket+0x70>
 8003ece:	e024      	b.n	8003f1a <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ed0:	f000 fa7e 	bl	80043d0 <SEGGER_SYSVIEW_Start>
      break;
 8003ed4:	e031      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ed6:	f000 fb33 	bl	8004540 <SEGGER_SYSVIEW_Stop>
      break;
 8003eda:	e02e      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003edc:	f000 fd0e 	bl	80048fc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ee0:	e02b      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ee2:	f000 fcd3 	bl	800488c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ee6:	e028      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003ee8:	f000 fb50 	bl	800458c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003eec:	e025      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003eee:	f000 ff35 	bl	8004d5c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ef2:	e022      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ef4:	f000 ff14 	bl	8004d20 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003ef8:	e01f      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003efa:	1cfb      	adds	r3, r7, #3
 8003efc:	2201      	movs	r2, #1
 8003efe:	4619      	mov	r1, r3
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7ff fe13 	bl	8003b2c <SEGGER_RTT_ReadNoLock>
 8003f06:	4603      	mov	r3, r0
 8003f08:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dd11      	ble.n	8003f34 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fe84 	bl	8004c20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f18:	e00c      	b.n	8003f34 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f1a:	78fb      	ldrb	r3, [r7, #3]
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	da0a      	bge.n	8003f38 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f22:	1cfb      	adds	r3, r7, #3
 8003f24:	2201      	movs	r2, #1
 8003f26:	4619      	mov	r1, r3
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7ff fdff 	bl	8003b2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f2e:	e003      	b.n	8003f38 <_HandleIncomingPacket+0xae>
    }
  }
 8003f30:	bf00      	nop
 8003f32:	e002      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
      break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <_HandleIncomingPacket+0xb0>
      break;
 8003f38:	bf00      	nop
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	; 0x30
 8003f48:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f58:	4b30      	ldr	r3, [pc, #192]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	e00b      	b.n	8003f78 <_TrySendOverflowPacket+0x34>
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f74:	09db      	lsrs	r3, r3, #7
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7c:	d8f0      	bhi.n	8003f60 <_TrySendOverflowPacket+0x1c>
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <_TrySendOverflowPacket+0xdc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	623b      	str	r3, [r7, #32]
 8003fa6:	e00b      	b.n	8003fc0 <_TrySendOverflowPacket+0x7c>
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	1c59      	adds	r1, r3, #1
 8003fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8003fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	09db      	lsrs	r3, r3, #7
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc4:	d8f0      	bhi.n	8003fa8 <_TrySendOverflowPacket+0x64>
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	627a      	str	r2, [r7, #36]	; 0x24
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	1d3b      	adds	r3, r7, #4
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7fc f904 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e004      	b.n	8004010 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <_TrySendOverflowPacket+0xd8>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	4a03      	ldr	r2, [pc, #12]	; (800401c <_TrySendOverflowPacket+0xd8>)
 800400e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004010:	693b      	ldr	r3, [r7, #16]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	; 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20017470 	.word	0x20017470
 8004020:	e0001004 	.word	0xe0001004

08004024 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004030:	4b63      	ldr	r3, [pc, #396]	; (80041c0 <_SendPacket+0x19c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d010      	beq.n	800405a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004038:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <_SendPacket+0x19c>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a1 	beq.w	8004184 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004042:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <_SendPacket+0x19c>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d109      	bne.n	800405e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800404a:	f7ff ff7b 	bl	8003f44 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800404e:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <_SendPacket+0x19c>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	f040 8098 	bne.w	8004188 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8004058:	e001      	b.n	800405e <_SendPacket+0x3a>
    goto Send;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <_SendPacket+0x3c>
Send:
 800405e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b1f      	cmp	r3, #31
 8004064:	d809      	bhi.n	800407a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004066:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <_SendPacket+0x19c>)
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 8089 	bne.w	800418c <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b17      	cmp	r3, #23
 800407e:	d807      	bhi.n	8004090 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e03d      	b.n	800410c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	d912      	bls.n	80040c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	09da      	lsrs	r2, r3, #7
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e006      	b.n	80040d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b7f      	cmp	r3, #127	; 0x7f
 80040d6:	d912      	bls.n	80040fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	09da      	lsrs	r2, r3, #7
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	3a01      	subs	r2, #1
 80040f0:	60fa      	str	r2, [r7, #12]
 80040f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e006      	b.n	800410c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800410c:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <_SendPacket+0x1a0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004112:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <_SendPacket+0x19c>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	e00b      	b.n	800413e <_SendPacket+0x11a>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1c59      	adds	r1, r3, #1
 800412e:	6279      	str	r1, [r7, #36]	; 0x24
 8004130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	09db      	lsrs	r3, r3, #7
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b7f      	cmp	r3, #127	; 0x7f
 8004142:	d8f0      	bhi.n	8004126 <_SendPacket+0x102>
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	627a      	str	r2, [r7, #36]	; 0x24
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	2001      	movs	r0, #1
 8004160:	f7fc f846 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004164:	4603      	mov	r3, r0
 8004166:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <_SendPacket+0x19c>)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	60d3      	str	r3, [r2, #12]
 8004174:	e00b      	b.n	800418e <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <_SendPacket+0x19c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <_SendPacket+0x19c>)
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e004      	b.n	800418e <_SendPacket+0x16a>
    goto SendDone;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <_SendPacket+0x16a>
      goto SendDone;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <_SendPacket+0x16a>
      goto SendDone;
 800418c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <_SendPacket+0x1a4>)
 8004190:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <_SendPacket+0x1a4>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	429a      	cmp	r2, r3
 800419c:	d00b      	beq.n	80041b6 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <_SendPacket+0x19c>)
 80041a0:	789b      	ldrb	r3, [r3, #2]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <_SendPacket+0x19c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041ac:	f7ff fe6d 	bl	8003e8a <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <_SendPacket+0x19c>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041b6:	bf00      	nop
 80041b8:	3728      	adds	r7, #40	; 0x28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20017470 	.word	0x20017470
 80041c4:	e0001004 	.word	0xe0001004
 80041c8:	200175c8 	.word	0x200175c8

080041cc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041e2:	4a14      	ldr	r2, [pc, #80]	; (8004234 <SEGGER_SYSVIEW_Init+0x68>)
 80041e4:	4914      	ldr	r1, [pc, #80]	; (8004238 <SEGGER_SYSVIEW_Init+0x6c>)
 80041e6:	2001      	movs	r0, #1
 80041e8:	f7ff fd22 	bl	8003c30 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2308      	movs	r3, #8
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <SEGGER_SYSVIEW_Init+0x70>)
 80041f4:	4910      	ldr	r1, [pc, #64]	; (8004238 <SEGGER_SYSVIEW_Init+0x6c>)
 80041f6:	2001      	movs	r0, #1
 80041f8:	f7ff fd84 	bl	8003d04 <SEGGER_RTT_ConfigDownBuffer>
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 80041fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004202:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <SEGGER_SYSVIEW_Init+0x78>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 800420a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800420c:	4a0c      	ldr	r2, [pc, #48]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004212:	4a0b      	ldr	r2, [pc, #44]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <SEGGER_SYSVIEW_Init+0x74>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20013468 	.word	0x20013468
 8004238:	08005024 	.word	0x08005024
 800423c:	20017468 	.word	0x20017468
 8004240:	20017470 	.word	0x20017470
 8004244:	e0001004 	.word	0xe0001004

08004248 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6113      	str	r3, [r2, #16]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20017470 	.word	0x20017470

08004268 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004270:	f3ef 8311 	mrs	r3, BASEPRI
 8004274:	f04f 0120 	mov.w	r1, #32
 8004278:	f381 8811 	msr	BASEPRI, r1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4808      	ldr	r0, [pc, #32]	; (80042a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004280:	f7ff fdf7 	bl	8003e72 <_PreparePacket>
 8004284:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68b8      	ldr	r0, [r7, #8]
 800428c:	f7ff feca 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f383 8811 	msr	BASEPRI, r3
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200174a0 	.word	0x200174a0

080042a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042ae:	f3ef 8311 	mrs	r3, BASEPRI
 80042b2:	f04f 0120 	mov.w	r1, #32
 80042b6:	f381 8811 	msr	BASEPRI, r1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	4816      	ldr	r0, [pc, #88]	; (8004318 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80042be:	f7ff fdd8 	bl	8003e72 <_PreparePacket>
 80042c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e00b      	b.n	80042ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	1c59      	adds	r1, r3, #1
 80042da:	61f9      	str	r1, [r7, #28]
 80042dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	09db      	lsrs	r3, r3, #7
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b7f      	cmp	r3, #127	; 0x7f
 80042ee:	d8f0      	bhi.n	80042d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	61fa      	str	r2, [r7, #28]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	6938      	ldr	r0, [r7, #16]
 8004306:	f7ff fe8d 	bl	8004024 <_SendPacket>
  RECORD_END();
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f383 8811 	msr	BASEPRI, r3
}
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200174a0 	.word	0x200174a0

0800431c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	; 0x30
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004328:	f3ef 8311 	mrs	r3, BASEPRI
 800432c:	f04f 0120 	mov.w	r1, #32
 8004330:	f381 8811 	msr	BASEPRI, r1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	4825      	ldr	r0, [pc, #148]	; (80043cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004338:	f7ff fd9b 	bl	8003e72 <_PreparePacket>
 800433c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
 800434a:	e00b      	b.n	8004364 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	09db      	lsrs	r3, r3, #7
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	2b7f      	cmp	r3, #127	; 0x7f
 8004368:	d8f0      	bhi.n	800434c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	623b      	str	r3, [r7, #32]
 8004382:	e00b      	b.n	800439c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	6279      	str	r1, [r7, #36]	; 0x24
 800438e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	09db      	lsrs	r3, r3, #7
 800439a:	623b      	str	r3, [r7, #32]
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b7f      	cmp	r3, #127	; 0x7f
 80043a0:	d8f0      	bhi.n	8004384 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	627a      	str	r2, [r7, #36]	; 0x24
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	69b8      	ldr	r0, [r7, #24]
 80043b8:	f7ff fe34 	bl	8004024 <_SendPacket>
  RECORD_END();
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f383 8811 	msr	BASEPRI, r3
}
 80043c2:	bf00      	nop
 80043c4:	3730      	adds	r7, #48	; 0x30
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200174a0 	.word	0x200174a0

080043d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80043d6:	4b57      	ldr	r3, [pc, #348]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80043dc:	f3ef 8311 	mrs	r3, BASEPRI
 80043e0:	f04f 0120 	mov.w	r1, #32
 80043e4:	f381 8811 	msr	BASEPRI, r1
 80043e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80043ea:	220a      	movs	r2, #10
 80043ec:	4952      	ldr	r1, [pc, #328]	; (8004538 <SEGGER_SYSVIEW_Start+0x168>)
 80043ee:	2001      	movs	r0, #1
 80043f0:	f7fb fefe 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80043fa:	200a      	movs	r0, #10
 80043fc:	f7ff ff34 	bl	8004268 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004400:	f3ef 8311 	mrs	r3, BASEPRI
 8004404:	f04f 0120 	mov.w	r1, #32
 8004408:	f381 8811 	msr	BASEPRI, r1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	484b      	ldr	r0, [pc, #300]	; (800453c <SEGGER_SYSVIEW_Start+0x16c>)
 8004410:	f7ff fd2f 	bl	8003e72 <_PreparePacket>
 8004414:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	4b45      	ldr	r3, [pc, #276]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
 8004424:	e00b      	b.n	800443e <SEGGER_SYSVIEW_Start+0x6e>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	1c59      	adds	r1, r3, #1
 800442e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	2b7f      	cmp	r3, #127	; 0x7f
 8004442:	d8f0      	bhi.n	8004426 <SEGGER_SYSVIEW_Start+0x56>
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	e00b      	b.n	8004478 <SEGGER_SYSVIEW_Start+0xa8>
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1c59      	adds	r1, r3, #1
 8004468:	6279      	str	r1, [r7, #36]	; 0x24
 800446a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b7f      	cmp	r3, #127	; 0x7f
 800447c:	d8f0      	bhi.n	8004460 <SEGGER_SYSVIEW_Start+0x90>
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	627a      	str	r2, [r7, #36]	; 0x24
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	4b28      	ldr	r3, [pc, #160]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e00b      	b.n	80044b2 <SEGGER_SYSVIEW_Start+0xe2>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	61f9      	str	r1, [r7, #28]
 80044a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	09db      	lsrs	r3, r3, #7
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b7f      	cmp	r3, #127	; 0x7f
 80044b6:	d8f0      	bhi.n	800449a <SEGGER_SYSVIEW_Start+0xca>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	61fa      	str	r2, [r7, #28]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	2302      	movs	r3, #2
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e00b      	b.n	80044ea <SEGGER_SYSVIEW_Start+0x11a>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1c59      	adds	r1, r3, #1
 80044da:	6179      	str	r1, [r7, #20]
 80044dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	09db      	lsrs	r3, r3, #7
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b7f      	cmp	r3, #127	; 0x7f
 80044ee:	d8f0      	bhi.n	80044d2 <SEGGER_SYSVIEW_Start+0x102>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	617a      	str	r2, [r7, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004500:	2218      	movs	r2, #24
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fd8d 	bl	8004024 <_SendPacket>
      RECORD_END();
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <SEGGER_SYSVIEW_Start+0x14e>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <SEGGER_SYSVIEW_Start+0x164>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800451e:	f000 f9ed 	bl	80048fc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004522:	f000 f9b3 	bl	800488c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004526:	f000 fc19 	bl	8004d5c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800452a:	bf00      	nop
 800452c:	3730      	adds	r7, #48	; 0x30
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20017470 	.word	0x20017470
 8004538:	0800504c 	.word	0x0800504c
 800453c:	200174a0 	.word	0x200174a0

08004540 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004546:	f3ef 8311 	mrs	r3, BASEPRI
 800454a:	f04f 0120 	mov.w	r1, #32
 800454e:	f381 8811 	msr	BASEPRI, r1
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	480b      	ldr	r0, [pc, #44]	; (8004584 <SEGGER_SYSVIEW_Stop+0x44>)
 8004556:	f7ff fc8c 	bl	8003e72 <_PreparePacket>
 800455a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <SEGGER_SYSVIEW_Stop+0x48>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004564:	220b      	movs	r2, #11
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f7ff fd5b 	bl	8004024 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SEGGER_SYSVIEW_Stop+0x48>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f383 8811 	msr	BASEPRI, r3
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	200174a0 	.word	0x200174a0
 8004588:	20017470 	.word	0x20017470

0800458c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004592:	f3ef 8311 	mrs	r3, BASEPRI
 8004596:	f04f 0120 	mov.w	r1, #32
 800459a:	f381 8811 	msr	BASEPRI, r1
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	4845      	ldr	r0, [pc, #276]	; (80046b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80045a2:	f7ff fc66 	bl	8003e72 <_PreparePacket>
 80045a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	e00b      	b.n	80045d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b7f      	cmp	r3, #127	; 0x7f
 80045d4:	d8f0      	bhi.n	80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	e00b      	b.n	800460a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	6279      	str	r1, [r7, #36]	; 0x24
 80045fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2b7f      	cmp	r3, #127	; 0x7f
 800460e:	d8f0      	bhi.n	80045f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	627a      	str	r2, [r7, #36]	; 0x24
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e00b      	b.n	8004644 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	61f9      	str	r1, [r7, #28]
 8004636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d8f0      	bhi.n	800462c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	61fa      	str	r2, [r7, #28]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	2302      	movs	r3, #2
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e00b      	b.n	800467c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	6179      	str	r1, [r7, #20]
 800466e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	09db      	lsrs	r3, r3, #7
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b7f      	cmp	r3, #127	; 0x7f
 8004680:	d8f0      	bhi.n	8004664 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	617a      	str	r2, [r7, #20]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004692:	2218      	movs	r2, #24
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	68b8      	ldr	r0, [r7, #8]
 8004698:	f7ff fcc4 	bl	8004024 <_SendPacket>
  RECORD_END();
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	4798      	blx	r3
  }
}
 80046b0:	bf00      	nop
 80046b2:	3730      	adds	r7, #48	; 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200174a0 	.word	0x200174a0
 80046bc:	20017470 	.word	0x20017470

080046c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b092      	sub	sp, #72	; 0x48
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80046c8:	f3ef 8311 	mrs	r3, BASEPRI
 80046cc:	f04f 0120 	mov.w	r1, #32
 80046d0:	f381 8811 	msr	BASEPRI, r1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	486b      	ldr	r0, [pc, #428]	; (8004884 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80046d8:	f7ff fbcb 	bl	8003e72 <_PreparePacket>
 80046dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b67      	ldr	r3, [pc, #412]	; (8004888 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	643b      	str	r3, [r7, #64]	; 0x40
 80046f4:	e00b      	b.n	800470e <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80046f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fc:	1c59      	adds	r1, r3, #1
 80046fe:	6479      	str	r1, [r7, #68]	; 0x44
 8004700:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470a:	09db      	lsrs	r3, r3, #7
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	2b7f      	cmp	r3, #127	; 0x7f
 8004712:	d8f0      	bhi.n	80046f6 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	647a      	str	r2, [r7, #68]	; 0x44
 800471a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]
 8004720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004722:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
 800472e:	e00b      	b.n	8004748 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	b2da      	uxtb	r2, r3
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	63f9      	str	r1, [r7, #60]	; 0x3c
 800473a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004744:	09db      	lsrs	r3, r3, #7
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	2b7f      	cmp	r3, #127	; 0x7f
 800474c:	d8f0      	bhi.n	8004730 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800474e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475c:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	4619      	mov	r1, r3
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fb36 	bl	8003dd8 <_EncodeStr>
 800476c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800476e:	2209      	movs	r2, #9
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	6938      	ldr	r0, [r7, #16]
 8004774:	f7ff fc56 	bl	8004024 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	637b      	str	r3, [r7, #52]	; 0x34
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b40      	ldr	r3, [pc, #256]	; (8004888 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	633b      	str	r3, [r7, #48]	; 0x30
 800478e:	e00b      	b.n	80047a8 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	1c59      	adds	r1, r3, #1
 8004798:	6379      	str	r1, [r7, #52]	; 0x34
 800479a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	09db      	lsrs	r3, r3, #7
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	2b7f      	cmp	r3, #127	; 0x7f
 80047ac:	d8f0      	bhi.n	8004790 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	637a      	str	r2, [r7, #52]	; 0x34
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c8:	e00b      	b.n	80047e2 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	1c59      	adds	r1, r3, #1
 80047d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	09db      	lsrs	r3, r3, #7
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2b7f      	cmp	r3, #127	; 0x7f
 80047e6:	d8f0      	bhi.n	80047ca <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	e00b      	b.n	800481c <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	b2da      	uxtb	r2, r3
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	1c59      	adds	r1, r3, #1
 800480c:	6279      	str	r1, [r7, #36]	; 0x24
 800480e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	09db      	lsrs	r3, r3, #7
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	2b7f      	cmp	r3, #127	; 0x7f
 8004820:	d8f0      	bhi.n	8004804 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	627a      	str	r2, [r7, #36]	; 0x24
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	e00b      	b.n	8004854 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	61f9      	str	r1, [r7, #28]
 8004846:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b7f      	cmp	r3, #127	; 0x7f
 8004858:	d8f0      	bhi.n	800483c <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	61fa      	str	r2, [r7, #28]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800486a:	2215      	movs	r2, #21
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	6938      	ldr	r0, [r7, #16]
 8004870:	f7ff fbd8 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f383 8811 	msr	BASEPRI, r3
}
 800487a:	bf00      	nop
 800487c:	3748      	adds	r7, #72	; 0x48
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	200174a0 	.word	0x200174a0
 8004888:	20017470 	.word	0x20017470

0800488c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80048a2:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4798      	blx	r3
  }
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20017470 	.word	0x20017470

080048b4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048bc:	f3ef 8311 	mrs	r3, BASEPRI
 80048c0:	f04f 0120 	mov.w	r1, #32
 80048c4:	f381 8811 	msr	BASEPRI, r1
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	480b      	ldr	r0, [pc, #44]	; (80048f8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80048cc:	f7ff fad1 	bl	8003e72 <_PreparePacket>
 80048d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	6938      	ldr	r0, [r7, #16]
 80048d8:	f7ff fa7e 	bl	8003dd8 <_EncodeStr>
 80048dc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80048de:	220e      	movs	r2, #14
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	6938      	ldr	r0, [r7, #16]
 80048e4:	f7ff fb9e 	bl	8004024 <_SendPacket>
  RECORD_END();
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f383 8811 	msr	BASEPRI, r3
}
 80048ee:	bf00      	nop
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200174a0 	.word	0x200174a0

080048fc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <SEGGER_SYSVIEW_RecordSystime+0x42>
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d014      	beq.n	800493e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4798      	blx	r3
 800491c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004920:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004922:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	0013      	movs	r3, r2
 8004930:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004932:	461a      	mov	r2, r3
 8004934:	4601      	mov	r1, r0
 8004936:	200d      	movs	r0, #13
 8004938:	f7ff fcf0 	bl	800431c <SEGGER_SYSVIEW_RecordU32x2>
 800493c:	e005      	b.n	800494a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	200c      	movs	r0, #12
 8004946:	f7ff fcad 	bl	80042a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}
 8004952:	bf00      	nop
 8004954:	20017470 	.word	0x20017470
 8004958:	e0001004 	.word	0xe0001004

0800495c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004962:	f3ef 8311 	mrs	r3, BASEPRI
 8004966:	f04f 0120 	mov.w	r1, #32
 800496a:	f381 8811 	msr	BASEPRI, r1
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	4819      	ldr	r0, [pc, #100]	; (80049d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004972:	f7ff fa7e 	bl	8003e72 <_PreparePacket>
 8004976:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800497c:	4b17      	ldr	r3, [pc, #92]	; (80049dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004984:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e00b      	b.n	80049a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	6179      	str	r1, [r7, #20]
 800499a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	09db      	lsrs	r3, r3, #7
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b7f      	cmp	r3, #127	; 0x7f
 80049ac:	d8f0      	bhi.n	8004990 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	617a      	str	r2, [r7, #20]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80049be:	2202      	movs	r2, #2
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	68b8      	ldr	r0, [r7, #8]
 80049c4:	f7ff fb2e 	bl	8004024 <_SendPacket>
  RECORD_END();
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f383 8811 	msr	BASEPRI, r3
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200174a0 	.word	0x200174a0
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049e6:	f3ef 8311 	mrs	r3, BASEPRI
 80049ea:	f04f 0120 	mov.w	r1, #32
 80049ee:	f381 8811 	msr	BASEPRI, r1
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	4807      	ldr	r0, [pc, #28]	; (8004a14 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80049f6:	f7ff fa3c 	bl	8003e72 <_PreparePacket>
 80049fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80049fc:	2203      	movs	r2, #3
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	6838      	ldr	r0, [r7, #0]
 8004a02:	f7ff fb0f 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f383 8811 	msr	BASEPRI, r3
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200174a0 	.word	0x200174a0

08004a18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a22:	f04f 0120 	mov.w	r1, #32
 8004a26:	f381 8811 	msr	BASEPRI, r1
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	4807      	ldr	r0, [pc, #28]	; (8004a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a2e:	f7ff fa20 	bl	8003e72 <_PreparePacket>
 8004a32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a34:	2212      	movs	r2, #18
 8004a36:	6839      	ldr	r1, [r7, #0]
 8004a38:	6838      	ldr	r0, [r7, #0]
 8004a3a:	f7ff faf3 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f383 8811 	msr	BASEPRI, r3
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200174a0 	.word	0x200174a0

08004a50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a56:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5a:	f04f 0120 	mov.w	r1, #32
 8004a5e:	f381 8811 	msr	BASEPRI, r1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	4807      	ldr	r0, [pc, #28]	; (8004a84 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a66:	f7ff fa04 	bl	8003e72 <_PreparePacket>
 8004a6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004a6c:	2211      	movs	r2, #17
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	6838      	ldr	r0, [r7, #0]
 8004a72:	f7ff fad7 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f383 8811 	msr	BASEPRI, r3
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	200174a0 	.word	0x200174a0

08004a88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a90:	f3ef 8311 	mrs	r3, BASEPRI
 8004a94:	f04f 0120 	mov.w	r1, #32
 8004a98:	f381 8811 	msr	BASEPRI, r1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	481a      	ldr	r0, [pc, #104]	; (8004b08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004aa0:	f7ff f9e7 	bl	8003e72 <_PreparePacket>
 8004aa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e00b      	b.n	8004ad8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	61f9      	str	r1, [r7, #28]
 8004aca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	09db      	lsrs	r3, r3, #7
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b7f      	cmp	r3, #127	; 0x7f
 8004adc:	d8f0      	bhi.n	8004ac0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004aee:	2208      	movs	r2, #8
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	f7ff fa96 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f383 8811 	msr	BASEPRI, r3
}
 8004afe:	bf00      	nop
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	200174a0 	.word	0x200174a0
 8004b0c:	20017470 	.word	0x20017470

08004b10 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b18:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1c:	f04f 0120 	mov.w	r1, #32
 8004b20:	f381 8811 	msr	BASEPRI, r1
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	481a      	ldr	r0, [pc, #104]	; (8004b90 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b28:	f7ff f9a3 	bl	8003e72 <_PreparePacket>
 8004b2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e00b      	b.n	8004b60 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	61f9      	str	r1, [r7, #28]
 8004b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	09db      	lsrs	r3, r3, #7
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d8f0      	bhi.n	8004b48 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004b76:	2204      	movs	r2, #4
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	6938      	ldr	r0, [r7, #16]
 8004b7c:	f7ff fa52 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f383 8811 	msr	BASEPRI, r3
}
 8004b86:	bf00      	nop
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	200174a0 	.word	0x200174a0
 8004b94:	20017470 	.word	0x20017470

08004b98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba4:	f04f 0120 	mov.w	r1, #32
 8004ba8:	f381 8811 	msr	BASEPRI, r1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	481a      	ldr	r0, [pc, #104]	; (8004c18 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004bb0:	f7ff f95f 	bl	8003e72 <_PreparePacket>
 8004bb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bba:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e00b      	b.n	8004be8 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	61f9      	str	r1, [r7, #28]
 8004bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	09db      	lsrs	r3, r3, #7
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b7f      	cmp	r3, #127	; 0x7f
 8004bec:	d8f0      	bhi.n	8004bd0 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	61fa      	str	r2, [r7, #28]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004bfe:	2206      	movs	r2, #6
 8004c00:	68f9      	ldr	r1, [r7, #12]
 8004c02:	6938      	ldr	r0, [r7, #16]
 8004c04:	f7ff fa0e 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200174a0 	.word	0x200174a0
 8004c1c:	20017470 	.word	0x20017470

08004c20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c2a:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d06d      	beq.n	8004d0e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3c:	e008      	b.n	8004c50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d3f2      	bcc.n	8004c3e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c58:	e000      	b.n	8004c5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d055      	beq.n	8004d0e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c62:	f3ef 8311 	mrs	r3, BASEPRI
 8004c66:	f04f 0120 	mov.w	r1, #32
 8004c6a:	f381 8811 	msr	BASEPRI, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	482a      	ldr	r0, [pc, #168]	; (8004d1c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004c72:	f7ff f8fe 	bl	8003e72 <_PreparePacket>
 8004c76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	e00b      	b.n	8004c9e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	1c59      	adds	r1, r3, #1
 8004c8e:	6279      	str	r1, [r7, #36]	; 0x24
 8004c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	09db      	lsrs	r3, r3, #7
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca2:	d8f0      	bhi.n	8004c86 <SEGGER_SYSVIEW_SendModule+0x66>
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	627a      	str	r2, [r7, #36]	; 0x24
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	e00b      	b.n	8004cd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	1c59      	adds	r1, r3, #1
 8004cc8:	61f9      	str	r1, [r7, #28]
 8004cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	09db      	lsrs	r3, r3, #7
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	2b7f      	cmp	r3, #127	; 0x7f
 8004cdc:	d8f0      	bhi.n	8004cc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	61fa      	str	r2, [r7, #28]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff f86e 	bl	8003dd8 <_EncodeStr>
 8004cfc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004cfe:	2216      	movs	r2, #22
 8004d00:	68f9      	ldr	r1, [r7, #12]
 8004d02:	6938      	ldr	r0, [r7, #16]
 8004d04:	f7ff f98e 	bl	8004024 <_SendPacket>
      RECORD_END();
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004d0e:	bf00      	nop
 8004d10:	3730      	adds	r7, #48	; 0x30
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20017498 	.word	0x20017498
 8004d1c:	200174a0 	.word	0x200174a0

08004d20 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00f      	beq.n	8004d4e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f2      	bne.n	8004d34 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20017498 	.word	0x20017498

08004d5c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d62:	f3ef 8311 	mrs	r3, BASEPRI
 8004d66:	f04f 0120 	mov.w	r1, #32
 8004d6a:	f381 8811 	msr	BASEPRI, r1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	4817      	ldr	r0, [pc, #92]	; (8004dd0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004d72:	f7ff f87e 	bl	8003e72 <_PreparePacket>
 8004d76:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e00b      	b.n	8004da0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1c59      	adds	r1, r3, #1
 8004d90:	6179      	str	r1, [r7, #20]
 8004d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	09db      	lsrs	r3, r3, #7
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b7f      	cmp	r3, #127	; 0x7f
 8004da4:	d8f0      	bhi.n	8004d88 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	617a      	str	r2, [r7, #20]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004db6:	221b      	movs	r2, #27
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	68b8      	ldr	r0, [r7, #8]
 8004dbc:	f7ff f932 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f383 8811 	msr	BASEPRI, r3
}
 8004dc6:	bf00      	nop
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200174a0 	.word	0x200174a0
 8004dd4:	2001749c 	.word	0x2001749c

08004dd8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004de0:	f3ef 8311 	mrs	r3, BASEPRI
 8004de4:	f04f 0120 	mov.w	r1, #32
 8004de8:	f381 8811 	msr	BASEPRI, r1
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	4827      	ldr	r0, [pc, #156]	; (8004e8c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004df0:	f7ff f83f 	bl	8003e72 <_PreparePacket>
 8004df4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	6938      	ldr	r0, [r7, #16]
 8004dfc:	f7fe ffec 	bl	8003dd8 <_EncodeStr>
 8004e00:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	2301      	movs	r3, #1
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_Warn+0x4c>
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	6279      	str	r1, [r7, #36]	; 0x24
 8004e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	623b      	str	r3, [r7, #32]
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	2b7f      	cmp	r3, #127	; 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_Warn+0x34>
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	e00b      	b.n	8004e5c <SEGGER_SYSVIEW_Warn+0x84>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1c59      	adds	r1, r3, #1
 8004e4c:	61f9      	str	r1, [r7, #28]
 8004e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	09db      	lsrs	r3, r3, #7
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d8f0      	bhi.n	8004e44 <SEGGER_SYSVIEW_Warn+0x6c>
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e72:	221a      	movs	r2, #26
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7ff f8d4 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f383 8811 	msr	BASEPRI, r3
}
 8004e82:	bf00      	nop
 8004e84:	3728      	adds	r7, #40	; 0x28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200174a0 	.word	0x200174a0

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	4e0d      	ldr	r6, [pc, #52]	; (8004ec8 <__libc_init_array+0x38>)
 8004e94:	4c0d      	ldr	r4, [pc, #52]	; (8004ecc <__libc_init_array+0x3c>)
 8004e96:	1ba4      	subs	r4, r4, r6
 8004e98:	10a4      	asrs	r4, r4, #2
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	42a5      	cmp	r5, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	4e0b      	ldr	r6, [pc, #44]	; (8004ed0 <__libc_init_array+0x40>)
 8004ea2:	4c0c      	ldr	r4, [pc, #48]	; (8004ed4 <__libc_init_array+0x44>)
 8004ea4:	f000 f83a 	bl	8004f1c <_init>
 8004ea8:	1ba4      	subs	r4, r4, r6
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	2500      	movs	r5, #0
 8004eae:	42a5      	cmp	r5, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eb8:	4798      	blx	r3
 8004eba:	3501      	adds	r5, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ec2:	4798      	blx	r3
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	08005060 	.word	0x08005060
 8004ecc:	08005060 	.word	0x08005060
 8004ed0:	08005060 	.word	0x08005060
 8004ed4:	08005064 	.word	0x08005064

08004ed8 <memcmp>:
 8004ed8:	b530      	push	{r4, r5, lr}
 8004eda:	2400      	movs	r4, #0
 8004edc:	42a2      	cmp	r2, r4
 8004ede:	d101      	bne.n	8004ee4 <memcmp+0xc>
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e007      	b.n	8004ef4 <memcmp+0x1c>
 8004ee4:	5d03      	ldrb	r3, [r0, r4]
 8004ee6:	3401      	adds	r4, #1
 8004ee8:	190d      	adds	r5, r1, r4
 8004eea:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004eee:	42ab      	cmp	r3, r5
 8004ef0:	d0f4      	beq.n	8004edc <memcmp+0x4>
 8004ef2:	1b58      	subs	r0, r3, r5
 8004ef4:	bd30      	pop	{r4, r5, pc}

08004ef6 <memcpy>:
 8004ef6:	b510      	push	{r4, lr}
 8004ef8:	1e43      	subs	r3, r0, #1
 8004efa:	440a      	add	r2, r1
 8004efc:	4291      	cmp	r1, r2
 8004efe:	d100      	bne.n	8004f02 <memcpy+0xc>
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0a:	e7f7      	b.n	8004efc <memcpy+0x6>

08004f0c <memset>:
 8004f0c:	4402      	add	r2, r0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d100      	bne.n	8004f16 <memset+0xa>
 8004f14:	4770      	bx	lr
 8004f16:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1a:	e7f9      	b.n	8004f10 <memset+0x4>

08004f1c <_init>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr

08004f28 <_fini>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	bf00      	nop
 8004f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2e:	bc08      	pop	{r3}
 8004f30:	469e      	mov	lr, r3
 8004f32:	4770      	bx	lr
