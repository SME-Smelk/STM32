
01-CreateTask-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000379c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003984  08003984  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800398c  0800398c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dc8  20000010  080039a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012dd8  080039a4  00022dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eae4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b4  00000000  00000000  0002eb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00030bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020779  00000000  00000000  000320d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c61f  00000000  00000000  00052849  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8713  00000000  00000000  0005ee68  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012757b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  001275f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003934 	.word	0x08003934

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08003934 	.word	0x08003934

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af02      	add	r7, sp, #8

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f6:	f000 f8d1 	bl	800069c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80004fa:	f000 f823 	bl	8000544 <SystemClock_Config>

	/* Create a taskk */
	//Tarea 1
	xTaskCreate(vtask1_Handler,"task1",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler1);
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <main+0x3c>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2302      	movs	r3, #2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2282      	movs	r2, #130	; 0x82
 800050a:	4909      	ldr	r1, [pc, #36]	; (8000530 <main+0x40>)
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x44>)
 800050e:	f001 fcab 	bl	8001e68 <xTaskCreate>
	//tarea 2
	xTaskCreate(vtask2_Handler,"task2",configMINIMAL_STACK_SIZE,NULL,2,&xTaskHandler2);
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x48>)
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2302      	movs	r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2282      	movs	r2, #130	; 0x82
 800051e:	4907      	ldr	r1, [pc, #28]	; (800053c <main+0x4c>)
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <main+0x50>)
 8000522:	f001 fca1 	bl	8001e68 <xTaskCreate>
	/* Init scheduler */
	//osKernelInitialize();

	/* Start scheduler */
	//osKernelStart();
	vTaskStartScheduler();
 8000526:	f001 fdd5 	bl	80020d4 <vTaskStartScheduler>

	while (1);
 800052a:	e7fe      	b.n	800052a <main+0x3a>
 800052c:	2000002c 	.word	0x2000002c
 8000530:	0800394c 	.word	0x0800394c
 8000534:	08000603 	.word	0x08000603
 8000538:	20000030 	.word	0x20000030
 800053c:	08003954 	.word	0x08003954
 8000540:	0800060d 	.word	0x0800060d

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f9e5 	bl	8003922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f9d4 	bl	800094c <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005aa:	f000 f834 	bl	8000616 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fc2d 	bl	8000e2c <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f81d 	bl	8000616 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005e0:	23c0      	movs	r3, #192	; 0xc0
 80005e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fddc 	bl	80011a8 <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005f6:	f000 f80e 	bl	8000616 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	; 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <vtask1_Handler>:

/**
  * @brief  Function of task1.
  * @retval None
  */
void vtask1_Handler(void *params){
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	while(1){
 800060a:	e7fe      	b.n	800060a <vtask1_Handler+0x8>

0800060c <vtask2_Handler>:

/**
  * @brief  Function of task2.
  * @retval None
  */
void vtask2_Handler(void *params){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	while(1){
 8000614:	e7fe      	b.n	8000614 <vtask2_Handler+0x8>

08000616 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <HAL_MspInit>:
/**
  * Initializes the Global MSP.
  */

void HAL_MspInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* System interrupt init*/
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	210f      	movs	r1, #15
 800062c:	f06f 0001 	mvn.w	r0, #1
 8000630:	f000 f963 	bl	80008fa <HAL_NVIC_SetPriority>

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f86d 	bl	8000740 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000666:	f002 fec7 	bl	80033f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <SystemInit+0x28>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <SystemInit+0x28>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <SystemInit+0x28>)
 8000686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800068a:	609a      	str	r2, [r3, #8]
#endif
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_Init+0x40>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_Init+0x40>)
 80006a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_Init+0x40>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <HAL_Init+0x40>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_Init+0x40>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_Init+0x40>)
 80006be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 f90d 	bl	80008e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ca:	200f      	movs	r0, #15
 80006cc:	f000 f808 	bl	80006e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d0:	f7ff ffa8 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d4:	2300      	movs	r3, #0
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023c00 	.word	0x40023c00

080006e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <HAL_InitTick+0x54>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x58>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f917 	bl	8000932 <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f000 f8ed 	bl	80008fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_InitTick+0x5c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	20000008 	.word	0x20000008
 800073c:	20000004 	.word	0x20000004

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	20012d94 	.word	0x20012d94

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20012d94 	.word	0x20012d94

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	6039      	str	r1, [r7, #0]
 80007ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	db0a      	blt.n	800080e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	490c      	ldr	r1, [pc, #48]	; (8000830 <__NVIC_SetPriority+0x4c>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	0112      	lsls	r2, r2, #4
 8000804:	b2d2      	uxtb	r2, r2
 8000806:	440b      	add	r3, r1
 8000808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800080c:	e00a      	b.n	8000824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4908      	ldr	r1, [pc, #32]	; (8000834 <__NVIC_SetPriority+0x50>)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 030f 	and.w	r3, r3, #15
 800081a:	3b04      	subs	r3, #4
 800081c:	0112      	lsls	r2, r2, #4
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	440b      	add	r3, r1
 8000822:	761a      	strb	r2, [r3, #24]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000e100 	.word	0xe000e100
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	f1c3 0307 	rsb	r3, r3, #7
 8000852:	2b04      	cmp	r3, #4
 8000854:	bf28      	it	cs
 8000856:	2304      	movcs	r3, #4
 8000858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3304      	adds	r3, #4
 800085e:	2b06      	cmp	r3, #6
 8000860:	d902      	bls.n	8000868 <NVIC_EncodePriority+0x30>
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	3b03      	subs	r3, #3
 8000866:	e000      	b.n	800086a <NVIC_EncodePriority+0x32>
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43da      	mvns	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	401a      	ands	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000880:	f04f 31ff 	mov.w	r1, #4294967295
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	43d9      	mvns	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	4313      	orrs	r3, r2
         );
}
 8000892:	4618      	mov	r0, r3
 8000894:	3724      	adds	r7, #36	; 0x24
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b0:	d301      	bcc.n	80008b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008b2:	2301      	movs	r3, #1
 80008b4:	e00f      	b.n	80008d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <SysTick_Config+0x40>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008be:	210f      	movs	r1, #15
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	f7ff ff8e 	bl	80007e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <SysTick_Config+0x40>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <SysTick_Config+0x40>)
 80008d0:	2207      	movs	r2, #7
 80008d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	e000e010 	.word	0xe000e010

080008e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff47 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4603      	mov	r3, r0
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800090c:	f7ff ff5c 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	6978      	ldr	r0, [r7, #20]
 8000918:	f7ff ff8e 	bl	8000838 <NVIC_EncodePriority>
 800091c:	4602      	mov	r2, r0
 800091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff5d 	bl	80007e4 <__NVIC_SetPriority>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff ffb0 	bl	80008a0 <SysTick_Config>
 8000940:	4603      	mov	r3, r0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e25b      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d075      	beq.n	8000a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800096a:	4ba3      	ldr	r3, [pc, #652]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f003 030c 	and.w	r3, r3, #12
 8000972:	2b04      	cmp	r3, #4
 8000974:	d00c      	beq.n	8000990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000976:	4ba0      	ldr	r3, [pc, #640]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800097e:	2b08      	cmp	r3, #8
 8000980:	d112      	bne.n	80009a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000982:	4b9d      	ldr	r3, [pc, #628]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800098e:	d10b      	bne.n	80009a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000990:	4b99      	ldr	r3, [pc, #612]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d05b      	beq.n	8000a54 <HAL_RCC_OscConfig+0x108>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d157      	bne.n	8000a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e236      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b0:	d106      	bne.n	80009c0 <HAL_RCC_OscConfig+0x74>
 80009b2:	4b91      	ldr	r3, [pc, #580]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a90      	ldr	r2, [pc, #576]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e01d      	b.n	80009fc <HAL_RCC_OscConfig+0xb0>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009c8:	d10c      	bne.n	80009e4 <HAL_RCC_OscConfig+0x98>
 80009ca:	4b8b      	ldr	r3, [pc, #556]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a8a      	ldr	r2, [pc, #552]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	4b88      	ldr	r3, [pc, #544]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a87      	ldr	r2, [pc, #540]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e00b      	b.n	80009fc <HAL_RCC_OscConfig+0xb0>
 80009e4:	4b84      	ldr	r3, [pc, #528]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a83      	ldr	r2, [pc, #524]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b81      	ldr	r3, [pc, #516]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a80      	ldr	r2, [pc, #512]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d013      	beq.n	8000a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a04:	f7ff feb0 	bl	8000768 <HAL_GetTick>
 8000a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a0a:	e008      	b.n	8000a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a0c:	f7ff feac 	bl	8000768 <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	2b64      	cmp	r3, #100	; 0x64
 8000a18:	d901      	bls.n	8000a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e1fb      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a1e:	4b76      	ldr	r3, [pc, #472]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f0      	beq.n	8000a0c <HAL_RCC_OscConfig+0xc0>
 8000a2a:	e014      	b.n	8000a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fe9c 	bl	8000768 <HAL_GetTick>
 8000a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a32:	e008      	b.n	8000a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a34:	f7ff fe98 	bl	8000768 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	2b64      	cmp	r3, #100	; 0x64
 8000a40:	d901      	bls.n	8000a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e1e7      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a46:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1f0      	bne.n	8000a34 <HAL_RCC_OscConfig+0xe8>
 8000a52:	e000      	b.n	8000a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d063      	beq.n	8000b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a62:	4b65      	ldr	r3, [pc, #404]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 030c 	and.w	r3, r3, #12
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00b      	beq.n	8000a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a76:	2b08      	cmp	r3, #8
 8000a78:	d11c      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a7a:	4b5f      	ldr	r3, [pc, #380]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d116      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <HAL_RCC_OscConfig+0x152>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d001      	beq.n	8000a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e1bb      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9e:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	4952      	ldr	r1, [pc, #328]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ab2:	e03a      	b.n	8000b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d020      	beq.n	8000afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000abc:	4b4f      	ldr	r3, [pc, #316]	; (8000bfc <HAL_RCC_OscConfig+0x2b0>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fe51 	bl	8000768 <HAL_GetTick>
 8000ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac8:	e008      	b.n	8000adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aca:	f7ff fe4d 	bl	8000768 <HAL_GetTick>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e19c      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000adc:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f0      	beq.n	8000aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ae8:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	4940      	ldr	r1, [pc, #256]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000af8:	4313      	orrs	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
 8000afc:	e015      	b.n	8000b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000afe:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <HAL_RCC_OscConfig+0x2b0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b04:	f7ff fe30 	bl	8000768 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b0c:	f7ff fe2c 	bl	8000768 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e17b      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d030      	beq.n	8000b98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d016      	beq.n	8000b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <HAL_RCC_OscConfig+0x2b4>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b44:	f7ff fe10 	bl	8000768 <HAL_GetTick>
 8000b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fe0c 	bl	8000768 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e15b      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f0      	beq.n	8000b4c <HAL_RCC_OscConfig+0x200>
 8000b6a:	e015      	b.n	8000b98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_RCC_OscConfig+0x2b4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b72:	f7ff fdf9 	bl	8000768 <HAL_GetTick>
 8000b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b7a:	f7ff fdf5 	bl	8000768 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e144      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f0      	bne.n	8000b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f000 80a0 	beq.w	8000ce6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_RCC_OscConfig+0x2b8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d121      	bne.n	8000c26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_RCC_OscConfig+0x2b8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_RCC_OscConfig+0x2b8>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bee:	f7ff fdbb 	bl	8000768 <HAL_GetTick>
 8000bf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf4:	e011      	b.n	8000c1a <HAL_RCC_OscConfig+0x2ce>
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	42470000 	.word	0x42470000
 8000c00:	42470e80 	.word	0x42470e80
 8000c04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c08:	f7ff fdae 	bl	8000768 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e0fd      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c1a:	4b81      	ldr	r3, [pc, #516]	; (8000e20 <HAL_RCC_OscConfig+0x4d4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <HAL_RCC_OscConfig+0x2f0>
 8000c2e:	4b7d      	ldr	r3, [pc, #500]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c32:	4a7c      	ldr	r2, [pc, #496]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6713      	str	r3, [r2, #112]	; 0x70
 8000c3a:	e01c      	b.n	8000c76 <HAL_RCC_OscConfig+0x32a>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d10c      	bne.n	8000c5e <HAL_RCC_OscConfig+0x312>
 8000c44:	4b77      	ldr	r3, [pc, #476]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c48:	4a76      	ldr	r2, [pc, #472]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000c50:	4b74      	ldr	r3, [pc, #464]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c54:	4a73      	ldr	r2, [pc, #460]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0x32a>
 8000c5e:	4b71      	ldr	r3, [pc, #452]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c62:	4a70      	ldr	r2, [pc, #448]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6713      	str	r3, [r2, #112]	; 0x70
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6e:	4a6d      	ldr	r2, [pc, #436]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d015      	beq.n	8000caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c7e:	f7ff fd73 	bl	8000768 <HAL_GetTick>
 8000c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c84:	e00a      	b.n	8000c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f7ff fd6f 	bl	8000768 <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e0bc      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9c:	4b61      	ldr	r3, [pc, #388]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0ee      	beq.n	8000c86 <HAL_RCC_OscConfig+0x33a>
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000caa:	f7ff fd5d 	bl	8000768 <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fd59 	bl	8000768 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e0a6      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	4b56      	ldr	r3, [pc, #344]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ee      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d105      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cda:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8092 	beq.w	8000e14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cf0:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d05c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d141      	bne.n	8000d88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d04:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <HAL_RCC_OscConfig+0x4dc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fd2d 	bl	8000768 <HAL_GetTick>
 8000d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d12:	f7ff fd29 	bl	8000768 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e078      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f0      	bne.n	8000d12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69da      	ldr	r2, [r3, #28]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6a1b      	ldr	r3, [r3, #32]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	019b      	lsls	r3, r3, #6
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	4933      	ldr	r1, [pc, #204]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HAL_RCC_OscConfig+0x4dc>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d60:	f7ff fd02 	bl	8000768 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d68:	f7ff fcfe 	bl	8000768 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e04d      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0x41c>
 8000d86:	e045      	b.n	8000e14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <HAL_RCC_OscConfig+0x4dc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fceb 	bl	8000768 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d96:	f7ff fce7 	bl	8000768 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e036      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f0      	bne.n	8000d96 <HAL_RCC_OscConfig+0x44a>
 8000db4:	e02e      	b.n	8000e14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e029      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_RCC_OscConfig+0x4d8>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d11c      	bne.n	8000e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d115      	bne.n	8000e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000dea:	4013      	ands	r3, r2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d10d      	bne.n	8000e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d106      	bne.n	8000e10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d001      	beq.n	8000e14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40007000 	.word	0x40007000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	42470060 	.word	0x42470060

08000e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e0cc      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e40:	4b68      	ldr	r3, [pc, #416]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d90c      	bls.n	8000e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e4e:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d001      	beq.n	8000e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e0b8      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d020      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e80:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e98:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a52      	ldr	r2, [pc, #328]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea4:	4b50      	ldr	r3, [pc, #320]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	494d      	ldr	r1, [pc, #308]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d044      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d119      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e07f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d003      	beq.n	8000eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d107      	bne.n	8000efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eea:	4b3f      	ldr	r3, [pc, #252]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d109      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e06f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e067      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f0a:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f023 0203 	bic.w	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f1c:	f7ff fc24 	bl	8000768 <HAL_GetTick>
 8000f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f22:	e00a      	b.n	8000f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff fc20 	bl	8000768 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e04f      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 020c 	and.w	r2, r3, #12
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d1eb      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d20c      	bcs.n	8000f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e032      	b.n	8000fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4916      	ldr	r1, [pc, #88]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fb2:	f000 f821 	bl	8000ff8 <HAL_RCC_GetSysClockFreq>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_RCC_ClockConfig+0x1c0>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fb84 	bl	80006e0 <HAL_InitTick>

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	08003974 	.word	0x08003974
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800100e:	4b63      	ldr	r3, [pc, #396]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d007      	beq.n	800102a <HAL_RCC_GetSysClockFreq+0x32>
 800101a:	2b08      	cmp	r3, #8
 800101c:	d008      	beq.n	8001030 <HAL_RCC_GetSysClockFreq+0x38>
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 80b4 	bne.w	800118c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001024:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001026:	60bb      	str	r3, [r7, #8]
       break;
 8001028:	e0b3      	b.n	8001192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800102a:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800102c:	60bb      	str	r3, [r7, #8]
      break;
 800102e:	e0b0      	b.n	8001192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001030:	4b5a      	ldr	r3, [pc, #360]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001038:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800103a:	4b58      	ldr	r3, [pc, #352]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d04a      	beq.n	80010dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001046:	4b55      	ldr	r3, [pc, #340]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	099b      	lsrs	r3, r3, #6
 800104c:	f04f 0400 	mov.w	r4, #0
 8001050:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	ea03 0501 	and.w	r5, r3, r1
 800105c:	ea04 0602 	and.w	r6, r4, r2
 8001060:	4629      	mov	r1, r5
 8001062:	4632      	mov	r2, r6
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f04f 0400 	mov.w	r4, #0
 800106c:	0154      	lsls	r4, r2, #5
 800106e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001072:	014b      	lsls	r3, r1, #5
 8001074:	4619      	mov	r1, r3
 8001076:	4622      	mov	r2, r4
 8001078:	1b49      	subs	r1, r1, r5
 800107a:	eb62 0206 	sbc.w	r2, r2, r6
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	f04f 0400 	mov.w	r4, #0
 8001086:	0194      	lsls	r4, r2, #6
 8001088:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800108c:	018b      	lsls	r3, r1, #6
 800108e:	1a5b      	subs	r3, r3, r1
 8001090:	eb64 0402 	sbc.w	r4, r4, r2
 8001094:	f04f 0100 	mov.w	r1, #0
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	00e2      	lsls	r2, r4, #3
 800109e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80010a2:	00d9      	lsls	r1, r3, #3
 80010a4:	460b      	mov	r3, r1
 80010a6:	4614      	mov	r4, r2
 80010a8:	195b      	adds	r3, r3, r5
 80010aa:	eb44 0406 	adc.w	r4, r4, r6
 80010ae:	f04f 0100 	mov.w	r1, #0
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	0262      	lsls	r2, r4, #9
 80010b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80010bc:	0259      	lsls	r1, r3, #9
 80010be:	460b      	mov	r3, r1
 80010c0:	4614      	mov	r4, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	4621      	mov	r1, r4
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0400 	mov.w	r4, #0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4623      	mov	r3, r4
 80010d0:	f7ff f88e 	bl	80001f0 <__aeabi_uldivmod>
 80010d4:	4603      	mov	r3, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e049      	b.n	8001170 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	ea03 0501 	and.w	r5, r3, r1
 80010f2:	ea04 0602 	and.w	r6, r4, r2
 80010f6:	4629      	mov	r1, r5
 80010f8:	4632      	mov	r2, r6
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0400 	mov.w	r4, #0
 8001102:	0154      	lsls	r4, r2, #5
 8001104:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001108:	014b      	lsls	r3, r1, #5
 800110a:	4619      	mov	r1, r3
 800110c:	4622      	mov	r2, r4
 800110e:	1b49      	subs	r1, r1, r5
 8001110:	eb62 0206 	sbc.w	r2, r2, r6
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f04f 0400 	mov.w	r4, #0
 800111c:	0194      	lsls	r4, r2, #6
 800111e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001122:	018b      	lsls	r3, r1, #6
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	eb64 0402 	sbc.w	r4, r4, r2
 800112a:	f04f 0100 	mov.w	r1, #0
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	00e2      	lsls	r2, r4, #3
 8001134:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001138:	00d9      	lsls	r1, r3, #3
 800113a:	460b      	mov	r3, r1
 800113c:	4614      	mov	r4, r2
 800113e:	195b      	adds	r3, r3, r5
 8001140:	eb44 0406 	adc.w	r4, r4, r6
 8001144:	f04f 0100 	mov.w	r1, #0
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	02a2      	lsls	r2, r4, #10
 800114e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001152:	0299      	lsls	r1, r3, #10
 8001154:	460b      	mov	r3, r1
 8001156:	4614      	mov	r4, r2
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0400 	mov.w	r4, #0
 8001162:	461a      	mov	r2, r3
 8001164:	4623      	mov	r3, r4
 8001166:	f7ff f843 	bl	80001f0 <__aeabi_uldivmod>
 800116a:	4603      	mov	r3, r0
 800116c:	460c      	mov	r4, r1
 800116e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	0c1b      	lsrs	r3, r3, #16
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	3301      	adds	r3, #1
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	fbb2 f3f3 	udiv	r3, r2, r3
 8001188:	60bb      	str	r3, [r7, #8]
      break;
 800118a:	e002      	b.n	8001192 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800118e:	60bb      	str	r3, [r7, #8]
      break;
 8001190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001192:	68bb      	ldr	r3, [r7, #8]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	00f42400 	.word	0x00f42400
 80011a4:	007a1200 	.word	0x007a1200

080011a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d035      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80011d0:	4b62      	ldr	r3, [pc, #392]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80011d6:	f7ff fac7 	bl	8000768 <HAL_GetTick>
 80011da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80011de:	f7ff fac3 	bl	8000768 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e0b0      	b.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80011f0:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f0      	bne.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	019a      	lsls	r2, r3, #6
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	071b      	lsls	r3, r3, #28
 8001208:	4955      	ldr	r1, [pc, #340]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800120a:	4313      	orrs	r3, r2
 800120c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001210:	4b52      	ldr	r3, [pc, #328]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001216:	f7ff faa7 	bl	8000768 <HAL_GetTick>
 800121a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800121e:	f7ff faa3 	bl	8000768 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e090      	b.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8083 	beq.w	8001350 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a3e      	ldr	r2, [pc, #248]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001272:	f7ff fa79 	bl	8000768 <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fa75 	bl	8000768 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e062      	b.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800128c:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d02f      	beq.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d028      	beq.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80012cc:	4a24      	ldr	r2, [pc, #144]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d114      	bne.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fa43 	bl	8000768 <HAL_GetTick>
 80012e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fa3f 	bl	8000768 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e02a      	b.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ee      	beq.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001314:	d10d      	bne.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
 8001330:	e005      	b.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001338:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800133c:	6093      	str	r3, [r2, #8]
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800134c:	4313      	orrs	r3, r2
 800134e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	42470068 	.word	0x42470068
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000
 8001368:	42470e40 	.word	0x42470e40

0800136c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490e      	ldr	r1, [pc, #56]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0b      	ldr	r4, [pc, #44]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001396:	f7ff f96b 	bl	8000670 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800139a:	f002 fa93 	bl	80038c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff f8a7 	bl	80004f0 <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   r0, =_estack
 80013a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013b0:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 80013b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013b8:	20012dd8 	.word	0x20012dd8

080013bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>

080013be <vApplicationMallocFailedHook>:

/**
  Dummy implementation of the callback function vApplicationMallocFailedHook().
*/
#if (configUSE_MALLOC_FAILED_HOOK == 1)
__WEAK void vApplicationMallocFailedHook (void){}
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f103 0208 	add.w	r2, r3, #8
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f103 0208 	add.w	r2, r3, #8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 0208 	add.w	r2, r3, #8
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800146e:	b480      	push	{r7}
 8001470:	b085      	sub	sp, #20
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d103      	bne.n	800148e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	e00c      	b.n	80014a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3308      	adds	r3, #8
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e002      	b.n	800149c <vListInsert+0x2e>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d2f6      	bcs.n	8001496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6892      	ldr	r2, [r2, #8]
 80014f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6852      	ldr	r2, [r2, #4]
 8001500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	d103      	bne.n	8001514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	e7fe      	b.n	800155a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800155c:	f001 febe 	bl	80032dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001568:	68f9      	ldr	r1, [r7, #12]
 800156a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	441a      	add	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2200      	movs	r2, #0
 800157a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	3b01      	subs	r3, #1
 800158e:	68f9      	ldr	r1, [r7, #12]
 8001590:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	441a      	add	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	22ff      	movs	r2, #255	; 0xff
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d114      	bne.n	80015dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01a      	beq.n	80015f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3310      	adds	r3, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fff2 	bl	80025a8 <xTaskRemoveFromEventList>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d012      	beq.n	80015f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <xQueueGenericReset+0xcc>)
 80015cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	f3bf 8f6f 	isb	sy
 80015da:	e009      	b.n	80015f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3310      	adds	r3, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fef3 	bl	80013cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3324      	adds	r3, #36	; 0x24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff feee 	bl	80013cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80015f0:	f001 fea2 	bl	8003338 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000ed04 	.word	0xe000ed04

08001604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <xQueueGenericCreate+0x28>
 8001618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161c:	f383 8811 	msr	BASEPRI, r3
 8001620:	f3bf 8f6f 	isb	sy
 8001624:	f3bf 8f4f 	dsb	sy
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	e7fe      	b.n	800162a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e004      	b.n	8001642 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3350      	adds	r3, #80	; 0x50
 8001646:	4618      	mov	r0, r3
 8001648:	f001 ff62 	bl	8003510 <pvPortMalloc>
 800164c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3350      	adds	r3, #80	; 0x50
 8001658:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f805 	bl	8001676 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800166c:	69bb      	ldr	r3, [r7, #24]
	}
 800166e:	4618      	mov	r0, r3
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e002      	b.n	8001698 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80016a4:	2101      	movs	r1, #1
 80016a6:	69b8      	ldr	r0, [r7, #24]
 80016a8:	f7ff ff44 	bl	8001534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <xQueueGenericSend+0x30>
 80016d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ea:	e7fe      	b.n	80016ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <xQueueGenericSend+0x3e>
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <xQueueGenericSend+0x42>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <xQueueGenericSend+0x44>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <xQueueGenericSend+0x5c>
 8001704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001708:	f383 8811 	msr	BASEPRI, r3
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	f3bf 8f4f 	dsb	sy
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	e7fe      	b.n	8001716 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d103      	bne.n	8001726 <xQueueGenericSend+0x6a>
 800171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <xQueueGenericSend+0x6e>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <xQueueGenericSend+0x70>
 800172a:	2300      	movs	r3, #0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d109      	bne.n	8001744 <xQueueGenericSend+0x88>
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	623b      	str	r3, [r7, #32]
 8001742:	e7fe      	b.n	8001742 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001744:	f001 f8ce 	bl	80028e4 <xTaskGetSchedulerState>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <xQueueGenericSend+0x98>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <xQueueGenericSend+0x9c>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <xQueueGenericSend+0x9e>
 8001758:	2300      	movs	r3, #0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <xQueueGenericSend+0xb6>
 800175e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001762:	f383 8811 	msr	BASEPRI, r3
 8001766:	f3bf 8f6f 	isb	sy
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	e7fe      	b.n	8001770 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001772:	f001 fdb3 	bl	80032dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <xQueueGenericSend+0xcc>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d129      	bne.n	80017dc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800178e:	f000 f9ff 	bl	8001b90 <prvCopyDataToQueue>
 8001792:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	2b00      	cmp	r3, #0
 800179a:	d010      	beq.n	80017be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	3324      	adds	r3, #36	; 0x24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 ff01 	bl	80025a8 <xTaskRemoveFromEventList>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d013      	beq.n	80017d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80017ac:	4b3f      	ldr	r3, [pc, #252]	; (80018ac <xQueueGenericSend+0x1f0>)
 80017ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	e00a      	b.n	80017d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80017c4:	4b39      	ldr	r3, [pc, #228]	; (80018ac <xQueueGenericSend+0x1f0>)
 80017c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	f3bf 8f4f 	dsb	sy
 80017d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80017d4:	f001 fdb0 	bl	8003338 <vPortExitCritical>
				return pdPASS;
 80017d8:	2301      	movs	r3, #1
 80017da:	e063      	b.n	80018a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d103      	bne.n	80017ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80017e2:	f001 fda9 	bl	8003338 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e05c      	b.n	80018a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80017ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 ff39 	bl	800266c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80017fe:	f001 fd9b 	bl	8003338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001802:	f000 fcb3 	bl	800216c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001806:	f001 fd69 	bl	80032dc <vPortEnterCritical>
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001816:	d103      	bne.n	8001820 <xQueueGenericSend+0x164>
 8001818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001826:	b25b      	sxtb	r3, r3
 8001828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800182c:	d103      	bne.n	8001836 <xQueueGenericSend+0x17a>
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001836:	f001 fd7f 	bl	8003338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800183a:	1d3a      	adds	r2, r7, #4
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f000 ff28 	bl	8002698 <xTaskCheckForTimeOut>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d124      	bne.n	8001898 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800184e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001850:	f000 fa96 	bl	8001d80 <prvIsQueueFull>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d018      	beq.n	800188c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185c:	3310      	adds	r3, #16
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4611      	mov	r1, r2
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fe52 	bl	800250c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800186a:	f000 fa21 	bl	8001cb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800186e:	f000 fc8b 	bl	8002188 <xTaskResumeAll>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f47f af7c 	bne.w	8001772 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <xQueueGenericSend+0x1f0>)
 800187c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f3bf 8f4f 	dsb	sy
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	e772      	b.n	8001772 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800188c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800188e:	f000 fa0f 	bl	8001cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001892:	f000 fc79 	bl	8002188 <xTaskResumeAll>
 8001896:	e76c      	b.n	8001772 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800189a:	f000 fa09 	bl	8001cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800189e:	f000 fc73 	bl	8002188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80018a2:	2300      	movs	r3, #0
		}
	}
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	e000ed04 	.word	0xe000ed04

080018b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	; 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <xQueueGenericSendFromISR+0x2c>
 80018c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	e7fe      	b.n	80018da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d103      	bne.n	80018ea <xQueueGenericSendFromISR+0x3a>
 80018e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <xQueueGenericSendFromISR+0x3e>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <xQueueGenericSendFromISR+0x40>
 80018ee:	2300      	movs	r3, #0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <xQueueGenericSendFromISR+0x58>
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	e7fe      	b.n	8001906 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d103      	bne.n	8001916 <xQueueGenericSendFromISR+0x66>
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <xQueueGenericSendFromISR+0x6a>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <xQueueGenericSendFromISR+0x6c>
 800191a:	2300      	movs	r3, #0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <xQueueGenericSendFromISR+0x84>
 8001920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001924:	f383 8811 	msr	BASEPRI, r3
 8001928:	f3bf 8f6f 	isb	sy
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e7fe      	b.n	8001932 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001934:	f001 fdae 	bl	8003494 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001938:	f3ef 8211 	mrs	r2, BASEPRI
 800193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	61ba      	str	r2, [r7, #24]
 800194e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001950:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <xQueueGenericSendFromISR+0xb6>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d12c      	bne.n	80019c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800196c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001976:	f000 f90b 	bl	8001b90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800197a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001982:	d112      	bne.n	80019aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d016      	beq.n	80019ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	3324      	adds	r3, #36	; 0x24
 8001990:	4618      	mov	r0, r3
 8001992:	f000 fe09 	bl	80025a8 <xTaskRemoveFromEventList>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80019aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	b25a      	sxtb	r2, r3
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80019ba:	2301      	movs	r3, #1
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80019be:	e001      	b.n	80019c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80019ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d109      	bne.n	8001a06 <xQueueReceive+0x2e>
	__asm volatile
 80019f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	e7fe      	b.n	8001a04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d103      	bne.n	8001a14 <xQueueReceive+0x3c>
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <xQueueReceive+0x40>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <xQueueReceive+0x42>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <xQueueReceive+0x5a>
 8001a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a22:	f383 8811 	msr	BASEPRI, r3
 8001a26:	f3bf 8f6f 	isb	sy
 8001a2a:	f3bf 8f4f 	dsb	sy
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	e7fe      	b.n	8001a30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a32:	f000 ff57 	bl	80028e4 <xTaskGetSchedulerState>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <xQueueReceive+0x6a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <xQueueReceive+0x6e>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <xQueueReceive+0x70>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d109      	bne.n	8001a60 <xQueueReceive+0x88>
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	e7fe      	b.n	8001a5e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a60:	f001 fc3c 	bl	80032dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01f      	beq.n	8001ab0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a74:	f000 f8f6 	bl	8001c64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	1e5a      	subs	r2, r3, #1
 8001a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00f      	beq.n	8001aa8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fd8b 	bl	80025a8 <xTaskRemoveFromEventList>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <xQueueReceive+0x1b4>)
 8001a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f3bf 8f4f 	dsb	sy
 8001aa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001aa8:	f001 fc46 	bl	8003338 <vPortExitCritical>
				return pdPASS;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e069      	b.n	8001b84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ab6:	f001 fc3f 	bl	8003338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e062      	b.n	8001b84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d106      	bne.n	8001ad2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fdcf 	bl	800266c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ad2:	f001 fc31 	bl	8003338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ad6:	f000 fb49 	bl	800216c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ada:	f001 fbff 	bl	80032dc <vPortEnterCritical>
 8001ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d103      	bne.n	8001af4 <xQueueReceive+0x11c>
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d103      	bne.n	8001b0a <xQueueReceive+0x132>
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b0a:	f001 fc15 	bl	8003338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b0e:	1d3a      	adds	r2, r7, #4
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fdbe 	bl	8002698 <xTaskCheckForTimeOut>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d123      	bne.n	8001b6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b24:	f000 f916 	bl	8001d54 <prvIsQueueEmpty>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d017      	beq.n	8001b5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b30:	3324      	adds	r3, #36	; 0x24
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fce8 	bl	800250c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b3e:	f000 f8b7 	bl	8001cb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b42:	f000 fb21 	bl	8002188 <xTaskResumeAll>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d189      	bne.n	8001a60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <xQueueReceive+0x1b4>)
 8001b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	f3bf 8f4f 	dsb	sy
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	e780      	b.n	8001a60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b60:	f000 f8a6 	bl	8001cb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b64:	f000 fb10 	bl	8002188 <xTaskResumeAll>
 8001b68:	e77a      	b.n	8001a60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b6c:	f000 f8a0 	bl	8001cb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b70:	f000 fb0a 	bl	8002188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b76:	f000 f8ed 	bl	8001d54 <prvIsQueueEmpty>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f43f af6f 	beq.w	8001a60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001b82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	e000ed04 	.word	0xe000ed04

08001b90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d14d      	bne.n	8001c52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 feb0 	bl	8002920 <xTaskPriorityDisinherit>
 8001bc0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	e043      	b.n	8001c52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d119      	bne.n	8001c04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6898      	ldr	r0, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	f001 fe96 	bl	800390c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	441a      	add	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d32b      	bcc.n	8001c52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	e026      	b.n	8001c52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68d8      	ldr	r0, [r3, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	f001 fe7c 	bl	800390c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	441a      	add	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	425b      	negs	r3, r3
 8001c3a:	441a      	add	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d105      	bne.n	8001c52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001c5a:	697b      	ldr	r3, [r7, #20]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d018      	beq.n	8001ca8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	441a      	add	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d303      	bcc.n	8001c98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f001 fe32 	bl	800390c <memcpy>
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001cb8:	f001 fb10 	bl	80032dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cc4:	e011      	b.n	8001cea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3324      	adds	r3, #36	; 0x24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fc68 	bl	80025a8 <xTaskRemoveFromEventList>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001cde:	f000 fd3b 	bl	8002758 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dce9      	bgt.n	8001cc6 <prvUnlockQueue+0x16>
 8001cf2:	e000      	b.n	8001cf6 <prvUnlockQueue+0x46>
					break;
 8001cf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	22ff      	movs	r2, #255	; 0xff
 8001cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001cfe:	f001 fb1b 	bl	8003338 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001d02:	f001 faeb 	bl	80032dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d0e:	e011      	b.n	8001d34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fc43 	bl	80025a8 <xTaskRemoveFromEventList>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001d28:	f000 fd16 	bl	8002758 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dce9      	bgt.n	8001d10 <prvUnlockQueue+0x60>
 8001d3c:	e000      	b.n	8001d40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001d3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001d48:	f001 faf6 	bl	8003338 <vPortExitCritical>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d5c:	f001 fabe 	bl	80032dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e001      	b.n	8001d72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001d72:	f001 fae1 	bl	8003338 <vPortExitCritical>

	return xReturn;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001d88:	f001 faa8 	bl	80032dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d102      	bne.n	8001d9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e001      	b.n	8001da2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001da2:	f001 fac9 	bl	8003338 <vPortExitCritical>

	return xReturn;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e014      	b.n	8001dea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <vQueueAddToRegistry+0x4c>)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001dcc:	490b      	ldr	r1, [pc, #44]	; (8001dfc <vQueueAddToRegistry+0x4c>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <vQueueAddToRegistry+0x4c>)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001de2:	e005      	b.n	8001df0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b07      	cmp	r3, #7
 8001dee:	d9e7      	bls.n	8001dc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20012d98 	.word	0x20012d98

08001e00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001e10:	f001 fa64 	bl	80032dc <vPortEnterCritical>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d103      	bne.n	8001e2a <vQueueWaitForMessageRestricted+0x2a>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e36:	d103      	bne.n	8001e40 <vQueueWaitForMessageRestricted+0x40>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e40:	f001 fa7a 	bl	8003338 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3324      	adds	r3, #36	; 0x24
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fb7d 	bl	8002554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff28 	bl	8001cb0 <prvUnlockQueue>
	}
 8001e60:	bf00      	nop
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af04      	add	r7, sp, #16
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fb47 	bl	8003510 <pvPortMalloc>
 8001e82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00e      	beq.n	8001ea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e8a:	2058      	movs	r0, #88	; 0x58
 8001e8c:	f001 fb40 	bl	8003510 <pvPortMalloc>
 8001e90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e9e:	e005      	b.n	8001eac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001ea0:	6978      	ldr	r0, [r7, #20]
 8001ea2:	f001 fbfb 	bl	800369c <vPortFree>
 8001ea6:	e001      	b.n	8001eac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d013      	beq.n	8001eda <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001eb2:	88fa      	ldrh	r2, [r7, #6]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9303      	str	r3, [sp, #12]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f80e 	bl	8001eea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ece:	69f8      	ldr	r0, [r7, #28]
 8001ed0:	f000 f892 	bl	8001ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e002      	b.n	8001ee0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b088      	sub	sp, #32
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	21a5      	movs	r1, #165	; 0xa5
 8001f04:	f001 fd0d 	bl	8003922 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f12:	3b01      	subs	r3, #1
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f023 0307 	bic.w	r3, r3, #7
 8001f20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <prvInitialiseNewTask+0x56>
 8001f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e7fe      	b.n	8001f3e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e012      	b.n	8001f6c <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	7819      	ldrb	r1, [r3, #0]
 8001f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4413      	add	r3, r2
 8001f54:	3334      	adds	r3, #52	; 0x34
 8001f56:	460a      	mov	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	d9e9      	bls.n	8001f46 <prvInitialiseNewTask+0x5c>
 8001f72:	e000      	b.n	8001f76 <prvInitialiseNewTask+0x8c>
		{
			break;
 8001f74:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d901      	bls.n	8001f88 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f84:	2304      	movs	r3, #4
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f92:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	2200      	movs	r2, #0
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fa34 	bl	800140c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fa2f 	bl	800140c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	f1c3 0205 	rsb	r2, r3, #5
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	68f9      	ldr	r1, [r7, #12]
 8001fd6:	69b8      	ldr	r0, [r7, #24]
 8001fd8:	f001 f858 	bl	800308c <pxPortInitialiseStack>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002000:	f001 f96c 	bl	80032dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <prvAddNewTaskToReadyList+0xc0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <prvAddNewTaskToReadyList+0xc0>)
 800200c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <prvAddNewTaskToReadyList+0xc4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <prvAddNewTaskToReadyList+0xc4>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <prvAddNewTaskToReadyList+0xc0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d110      	bne.n	8002046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002024:	f000 fbbc 	bl	80027a0 <prvInitialiseTaskLists>
 8002028:	e00d      	b.n	8002046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <prvAddNewTaskToReadyList+0xc8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <prvAddNewTaskToReadyList+0xc4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	429a      	cmp	r2, r3
 800203e:	d802      	bhi.n	8002046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <prvAddNewTaskToReadyList+0xc4>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <prvAddNewTaskToReadyList+0xcc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <prvAddNewTaskToReadyList+0xcc>)
 800204e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <prvAddNewTaskToReadyList+0xcc>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <prvAddNewTaskToReadyList+0xd0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <prvAddNewTaskToReadyList+0xd0>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <prvAddNewTaskToReadyList+0xd4>)
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f7ff f9d0 	bl	8001426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002086:	f001 f957 	bl	8003338 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <prvAddNewTaskToReadyList+0xc8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00e      	beq.n	80020b0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <prvAddNewTaskToReadyList+0xc4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <prvAddNewTaskToReadyList+0xd8>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000010c 	.word	0x2000010c
 80020bc:	20000034 	.word	0x20000034
 80020c0:	20000118 	.word	0x20000118
 80020c4:	20000128 	.word	0x20000128
 80020c8:	20000114 	.word	0x20000114
 80020cc:	20000038 	.word	0x20000038
 80020d0:	e000ed04 	.word	0xe000ed04

080020d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <vTaskStartScheduler+0x80>)
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2282      	movs	r2, #130	; 0x82
 80020e6:	491c      	ldr	r1, [pc, #112]	; (8002158 <vTaskStartScheduler+0x84>)
 80020e8:	481c      	ldr	r0, [pc, #112]	; (800215c <vTaskStartScheduler+0x88>)
 80020ea:	f7ff febd 	bl	8001e68 <xTaskCreate>
 80020ee:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80020f6:	f000 fcfd 	bl	8002af4 <xTimerCreateTimerTask>
 80020fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d115      	bne.n	800212e <vTaskStartScheduler+0x5a>
 8002102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <vTaskStartScheduler+0x8c>)
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <vTaskStartScheduler+0x90>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <vTaskStartScheduler+0x94>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002128:	f001 f83a 	bl	80031a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800212c:	e00d      	b.n	800214a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d109      	bne.n	800214a <vTaskStartScheduler+0x76>
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	e7fe      	b.n	8002148 <vTaskStartScheduler+0x74>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000130 	.word	0x20000130
 8002158:	0800395c 	.word	0x0800395c
 800215c:	08002771 	.word	0x08002771
 8002160:	2000012c 	.word	0x2000012c
 8002164:	20000118 	.word	0x20000118
 8002168:	20000110 	.word	0x20000110

0800216c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <vTaskSuspendAll+0x18>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3301      	adds	r3, #1
 8002176:	4a03      	ldr	r2, [pc, #12]	; (8002184 <vTaskSuspendAll+0x18>)
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000134 	.word	0x20000134

08002188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002196:	4b41      	ldr	r3, [pc, #260]	; (800229c <xTaskResumeAll+0x114>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <xTaskResumeAll+0x2a>
 800219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a2:	f383 8811 	msr	BASEPRI, r3
 80021a6:	f3bf 8f6f 	isb	sy
 80021aa:	f3bf 8f4f 	dsb	sy
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	e7fe      	b.n	80021b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021b2:	f001 f893 	bl	80032dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <xTaskResumeAll+0x114>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a37      	ldr	r2, [pc, #220]	; (800229c <xTaskResumeAll+0x114>)
 80021be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <xTaskResumeAll+0x114>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d161      	bne.n	800228c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <xTaskResumeAll+0x118>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d05d      	beq.n	800228c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021d0:	e02e      	b.n	8002230 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <xTaskResumeAll+0x11c>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3318      	adds	r3, #24
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f97e 	bl	80014e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff f979 	bl	80014e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <xTaskResumeAll+0x120>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <xTaskResumeAll+0x120>)
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <xTaskResumeAll+0x124>)
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f7ff f905 	bl	8001426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <xTaskResumeAll+0x128>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <xTaskResumeAll+0x12c>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002230:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <xTaskResumeAll+0x11c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1cc      	bne.n	80021d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800223e:	f000 fb2b 	bl	8002898 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <xTaskResumeAll+0x130>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800224e:	f000 f847 	bl	80022e0 <xTaskIncrementTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <xTaskResumeAll+0x12c>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3b01      	subs	r3, #1
 8002262:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f1      	bne.n	800224e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <xTaskResumeAll+0x130>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <xTaskResumeAll+0x12c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002278:	2301      	movs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <xTaskResumeAll+0x134>)
 800227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800228c:	f001 f854 	bl	8003338 <vPortExitCritical>

	return xAlreadyYielded;
 8002290:	68bb      	ldr	r3, [r7, #8]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000134 	.word	0x20000134
 80022a0:	2000010c 	.word	0x2000010c
 80022a4:	200000cc 	.word	0x200000cc
 80022a8:	20000114 	.word	0x20000114
 80022ac:	20000038 	.word	0x20000038
 80022b0:	20000034 	.word	0x20000034
 80022b4:	20000120 	.word	0x20000120
 80022b8:	2000011c 	.word	0x2000011c
 80022bc:	e000ed04 	.word	0xe000ed04

080022c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <xTaskGetTickCount+0x1c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000110 	.word	0x20000110

080022e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ea:	4b50      	ldr	r3, [pc, #320]	; (800242c <xTaskIncrementTick+0x14c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 808c 	bne.w	800240c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022f4:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <xTaskIncrementTick+0x150>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <xTaskIncrementTick+0x150>)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11f      	bne.n	8002348 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <xTaskIncrementTick+0x154>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <xTaskIncrementTick+0x46>
 8002312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	e7fe      	b.n	8002324 <xTaskIncrementTick+0x44>
 8002326:	4b43      	ldr	r3, [pc, #268]	; (8002434 <xTaskIncrementTick+0x154>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <xTaskIncrementTick+0x158>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a40      	ldr	r2, [pc, #256]	; (8002434 <xTaskIncrementTick+0x154>)
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4a40      	ldr	r2, [pc, #256]	; (8002438 <xTaskIncrementTick+0x158>)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <xTaskIncrementTick+0x15c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	4a3e      	ldr	r2, [pc, #248]	; (800243c <xTaskIncrementTick+0x15c>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	f000 faa8 	bl	8002898 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002348:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <xTaskIncrementTick+0x160>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	429a      	cmp	r2, r3
 8002350:	d34d      	bcc.n	80023ee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <xTaskIncrementTick+0x154>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <xTaskIncrementTick+0x80>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <xTaskIncrementTick+0x82>
 8002360:	2300      	movs	r3, #0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002366:	4b36      	ldr	r3, [pc, #216]	; (8002440 <xTaskIncrementTick+0x160>)
 8002368:	f04f 32ff 	mov.w	r2, #4294967295
 800236c:	601a      	str	r2, [r3, #0]
					break;
 800236e:	e03e      	b.n	80023ee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <xTaskIncrementTick+0x154>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d203      	bcs.n	8002390 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002388:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <xTaskIncrementTick+0x160>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
						break;
 800238e:	e02e      	b.n	80023ee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3304      	adds	r3, #4
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff f8a3 	bl	80014e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3318      	adds	r3, #24
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f89a 	bl	80014e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	2201      	movs	r2, #1
 80023b2:	409a      	lsls	r2, r3
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <xTaskIncrementTick+0x164>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <xTaskIncrementTick+0x164>)
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <xTaskIncrementTick+0x168>)
 80023cc:	441a      	add	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3304      	adds	r3, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7ff f826 	bl	8001426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <xTaskIncrementTick+0x16c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d3b4      	bcc.n	8002352 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023ec:	e7b1      	b.n	8002352 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <xTaskIncrementTick+0x16c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4914      	ldr	r1, [pc, #80]	; (8002448 <xTaskIncrementTick+0x168>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d907      	bls.n	8002416 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002406:	2301      	movs	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e004      	b.n	8002416 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800240c:	4b10      	ldr	r3, [pc, #64]	; (8002450 <xTaskIncrementTick+0x170>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <xTaskIncrementTick+0x170>)
 8002414:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <xTaskIncrementTick+0x174>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002422:	697b      	ldr	r3, [r7, #20]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000134 	.word	0x20000134
 8002430:	20000110 	.word	0x20000110
 8002434:	200000c4 	.word	0x200000c4
 8002438:	200000c8 	.word	0x200000c8
 800243c:	20000124 	.word	0x20000124
 8002440:	2000012c 	.word	0x2000012c
 8002444:	20000114 	.word	0x20000114
 8002448:	20000038 	.word	0x20000038
 800244c:	20000034 	.word	0x20000034
 8002450:	2000011c 	.word	0x2000011c
 8002454:	20000120 	.word	0x20000120

08002458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <vTaskSwitchContext+0xa0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <vTaskSwitchContext+0xa4>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800246c:	e03e      	b.n	80024ec <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <vTaskSwitchContext+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <vTaskSwitchContext+0xa8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	f1c3 031f 	rsb	r3, r3, #31
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	491e      	ldr	r1, [pc, #120]	; (8002504 <vTaskSwitchContext+0xac>)
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800249e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a2:	f383 8811 	msr	BASEPRI, r3
 80024a6:	f3bf 8f6f 	isb	sy
 80024aa:	f3bf 8f4f 	dsb	sy
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	e7fe      	b.n	80024b0 <vTaskSwitchContext+0x58>
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <vTaskSwitchContext+0xac>)
 80024be:	4413      	add	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3308      	adds	r3, #8
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d104      	bne.n	80024e2 <vTaskSwitchContext+0x8a>
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4a07      	ldr	r2, [pc, #28]	; (8002508 <vTaskSwitchContext+0xb0>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	20000134 	.word	0x20000134
 80024fc:	20000120 	.word	0x20000120
 8002500:	20000114 	.word	0x20000114
 8002504:	20000038 	.word	0x20000038
 8002508:	20000034 	.word	0x20000034

0800250c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <vTaskPlaceOnEventList+0x24>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e7fe      	b.n	800252e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <vTaskPlaceOnEventList+0x44>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3318      	adds	r3, #24
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe ff98 	bl	800146e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800253e:	2101      	movs	r1, #1
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f000 fa71 	bl	8002a28 <prvAddCurrentTaskToDelayedList>
}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000034 	.word	0x20000034

08002554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <vTaskPlaceOnEventListRestricted+0x26>
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e7fe      	b.n	8002578 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3318      	adds	r3, #24
 8002580:	4619      	mov	r1, r3
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f7fe ff4f 	bl	8001426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f000 fa46 	bl	8002a28 <prvAddCurrentTaskToDelayedList>
	}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000034 	.word	0x20000034

080025a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <xTaskRemoveFromEventList+0x2a>
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e7fe      	b.n	80025d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	3318      	adds	r3, #24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff82 	bl	80014e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <xTaskRemoveFromEventList+0xac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11c      	bne.n	800261e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe ff79 	bl	80014e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <xTaskRemoveFromEventList+0xb0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	4a16      	ldr	r2, [pc, #88]	; (8002658 <xTaskRemoveFromEventList+0xb0>)
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4a13      	ldr	r2, [pc, #76]	; (800265c <xTaskRemoveFromEventList+0xb4>)
 800260e:	441a      	add	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f7fe ff05 	bl	8001426 <vListInsertEnd>
 800261c:	e005      	b.n	800262a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3318      	adds	r3, #24
 8002622:	4619      	mov	r1, r3
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <xTaskRemoveFromEventList+0xb8>)
 8002626:	f7fe fefe 	bl	8001426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <xTaskRemoveFromEventList+0xbc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	429a      	cmp	r2, r3
 8002636:	d905      	bls.n	8002644 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002638:	2301      	movs	r3, #1
 800263a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <xTaskRemoveFromEventList+0xc0>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	e001      	b.n	8002648 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002648:	697b      	ldr	r3, [r7, #20]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000134 	.word	0x20000134
 8002658:	20000114 	.word	0x20000114
 800265c:	20000038 	.word	0x20000038
 8002660:	200000cc 	.word	0x200000cc
 8002664:	20000034 	.word	0x20000034
 8002668:	20000120 	.word	0x20000120

0800266c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <vTaskInternalSetTimeOutState+0x24>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <vTaskInternalSetTimeOutState+0x28>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	20000124 	.word	0x20000124
 8002694:	20000110 	.word	0x20000110

08002698 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <xTaskCheckForTimeOut+0x24>
 80026a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ac:	f383 8811 	msr	BASEPRI, r3
 80026b0:	f3bf 8f6f 	isb	sy
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	e7fe      	b.n	80026ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <xTaskCheckForTimeOut+0x3e>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e7fe      	b.n	80026d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80026d6:	f000 fe01 	bl	80032dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <xTaskCheckForTimeOut+0xb8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d102      	bne.n	80026fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	e023      	b.n	8002742 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <xTaskCheckForTimeOut+0xbc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d007      	beq.n	8002716 <xTaskCheckForTimeOut+0x7e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	429a      	cmp	r2, r3
 800270e:	d302      	bcc.n	8002716 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002710:	2301      	movs	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	e015      	b.n	8002742 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	429a      	cmp	r2, r3
 800271e:	d20b      	bcs.n	8002738 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	1ad2      	subs	r2, r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff9d 	bl	800266c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e004      	b.n	8002742 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800273e:	2301      	movs	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002742:	f000 fdf9 	bl	8003338 <vPortExitCritical>

	return xReturn;
 8002746:	69fb      	ldr	r3, [r7, #28]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000110 	.word	0x20000110
 8002754:	20000124 	.word	0x20000124

08002758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <vTaskMissedYield+0x14>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000120 	.word	0x20000120

08002770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002778:	f000 f852 	bl	8002820 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <prvIdleTask+0x28>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d9f9      	bls.n	8002778 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <prvIdleTask+0x2c>)
 8002786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002794:	e7f0      	b.n	8002778 <prvIdleTask+0x8>
 8002796:	bf00      	nop
 8002798:	20000038 	.word	0x20000038
 800279c:	e000ed04 	.word	0xe000ed04

080027a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	e00c      	b.n	80027c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <prvInitialiseTaskLists+0x60>)
 80027b8:	4413      	add	r3, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fe06 	bl	80013cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d9ef      	bls.n	80027ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <prvInitialiseTaskLists+0x64>)
 80027ce:	f7fe fdfd 	bl	80013cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <prvInitialiseTaskLists+0x68>)
 80027d4:	f7fe fdfa 	bl	80013cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <prvInitialiseTaskLists+0x6c>)
 80027da:	f7fe fdf7 	bl	80013cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80027de:	480c      	ldr	r0, [pc, #48]	; (8002810 <prvInitialiseTaskLists+0x70>)
 80027e0:	f7fe fdf4 	bl	80013cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80027e4:	480b      	ldr	r0, [pc, #44]	; (8002814 <prvInitialiseTaskLists+0x74>)
 80027e6:	f7fe fdf1 	bl	80013cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <prvInitialiseTaskLists+0x78>)
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <prvInitialiseTaskLists+0x64>)
 80027ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <prvInitialiseTaskLists+0x7c>)
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <prvInitialiseTaskLists+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000038 	.word	0x20000038
 8002804:	2000009c 	.word	0x2000009c
 8002808:	200000b0 	.word	0x200000b0
 800280c:	200000cc 	.word	0x200000cc
 8002810:	200000e0 	.word	0x200000e0
 8002814:	200000f8 	.word	0x200000f8
 8002818:	200000c4 	.word	0x200000c4
 800281c:	200000c8 	.word	0x200000c8

08002820 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002826:	e019      	b.n	800285c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002828:	f000 fd58 	bl	80032dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <prvCheckTasksWaitingTermination+0x4c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fe51 	bl	80014e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <prvCheckTasksWaitingTermination+0x50>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <prvCheckTasksWaitingTermination+0x50>)
 8002846:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <prvCheckTasksWaitingTermination+0x54>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3b01      	subs	r3, #1
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <prvCheckTasksWaitingTermination+0x54>)
 8002850:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002852:	f000 fd71 	bl	8003338 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f80e 	bl	8002878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <prvCheckTasksWaitingTermination+0x54>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e1      	bne.n	8002828 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	200000e0 	.word	0x200000e0
 8002870:	2000010c 	.word	0x2000010c
 8002874:	200000f4 	.word	0x200000f4

08002878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	4618      	mov	r0, r3
 8002886:	f000 ff09 	bl	800369c <vPortFree>
			vPortFree( pxTCB );
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 ff06 	bl	800369c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <prvResetNextTaskUnblockTime+0x44>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <prvResetNextTaskUnblockTime+0x14>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <prvResetNextTaskUnblockTime+0x16>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <prvResetNextTaskUnblockTime+0x48>)
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028ba:	e008      	b.n	80028ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <prvResetNextTaskUnblockTime+0x44>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <prvResetNextTaskUnblockTime+0x48>)
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	200000c4 	.word	0x200000c4
 80028e0:	2000012c 	.word	0x2000012c

080028e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <xTaskGetSchedulerState+0x34>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80028f2:	2301      	movs	r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	e008      	b.n	800290a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <xTaskGetSchedulerState+0x38>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002900:	2302      	movs	r3, #2
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	e001      	b.n	800290a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800290a:	687b      	ldr	r3, [r7, #4]
	}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	20000118 	.word	0x20000118
 800291c:	20000134 	.word	0x20000134

08002920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d06c      	beq.n	8002a10 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002936:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <xTaskPriorityDisinherit+0xfc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	429a      	cmp	r2, r3
 800293e:	d009      	beq.n	8002954 <xTaskPriorityDisinherit+0x34>
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e7fe      	b.n	8002952 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <xTaskPriorityDisinherit+0x50>
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	e7fe      	b.n	800296e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	429a      	cmp	r2, r3
 8002984:	d044      	beq.n	8002a10 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d140      	bne.n	8002a10 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3304      	adds	r3, #4
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fda4 	bl	80014e0 <uxListRemove>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d115      	bne.n	80029ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a2:	491f      	ldr	r1, [pc, #124]	; (8002a20 <xTaskPriorityDisinherit+0x100>)
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xTaskPriorityDisinherit+0xaa>
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	2201      	movs	r2, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <xTaskPriorityDisinherit+0x104>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4013      	ands	r3, r2
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <xTaskPriorityDisinherit+0x104>)
 80029c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f1c3 0205 	rsb	r2, r3, #5
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	2201      	movs	r2, #1
 80029e4:	409a      	lsls	r2, r3
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <xTaskPriorityDisinherit+0x104>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <xTaskPriorityDisinherit+0x104>)
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4a08      	ldr	r2, [pc, #32]	; (8002a20 <xTaskPriorityDisinherit+0x100>)
 80029fe:	441a      	add	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f7fe fd0d 	bl	8001426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002a10:	697b      	ldr	r3, [r7, #20]
	}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000034 	.word	0x20000034
 8002a20:	20000038 	.word	0x20000038
 8002a24:	20000114 	.word	0x20000114

08002a28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd4e 	bl	80014e0 <uxListRemove>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	2201      	movs	r2, #1
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d10a      	bne.n	8002a80 <prvAddCurrentTaskToDelayedList+0x58>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	481a      	ldr	r0, [pc, #104]	; (8002ae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a7a:	f7fe fcd4 	bl	8001426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a7e:	e026      	b.n	8002ace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d209      	bcs.n	8002aac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a98:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fe fce2 	bl	800146e <vListInsert>
}
 8002aaa:	e010      	b.n	8002ace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <prvAddCurrentTaskToDelayedList+0xc4>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f7fe fcd8 	bl	800146e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d202      	bcs.n	8002ace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002ac8:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6013      	str	r3, [r2, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000110 	.word	0x20000110
 8002adc:	20000034 	.word	0x20000034
 8002ae0:	20000114 	.word	0x20000114
 8002ae4:	200000f8 	.word	0x200000f8
 8002ae8:	200000c8 	.word	0x200000c8
 8002aec:	200000c4 	.word	0x200000c4
 8002af0:	2000012c 	.word	0x2000012c

08002af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002afe:	f000 fa8f 	bl	8003020 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <xTimerCreateTimerTask+0x54>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <xTimerCreateTimerTask+0x58>)
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	2302      	movs	r3, #2
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b18:	490d      	ldr	r1, [pc, #52]	; (8002b50 <xTimerCreateTimerTask+0x5c>)
 8002b1a:	480e      	ldr	r0, [pc, #56]	; (8002b54 <xTimerCreateTimerTask+0x60>)
 8002b1c:	f7ff f9a4 	bl	8001e68 <xTaskCreate>
 8002b20:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <xTimerCreateTimerTask+0x48>
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	e7fe      	b.n	8002b3a <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000168 	.word	0x20000168
 8002b4c:	2000016c 	.word	0x2000016c
 8002b50:	08003964 	.word	0x08003964
 8002b54:	08002c71 	.word	0x08002c71

08002b58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <xTimerGenericCommand+0x2c>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	e7fe      	b.n	8002b82 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <xTimerGenericCommand+0x94>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02a      	beq.n	8002be2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	dc18      	bgt.n	8002bd0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b9e:	f7ff fea1 	bl	80028e4 <xTaskGetSchedulerState>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d109      	bne.n	8002bbc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <xTimerGenericCommand+0x94>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	f107 0114 	add.w	r1, r7, #20
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb4:	f7fe fd82 	bl	80016bc <xQueueGenericSend>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8002bba:	e012      	b.n	8002be2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <xTimerGenericCommand+0x94>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	f107 0114 	add.w	r1, r7, #20
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f7fe fd78 	bl	80016bc <xQueueGenericSend>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24
 8002bce:	e008      	b.n	8002be2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <xTimerGenericCommand+0x94>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	f107 0114 	add.w	r1, r7, #20
 8002bd8:	2300      	movs	r3, #0
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	f7fe fe68 	bl	80018b0 <xQueueGenericSendFromISR>
 8002be0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3728      	adds	r7, #40	; 0x28
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000168 	.word	0x20000168

08002bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <prvProcessExpiredTimer+0x7c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe fc69 	bl	80014e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d121      	bne.n	8002c5a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	18d1      	adds	r1, r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f000 f8c8 	bl	8002db8 <prvInsertTimerInActiveList>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d015      	beq.n	8002c5a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	2100      	movs	r1, #0
 8002c38:	6978      	ldr	r0, [r7, #20]
 8002c3a:	f7ff ff8d 	bl	8002b58 <xTimerGenericCommand>
 8002c3e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <prvProcessExpiredTimer+0x6a>
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e7fe      	b.n	8002c58 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	4798      	blx	r3
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000160 	.word	0x20000160

08002c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 f857 	bl	8002d30 <prvGetNextExpireTime>
 8002c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4619      	mov	r1, r3
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f803 	bl	8002c94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002c8e:	f000 f8d5 	bl	8002e3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c92:	e7f1      	b.n	8002c78 <prvTimerTask+0x8>

08002c94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002c9e:	f7ff fa65 	bl	800216c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f866 	bl	8002d78 <prvSampleTimeNow>
 8002cac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d130      	bne.n	8002d16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <prvProcessTimerOrBlockTask+0x3c>
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d806      	bhi.n	8002cd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002cc2:	f7ff fa61 	bl	8002188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff ff91 	bl	8002bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002cce:	e024      	b.n	8002d1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <prvProcessTimerOrBlockTask+0x90>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <prvProcessTimerOrBlockTask+0x94>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff f883 	bl	8001e00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002cfa:	f7ff fa45 	bl	8002188 <xTaskResumeAll>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <prvProcessTimerOrBlockTask+0x98>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
}
 8002d14:	e001      	b.n	8002d1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002d16:	f7ff fa37 	bl	8002188 <xTaskResumeAll>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000164 	.word	0x20000164
 8002d28:	20000168 	.word	0x20000168
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d38:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <prvGetNextExpireTime+0x44>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <prvGetNextExpireTime+0x44>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e001      	b.n	8002d66 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	20000160 	.word	0x20000160

08002d78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002d80:	f7ff fa9e 	bl	80022c0 <xTaskGetTickCount>
 8002d84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <prvSampleTimeNow+0x3c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d205      	bcs.n	8002d9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002d90:	f000 f8e6 	bl	8002f60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e002      	b.n	8002da2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <prvSampleTimeNow+0x3c>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000170 	.word	0x20000170

08002db8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d812      	bhi.n	8002e04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	1ad2      	subs	r2, r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d302      	bcc.n	8002df2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e01b      	b.n	8002e2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <prvInsertTimerInActiveList+0x7c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7fe fb36 	bl	800146e <vListInsert>
 8002e02:	e012      	b.n	8002e2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d206      	bcs.n	8002e1a <prvInsertTimerInActiveList+0x62>
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d302      	bcc.n	8002e1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e007      	b.n	8002e2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <prvInsertTimerInActiveList+0x80>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7fe fb22 	bl	800146e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002e2a:	697b      	ldr	r3, [r7, #20]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000164 	.word	0x20000164
 8002e38:	20000160 	.word	0x20000160

08002e3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	; 0x30
 8002e40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e42:	e07a      	b.n	8002f3a <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	db76      	blt.n	8002f38 <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fb40 	bl	80014e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff88 	bl	8002d78 <prvSampleTimeNow>
 8002e68:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d864      	bhi.n	8002f3a <prvProcessReceivedCommands+0xfe>
 8002e70:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <prvProcessReceivedCommands+0x3c>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002ea1 	.word	0x08002ea1
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea1 	.word	0x08002ea1
 8002e84:	08002f3b 	.word	0x08002f3b
 8002e88:	08002efb 	.word	0x08002efb
 8002e8c:	08002f31 	.word	0x08002f31
 8002e90:	08002ea1 	.word	0x08002ea1
 8002e94:	08002ea1 	.word	0x08002ea1
 8002e98:	08002f3b 	.word	0x08002f3b
 8002e9c:	08002efb 	.word	0x08002efb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	18d1      	adds	r1, r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a3a      	ldr	r2, [r7, #32]
 8002eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eae:	f7ff ff83 	bl	8002db8 <prvInsertTimerInActiveList>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d040      	beq.n	8002f3a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ebe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d138      	bne.n	8002f3a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	441a      	add	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eda:	f7ff fe3d 	bl	8002b58 <xTimerGenericCommand>
 8002ede:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d129      	bne.n	8002f3a <prvProcessReceivedCommands+0xfe>
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e7fe      	b.n	8002ef8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <prvProcessReceivedCommands+0xe0>
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e7fe      	b.n	8002f1a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	18d1      	adds	r1, r2, r3
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f2a:	f7ff ff45 	bl	8002db8 <prvInsertTimerInActiveList>
					break;
 8002f2e:	e004      	b.n	8002f3a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f32:	f000 fbb3 	bl	800369c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002f36:	e000      	b.n	8002f3a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002f38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <prvProcessReceivedCommands+0x120>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f107 0108 	add.w	r1, r7, #8
 8002f42:	2200      	movs	r2, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fd47 	bl	80019d8 <xQueueReceive>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f af79 	bne.w	8002e44 <prvProcessReceivedCommands+0x8>
	}
}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000168 	.word	0x20000168

08002f60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f66:	e044      	b.n	8002ff2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe faad 	bl	80014e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d12d      	bne.n	8002ff2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d90e      	bls.n	8002fc6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7fe fa55 	bl	800146e <vListInsert>
 8002fc4:	e015      	b.n	8002ff2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff fdc1 	bl	8002b58 <xTimerGenericCommand>
 8002fd6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <prvSwitchTimerLists+0x92>
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	e7fe      	b.n	8002ff0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1b5      	bne.n	8002f68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <prvSwitchTimerLists+0xbc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <prvSwitchTimerLists+0xb8>)
 8003008:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800300a:	4a04      	ldr	r2, [pc, #16]	; (800301c <prvSwitchTimerLists+0xbc>)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20000160 	.word	0x20000160
 800301c:	20000164 	.word	0x20000164

08003020 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003024:	f000 f95a 	bl	80032dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <prvCheckForValidListAndQueue+0x54>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11d      	bne.n	800306c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003030:	4811      	ldr	r0, [pc, #68]	; (8003078 <prvCheckForValidListAndQueue+0x58>)
 8003032:	f7fe f9cb 	bl	80013cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003036:	4811      	ldr	r0, [pc, #68]	; (800307c <prvCheckForValidListAndQueue+0x5c>)
 8003038:	f7fe f9c8 	bl	80013cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <prvCheckForValidListAndQueue+0x60>)
 800303e:	4a0e      	ldr	r2, [pc, #56]	; (8003078 <prvCheckForValidListAndQueue+0x58>)
 8003040:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <prvCheckForValidListAndQueue+0x64>)
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <prvCheckForValidListAndQueue+0x5c>)
 8003046:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003048:	2200      	movs	r2, #0
 800304a:	210c      	movs	r1, #12
 800304c:	200a      	movs	r0, #10
 800304e:	f7fe fad9 	bl	8001604 <xQueueGenericCreate>
 8003052:	4602      	mov	r2, r0
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <prvCheckForValidListAndQueue+0x54>)
 8003056:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <prvCheckForValidListAndQueue+0x54>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <prvCheckForValidListAndQueue+0x54>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4908      	ldr	r1, [pc, #32]	; (8003088 <prvCheckForValidListAndQueue+0x68>)
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fea2 	bl	8001db0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800306c:	f000 f964 	bl	8003338 <vPortExitCritical>
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000168 	.word	0x20000168
 8003078:	20000138 	.word	0x20000138
 800307c:	2000014c 	.word	0x2000014c
 8003080:	20000160 	.word	0x20000160
 8003084:	20000164 	.word	0x20000164
 8003088:	0800396c 	.word	0x0800396c

0800308c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3b04      	subs	r3, #4
 800309c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b04      	subs	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b04      	subs	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030bc:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <pxPortInitialiseStack+0x64>)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b14      	subs	r3, #20
 80030c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3b04      	subs	r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f06f 0202 	mvn.w	r2, #2
 80030da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b20      	subs	r3, #32
 80030e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	080030f5 	.word	0x080030f5

080030f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <prvTaskExitError+0x50>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d009      	beq.n	800311c <prvTaskExitError+0x28>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e7fe      	b.n	800311a <prvTaskExitError+0x26>
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800312e:	bf00      	nop
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0fc      	beq.n	8003130 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	2000000c 	.word	0x2000000c
	...

08003150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <pxCurrentTCBConst2>)
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315a:	f380 8809 	msr	PSP, r0
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8811 	msr	BASEPRI, r0
 800316a:	4770      	bx	lr
 800316c:	f3af 8000 	nop.w

08003170 <pxCurrentTCBConst2>:
 8003170:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003178:	4808      	ldr	r0, [pc, #32]	; (800319c <prvPortStartFirstTask+0x24>)
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	6800      	ldr	r0, [r0, #0]
 800317e:	f380 8808 	msr	MSP, r0
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f380 8814 	msr	CONTROL, r0
 800318a:	b662      	cpsie	i
 800318c:	b661      	cpsie	f
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	df00      	svc	0
 8003198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800319a:	bf00      	nop
 800319c:	e000ed08 	.word	0xe000ed08

080031a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <xPortStartScheduler+0x118>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a44      	ldr	r2, [pc, #272]	; (80032bc <xPortStartScheduler+0x11c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <xPortStartScheduler+0x24>
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e7fe      	b.n	80031c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031c4:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <xPortStartScheduler+0x118>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3d      	ldr	r2, [pc, #244]	; (80032c0 <xPortStartScheduler+0x120>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d109      	bne.n	80031e2 <xPortStartScheduler+0x42>
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e7fe      	b.n	80031e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031e2:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <xPortStartScheduler+0x124>)
 80031e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <xPortStartScheduler+0x128>)
 8003208:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <xPortStartScheduler+0x12c>)
 800320c:	2207      	movs	r2, #7
 800320e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003210:	e009      	b.n	8003226 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003212:	4b2e      	ldr	r3, [pc, #184]	; (80032cc <xPortStartScheduler+0x12c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3b01      	subs	r3, #1
 8003218:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <xPortStartScheduler+0x12c>)
 800321a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b80      	cmp	r3, #128	; 0x80
 8003230:	d0ef      	beq.n	8003212 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003232:	4b26      	ldr	r3, [pc, #152]	; (80032cc <xPortStartScheduler+0x12c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	d009      	beq.n	8003252 <xPortStartScheduler+0xb2>
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e7fe      	b.n	8003250 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <xPortStartScheduler+0x12c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <xPortStartScheduler+0x12c>)
 800325a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <xPortStartScheduler+0x12c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <xPortStartScheduler+0x12c>)
 8003266:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <xPortStartScheduler+0x130>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <xPortStartScheduler+0x130>)
 8003276:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <xPortStartScheduler+0x130>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <xPortStartScheduler+0x130>)
 8003282:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003286:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003288:	f000 f8d6 	bl	8003438 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <xPortStartScheduler+0x134>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003292:	f000 f8f5 	bl	8003480 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <xPortStartScheduler+0x138>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <xPortStartScheduler+0x138>)
 800329c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80032a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032a2:	f7ff ff69 	bl	8003178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80032a6:	f7ff f8d7 	bl	8002458 <vTaskSwitchContext>
	prvTaskExitError();
 80032aa:	f7ff ff23 	bl	80030f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	e000ed00 	.word	0xe000ed00
 80032bc:	410fc271 	.word	0x410fc271
 80032c0:	410fc270 	.word	0x410fc270
 80032c4:	e000e400 	.word	0xe000e400
 80032c8:	20000174 	.word	0x20000174
 80032cc:	20000178 	.word	0x20000178
 80032d0:	e000ed20 	.word	0xe000ed20
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	e000ef34 	.word	0xe000ef34

080032dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <vPortEnterCritical+0x54>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <vPortEnterCritical+0x54>)
 80032fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <vPortEnterCritical+0x54>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10e      	bne.n	8003324 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <vPortEnterCritical+0x58>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <vPortEnterCritical+0x48>
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	603b      	str	r3, [r7, #0]
 8003322:	e7fe      	b.n	8003322 <vPortEnterCritical+0x46>
	}
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	2000000c 	.word	0x2000000c
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <vPortExitCritical+0x4c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <vPortExitCritical+0x22>
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	607b      	str	r3, [r7, #4]
 8003358:	e7fe      	b.n	8003358 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <vPortExitCritical+0x4c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3b01      	subs	r3, #1
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <vPortExitCritical+0x4c>)
 8003362:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003364:	4b07      	ldr	r3, [pc, #28]	; (8003384 <vPortExitCritical+0x4c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <vPortExitCritical+0x3e>
 800336c:	2300      	movs	r3, #0
 800336e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000000c 	.word	0x2000000c
	...

08003390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003390:	f3ef 8009 	mrs	r0, PSP
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <pxCurrentTCBConst>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f01e 0f10 	tst.w	lr, #16
 80033a0:	bf08      	it	eq
 80033a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80033a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033aa:	6010      	str	r0, [r2, #0]
 80033ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033b4:	f380 8811 	msr	BASEPRI, r0
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f7ff f84a 	bl	8002458 <vTaskSwitchContext>
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f380 8811 	msr	BASEPRI, r0
 80033cc:	bc09      	pop	{r0, r3}
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	6808      	ldr	r0, [r1, #0]
 80033d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d6:	f01e 0f10 	tst.w	lr, #16
 80033da:	bf08      	it	eq
 80033dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033e0:	f380 8809 	msr	PSP, r0
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	f3af 8000 	nop.w

080033f0 <pxCurrentTCBConst>:
 80033f0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop

080033f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003410:	f7fe ff66 	bl	80022e0 <xTaskIncrementTick>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <xPortSysTickHandler+0x3c>)
 800341c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	e000ed04 	.word	0xe000ed04

08003438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <vPortSetupTimerInterrupt+0x34>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003442:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <vPortSetupTimerInterrupt+0x38>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <vPortSetupTimerInterrupt+0x3c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <vPortSetupTimerInterrupt+0x40>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	099b      	lsrs	r3, r3, #6
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <vPortSetupTimerInterrupt+0x44>)
 8003456:	3b01      	subs	r3, #1
 8003458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <vPortSetupTimerInterrupt+0x34>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010
 8003470:	e000e018 	.word	0xe000e018
 8003474:	20000000 	.word	0x20000000
 8003478:	10624dd3 	.word	0x10624dd3
 800347c:	e000e014 	.word	0xe000e014

08003480 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003480:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003490 <vPortEnableVFP+0x10>
 8003484:	6801      	ldr	r1, [r0, #0]
 8003486:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800348a:	6001      	str	r1, [r0, #0]
 800348c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800348e:	bf00      	nop
 8003490:	e000ed88 	.word	0xe000ed88

08003494 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800349a:	f3ef 8305 	mrs	r3, IPSR
 800349e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d913      	bls.n	80034ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034a6:	4a16      	ldr	r2, [pc, #88]	; (8003500 <vPortValidateInterruptPriority+0x6c>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <vPortValidateInterruptPriority+0x70>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	7afa      	ldrb	r2, [r7, #11]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d209      	bcs.n	80034ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e7fe      	b.n	80034cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <vPortValidateInterruptPriority+0x74>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <vPortValidateInterruptPriority+0x78>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d909      	bls.n	80034f2 <vPortValidateInterruptPriority+0x5e>
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	e7fe      	b.n	80034f0 <vPortValidateInterruptPriority+0x5c>
	}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e3f0 	.word	0xe000e3f0
 8003504:	20000174 	.word	0x20000174
 8003508:	e000ed0c 	.word	0xe000ed0c
 800350c:	20000178 	.word	0x20000178

08003510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800351c:	f7fe fe26 	bl	800216c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <pvPortMalloc+0x178>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003528:	f000 f910 	bl	800374c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800352c:	4b57      	ldr	r3, [pc, #348]	; (800368c <pvPortMalloc+0x17c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 808c 	bne.w	8003652 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003540:	2208      	movs	r2, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	2b00      	cmp	r3, #0
 8003550:	d013      	beq.n	800357a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f023 0307 	bic.w	r3, r3, #7
 8003558:	3308      	adds	r3, #8
 800355a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <pvPortMalloc+0x6a>
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e7fe      	b.n	8003578 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d068      	beq.n	8003652 <pvPortMalloc+0x142>
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <pvPortMalloc+0x180>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d863      	bhi.n	8003652 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800358a:	4b42      	ldr	r3, [pc, #264]	; (8003694 <pvPortMalloc+0x184>)
 800358c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <pvPortMalloc+0x184>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003594:	e004      	b.n	80035a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d903      	bls.n	80035b2 <pvPortMalloc+0xa2>
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f1      	bne.n	8003596 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80035b2:	4b35      	ldr	r3, [pc, #212]	; (8003688 <pvPortMalloc+0x178>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d04a      	beq.n	8003652 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	4413      	add	r3, r2
 80035c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	2308      	movs	r3, #8
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	429a      	cmp	r2, r3
 80035dc:	d91e      	bls.n	800361c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4413      	add	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <pvPortMalloc+0xf4>
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	e7fe      	b.n	8003602 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad2      	subs	r2, r2, r3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003616:	69b8      	ldr	r0, [r7, #24]
 8003618:	f000 f8fa 	bl	8003810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <pvPortMalloc+0x180>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <pvPortMalloc+0x180>)
 8003628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <pvPortMalloc+0x180>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <pvPortMalloc+0x188>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d203      	bcs.n	800363e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <pvPortMalloc+0x180>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <pvPortMalloc+0x188>)
 800363c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <pvPortMalloc+0x17c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	431a      	orrs	r2, r3
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003652:	f7fe fd99 	bl	8002188 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800365c:	f7fd feaf 	bl	80013be <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <pvPortMalloc+0x16e>
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e7fe      	b.n	800367c <pvPortMalloc+0x16c>
	return pvReturn;
 800367e:	69fb      	ldr	r3, [r7, #28]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20012d84 	.word	0x20012d84
 800368c:	20012d90 	.word	0x20012d90
 8003690:	20012d88 	.word	0x20012d88
 8003694:	20012d7c 	.word	0x20012d7c
 8003698:	20012d8c 	.word	0x20012d8c

0800369c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d046      	beq.n	800373c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80036ae:	2308      	movs	r3, #8
 80036b0:	425b      	negs	r3, r3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <vPortFree+0xa8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <vPortFree+0x42>
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e7fe      	b.n	80036dc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <vPortFree+0x5e>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	e7fe      	b.n	80036f8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <vPortFree+0xa8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d019      	beq.n	800373c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d115      	bne.n	800373c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <vPortFree+0xa8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003720:	f7fe fd24 	bl	800216c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <vPortFree+0xac>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4413      	add	r3, r2
 800372e:	4a06      	ldr	r2, [pc, #24]	; (8003748 <vPortFree+0xac>)
 8003730:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f000 f86c 	bl	8003810 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003738:	f7fe fd26 	bl	8002188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20012d90 	.word	0x20012d90
 8003748:	20012d88 	.word	0x20012d88

0800374c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003752:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <prvHeapInit+0xac>)
 800375a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3307      	adds	r3, #7
 800376a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0307 	bic.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <prvHeapInit+0xac>)
 800377c:	4413      	add	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <prvHeapInit+0xb0>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <prvHeapInit+0xb0>)
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	4413      	add	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003798:	2208      	movs	r2, #8
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a15      	ldr	r2, [pc, #84]	; (8003800 <prvHeapInit+0xb4>)
 80037ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <prvHeapInit+0xb4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <prvHeapInit+0xb4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	1ad2      	subs	r2, r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <prvHeapInit+0xb4>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <prvHeapInit+0xb8>)
 80037da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <prvHeapInit+0xbc>)
 80037e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <prvHeapInit+0xc0>)
 80037e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	2000017c 	.word	0x2000017c
 80037fc:	20012d7c 	.word	0x20012d7c
 8003800:	20012d84 	.word	0x20012d84
 8003804:	20012d8c 	.word	0x20012d8c
 8003808:	20012d88 	.word	0x20012d88
 800380c:	20012d90 	.word	0x20012d90

08003810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003818:	4b28      	ldr	r3, [pc, #160]	; (80038bc <prvInsertBlockIntoFreeList+0xac>)
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e002      	b.n	8003824 <prvInsertBlockIntoFreeList+0x14>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d8f7      	bhi.n	800381e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d108      	bne.n	8003852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d118      	bne.n	8003898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <prvInsertBlockIntoFreeList+0xb0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d00d      	beq.n	800388e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	441a      	add	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e008      	b.n	80038a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <prvInsertBlockIntoFreeList+0xb0>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e003      	b.n	80038a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d002      	beq.n	80038ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20012d7c 	.word	0x20012d7c
 80038c0:	20012d84 	.word	0x20012d84

080038c4 <__libc_init_array>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4e0d      	ldr	r6, [pc, #52]	; (80038fc <__libc_init_array+0x38>)
 80038c8:	4c0d      	ldr	r4, [pc, #52]	; (8003900 <__libc_init_array+0x3c>)
 80038ca:	1ba4      	subs	r4, r4, r6
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	2500      	movs	r5, #0
 80038d0:	42a5      	cmp	r5, r4
 80038d2:	d109      	bne.n	80038e8 <__libc_init_array+0x24>
 80038d4:	4e0b      	ldr	r6, [pc, #44]	; (8003904 <__libc_init_array+0x40>)
 80038d6:	4c0c      	ldr	r4, [pc, #48]	; (8003908 <__libc_init_array+0x44>)
 80038d8:	f000 f82c 	bl	8003934 <_init>
 80038dc:	1ba4      	subs	r4, r4, r6
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	2500      	movs	r5, #0
 80038e2:	42a5      	cmp	r5, r4
 80038e4:	d105      	bne.n	80038f2 <__libc_init_array+0x2e>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ec:	4798      	blx	r3
 80038ee:	3501      	adds	r5, #1
 80038f0:	e7ee      	b.n	80038d0 <__libc_init_array+0xc>
 80038f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f6:	4798      	blx	r3
 80038f8:	3501      	adds	r5, #1
 80038fa:	e7f2      	b.n	80038e2 <__libc_init_array+0x1e>
 80038fc:	0800398c 	.word	0x0800398c
 8003900:	0800398c 	.word	0x0800398c
 8003904:	0800398c 	.word	0x0800398c
 8003908:	08003990 	.word	0x08003990

0800390c <memcpy>:
 800390c:	b510      	push	{r4, lr}
 800390e:	1e43      	subs	r3, r0, #1
 8003910:	440a      	add	r2, r1
 8003912:	4291      	cmp	r1, r2
 8003914:	d100      	bne.n	8003918 <memcpy+0xc>
 8003916:	bd10      	pop	{r4, pc}
 8003918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800391c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003920:	e7f7      	b.n	8003912 <memcpy+0x6>

08003922 <memset>:
 8003922:	4402      	add	r2, r0
 8003924:	4603      	mov	r3, r0
 8003926:	4293      	cmp	r3, r2
 8003928:	d100      	bne.n	800392c <memset+0xa>
 800392a:	4770      	bx	lr
 800392c:	f803 1b01 	strb.w	r1, [r3], #1
 8003930:	e7f9      	b.n	8003926 <memset+0x4>
	...

08003934 <_init>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr

08003940 <_fini>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr
